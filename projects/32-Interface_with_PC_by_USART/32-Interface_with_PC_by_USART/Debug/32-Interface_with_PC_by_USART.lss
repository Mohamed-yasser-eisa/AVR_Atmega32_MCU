
32-Interface_with_PC_by_USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000992  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000992  00000a26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080006e  0080006e  00000a34  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000a34  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001100  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00001188  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cbd  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000539  00000000  00000000  00001f45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000815  00000000  00000000  0000247e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000284  00000000  00000000  00002c94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000390  00000000  00000000  00002f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000935  00000000  00000000  000032a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e9       	ldi	r30, 0x92	; 146
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 36       	cpi	r26, 0x6F	; 111
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 c7 04 	jmp	0x98e	; 0x98e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
volatile uint8 row = 1;

int main(void)
{
	char button = NOTPRESSED;
	LCD_init();
  92:	0e 94 3e 04 	call	0x87c	; 0x87c <LCD_init>
	keypad_init();
  96:	0e 94 94 03 	call	0x728	; 0x728 <keypad_init>
	USART_init();
  9a:	0e 94 a3 04 	call	0x946	; 0x946 <USART_init>
	
	while(1)
	{
		button = keypad_check_press();
  9e:	0e 94 b4 03 	call	0x768	; 0x768 <keypad_check_press>
  a2:	c8 2f       	mov	r28, r24
		if (NOTPRESSED != button)
  a4:	8f 3f       	cpi	r24, 0xFF	; 255
  a6:	d9 f3       	breq	.-10     	; 0x9e <main+0xc>
		{
			LCD_send_character(button);
  a8:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_send_character>
			USART_send_char(button);
  ac:	8c 2f       	mov	r24, r28
  ae:	0e 94 af 04 	call	0x95e	; 0x95e <USART_send_char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	8f e7       	ldi	r24, 0x7F	; 127
  b4:	9a e1       	ldi	r25, 0x1A	; 26
  b6:	a6 e0       	ldi	r26, 0x06	; 6
  b8:	81 50       	subi	r24, 0x01	; 1
  ba:	90 40       	sbci	r25, 0x00	; 0
  bc:	a0 40       	sbci	r26, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x26>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x30>
  c2:	00 00       	nop
  c4:	ec cf       	rjmp	.-40     	; 0x9e <main+0xc>

000000c6 <__vector_13>:
	}
	
}

ISR(USART_RXC_vect)
{
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	2f 93       	push	r18
  d2:	3f 93       	push	r19
  d4:	4f 93       	push	r20
  d6:	5f 93       	push	r21
  d8:	6f 93       	push	r22
  da:	7f 93       	push	r23
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
  e0:	af 93       	push	r26
  e2:	bf 93       	push	r27
  e4:	ef 93       	push	r30
  e6:	ff 93       	push	r31
	if (5 == row)
  e8:	80 91 60 00 	lds	r24, 0x0060
  ec:	85 30       	cpi	r24, 0x05	; 5
  ee:	31 f4       	brne	.+12     	; 0xfc <__vector_13+0x36>
	{
		row = 1;
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	80 93 60 00 	sts	0x0060, r24
		LCD_clear_screen();
  f6:	0e 94 2a 04 	call	0x854	; 0x854 <LCD_clear_screen>
  fa:	05 c0       	rjmp	.+10     	; 0x106 <__vector_13+0x40>
	}
	else
	{
		LCD_move_cursor(row,1);
  fc:	80 91 60 00 	lds	r24, 0x0060
 100:	61 e0       	ldi	r22, 0x01	; 1
 102:	0e 94 81 04 	call	0x902	; 0x902 <LCD_move_cursor>
	}
	data = USART_receive_char();
 106:	0e 94 c3 04 	call	0x986	; 0x986 <USART_receive_char>
 10a:	80 93 6e 00 	sts	0x006E, r24
	while((char)'#' != (char)data)
 10e:	80 91 6e 00 	lds	r24, 0x006E
 112:	83 32       	cpi	r24, 0x23	; 35
 114:	61 f0       	breq	.+24     	; 0x12e <__vector_13+0x68>
	{
		LCD_send_character(data);
 116:	80 91 6e 00 	lds	r24, 0x006E
 11a:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_send_character>
		data = USART_receive_char();
 11e:	0e 94 c3 04 	call	0x986	; 0x986 <USART_receive_char>
 122:	80 93 6e 00 	sts	0x006E, r24
	else
	{
		LCD_move_cursor(row,1);
	}
	data = USART_receive_char();
	while((char)'#' != (char)data)
 126:	80 91 6e 00 	lds	r24, 0x006E
 12a:	83 32       	cpi	r24, 0x23	; 35
 12c:	a1 f7       	brne	.-24     	; 0x116 <__vector_13+0x50>
	{
		LCD_send_character(data);
		data = USART_receive_char();
	}
	++row;
 12e:	80 91 60 00 	lds	r24, 0x0060
 132:	8f 5f       	subi	r24, 0xFF	; 255
 134:	80 93 60 00 	sts	0x0060, r24
 138:	ff 91       	pop	r31
 13a:	ef 91       	pop	r30
 13c:	bf 91       	pop	r27
 13e:	af 91       	pop	r26
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	7f 91       	pop	r23
 146:	6f 91       	pop	r22
 148:	5f 91       	pop	r21
 14a:	4f 91       	pop	r20
 14c:	3f 91       	pop	r19
 14e:	2f 91       	pop	r18
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <GPIO_pin_direction>:
#include "Atmega_GPIO.h"

void GPIO_pin_direction(char PORT, uint8 BIT, uint8 DIR)
{
    switch(PORT)
 15a:	84 34       	cpi	r24, 0x44	; 68
 15c:	09 f4       	brne	.+2      	; 0x160 <GPIO_pin_direction+0x6>
 15e:	71 c0       	rjmp	.+226    	; 0x242 <GPIO_pin_direction+0xe8>
 160:	85 34       	cpi	r24, 0x45	; 69
 162:	48 f4       	brcc	.+18     	; 0x176 <GPIO_pin_direction+0x1c>
 164:	82 34       	cpi	r24, 0x42	; 66
 166:	99 f1       	breq	.+102    	; 0x1ce <GPIO_pin_direction+0x74>
 168:	83 34       	cpi	r24, 0x43	; 67
 16a:	08 f0       	brcs	.+2      	; 0x16e <GPIO_pin_direction+0x14>
 16c:	4d c0       	rjmp	.+154    	; 0x208 <GPIO_pin_direction+0xae>
 16e:	81 34       	cpi	r24, 0x41	; 65
 170:	09 f0       	breq	.+2      	; 0x174 <GPIO_pin_direction+0x1a>
 172:	83 c0       	rjmp	.+262    	; 0x27a <GPIO_pin_direction+0x120>
 174:	0f c0       	rjmp	.+30     	; 0x194 <GPIO_pin_direction+0x3a>
 176:	82 36       	cpi	r24, 0x62	; 98
 178:	51 f1       	breq	.+84     	; 0x1ce <GPIO_pin_direction+0x74>
 17a:	83 36       	cpi	r24, 0x63	; 99
 17c:	20 f4       	brcc	.+8      	; 0x186 <GPIO_pin_direction+0x2c>
 17e:	81 36       	cpi	r24, 0x61	; 97
 180:	09 f0       	breq	.+2      	; 0x184 <GPIO_pin_direction+0x2a>
 182:	7b c0       	rjmp	.+246    	; 0x27a <GPIO_pin_direction+0x120>
 184:	07 c0       	rjmp	.+14     	; 0x194 <GPIO_pin_direction+0x3a>
 186:	83 36       	cpi	r24, 0x63	; 99
 188:	09 f4       	brne	.+2      	; 0x18c <GPIO_pin_direction+0x32>
 18a:	3e c0       	rjmp	.+124    	; 0x208 <GPIO_pin_direction+0xae>
 18c:	84 36       	cpi	r24, 0x64	; 100
 18e:	09 f0       	breq	.+2      	; 0x192 <GPIO_pin_direction+0x38>
 190:	74 c0       	rjmp	.+232    	; 0x27a <GPIO_pin_direction+0x120>
 192:	57 c0       	rjmp	.+174    	; 0x242 <GPIO_pin_direction+0xe8>
    {
        case 'A':
        case 'a':
            if(1 == DIR)
 194:	41 30       	cpi	r20, 0x01	; 1
 196:	69 f4       	brne	.+26     	; 0x1b2 <GPIO_pin_direction+0x58>
            {
                SET_BIT(DDRA, BIT); //set direction of this pin in port A as output
 198:	2a b3       	in	r18, 0x1a	; 26
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	ac 01       	movw	r20, r24
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <GPIO_pin_direction+0x4c>
 1a2:	44 0f       	add	r20, r20
 1a4:	55 1f       	adc	r21, r21
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <GPIO_pin_direction+0x48>
 1aa:	ba 01       	movw	r22, r20
 1ac:	62 2b       	or	r22, r18
 1ae:	6a bb       	out	0x1a, r22	; 26
 1b0:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRA, BIT); //set direction of this pin in port A as input
 1b2:	2a b3       	in	r18, 0x1a	; 26
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	ac 01       	movw	r20, r24
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <GPIO_pin_direction+0x66>
 1bc:	44 0f       	add	r20, r20
 1be:	55 1f       	adc	r21, r21
 1c0:	6a 95       	dec	r22
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <GPIO_pin_direction+0x62>
 1c4:	ba 01       	movw	r22, r20
 1c6:	60 95       	com	r22
 1c8:	62 23       	and	r22, r18
 1ca:	6a bb       	out	0x1a, r22	; 26
 1cc:	08 95       	ret
            }
        break;
        case 'B':
        case 'b':
            if(1 == DIR)
 1ce:	41 30       	cpi	r20, 0x01	; 1
 1d0:	69 f4       	brne	.+26     	; 0x1ec <GPIO_pin_direction+0x92>
            {
                SET_BIT(DDRB, BIT); //set direction of this pin in port B as output
 1d2:	27 b3       	in	r18, 0x17	; 23
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	ac 01       	movw	r20, r24
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <GPIO_pin_direction+0x86>
 1dc:	44 0f       	add	r20, r20
 1de:	55 1f       	adc	r21, r21
 1e0:	6a 95       	dec	r22
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <GPIO_pin_direction+0x82>
 1e4:	ba 01       	movw	r22, r20
 1e6:	62 2b       	or	r22, r18
 1e8:	67 bb       	out	0x17, r22	; 23
 1ea:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRB, BIT); //set direction of this pin in port B as input
 1ec:	27 b3       	in	r18, 0x17	; 23
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	ac 01       	movw	r20, r24
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <GPIO_pin_direction+0xa0>
 1f6:	44 0f       	add	r20, r20
 1f8:	55 1f       	adc	r21, r21
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <GPIO_pin_direction+0x9c>
 1fe:	ba 01       	movw	r22, r20
 200:	60 95       	com	r22
 202:	62 23       	and	r22, r18
 204:	67 bb       	out	0x17, r22	; 23
 206:	08 95       	ret
            }
        break;
        case 'C':
        case 'c':
            if(1 == DIR)
 208:	41 30       	cpi	r20, 0x01	; 1
 20a:	69 f4       	brne	.+26     	; 0x226 <GPIO_pin_direction+0xcc>
            {
                SET_BIT(DDRC, BIT); //set direction of this pin in port B as output
 20c:	24 b3       	in	r18, 0x14	; 20
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	ac 01       	movw	r20, r24
 214:	02 c0       	rjmp	.+4      	; 0x21a <GPIO_pin_direction+0xc0>
 216:	44 0f       	add	r20, r20
 218:	55 1f       	adc	r21, r21
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <GPIO_pin_direction+0xbc>
 21e:	ba 01       	movw	r22, r20
 220:	62 2b       	or	r22, r18
 222:	64 bb       	out	0x14, r22	; 20
 224:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRC, BIT); //set direction of this pin in port B as input
 226:	24 b3       	in	r18, 0x14	; 20
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	ac 01       	movw	r20, r24
 22e:	02 c0       	rjmp	.+4      	; 0x234 <GPIO_pin_direction+0xda>
 230:	44 0f       	add	r20, r20
 232:	55 1f       	adc	r21, r21
 234:	6a 95       	dec	r22
 236:	e2 f7       	brpl	.-8      	; 0x230 <GPIO_pin_direction+0xd6>
 238:	ba 01       	movw	r22, r20
 23a:	60 95       	com	r22
 23c:	62 23       	and	r22, r18
 23e:	64 bb       	out	0x14, r22	; 20
 240:	08 95       	ret
            }
        break;
        case 'D':
        case 'd':
            if(1 == DIR)
 242:	41 30       	cpi	r20, 0x01	; 1
 244:	69 f4       	brne	.+26     	; 0x260 <GPIO_pin_direction+0x106>
            {
                SET_BIT(DDRD, BIT); //set direction of this pin in port C as output
 246:	21 b3       	in	r18, 0x11	; 17
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	ac 01       	movw	r20, r24
 24e:	02 c0       	rjmp	.+4      	; 0x254 <GPIO_pin_direction+0xfa>
 250:	44 0f       	add	r20, r20
 252:	55 1f       	adc	r21, r21
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <GPIO_pin_direction+0xf6>
 258:	ba 01       	movw	r22, r20
 25a:	62 2b       	or	r22, r18
 25c:	61 bb       	out	0x11, r22	; 17
 25e:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRD, BIT); //set direction of this pin in port C as input
 260:	21 b3       	in	r18, 0x11	; 17
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	ac 01       	movw	r20, r24
 268:	02 c0       	rjmp	.+4      	; 0x26e <GPIO_pin_direction+0x114>
 26a:	44 0f       	add	r20, r20
 26c:	55 1f       	adc	r21, r21
 26e:	6a 95       	dec	r22
 270:	e2 f7       	brpl	.-8      	; 0x26a <GPIO_pin_direction+0x110>
 272:	ba 01       	movw	r22, r20
 274:	60 95       	com	r22
 276:	62 23       	and	r22, r18
 278:	61 bb       	out	0x11, r22	; 17
 27a:	08 95       	ret

0000027c <GPIO_pin_write>:
} //end of  GPIO_pin_direction();


void GPIO_pin_write(char PORT, uint8 BIT, uint8 DATA)
{
    switch(PORT)
 27c:	84 34       	cpi	r24, 0x44	; 68
 27e:	09 f4       	brne	.+2      	; 0x282 <GPIO_pin_write+0x6>
 280:	71 c0       	rjmp	.+226    	; 0x364 <GPIO_pin_write+0xe8>
 282:	85 34       	cpi	r24, 0x45	; 69
 284:	48 f4       	brcc	.+18     	; 0x298 <GPIO_pin_write+0x1c>
 286:	82 34       	cpi	r24, 0x42	; 66
 288:	99 f1       	breq	.+102    	; 0x2f0 <GPIO_pin_write+0x74>
 28a:	83 34       	cpi	r24, 0x43	; 67
 28c:	08 f0       	brcs	.+2      	; 0x290 <GPIO_pin_write+0x14>
 28e:	4d c0       	rjmp	.+154    	; 0x32a <GPIO_pin_write+0xae>
 290:	81 34       	cpi	r24, 0x41	; 65
 292:	09 f0       	breq	.+2      	; 0x296 <GPIO_pin_write+0x1a>
 294:	83 c0       	rjmp	.+262    	; 0x39c <GPIO_pin_write+0x120>
 296:	0f c0       	rjmp	.+30     	; 0x2b6 <GPIO_pin_write+0x3a>
 298:	82 36       	cpi	r24, 0x62	; 98
 29a:	51 f1       	breq	.+84     	; 0x2f0 <GPIO_pin_write+0x74>
 29c:	83 36       	cpi	r24, 0x63	; 99
 29e:	20 f4       	brcc	.+8      	; 0x2a8 <GPIO_pin_write+0x2c>
 2a0:	81 36       	cpi	r24, 0x61	; 97
 2a2:	09 f0       	breq	.+2      	; 0x2a6 <GPIO_pin_write+0x2a>
 2a4:	7b c0       	rjmp	.+246    	; 0x39c <GPIO_pin_write+0x120>
 2a6:	07 c0       	rjmp	.+14     	; 0x2b6 <GPIO_pin_write+0x3a>
 2a8:	83 36       	cpi	r24, 0x63	; 99
 2aa:	09 f4       	brne	.+2      	; 0x2ae <GPIO_pin_write+0x32>
 2ac:	3e c0       	rjmp	.+124    	; 0x32a <GPIO_pin_write+0xae>
 2ae:	84 36       	cpi	r24, 0x64	; 100
 2b0:	09 f0       	breq	.+2      	; 0x2b4 <GPIO_pin_write+0x38>
 2b2:	74 c0       	rjmp	.+232    	; 0x39c <GPIO_pin_write+0x120>
 2b4:	57 c0       	rjmp	.+174    	; 0x364 <GPIO_pin_write+0xe8>
    {
        case 'A':
        case 'a':
            if(1 == DATA)
 2b6:	41 30       	cpi	r20, 0x01	; 1
 2b8:	69 f4       	brne	.+26     	; 0x2d4 <GPIO_pin_write+0x58>
            {
                SET_BIT(PORTA, BIT); //set output value of this pin in port A to 1
 2ba:	2b b3       	in	r18, 0x1b	; 27
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	ac 01       	movw	r20, r24
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <GPIO_pin_write+0x4c>
 2c4:	44 0f       	add	r20, r20
 2c6:	55 1f       	adc	r21, r21
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <GPIO_pin_write+0x48>
 2cc:	ba 01       	movw	r22, r20
 2ce:	62 2b       	or	r22, r18
 2d0:	6b bb       	out	0x1b, r22	; 27
 2d2:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTA, BIT); //set output value of this pin in port A to 0
 2d4:	2b b3       	in	r18, 0x1b	; 27
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	ac 01       	movw	r20, r24
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <GPIO_pin_write+0x66>
 2de:	44 0f       	add	r20, r20
 2e0:	55 1f       	adc	r21, r21
 2e2:	6a 95       	dec	r22
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <GPIO_pin_write+0x62>
 2e6:	ba 01       	movw	r22, r20
 2e8:	60 95       	com	r22
 2ea:	62 23       	and	r22, r18
 2ec:	6b bb       	out	0x1b, r22	; 27
 2ee:	08 95       	ret
            }
        break;
        case 'B':
        case 'b':
            if(1 == DATA)
 2f0:	41 30       	cpi	r20, 0x01	; 1
 2f2:	69 f4       	brne	.+26     	; 0x30e <GPIO_pin_write+0x92>
            {
                SET_BIT(PORTB, BIT); //set output value of this pin in port B to 1
 2f4:	28 b3       	in	r18, 0x18	; 24
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	ac 01       	movw	r20, r24
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <GPIO_pin_write+0x86>
 2fe:	44 0f       	add	r20, r20
 300:	55 1f       	adc	r21, r21
 302:	6a 95       	dec	r22
 304:	e2 f7       	brpl	.-8      	; 0x2fe <GPIO_pin_write+0x82>
 306:	ba 01       	movw	r22, r20
 308:	62 2b       	or	r22, r18
 30a:	68 bb       	out	0x18, r22	; 24
 30c:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTB, BIT); //set output value of this pin in port B to 0
 30e:	28 b3       	in	r18, 0x18	; 24
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	ac 01       	movw	r20, r24
 316:	02 c0       	rjmp	.+4      	; 0x31c <GPIO_pin_write+0xa0>
 318:	44 0f       	add	r20, r20
 31a:	55 1f       	adc	r21, r21
 31c:	6a 95       	dec	r22
 31e:	e2 f7       	brpl	.-8      	; 0x318 <GPIO_pin_write+0x9c>
 320:	ba 01       	movw	r22, r20
 322:	60 95       	com	r22
 324:	62 23       	and	r22, r18
 326:	68 bb       	out	0x18, r22	; 24
 328:	08 95       	ret
            }
        break;
        case 'C':
        case 'c':
            if(1 == DATA)
 32a:	41 30       	cpi	r20, 0x01	; 1
 32c:	69 f4       	brne	.+26     	; 0x348 <GPIO_pin_write+0xcc>
            {
                SET_BIT(PORTC, BIT); //set output value of this pin in port C to 1
 32e:	25 b3       	in	r18, 0x15	; 21
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	ac 01       	movw	r20, r24
 336:	02 c0       	rjmp	.+4      	; 0x33c <GPIO_pin_write+0xc0>
 338:	44 0f       	add	r20, r20
 33a:	55 1f       	adc	r21, r21
 33c:	6a 95       	dec	r22
 33e:	e2 f7       	brpl	.-8      	; 0x338 <GPIO_pin_write+0xbc>
 340:	ba 01       	movw	r22, r20
 342:	62 2b       	or	r22, r18
 344:	65 bb       	out	0x15, r22	; 21
 346:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTC, BIT); //set output value of this pin in port C to 0
 348:	25 b3       	in	r18, 0x15	; 21
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	ac 01       	movw	r20, r24
 350:	02 c0       	rjmp	.+4      	; 0x356 <GPIO_pin_write+0xda>
 352:	44 0f       	add	r20, r20
 354:	55 1f       	adc	r21, r21
 356:	6a 95       	dec	r22
 358:	e2 f7       	brpl	.-8      	; 0x352 <GPIO_pin_write+0xd6>
 35a:	ba 01       	movw	r22, r20
 35c:	60 95       	com	r22
 35e:	62 23       	and	r22, r18
 360:	65 bb       	out	0x15, r22	; 21
 362:	08 95       	ret
            }
        break;
        case 'D':
        case 'd':
            if(1 == DATA)
 364:	41 30       	cpi	r20, 0x01	; 1
 366:	69 f4       	brne	.+26     	; 0x382 <GPIO_pin_write+0x106>
            {
                SET_BIT(PORTD, BIT); //set output value of this pin in port C to 1
 368:	22 b3       	in	r18, 0x12	; 18
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	ac 01       	movw	r20, r24
 370:	02 c0       	rjmp	.+4      	; 0x376 <GPIO_pin_write+0xfa>
 372:	44 0f       	add	r20, r20
 374:	55 1f       	adc	r21, r21
 376:	6a 95       	dec	r22
 378:	e2 f7       	brpl	.-8      	; 0x372 <GPIO_pin_write+0xf6>
 37a:	ba 01       	movw	r22, r20
 37c:	62 2b       	or	r22, r18
 37e:	62 bb       	out	0x12, r22	; 18
 380:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTD, BIT); //set output value of this pin in port C to 0
 382:	22 b3       	in	r18, 0x12	; 18
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	ac 01       	movw	r20, r24
 38a:	02 c0       	rjmp	.+4      	; 0x390 <GPIO_pin_write+0x114>
 38c:	44 0f       	add	r20, r20
 38e:	55 1f       	adc	r21, r21
 390:	6a 95       	dec	r22
 392:	e2 f7       	brpl	.-8      	; 0x38c <GPIO_pin_write+0x110>
 394:	ba 01       	movw	r22, r20
 396:	60 95       	com	r22
 398:	62 23       	and	r22, r18
 39a:	62 bb       	out	0x12, r22	; 18
 39c:	08 95       	ret

0000039e <GPIO_pin_read>:


uint8 GPIO_pin_read(char PORT, uint8 BIT)
{
    uint8 read_value = 0;
    switch(PORT)
 39e:	84 34       	cpi	r24, 0x44	; 68
 3a0:	99 f1       	breq	.+102    	; 0x408 <GPIO_pin_read+0x6a>
 3a2:	85 34       	cpi	r24, 0x45	; 69
 3a4:	38 f4       	brcc	.+14     	; 0x3b4 <GPIO_pin_read+0x16>
 3a6:	82 34       	cpi	r24, 0x42	; 66
 3a8:	d9 f0       	breq	.+54     	; 0x3e0 <GPIO_pin_read+0x42>
 3aa:	83 34       	cpi	r24, 0x43	; 67
 3ac:	18 f5       	brcc	.+70     	; 0x3f4 <GPIO_pin_read+0x56>
 3ae:	81 34       	cpi	r24, 0x41	; 65
 3b0:	a9 f5       	brne	.+106    	; 0x41c <GPIO_pin_read+0x7e>
 3b2:	0c c0       	rjmp	.+24     	; 0x3cc <GPIO_pin_read+0x2e>
 3b4:	82 36       	cpi	r24, 0x62	; 98
 3b6:	a1 f0       	breq	.+40     	; 0x3e0 <GPIO_pin_read+0x42>
 3b8:	83 36       	cpi	r24, 0x63	; 99
 3ba:	18 f4       	brcc	.+6      	; 0x3c2 <GPIO_pin_read+0x24>
 3bc:	81 36       	cpi	r24, 0x61	; 97
 3be:	71 f5       	brne	.+92     	; 0x41c <GPIO_pin_read+0x7e>
 3c0:	05 c0       	rjmp	.+10     	; 0x3cc <GPIO_pin_read+0x2e>
 3c2:	83 36       	cpi	r24, 0x63	; 99
 3c4:	b9 f0       	breq	.+46     	; 0x3f4 <GPIO_pin_read+0x56>
 3c6:	84 36       	cpi	r24, 0x64	; 100
 3c8:	49 f5       	brne	.+82     	; 0x41c <GPIO_pin_read+0x7e>
 3ca:	1e c0       	rjmp	.+60     	; 0x408 <GPIO_pin_read+0x6a>
    {
        case 'A':
        case 'a':
            read_value = READ_BIT(PINA, BIT); //read value of given pin in port A
 3cc:	29 b3       	in	r18, 0x19	; 25
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	c9 01       	movw	r24, r18
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <GPIO_pin_read+0x3a>
 3d4:	95 95       	asr	r25
 3d6:	87 95       	ror	r24
 3d8:	6a 95       	dec	r22
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <GPIO_pin_read+0x36>
 3dc:	81 70       	andi	r24, 0x01	; 1
        break;
 3de:	08 95       	ret
        case 'B':
        case 'b':
            read_value = READ_BIT(PINB, BIT); //read value of given pin in port B
 3e0:	26 b3       	in	r18, 0x16	; 22
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	c9 01       	movw	r24, r18
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <GPIO_pin_read+0x4e>
 3e8:	95 95       	asr	r25
 3ea:	87 95       	ror	r24
 3ec:	6a 95       	dec	r22
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <GPIO_pin_read+0x4a>
 3f0:	81 70       	andi	r24, 0x01	; 1
        break;
 3f2:	08 95       	ret
        case 'C':
        case 'c':
            read_value = READ_BIT(PINC, BIT); //read value of given pin in port C
 3f4:	23 b3       	in	r18, 0x13	; 19
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	c9 01       	movw	r24, r18
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <GPIO_pin_read+0x62>
 3fc:	95 95       	asr	r25
 3fe:	87 95       	ror	r24
 400:	6a 95       	dec	r22
 402:	e2 f7       	brpl	.-8      	; 0x3fc <GPIO_pin_read+0x5e>
 404:	81 70       	andi	r24, 0x01	; 1
        break;
 406:	08 95       	ret
        case 'D':
        case 'd':
            read_value = READ_BIT(PIND, BIT); //read value of given pin in port D
 408:	20 b3       	in	r18, 0x10	; 16
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	c9 01       	movw	r24, r18
 40e:	02 c0       	rjmp	.+4      	; 0x414 <GPIO_pin_read+0x76>
 410:	95 95       	asr	r25
 412:	87 95       	ror	r24
 414:	6a 95       	dec	r22
 416:	e2 f7       	brpl	.-8      	; 0x410 <GPIO_pin_read+0x72>
 418:	81 70       	andi	r24, 0x01	; 1
        break;
 41a:	08 95       	ret
} // end of GPIO_pin_write();


uint8 GPIO_pin_read(char PORT, uint8 BIT)
{
    uint8 read_value = 0;
 41c:	80 e0       	ldi	r24, 0x00	; 0
        break;
        default:
        break;
    } //end of switch(PORT);
    return read_value;
} // end of GPIO_pin_read();
 41e:	08 95       	ret

00000420 <GPIO_pin_toggle>:


void GPIO_pin_toggle(char PORT, uint8 BIT)
{
    switch(PORT)
 420:	84 34       	cpi	r24, 0x44	; 68
 422:	09 f4       	brne	.+2      	; 0x426 <GPIO_pin_toggle+0x6>
 424:	3d c0       	rjmp	.+122    	; 0x4a0 <GPIO_pin_toggle+0x80>
 426:	85 34       	cpi	r24, 0x45	; 69
 428:	40 f4       	brcc	.+16     	; 0x43a <GPIO_pin_toggle+0x1a>
 42a:	82 34       	cpi	r24, 0x42	; 66
 42c:	f9 f0       	breq	.+62     	; 0x46c <GPIO_pin_toggle+0x4c>
 42e:	83 34       	cpi	r24, 0x43	; 67
 430:	50 f5       	brcc	.+84     	; 0x486 <GPIO_pin_toggle+0x66>
 432:	81 34       	cpi	r24, 0x41	; 65
 434:	09 f0       	breq	.+2      	; 0x438 <GPIO_pin_toggle+0x18>
 436:	40 c0       	rjmp	.+128    	; 0x4b8 <GPIO_pin_toggle+0x98>
 438:	0c c0       	rjmp	.+24     	; 0x452 <GPIO_pin_toggle+0x32>
 43a:	82 36       	cpi	r24, 0x62	; 98
 43c:	b9 f0       	breq	.+46     	; 0x46c <GPIO_pin_toggle+0x4c>
 43e:	83 36       	cpi	r24, 0x63	; 99
 440:	18 f4       	brcc	.+6      	; 0x448 <GPIO_pin_toggle+0x28>
 442:	81 36       	cpi	r24, 0x61	; 97
 444:	c9 f5       	brne	.+114    	; 0x4b8 <GPIO_pin_toggle+0x98>
 446:	05 c0       	rjmp	.+10     	; 0x452 <GPIO_pin_toggle+0x32>
 448:	83 36       	cpi	r24, 0x63	; 99
 44a:	e9 f0       	breq	.+58     	; 0x486 <GPIO_pin_toggle+0x66>
 44c:	84 36       	cpi	r24, 0x64	; 100
 44e:	a1 f5       	brne	.+104    	; 0x4b8 <GPIO_pin_toggle+0x98>
 450:	27 c0       	rjmp	.+78     	; 0x4a0 <GPIO_pin_toggle+0x80>
    {
        case 'A':
        case 'a':
            TOG_BIT(PORTA, BIT); //toggle value of given pin in port A
 452:	2b b3       	in	r18, 0x1b	; 27
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	ac 01       	movw	r20, r24
 45a:	02 c0       	rjmp	.+4      	; 0x460 <GPIO_pin_toggle+0x40>
 45c:	44 0f       	add	r20, r20
 45e:	55 1f       	adc	r21, r21
 460:	6a 95       	dec	r22
 462:	e2 f7       	brpl	.-8      	; 0x45c <GPIO_pin_toggle+0x3c>
 464:	ba 01       	movw	r22, r20
 466:	62 27       	eor	r22, r18
 468:	6b bb       	out	0x1b, r22	; 27
        break;
 46a:	08 95       	ret
        case 'B':
        case 'b':
            TOG_BIT(PORTB, BIT); //toggle value of given pin in port B
 46c:	28 b3       	in	r18, 0x18	; 24
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	ac 01       	movw	r20, r24
 474:	02 c0       	rjmp	.+4      	; 0x47a <GPIO_pin_toggle+0x5a>
 476:	44 0f       	add	r20, r20
 478:	55 1f       	adc	r21, r21
 47a:	6a 95       	dec	r22
 47c:	e2 f7       	brpl	.-8      	; 0x476 <GPIO_pin_toggle+0x56>
 47e:	ba 01       	movw	r22, r20
 480:	62 27       	eor	r22, r18
 482:	68 bb       	out	0x18, r22	; 24
        break;
 484:	08 95       	ret
        case 'C':
        case 'c':
            TOG_BIT(PORTC, BIT); //toggle value of given pin in port C
 486:	25 b3       	in	r18, 0x15	; 21
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	ac 01       	movw	r20, r24
 48e:	02 c0       	rjmp	.+4      	; 0x494 <GPIO_pin_toggle+0x74>
 490:	44 0f       	add	r20, r20
 492:	55 1f       	adc	r21, r21
 494:	6a 95       	dec	r22
 496:	e2 f7       	brpl	.-8      	; 0x490 <GPIO_pin_toggle+0x70>
 498:	ba 01       	movw	r22, r20
 49a:	62 27       	eor	r22, r18
 49c:	65 bb       	out	0x15, r22	; 21
        break;
 49e:	08 95       	ret
        case 'D':
        case 'd':
            TOG_BIT(PORTD, BIT); //toggle value of given pin in port D
 4a0:	22 b3       	in	r18, 0x12	; 18
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	ac 01       	movw	r20, r24
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <GPIO_pin_toggle+0x8e>
 4aa:	44 0f       	add	r20, r20
 4ac:	55 1f       	adc	r21, r21
 4ae:	6a 95       	dec	r22
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <GPIO_pin_toggle+0x8a>
 4b2:	ba 01       	movw	r22, r20
 4b4:	62 27       	eor	r22, r18
 4b6:	62 bb       	out	0x12, r22	; 18
 4b8:	08 95       	ret

000004ba <GPIO_port_direction>:
} // end of GPIO_pin_toggle();


void GPIO_port_direction(char PORT, uint8 DIR)
{
    switch(PORT)
 4ba:	84 34       	cpi	r24, 0x44	; 68
 4bc:	d9 f0       	breq	.+54     	; 0x4f4 <GPIO_port_direction+0x3a>
 4be:	85 34       	cpi	r24, 0x45	; 69
 4c0:	38 f4       	brcc	.+14     	; 0x4d0 <GPIO_port_direction+0x16>
 4c2:	82 34       	cpi	r24, 0x42	; 66
 4c4:	99 f0       	breq	.+38     	; 0x4ec <GPIO_port_direction+0x32>
 4c6:	83 34       	cpi	r24, 0x43	; 67
 4c8:	98 f4       	brcc	.+38     	; 0x4f0 <GPIO_port_direction+0x36>
 4ca:	81 34       	cpi	r24, 0x41	; 65
 4cc:	a1 f4       	brne	.+40     	; 0x4f6 <GPIO_port_direction+0x3c>
 4ce:	0c c0       	rjmp	.+24     	; 0x4e8 <GPIO_port_direction+0x2e>
 4d0:	82 36       	cpi	r24, 0x62	; 98
 4d2:	61 f0       	breq	.+24     	; 0x4ec <GPIO_port_direction+0x32>
 4d4:	83 36       	cpi	r24, 0x63	; 99
 4d6:	18 f4       	brcc	.+6      	; 0x4de <GPIO_port_direction+0x24>
 4d8:	81 36       	cpi	r24, 0x61	; 97
 4da:	69 f4       	brne	.+26     	; 0x4f6 <GPIO_port_direction+0x3c>
 4dc:	05 c0       	rjmp	.+10     	; 0x4e8 <GPIO_port_direction+0x2e>
 4de:	83 36       	cpi	r24, 0x63	; 99
 4e0:	39 f0       	breq	.+14     	; 0x4f0 <GPIO_port_direction+0x36>
 4e2:	84 36       	cpi	r24, 0x64	; 100
 4e4:	41 f4       	brne	.+16     	; 0x4f6 <GPIO_port_direction+0x3c>
 4e6:	06 c0       	rjmp	.+12     	; 0x4f4 <GPIO_port_direction+0x3a>
    {
        case 'A':
        case 'a':
            DDRA = DIR; // set direction of port A to the given DIR
 4e8:	6a bb       	out	0x1a, r22	; 26
        break;
 4ea:	08 95       	ret
        case 'B':
        case 'b':
            DDRB = DIR; // set direction of port B to the given DIR
 4ec:	67 bb       	out	0x17, r22	; 23
        break;
 4ee:	08 95       	ret
        case 'C':
        case 'c':
            DDRC = DIR; // set direction of port C to the given DIR
 4f0:	64 bb       	out	0x14, r22	; 20
        break;
 4f2:	08 95       	ret
        case 'D':
        case 'd':
            DDRD = DIR; // set direction of port D to the given DIR
 4f4:	61 bb       	out	0x11, r22	; 17
 4f6:	08 95       	ret

000004f8 <GPIO_port_write>:
} // end of GPIO_port_direction();


void GPIO_port_write(char PORT, uint8 DATA)
{
    switch(PORT)
 4f8:	84 34       	cpi	r24, 0x44	; 68
 4fa:	d9 f0       	breq	.+54     	; 0x532 <GPIO_port_write+0x3a>
 4fc:	85 34       	cpi	r24, 0x45	; 69
 4fe:	38 f4       	brcc	.+14     	; 0x50e <GPIO_port_write+0x16>
 500:	82 34       	cpi	r24, 0x42	; 66
 502:	99 f0       	breq	.+38     	; 0x52a <GPIO_port_write+0x32>
 504:	83 34       	cpi	r24, 0x43	; 67
 506:	98 f4       	brcc	.+38     	; 0x52e <GPIO_port_write+0x36>
 508:	81 34       	cpi	r24, 0x41	; 65
 50a:	a1 f4       	brne	.+40     	; 0x534 <GPIO_port_write+0x3c>
 50c:	0c c0       	rjmp	.+24     	; 0x526 <GPIO_port_write+0x2e>
 50e:	82 36       	cpi	r24, 0x62	; 98
 510:	61 f0       	breq	.+24     	; 0x52a <GPIO_port_write+0x32>
 512:	83 36       	cpi	r24, 0x63	; 99
 514:	18 f4       	brcc	.+6      	; 0x51c <GPIO_port_write+0x24>
 516:	81 36       	cpi	r24, 0x61	; 97
 518:	69 f4       	brne	.+26     	; 0x534 <GPIO_port_write+0x3c>
 51a:	05 c0       	rjmp	.+10     	; 0x526 <GPIO_port_write+0x2e>
 51c:	83 36       	cpi	r24, 0x63	; 99
 51e:	39 f0       	breq	.+14     	; 0x52e <GPIO_port_write+0x36>
 520:	84 36       	cpi	r24, 0x64	; 100
 522:	41 f4       	brne	.+16     	; 0x534 <GPIO_port_write+0x3c>
 524:	06 c0       	rjmp	.+12     	; 0x532 <GPIO_port_write+0x3a>
    {
        case 'A':
        case 'a':
            PORTA = DATA; // write these data on port A
 526:	6b bb       	out	0x1b, r22	; 27
        break;
 528:	08 95       	ret
        case 'B':
        case 'b':
            PORTB = DATA; // write these data on port B
 52a:	68 bb       	out	0x18, r22	; 24
        break;
 52c:	08 95       	ret
        case 'C':
        case 'c':
            PORTC = DATA; // write these data on port C
 52e:	65 bb       	out	0x15, r22	; 21
        break;
 530:	08 95       	ret
        case 'D':
        case 'd':
            PORTD = DATA; // write these data on port D
 532:	62 bb       	out	0x12, r22	; 18
 534:	08 95       	ret

00000536 <GPIO_port_read>:


uint8 GPIO_port_read(char PORT)
{
    uint8 read_port = 0;
    switch(PORT)
 536:	84 34       	cpi	r24, 0x44	; 68
 538:	d9 f0       	breq	.+54     	; 0x570 <GPIO_port_read+0x3a>
 53a:	85 34       	cpi	r24, 0x45	; 69
 53c:	38 f4       	brcc	.+14     	; 0x54c <GPIO_port_read+0x16>
 53e:	82 34       	cpi	r24, 0x42	; 66
 540:	99 f0       	breq	.+38     	; 0x568 <GPIO_port_read+0x32>
 542:	83 34       	cpi	r24, 0x43	; 67
 544:	98 f4       	brcc	.+38     	; 0x56c <GPIO_port_read+0x36>
 546:	81 34       	cpi	r24, 0x41	; 65
 548:	a9 f4       	brne	.+42     	; 0x574 <GPIO_port_read+0x3e>
 54a:	0c c0       	rjmp	.+24     	; 0x564 <GPIO_port_read+0x2e>
 54c:	82 36       	cpi	r24, 0x62	; 98
 54e:	61 f0       	breq	.+24     	; 0x568 <GPIO_port_read+0x32>
 550:	83 36       	cpi	r24, 0x63	; 99
 552:	18 f4       	brcc	.+6      	; 0x55a <GPIO_port_read+0x24>
 554:	81 36       	cpi	r24, 0x61	; 97
 556:	71 f4       	brne	.+28     	; 0x574 <GPIO_port_read+0x3e>
 558:	05 c0       	rjmp	.+10     	; 0x564 <GPIO_port_read+0x2e>
 55a:	83 36       	cpi	r24, 0x63	; 99
 55c:	39 f0       	breq	.+14     	; 0x56c <GPIO_port_read+0x36>
 55e:	84 36       	cpi	r24, 0x64	; 100
 560:	49 f4       	brne	.+18     	; 0x574 <GPIO_port_read+0x3e>
 562:	06 c0       	rjmp	.+12     	; 0x570 <GPIO_port_read+0x3a>
    {
        case 'A':
        case 'a':
            read_port = PINA; // read data from port A
 564:	89 b3       	in	r24, 0x19	; 25
        break;
 566:	08 95       	ret
        case 'B':
        case 'b':
            read_port = PINB; // read data from port B
 568:	86 b3       	in	r24, 0x16	; 22
        break;
 56a:	08 95       	ret
        case 'C':
        case 'c':
            read_port = PINC; // read data from port C
 56c:	83 b3       	in	r24, 0x13	; 19
        break;
 56e:	08 95       	ret
        case 'D':
        case 'd':
            read_port = PIND; // read data from port D
 570:	80 b3       	in	r24, 0x10	; 16
        break;
 572:	08 95       	ret
} // end of GPIO_port_write();


uint8 GPIO_port_read(char PORT)
{
    uint8 read_port = 0;
 574:	80 e0       	ldi	r24, 0x00	; 0
        break;
        default:
        break;
    } // end of switch(PORT);
    return read_port;
} // end of GPIO_port_read();
 576:	08 95       	ret

00000578 <GPIO_pin_pull_up>:


void GPIO_pin_pull_up(char port_name, uint8 pin_number)
{
    switch(port_name)
 578:	84 34       	cpi	r24, 0x44	; 68
 57a:	09 f4       	brne	.+2      	; 0x57e <GPIO_pin_pull_up+0x6>
 57c:	57 c0       	rjmp	.+174    	; 0x62c <GPIO_pin_pull_up+0xb4>
 57e:	85 34       	cpi	r24, 0x45	; 69
 580:	40 f4       	brcc	.+16     	; 0x592 <GPIO_pin_pull_up+0x1a>
 582:	82 34       	cpi	r24, 0x42	; 66
 584:	49 f1       	breq	.+82     	; 0x5d8 <GPIO_pin_pull_up+0x60>
 586:	83 34       	cpi	r24, 0x43	; 67
 588:	e0 f5       	brcc	.+120    	; 0x602 <GPIO_pin_pull_up+0x8a>
 58a:	81 34       	cpi	r24, 0x41	; 65
 58c:	09 f0       	breq	.+2      	; 0x590 <GPIO_pin_pull_up+0x18>
 58e:	62 c0       	rjmp	.+196    	; 0x654 <GPIO_pin_pull_up+0xdc>
 590:	0e c0       	rjmp	.+28     	; 0x5ae <GPIO_pin_pull_up+0x36>
 592:	82 36       	cpi	r24, 0x62	; 98
 594:	09 f1       	breq	.+66     	; 0x5d8 <GPIO_pin_pull_up+0x60>
 596:	83 36       	cpi	r24, 0x63	; 99
 598:	20 f4       	brcc	.+8      	; 0x5a2 <GPIO_pin_pull_up+0x2a>
 59a:	81 36       	cpi	r24, 0x61	; 97
 59c:	09 f0       	breq	.+2      	; 0x5a0 <GPIO_pin_pull_up+0x28>
 59e:	5a c0       	rjmp	.+180    	; 0x654 <GPIO_pin_pull_up+0xdc>
 5a0:	06 c0       	rjmp	.+12     	; 0x5ae <GPIO_pin_pull_up+0x36>
 5a2:	83 36       	cpi	r24, 0x63	; 99
 5a4:	71 f1       	breq	.+92     	; 0x602 <GPIO_pin_pull_up+0x8a>
 5a6:	84 36       	cpi	r24, 0x64	; 100
 5a8:	09 f0       	breq	.+2      	; 0x5ac <GPIO_pin_pull_up+0x34>
 5aa:	54 c0       	rjmp	.+168    	; 0x654 <GPIO_pin_pull_up+0xdc>
 5ac:	3f c0       	rjmp	.+126    	; 0x62c <GPIO_pin_pull_up+0xb4>
    {
        case 'A':
        case 'a':
            CLR_BIT(DDRA,pin_number); //set pin_number of port_name as input
 5ae:	2a b3       	in	r18, 0x1a	; 26
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	ac 01       	movw	r20, r24
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <GPIO_pin_pull_up+0x44>
 5b8:	44 0f       	add	r20, r20
 5ba:	55 1f       	adc	r21, r21
 5bc:	6a 95       	dec	r22
 5be:	e2 f7       	brpl	.-8      	; 0x5b8 <GPIO_pin_pull_up+0x40>
 5c0:	ba 01       	movw	r22, r20
 5c2:	84 2f       	mov	r24, r20
 5c4:	80 95       	com	r24
 5c6:	82 23       	and	r24, r18
 5c8:	8a bb       	out	0x1a, r24	; 26
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 5ca:	80 b7       	in	r24, 0x30	; 48
 5cc:	8b 7f       	andi	r24, 0xFB	; 251
 5ce:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTA,pin_number); //set pin_number of port_name as high value
 5d0:	8b b3       	in	r24, 0x1b	; 27
 5d2:	68 2b       	or	r22, r24
 5d4:	6b bb       	out	0x1b, r22	; 27
        break;
 5d6:	08 95       	ret
        case 'B':
        case 'b':
            CLR_BIT(DDRB,pin_number); //set pin_number of port_name as input
 5d8:	27 b3       	in	r18, 0x17	; 23
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	ac 01       	movw	r20, r24
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <GPIO_pin_pull_up+0x6e>
 5e2:	44 0f       	add	r20, r20
 5e4:	55 1f       	adc	r21, r21
 5e6:	6a 95       	dec	r22
 5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <GPIO_pin_pull_up+0x6a>
 5ea:	ba 01       	movw	r22, r20
 5ec:	84 2f       	mov	r24, r20
 5ee:	80 95       	com	r24
 5f0:	82 23       	and	r24, r18
 5f2:	87 bb       	out	0x17, r24	; 23
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 5f4:	80 b7       	in	r24, 0x30	; 48
 5f6:	8b 7f       	andi	r24, 0xFB	; 251
 5f8:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTB,pin_number); //set pin_number of port_name as high value
 5fa:	88 b3       	in	r24, 0x18	; 24
 5fc:	68 2b       	or	r22, r24
 5fe:	68 bb       	out	0x18, r22	; 24
        break;
 600:	08 95       	ret
        case 'C':
        case 'c':
            CLR_BIT(DDRC,pin_number); //set pin_number of port_name as input
 602:	24 b3       	in	r18, 0x14	; 20
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	ac 01       	movw	r20, r24
 60a:	02 c0       	rjmp	.+4      	; 0x610 <GPIO_pin_pull_up+0x98>
 60c:	44 0f       	add	r20, r20
 60e:	55 1f       	adc	r21, r21
 610:	6a 95       	dec	r22
 612:	e2 f7       	brpl	.-8      	; 0x60c <GPIO_pin_pull_up+0x94>
 614:	ba 01       	movw	r22, r20
 616:	84 2f       	mov	r24, r20
 618:	80 95       	com	r24
 61a:	82 23       	and	r24, r18
 61c:	84 bb       	out	0x14, r24	; 20
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 61e:	80 b7       	in	r24, 0x30	; 48
 620:	8b 7f       	andi	r24, 0xFB	; 251
 622:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTC,pin_number); //set pin_number of port_name as high value
 624:	85 b3       	in	r24, 0x15	; 21
 626:	68 2b       	or	r22, r24
 628:	65 bb       	out	0x15, r22	; 21
        break;
 62a:	08 95       	ret
        case 'D':
        case 'd':
            CLR_BIT(DDRD,pin_number); //set pin_number of port_name as input
 62c:	21 b3       	in	r18, 0x11	; 17
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	ac 01       	movw	r20, r24
 634:	02 c0       	rjmp	.+4      	; 0x63a <GPIO_pin_pull_up+0xc2>
 636:	44 0f       	add	r20, r20
 638:	55 1f       	adc	r21, r21
 63a:	6a 95       	dec	r22
 63c:	e2 f7       	brpl	.-8      	; 0x636 <GPIO_pin_pull_up+0xbe>
 63e:	ba 01       	movw	r22, r20
 640:	84 2f       	mov	r24, r20
 642:	80 95       	com	r24
 644:	82 23       	and	r24, r18
 646:	81 bb       	out	0x11, r24	; 17
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 648:	80 b7       	in	r24, 0x30	; 48
 64a:	8b 7f       	andi	r24, 0xFB	; 251
 64c:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTD,pin_number); //set pin_number of port_name as high value
 64e:	82 b3       	in	r24, 0x12	; 18
 650:	68 2b       	or	r22, r24
 652:	62 bb       	out	0x12, r22	; 18
 654:	08 95       	ret

00000656 <GPIO_port_write_high_nibble>:



void GPIO_port_write_high_nibble(char port_name, uint8 high_nibble)
{
    high_nibble <<= 4; //clear low_nibble bits in number
 656:	62 95       	swap	r22
 658:	60 7f       	andi	r22, 0xF0	; 240
    switch(port_name)
 65a:	84 34       	cpi	r24, 0x44	; 68
 65c:	51 f1       	breq	.+84     	; 0x6b2 <GPIO_port_write_high_nibble+0x5c>
 65e:	85 34       	cpi	r24, 0x45	; 69
 660:	38 f4       	brcc	.+14     	; 0x670 <GPIO_port_write_high_nibble+0x1a>
 662:	82 34       	cpi	r24, 0x42	; 66
 664:	c1 f0       	breq	.+48     	; 0x696 <GPIO_port_write_high_nibble+0x40>
 666:	83 34       	cpi	r24, 0x43	; 67
 668:	e8 f4       	brcc	.+58     	; 0x6a4 <GPIO_port_write_high_nibble+0x4e>
 66a:	81 34       	cpi	r24, 0x41	; 65
 66c:	41 f5       	brne	.+80     	; 0x6be <GPIO_port_write_high_nibble+0x68>
 66e:	0c c0       	rjmp	.+24     	; 0x688 <GPIO_port_write_high_nibble+0x32>
 670:	82 36       	cpi	r24, 0x62	; 98
 672:	89 f0       	breq	.+34     	; 0x696 <GPIO_port_write_high_nibble+0x40>
 674:	83 36       	cpi	r24, 0x63	; 99
 676:	18 f4       	brcc	.+6      	; 0x67e <GPIO_port_write_high_nibble+0x28>
 678:	81 36       	cpi	r24, 0x61	; 97
 67a:	09 f5       	brne	.+66     	; 0x6be <GPIO_port_write_high_nibble+0x68>
 67c:	05 c0       	rjmp	.+10     	; 0x688 <GPIO_port_write_high_nibble+0x32>
 67e:	83 36       	cpi	r24, 0x63	; 99
 680:	89 f0       	breq	.+34     	; 0x6a4 <GPIO_port_write_high_nibble+0x4e>
 682:	84 36       	cpi	r24, 0x64	; 100
 684:	e1 f4       	brne	.+56     	; 0x6be <GPIO_port_write_high_nibble+0x68>
 686:	15 c0       	rjmp	.+42     	; 0x6b2 <GPIO_port_write_high_nibble+0x5c>
    {
        case 'A':
        case 'a':
            PORTA &= 0x0f;
 688:	8b b3       	in	r24, 0x1b	; 27
 68a:	8f 70       	andi	r24, 0x0F	; 15
 68c:	8b bb       	out	0x1b, r24	; 27
            PORTA |= high_nibble;
 68e:	8b b3       	in	r24, 0x1b	; 27
 690:	68 2b       	or	r22, r24
 692:	6b bb       	out	0x1b, r22	; 27
        break;
 694:	08 95       	ret
        case 'B':
        case 'b':
            PORTB &= 0x0f;
 696:	88 b3       	in	r24, 0x18	; 24
 698:	8f 70       	andi	r24, 0x0F	; 15
 69a:	88 bb       	out	0x18, r24	; 24
            PORTB |= high_nibble;
 69c:	88 b3       	in	r24, 0x18	; 24
 69e:	68 2b       	or	r22, r24
 6a0:	68 bb       	out	0x18, r22	; 24
        break;
 6a2:	08 95       	ret
        case 'C':
        case 'c':
            PORTC &= 0x0f;
 6a4:	85 b3       	in	r24, 0x15	; 21
 6a6:	8f 70       	andi	r24, 0x0F	; 15
 6a8:	85 bb       	out	0x15, r24	; 21
            PORTC |= high_nibble;
 6aa:	85 b3       	in	r24, 0x15	; 21
 6ac:	68 2b       	or	r22, r24
 6ae:	65 bb       	out	0x15, r22	; 21
        break;
 6b0:	08 95       	ret
        case 'D':
        case 'd':
            PORTD &= 0x0f;
 6b2:	82 b3       	in	r24, 0x12	; 18
 6b4:	8f 70       	andi	r24, 0x0F	; 15
 6b6:	82 bb       	out	0x12, r24	; 18
            PORTD |= high_nibble;
 6b8:	82 b3       	in	r24, 0x12	; 18
 6ba:	68 2b       	or	r22, r24
 6bc:	62 bb       	out	0x12, r22	; 18
 6be:	08 95       	ret

000006c0 <GPIO_port_write_low_nibble>:
    } // end of switch(port_name);
}

void GPIO_port_write_low_nibble(char port_name, uint8 low_nibble)
{
    low_nibble &= 0x0f; //clear high_nibble bits in number
 6c0:	6f 70       	andi	r22, 0x0F	; 15
    switch(port_name)
 6c2:	84 34       	cpi	r24, 0x44	; 68
 6c4:	51 f1       	breq	.+84     	; 0x71a <GPIO_port_write_low_nibble+0x5a>
 6c6:	85 34       	cpi	r24, 0x45	; 69
 6c8:	38 f4       	brcc	.+14     	; 0x6d8 <GPIO_port_write_low_nibble+0x18>
 6ca:	82 34       	cpi	r24, 0x42	; 66
 6cc:	c1 f0       	breq	.+48     	; 0x6fe <GPIO_port_write_low_nibble+0x3e>
 6ce:	83 34       	cpi	r24, 0x43	; 67
 6d0:	e8 f4       	brcc	.+58     	; 0x70c <GPIO_port_write_low_nibble+0x4c>
 6d2:	81 34       	cpi	r24, 0x41	; 65
 6d4:	41 f5       	brne	.+80     	; 0x726 <GPIO_port_write_low_nibble+0x66>
 6d6:	0c c0       	rjmp	.+24     	; 0x6f0 <GPIO_port_write_low_nibble+0x30>
 6d8:	82 36       	cpi	r24, 0x62	; 98
 6da:	89 f0       	breq	.+34     	; 0x6fe <GPIO_port_write_low_nibble+0x3e>
 6dc:	83 36       	cpi	r24, 0x63	; 99
 6de:	18 f4       	brcc	.+6      	; 0x6e6 <GPIO_port_write_low_nibble+0x26>
 6e0:	81 36       	cpi	r24, 0x61	; 97
 6e2:	09 f5       	brne	.+66     	; 0x726 <GPIO_port_write_low_nibble+0x66>
 6e4:	05 c0       	rjmp	.+10     	; 0x6f0 <GPIO_port_write_low_nibble+0x30>
 6e6:	83 36       	cpi	r24, 0x63	; 99
 6e8:	89 f0       	breq	.+34     	; 0x70c <GPIO_port_write_low_nibble+0x4c>
 6ea:	84 36       	cpi	r24, 0x64	; 100
 6ec:	e1 f4       	brne	.+56     	; 0x726 <GPIO_port_write_low_nibble+0x66>
 6ee:	15 c0       	rjmp	.+42     	; 0x71a <GPIO_port_write_low_nibble+0x5a>
    {
        case 'A':
        case 'a':
            PORTA &= 0xf0;
 6f0:	8b b3       	in	r24, 0x1b	; 27
 6f2:	80 7f       	andi	r24, 0xF0	; 240
 6f4:	8b bb       	out	0x1b, r24	; 27
            PORTA |= low_nibble;
 6f6:	8b b3       	in	r24, 0x1b	; 27
 6f8:	68 2b       	or	r22, r24
 6fa:	6b bb       	out	0x1b, r22	; 27
        break;
 6fc:	08 95       	ret
        case 'B':
        case 'b':
            PORTB &= 0xf0;
 6fe:	88 b3       	in	r24, 0x18	; 24
 700:	80 7f       	andi	r24, 0xF0	; 240
 702:	88 bb       	out	0x18, r24	; 24
            PORTB |= low_nibble;
 704:	88 b3       	in	r24, 0x18	; 24
 706:	68 2b       	or	r22, r24
 708:	68 bb       	out	0x18, r22	; 24
        break;
 70a:	08 95       	ret
        case 'C':
        case 'c':
            PORTC &= 0xf0;
 70c:	85 b3       	in	r24, 0x15	; 21
 70e:	80 7f       	andi	r24, 0xF0	; 240
 710:	85 bb       	out	0x15, r24	; 21
            PORTC |= low_nibble;
 712:	85 b3       	in	r24, 0x15	; 21
 714:	68 2b       	or	r22, r24
 716:	65 bb       	out	0x15, r22	; 21
        break;
 718:	08 95       	ret
        case 'D':
        case 'd':
            PORTD &= 0xf0;
 71a:	82 b3       	in	r24, 0x12	; 18
 71c:	80 7f       	andi	r24, 0xF0	; 240
 71e:	82 bb       	out	0x12, r24	; 18
            PORTD |= low_nibble;
 720:	82 b3       	in	r24, 0x12	; 18
 722:	68 2b       	or	r22, r24
 724:	62 bb       	out	0x12, r22	; 18
 726:	08 95       	ret

00000728 <keypad_init>:
#include "keypad.h"


void keypad_init(void)
{
	GPIO_pin_direction(KEYPAD_PORT,0,1);
 728:	83 e4       	ldi	r24, 0x43	; 67
 72a:	60 e0       	ldi	r22, 0x00	; 0
 72c:	41 e0       	ldi	r20, 0x01	; 1
 72e:	0e 94 ad 00 	call	0x15a	; 0x15a <GPIO_pin_direction>
	GPIO_pin_direction(KEYPAD_PORT,1,1);
 732:	83 e4       	ldi	r24, 0x43	; 67
 734:	61 e0       	ldi	r22, 0x01	; 1
 736:	41 e0       	ldi	r20, 0x01	; 1
 738:	0e 94 ad 00 	call	0x15a	; 0x15a <GPIO_pin_direction>
	GPIO_pin_direction(KEYPAD_PORT,2,1);
 73c:	83 e4       	ldi	r24, 0x43	; 67
 73e:	62 e0       	ldi	r22, 0x02	; 2
 740:	41 e0       	ldi	r20, 0x01	; 1
 742:	0e 94 ad 00 	call	0x15a	; 0x15a <GPIO_pin_direction>
	
	GPIO_pin_pull_up(KEYPAD_PORT,3);
 746:	83 e4       	ldi	r24, 0x43	; 67
 748:	63 e0       	ldi	r22, 0x03	; 3
 74a:	0e 94 bc 02 	call	0x578	; 0x578 <GPIO_pin_pull_up>
	GPIO_pin_pull_up(KEYPAD_PORT,4);
 74e:	83 e4       	ldi	r24, 0x43	; 67
 750:	64 e0       	ldi	r22, 0x04	; 4
 752:	0e 94 bc 02 	call	0x578	; 0x578 <GPIO_pin_pull_up>
	GPIO_pin_pull_up(KEYPAD_PORT,5);
 756:	83 e4       	ldi	r24, 0x43	; 67
 758:	65 e0       	ldi	r22, 0x05	; 5
 75a:	0e 94 bc 02 	call	0x578	; 0x578 <GPIO_pin_pull_up>
	GPIO_pin_pull_up(KEYPAD_PORT,6);
 75e:	83 e4       	ldi	r24, 0x43	; 67
 760:	66 e0       	ldi	r22, 0x06	; 6
 762:	0e 94 bc 02 	call	0x578	; 0x578 <GPIO_pin_pull_up>
}
 766:	08 95       	ret

00000768 <keypad_check_press>:

char keypad_check_press(void)
{
 768:	0f 93       	push	r16
 76a:	1f 93       	push	r17
 76c:	cf 93       	push	r28
 76e:	df 93       	push	r29
 770:	cd b7       	in	r28, 0x3d	; 61
 772:	de b7       	in	r29, 0x3e	; 62
 774:	2c 97       	sbiw	r28, 0x0c	; 12
 776:	0f b6       	in	r0, 0x3f	; 63
 778:	f8 94       	cli
 77a:	de bf       	out	0x3e, r29	; 62
 77c:	0f be       	out	0x3f, r0	; 63
 77e:	cd bf       	out	0x3d, r28	; 61
	char button[4][3] = { {'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'} };
 780:	de 01       	movw	r26, r28
 782:	11 96       	adiw	r26, 0x01	; 1
 784:	e1 e6       	ldi	r30, 0x61	; 97
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	8c e0       	ldi	r24, 0x0C	; 12
 78a:	01 90       	ld	r0, Z+
 78c:	0d 92       	st	X+, r0
 78e:	81 50       	subi	r24, 0x01	; 1
 790:	e1 f7       	brne	.-8      	; 0x78a <keypad_check_press+0x22>
	uint8 row = 0, column = 0, pressed = 1;
	char val = NOTPRESSED;
	
	for (column=0; column<3; ++column)
 792:	10 e0       	ldi	r17, 0x00	; 0
	{
		GPIO_pin_write(KEYPAD_PORT,0,1);
 794:	83 e4       	ldi	r24, 0x43	; 67
 796:	60 e0       	ldi	r22, 0x00	; 0
 798:	41 e0       	ldi	r20, 0x01	; 1
 79a:	0e 94 3e 01 	call	0x27c	; 0x27c <GPIO_pin_write>
		GPIO_pin_write(KEYPAD_PORT,1,1);
 79e:	83 e4       	ldi	r24, 0x43	; 67
 7a0:	61 e0       	ldi	r22, 0x01	; 1
 7a2:	41 e0       	ldi	r20, 0x01	; 1
 7a4:	0e 94 3e 01 	call	0x27c	; 0x27c <GPIO_pin_write>
		GPIO_pin_write(KEYPAD_PORT,2,1);
 7a8:	83 e4       	ldi	r24, 0x43	; 67
 7aa:	62 e0       	ldi	r22, 0x02	; 2
 7ac:	41 e0       	ldi	r20, 0x01	; 1
 7ae:	0e 94 3e 01 	call	0x27c	; 0x27c <GPIO_pin_write>
		GPIO_pin_write(KEYPAD_PORT,column,0);
 7b2:	83 e4       	ldi	r24, 0x43	; 67
 7b4:	61 2f       	mov	r22, r17
 7b6:	40 e0       	ldi	r20, 0x00	; 0
 7b8:	0e 94 3e 01 	call	0x27c	; 0x27c <GPIO_pin_write>
		for (row=0; row<4; ++row)
 7bc:	00 e0       	ldi	r16, 0x00	; 0
		{
			pressed = GPIO_pin_read(KEYPAD_PORT,(row+3));
 7be:	60 2f       	mov	r22, r16
 7c0:	6d 5f       	subi	r22, 0xFD	; 253
 7c2:	83 e4       	ldi	r24, 0x43	; 67
 7c4:	0e 94 cf 01 	call	0x39e	; 0x39e <GPIO_pin_read>
			if (0 == pressed)
 7c8:	88 23       	and	r24, r24
 7ca:	69 f4       	brne	.+26     	; 0x7e6 <keypad_check_press+0x7e>
			{
				val = button[row][column];
 7cc:	80 2f       	mov	r24, r16
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	fc 01       	movw	r30, r24
 7d2:	ee 0f       	add	r30, r30
 7d4:	ff 1f       	adc	r31, r31
 7d6:	e8 0f       	add	r30, r24
 7d8:	f9 1f       	adc	r31, r25
 7da:	e1 0f       	add	r30, r17
 7dc:	f1 1d       	adc	r31, r1
 7de:	ec 0f       	add	r30, r28
 7e0:	fd 1f       	adc	r31, r29
 7e2:	81 81       	ldd	r24, Z+1	; 0x01
 7e4:	04 c0       	rjmp	.+8      	; 0x7ee <keypad_check_press+0x86>
	{
		GPIO_pin_write(KEYPAD_PORT,0,1);
		GPIO_pin_write(KEYPAD_PORT,1,1);
		GPIO_pin_write(KEYPAD_PORT,2,1);
		GPIO_pin_write(KEYPAD_PORT,column,0);
		for (row=0; row<4; ++row)
 7e6:	0f 5f       	subi	r16, 0xFF	; 255
 7e8:	04 30       	cpi	r16, 0x04	; 4
 7ea:	49 f7       	brne	.-46     	; 0x7be <keypad_check_press+0x56>
 7ec:	0b c0       	rjmp	.+22     	; 0x804 <keypad_check_press+0x9c>
		{
			break;
		}
	}
	return val;
 7ee:	2c 96       	adiw	r28, 0x0c	; 12
 7f0:	0f b6       	in	r0, 0x3f	; 63
 7f2:	f8 94       	cli
 7f4:	de bf       	out	0x3e, r29	; 62
 7f6:	0f be       	out	0x3f, r0	; 63
 7f8:	cd bf       	out	0x3d, r28	; 61
 7fa:	df 91       	pop	r29
 7fc:	cf 91       	pop	r28
 7fe:	1f 91       	pop	r17
 800:	0f 91       	pop	r16
 802:	08 95       	ret
{
	char button[4][3] = { {'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'} };
	uint8 row = 0, column = 0, pressed = 1;
	char val = NOTPRESSED;
	
	for (column=0; column<3; ++column)
 804:	1f 5f       	subi	r17, 0xFF	; 255
 806:	13 30       	cpi	r17, 0x03	; 3
 808:	29 f6       	brne	.-118    	; 0x794 <keypad_check_press+0x2c>
 80a:	8f ef       	ldi	r24, 0xFF	; 255
 80c:	f0 cf       	rjmp	.-32     	; 0x7ee <keypad_check_press+0x86>

0000080e <LCD_send_pulse>:

#include "LCD.h"

static void LCD_send_pulse(void)
{
	GPIO_pin_write(EN_PORT,EN,1);
 80e:	82 e4       	ldi	r24, 0x42	; 66
 810:	60 e0       	ldi	r22, 0x00	; 0
 812:	41 e0       	ldi	r20, 0x01	; 1
 814:	0e 94 3e 01 	call	0x27c	; 0x27c <GPIO_pin_write>
 818:	8f e9       	ldi	r24, 0x9F	; 159
 81a:	9f e0       	ldi	r25, 0x0F	; 15
 81c:	01 97       	sbiw	r24, 0x01	; 1
 81e:	f1 f7       	brne	.-4      	; 0x81c <LCD_send_pulse+0xe>
 820:	00 c0       	rjmp	.+0      	; 0x822 <LCD_send_pulse+0x14>
 822:	00 00       	nop
	_delay_ms(2);
	GPIO_pin_write(EN_PORT,EN,0);
 824:	82 e4       	ldi	r24, 0x42	; 66
 826:	60 e0       	ldi	r22, 0x00	; 0
 828:	40 e0       	ldi	r20, 0x00	; 0
 82a:	0e 94 3e 01 	call	0x27c	; 0x27c <GPIO_pin_write>
 82e:	8f ec       	ldi	r24, 0xCF	; 207
 830:	97 e0       	ldi	r25, 0x07	; 7
 832:	01 97       	sbiw	r24, 0x01	; 1
 834:	f1 f7       	brne	.-4      	; 0x832 <LCD_send_pulse+0x24>
 836:	00 c0       	rjmp	.+0      	; 0x838 <LCD_send_pulse+0x2a>
 838:	00 00       	nop
	_delay_ms(1);	
}
 83a:	08 95       	ret

0000083c <LCD_send_command>:


void LCD_send_command(uint8 command)
{
 83c:	68 2f       	mov	r22, r24
	GPIO_pin_write(RS_PORT,RS,0); //select command register
	LCD_send_pulse();
	
	#elif defined eight_bits_mode
	
	GPIO_port_write(LCD_PORT,command);
 83e:	81 e4       	ldi	r24, 0x41	; 65
 840:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <GPIO_port_write>
	GPIO_pin_write(RS_PORT,RS,0);
 844:	82 e4       	ldi	r24, 0x42	; 66
 846:	61 e0       	ldi	r22, 0x01	; 1
 848:	40 e0       	ldi	r20, 0x00	; 0
 84a:	0e 94 3e 01 	call	0x27c	; 0x27c <GPIO_pin_write>
	LCD_send_pulse();
 84e:	0e 94 07 04 	call	0x80e	; 0x80e <LCD_send_pulse>
	
	#endif
}
 852:	08 95       	ret

00000854 <LCD_clear_screen>:



void LCD_clear_screen(void)
{
	LCD_send_command(CLEAR_SCREEN);
 854:	81 e0       	ldi	r24, 0x01	; 1
 856:	0e 94 1e 04 	call	0x83c	; 0x83c <LCD_send_command>
 85a:	8f e9       	ldi	r24, 0x9F	; 159
 85c:	9f e0       	ldi	r25, 0x0F	; 15
 85e:	01 97       	sbiw	r24, 0x01	; 1
 860:	f1 f7       	brne	.-4      	; 0x85e <LCD_clear_screen+0xa>
 862:	00 c0       	rjmp	.+0      	; 0x864 <__stack+0x5>
 864:	00 00       	nop
	_delay_ms(2);
}
 866:	08 95       	ret

00000868 <LCD_return_home>:

void LCD_return_home(void)
{
	LCD_send_command(RETURN_HOME);
 868:	82 e0       	ldi	r24, 0x02	; 2
 86a:	0e 94 1e 04 	call	0x83c	; 0x83c <LCD_send_command>
 86e:	8f e9       	ldi	r24, 0x9F	; 159
 870:	9f e0       	ldi	r25, 0x0F	; 15
 872:	01 97       	sbiw	r24, 0x01	; 1
 874:	f1 f7       	brne	.-4      	; 0x872 <LCD_return_home+0xa>
 876:	00 c0       	rjmp	.+0      	; 0x878 <LCD_return_home+0x10>
 878:	00 00       	nop
	_delay_ms(2);
}
 87a:	08 95       	ret

0000087c <LCD_init>:
 87c:	8f ef       	ldi	r24, 0xFF	; 255
 87e:	99 ef       	ldi	r25, 0xF9	; 249
 880:	a0 e0       	ldi	r26, 0x00	; 0
 882:	81 50       	subi	r24, 0x01	; 1
 884:	90 40       	sbci	r25, 0x00	; 0
 886:	a0 40       	sbci	r26, 0x00	; 0
 888:	e1 f7       	brne	.-8      	; 0x882 <LCD_init+0x6>
 88a:	00 c0       	rjmp	.+0      	; 0x88c <LCD_init+0x10>
 88c:	00 00       	nop
	GPIO_pin_direction(RS_PORT,RS,1);//set RS pin to output pin
	//send command to inti LCD:
	LCD_send_command(FOUR_BITS);
	#elif defined eight_bits_mode
	//set connection pins:
	GPIO_port_direction(LCD_PORT,1);
 88e:	81 e4       	ldi	r24, 0x41	; 65
 890:	61 e0       	ldi	r22, 0x01	; 1
 892:	0e 94 5d 02 	call	0x4ba	; 0x4ba <GPIO_port_direction>
	GPIO_pin_direction(EN_PORT,EN,1);//set EN pin to output pin
 896:	82 e4       	ldi	r24, 0x42	; 66
 898:	60 e0       	ldi	r22, 0x00	; 0
 89a:	41 e0       	ldi	r20, 0x01	; 1
 89c:	0e 94 ad 00 	call	0x15a	; 0x15a <GPIO_pin_direction>
	GPIO_pin_direction(RS_PORT,RS,1);//set RS pin to output pin
 8a0:	82 e4       	ldi	r24, 0x42	; 66
 8a2:	61 e0       	ldi	r22, 0x01	; 1
 8a4:	41 e0       	ldi	r20, 0x01	; 1
 8a6:	0e 94 ad 00 	call	0x15a	; 0x15a <GPIO_pin_direction>
	//send command to init LCD:
	LCD_send_command(EIGHT_BITS);
 8aa:	88 e3       	ldi	r24, 0x38	; 56
 8ac:	0e 94 1e 04 	call	0x83c	; 0x83c <LCD_send_command>
	#endif
	LCD_return_home();
 8b0:	0e 94 34 04 	call	0x868	; 0x868 <LCD_return_home>
	LCD_send_command(DISPLAY_ON_CURSOR_OFF);
 8b4:	8c e0       	ldi	r24, 0x0C	; 12
 8b6:	0e 94 1e 04 	call	0x83c	; 0x83c <LCD_send_command>
	LCD_clear_screen();
 8ba:	0e 94 2a 04 	call	0x854	; 0x854 <LCD_clear_screen>
	LCD_send_command(ENGLISH_ENTRY);
 8be:	86 e0       	ldi	r24, 0x06	; 6
 8c0:	0e 94 1e 04 	call	0x83c	; 0x83c <LCD_send_command>
}
 8c4:	08 95       	ret

000008c6 <LCD_send_character>:
	LCD_send_command(RETURN_HOME);
	_delay_ms(2);
}

void LCD_send_character(char character)
{
 8c6:	cf 93       	push	r28
 8c8:	c8 2f       	mov	r28, r24
	GPIO_port_write_low_nibble(LCD_PORT,character);
	LCD_send_pulse();
	
	#elif defined eight_bits_mode
	
	GPIO_pin_write(RS_PORT,RS,1);
 8ca:	82 e4       	ldi	r24, 0x42	; 66
 8cc:	61 e0       	ldi	r22, 0x01	; 1
 8ce:	41 e0       	ldi	r20, 0x01	; 1
 8d0:	0e 94 3e 01 	call	0x27c	; 0x27c <GPIO_pin_write>
	GPIO_port_write(LCD_PORT,character);
 8d4:	81 e4       	ldi	r24, 0x41	; 65
 8d6:	6c 2f       	mov	r22, r28
 8d8:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <GPIO_port_write>
	LCD_send_pulse();
 8dc:	0e 94 07 04 	call	0x80e	; 0x80e <LCD_send_pulse>
	
	#endif
	
}
 8e0:	cf 91       	pop	r28
 8e2:	08 95       	ret

000008e4 <LCD_send_string>:

void LCD_send_string(char* character)
{
 8e4:	cf 93       	push	r28
 8e6:	df 93       	push	r29
 8e8:	ec 01       	movw	r28, r24
	while ('\0' != *character)
 8ea:	88 81       	ld	r24, Y
 8ec:	88 23       	and	r24, r24
 8ee:	31 f0       	breq	.+12     	; 0x8fc <LCD_send_string+0x18>
	
	#endif
	
}

void LCD_send_string(char* character)
 8f0:	21 96       	adiw	r28, 0x01	; 1
{
	while ('\0' != *character)
	{
		LCD_send_character(*character);
 8f2:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_send_character>
	
}

void LCD_send_string(char* character)
{
	while ('\0' != *character)
 8f6:	89 91       	ld	r24, Y+
 8f8:	88 23       	and	r24, r24
 8fa:	d9 f7       	brne	.-10     	; 0x8f2 <LCD_send_string+0xe>
	{
		LCD_send_character(*character);
		character += 1;
	}
}
 8fc:	df 91       	pop	r29
 8fe:	cf 91       	pop	r28
 900:	08 95       	ret

00000902 <LCD_move_cursor>:
void LCD_move_cursor(uint8 row, uint8 column)
{
	uint8 r = 0;
	uint8 c = 0;
	
	if( (row>0) && (row<5) && (column>0) && (column<21) )
 902:	98 2f       	mov	r25, r24
 904:	91 50       	subi	r25, 0x01	; 1
 906:	94 30       	cpi	r25, 0x04	; 4
 908:	b0 f4       	brcc	.+44     	; 0x936 <LCD_move_cursor+0x34>
 90a:	66 23       	and	r22, r22
 90c:	b1 f0       	breq	.+44     	; 0x93a <LCD_move_cursor+0x38>
 90e:	65 31       	cpi	r22, 0x15	; 21
 910:	b0 f4       	brcc	.+44     	; 0x93e <LCD_move_cursor+0x3c>
	{
		if (1 == row)
 912:	81 30       	cpi	r24, 0x01	; 1
 914:	19 f4       	brne	.+6      	; 0x91c <LCD_move_cursor+0x1a>
		{
			c = (0x80 + column - 1);
 916:	86 2f       	mov	r24, r22
 918:	81 58       	subi	r24, 0x81	; 129
 91a:	12 c0       	rjmp	.+36     	; 0x940 <LCD_move_cursor+0x3e>
		}
		else if (2 == row)
 91c:	82 30       	cpi	r24, 0x02	; 2
 91e:	19 f4       	brne	.+6      	; 0x926 <LCD_move_cursor+0x24>
		{
			c = (0xC0 + column - 1);
 920:	86 2f       	mov	r24, r22
 922:	81 54       	subi	r24, 0x41	; 65
 924:	0d c0       	rjmp	.+26     	; 0x940 <LCD_move_cursor+0x3e>
		}
		else if (3 == row)
 926:	83 30       	cpi	r24, 0x03	; 3
 928:	19 f4       	brne	.+6      	; 0x930 <LCD_move_cursor+0x2e>
		{
			c = (0x90 + column - 1);
 92a:	86 2f       	mov	r24, r22
 92c:	81 57       	subi	r24, 0x71	; 113
 92e:	08 c0       	rjmp	.+16     	; 0x940 <LCD_move_cursor+0x3e>
		}
		else
		{
			c = (0xD0 + column - 1);
 930:	86 2f       	mov	r24, r22
 932:	81 53       	subi	r24, 0x31	; 49
 934:	05 c0       	rjmp	.+10     	; 0x940 <LCD_move_cursor+0x3e>
		}
	}
	else
	{
		c = 0x80;
 936:	80 e8       	ldi	r24, 0x80	; 128
 938:	03 c0       	rjmp	.+6      	; 0x940 <LCD_move_cursor+0x3e>
 93a:	80 e8       	ldi	r24, 0x80	; 128
 93c:	01 c0       	rjmp	.+2      	; 0x940 <LCD_move_cursor+0x3e>
 93e:	80 e8       	ldi	r24, 0x80	; 128
	}
	LCD_send_command(c);
 940:	0e 94 1e 04 	call	0x83c	; 0x83c <LCD_send_command>
 944:	08 95       	ret

00000946 <USART_init>:
#if defined USART_asynchronous_mode

void USART_init(void)
{
	/*enable TX and RX for USART*/
	UCSRB |= (1 << TXEN) | (1 << RXEN);
 946:	8a b1       	in	r24, 0x0a	; 10
 948:	88 61       	ori	r24, 0x18	; 24
 94a:	8a b9       	out	0x0a, r24	; 10
	/*configure 8-bits character size*/
	UCSRC |= (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
 94c:	80 b5       	in	r24, 0x20	; 32
 94e:	86 68       	ori	r24, 0x86	; 134
 950:	80 bd       	out	0x20, r24	; 32
	/*set baud rate of USART*/
	UBRRL = (char)BAUD_PRESCALE;
 952:	83 e3       	ldi	r24, 0x33	; 51
 954:	89 b9       	out	0x09, r24	; 9
	UBRRH = (char)(BAUD_PRESCALE >> 8);
 956:	10 bc       	out	0x20, r1	; 32
	/*initialize interrupt*/
	sei();
 958:	78 94       	sei
	SET_BIT(UCSRB, RXCIE);
 95a:	57 9a       	sbi	0x0a, 7	; 10
}
 95c:	08 95       	ret

0000095e <USART_send_char>:


void USART_send_char(char character)
{
	/*wait until UDR (data buffer register) be empty*/
	while (!READ_BIT(UCSRA,UDRE))
 95e:	9b b1       	in	r25, 0x0b	; 11
 960:	95 ff       	sbrs	r25, 5
 962:	fd cf       	rjmp	.-6      	; 0x95e <USART_send_char>
	{
		//wait until empty buffer becomes 1;
	}
	/*now write your data to UDR register*/
	UDR = character;
 964:	8c b9       	out	0x0c, r24	; 12
}
 966:	08 95       	ret

00000968 <USART_send_string>:


void USART_send_string(char* string)
{
 968:	cf 93       	push	r28
 96a:	df 93       	push	r29
 96c:	ec 01       	movw	r28, r24
	/*call USART_send_char, until you reach end of string*/
	while (*string != '\0')
 96e:	88 81       	ld	r24, Y
 970:	88 23       	and	r24, r24
 972:	31 f0       	breq	.+12     	; 0x980 <USART_send_string+0x18>
	/*now write your data to UDR register*/
	UDR = character;
}


void USART_send_string(char* string)
 974:	21 96       	adiw	r28, 0x01	; 1
{
	/*call USART_send_char, until you reach end of string*/
	while (*string != '\0')
	{
		USART_send_char(*string);
 976:	0e 94 af 04 	call	0x95e	; 0x95e <USART_send_char>


void USART_send_string(char* string)
{
	/*call USART_send_char, until you reach end of string*/
	while (*string != '\0')
 97a:	89 91       	ld	r24, Y+
 97c:	88 23       	and	r24, r24
 97e:	d9 f7       	brne	.-10     	; 0x976 <USART_send_string+0xe>
	{
		USART_send_char(*string);
		++string;
	}
}
 980:	df 91       	pop	r29
 982:	cf 91       	pop	r28
 984:	08 95       	ret

00000986 <USART_receive_char>:


char USART_receive_char(void)
{
	char data;
	while(!READ_BIT(UCSRA,RXC))
 986:	5f 9b       	sbis	0x0b, 7	; 11
 988:	fe cf       	rjmp	.-4      	; 0x986 <USART_receive_char>
	{
		//wait until RXC becomes one;
	}
	/*read 8-bit data from UDR register*/
	data = UDR;
 98a:	8c b1       	in	r24, 0x0c	; 12
	return data;
}
 98c:	08 95       	ret

0000098e <_exit>:
 98e:	f8 94       	cli

00000990 <__stop_program>:
 990:	ff cf       	rjmp	.-2      	; 0x990 <__stop_program>
