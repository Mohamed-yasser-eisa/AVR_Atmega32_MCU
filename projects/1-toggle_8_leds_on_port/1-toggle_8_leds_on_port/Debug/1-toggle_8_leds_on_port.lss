
1-toggle_8_leds_on_port.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000004f2  00000566  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000568  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00000cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000064d  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001e1  00000000  00000000  000013ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000496  00000000  00000000  0000158e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00001a24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001f8  00000000  00000000  00001acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000041c  00000000  00000000  00001cc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ef       	ldi	r30, 0xF2	; 242
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <util/delay.h>
/*============================ end ==============================*/

int main(void)
{
	GPIO_port_direction('a',0xff); // set port direction to output
  92:	81 e6       	ldi	r24, 0x61	; 97
  94:	6f ef       	ldi	r22, 0xFF	; 255
  96:	0e 94 18 02 	call	0x430	; 0x430 <GPIO_port_direction>
    while(1)
    {
        GPIO_port_write('a', 0xff); //turn on all LEDs
  9a:	81 e6       	ldi	r24, 0x61	; 97
  9c:	6f ef       	ldi	r22, 0xFF	; 255
  9e:	0e 94 37 02 	call	0x46e	; 0x46e <GPIO_port_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	99 e6       	ldi	r25, 0x69	; 105
  a6:	a8 e1       	ldi	r26, 0x18	; 24
  a8:	81 50       	subi	r24, 0x01	; 1
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	a0 40       	sbci	r26, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x16>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x20>
  b2:	00 00       	nop
		_delay_ms(1000); //wait for 1 sec
		GPIO_port_write('a', 0x00); //turn off all LEDs
  b4:	81 e6       	ldi	r24, 0x61	; 97
  b6:	60 e0       	ldi	r22, 0x00	; 0
  b8:	0e 94 37 02 	call	0x46e	; 0x46e <GPIO_port_write>
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	99 e6       	ldi	r25, 0x69	; 105
  c0:	a8 e1       	ldi	r26, 0x18	; 24
  c2:	81 50       	subi	r24, 0x01	; 1
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	a0 40       	sbci	r26, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x30>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x3a>
  cc:	00 00       	nop
  ce:	e5 cf       	rjmp	.-54     	; 0x9a <main+0x8>

000000d0 <GPIO_pin_direction>:
#include "Atmega_GPIO.h"

void GPIO_pin_direction(char PORT, uint8 BIT, uint8 DIR)
{
    switch(PORT)
  d0:	84 34       	cpi	r24, 0x44	; 68
  d2:	09 f4       	brne	.+2      	; 0xd6 <GPIO_pin_direction+0x6>
  d4:	71 c0       	rjmp	.+226    	; 0x1b8 <GPIO_pin_direction+0xe8>
  d6:	85 34       	cpi	r24, 0x45	; 69
  d8:	48 f4       	brcc	.+18     	; 0xec <GPIO_pin_direction+0x1c>
  da:	82 34       	cpi	r24, 0x42	; 66
  dc:	99 f1       	breq	.+102    	; 0x144 <GPIO_pin_direction+0x74>
  de:	83 34       	cpi	r24, 0x43	; 67
  e0:	08 f0       	brcs	.+2      	; 0xe4 <GPIO_pin_direction+0x14>
  e2:	4d c0       	rjmp	.+154    	; 0x17e <GPIO_pin_direction+0xae>
  e4:	81 34       	cpi	r24, 0x41	; 65
  e6:	09 f0       	breq	.+2      	; 0xea <GPIO_pin_direction+0x1a>
  e8:	83 c0       	rjmp	.+262    	; 0x1f0 <GPIO_pin_direction+0x120>
  ea:	0f c0       	rjmp	.+30     	; 0x10a <GPIO_pin_direction+0x3a>
  ec:	82 36       	cpi	r24, 0x62	; 98
  ee:	51 f1       	breq	.+84     	; 0x144 <GPIO_pin_direction+0x74>
  f0:	83 36       	cpi	r24, 0x63	; 99
  f2:	20 f4       	brcc	.+8      	; 0xfc <GPIO_pin_direction+0x2c>
  f4:	81 36       	cpi	r24, 0x61	; 97
  f6:	09 f0       	breq	.+2      	; 0xfa <GPIO_pin_direction+0x2a>
  f8:	7b c0       	rjmp	.+246    	; 0x1f0 <GPIO_pin_direction+0x120>
  fa:	07 c0       	rjmp	.+14     	; 0x10a <GPIO_pin_direction+0x3a>
  fc:	83 36       	cpi	r24, 0x63	; 99
  fe:	09 f4       	brne	.+2      	; 0x102 <GPIO_pin_direction+0x32>
 100:	3e c0       	rjmp	.+124    	; 0x17e <GPIO_pin_direction+0xae>
 102:	84 36       	cpi	r24, 0x64	; 100
 104:	09 f0       	breq	.+2      	; 0x108 <GPIO_pin_direction+0x38>
 106:	74 c0       	rjmp	.+232    	; 0x1f0 <GPIO_pin_direction+0x120>
 108:	57 c0       	rjmp	.+174    	; 0x1b8 <GPIO_pin_direction+0xe8>
    {
        case 'A':
        case 'a':
            if(1 == DIR)
 10a:	41 30       	cpi	r20, 0x01	; 1
 10c:	69 f4       	brne	.+26     	; 0x128 <GPIO_pin_direction+0x58>
            {
                SET_BIT(DDRA, BIT); //set direction of this pin in port A as output
 10e:	2a b3       	in	r18, 0x1a	; 26
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	ac 01       	movw	r20, r24
 116:	02 c0       	rjmp	.+4      	; 0x11c <GPIO_pin_direction+0x4c>
 118:	44 0f       	add	r20, r20
 11a:	55 1f       	adc	r21, r21
 11c:	6a 95       	dec	r22
 11e:	e2 f7       	brpl	.-8      	; 0x118 <GPIO_pin_direction+0x48>
 120:	ba 01       	movw	r22, r20
 122:	62 2b       	or	r22, r18
 124:	6a bb       	out	0x1a, r22	; 26
 126:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRA, BIT); //set direction of this pin in port A as input
 128:	2a b3       	in	r18, 0x1a	; 26
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	ac 01       	movw	r20, r24
 130:	02 c0       	rjmp	.+4      	; 0x136 <GPIO_pin_direction+0x66>
 132:	44 0f       	add	r20, r20
 134:	55 1f       	adc	r21, r21
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <GPIO_pin_direction+0x62>
 13a:	ba 01       	movw	r22, r20
 13c:	60 95       	com	r22
 13e:	62 23       	and	r22, r18
 140:	6a bb       	out	0x1a, r22	; 26
 142:	08 95       	ret
            }
        break;
        case 'B':
        case 'b':
            if(1 == DIR)
 144:	41 30       	cpi	r20, 0x01	; 1
 146:	69 f4       	brne	.+26     	; 0x162 <GPIO_pin_direction+0x92>
            {
                SET_BIT(DDRB, BIT); //set direction of this pin in port B as output
 148:	27 b3       	in	r18, 0x17	; 23
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	ac 01       	movw	r20, r24
 150:	02 c0       	rjmp	.+4      	; 0x156 <GPIO_pin_direction+0x86>
 152:	44 0f       	add	r20, r20
 154:	55 1f       	adc	r21, r21
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <GPIO_pin_direction+0x82>
 15a:	ba 01       	movw	r22, r20
 15c:	62 2b       	or	r22, r18
 15e:	67 bb       	out	0x17, r22	; 23
 160:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRB, BIT); //set direction of this pin in port B as input
 162:	27 b3       	in	r18, 0x17	; 23
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	ac 01       	movw	r20, r24
 16a:	02 c0       	rjmp	.+4      	; 0x170 <GPIO_pin_direction+0xa0>
 16c:	44 0f       	add	r20, r20
 16e:	55 1f       	adc	r21, r21
 170:	6a 95       	dec	r22
 172:	e2 f7       	brpl	.-8      	; 0x16c <GPIO_pin_direction+0x9c>
 174:	ba 01       	movw	r22, r20
 176:	60 95       	com	r22
 178:	62 23       	and	r22, r18
 17a:	67 bb       	out	0x17, r22	; 23
 17c:	08 95       	ret
            }
        break;
        case 'C':
        case 'c':
            if(1 == DIR)
 17e:	41 30       	cpi	r20, 0x01	; 1
 180:	69 f4       	brne	.+26     	; 0x19c <GPIO_pin_direction+0xcc>
            {
                SET_BIT(DDRC, BIT); //set direction of this pin in port B as output
 182:	24 b3       	in	r18, 0x14	; 20
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	ac 01       	movw	r20, r24
 18a:	02 c0       	rjmp	.+4      	; 0x190 <GPIO_pin_direction+0xc0>
 18c:	44 0f       	add	r20, r20
 18e:	55 1f       	adc	r21, r21
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <GPIO_pin_direction+0xbc>
 194:	ba 01       	movw	r22, r20
 196:	62 2b       	or	r22, r18
 198:	64 bb       	out	0x14, r22	; 20
 19a:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRC, BIT); //set direction of this pin in port B as input
 19c:	24 b3       	in	r18, 0x14	; 20
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	ac 01       	movw	r20, r24
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <GPIO_pin_direction+0xda>
 1a6:	44 0f       	add	r20, r20
 1a8:	55 1f       	adc	r21, r21
 1aa:	6a 95       	dec	r22
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <GPIO_pin_direction+0xd6>
 1ae:	ba 01       	movw	r22, r20
 1b0:	60 95       	com	r22
 1b2:	62 23       	and	r22, r18
 1b4:	64 bb       	out	0x14, r22	; 20
 1b6:	08 95       	ret
            }
        break;
        case 'D':
        case 'd':
            if(1 == DIR)
 1b8:	41 30       	cpi	r20, 0x01	; 1
 1ba:	69 f4       	brne	.+26     	; 0x1d6 <GPIO_pin_direction+0x106>
            {
                SET_BIT(DDRD, BIT); //set direction of this pin in port C as output
 1bc:	21 b3       	in	r18, 0x11	; 17
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	ac 01       	movw	r20, r24
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <GPIO_pin_direction+0xfa>
 1c6:	44 0f       	add	r20, r20
 1c8:	55 1f       	adc	r21, r21
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <GPIO_pin_direction+0xf6>
 1ce:	ba 01       	movw	r22, r20
 1d0:	62 2b       	or	r22, r18
 1d2:	61 bb       	out	0x11, r22	; 17
 1d4:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRD, BIT); //set direction of this pin in port C as input
 1d6:	21 b3       	in	r18, 0x11	; 17
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	ac 01       	movw	r20, r24
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <GPIO_pin_direction+0x114>
 1e0:	44 0f       	add	r20, r20
 1e2:	55 1f       	adc	r21, r21
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <GPIO_pin_direction+0x110>
 1e8:	ba 01       	movw	r22, r20
 1ea:	60 95       	com	r22
 1ec:	62 23       	and	r22, r18
 1ee:	61 bb       	out	0x11, r22	; 17
 1f0:	08 95       	ret

000001f2 <GPIO_pin_write>:
} //end of  GPIO_pin_direction();


void GPIO_pin_write(char PORT, uint8 BIT, uint8 DATA)
{
    switch(PORT)
 1f2:	84 34       	cpi	r24, 0x44	; 68
 1f4:	09 f4       	brne	.+2      	; 0x1f8 <GPIO_pin_write+0x6>
 1f6:	71 c0       	rjmp	.+226    	; 0x2da <GPIO_pin_write+0xe8>
 1f8:	85 34       	cpi	r24, 0x45	; 69
 1fa:	48 f4       	brcc	.+18     	; 0x20e <GPIO_pin_write+0x1c>
 1fc:	82 34       	cpi	r24, 0x42	; 66
 1fe:	99 f1       	breq	.+102    	; 0x266 <GPIO_pin_write+0x74>
 200:	83 34       	cpi	r24, 0x43	; 67
 202:	08 f0       	brcs	.+2      	; 0x206 <GPIO_pin_write+0x14>
 204:	4d c0       	rjmp	.+154    	; 0x2a0 <GPIO_pin_write+0xae>
 206:	81 34       	cpi	r24, 0x41	; 65
 208:	09 f0       	breq	.+2      	; 0x20c <GPIO_pin_write+0x1a>
 20a:	83 c0       	rjmp	.+262    	; 0x312 <GPIO_pin_write+0x120>
 20c:	0f c0       	rjmp	.+30     	; 0x22c <GPIO_pin_write+0x3a>
 20e:	82 36       	cpi	r24, 0x62	; 98
 210:	51 f1       	breq	.+84     	; 0x266 <GPIO_pin_write+0x74>
 212:	83 36       	cpi	r24, 0x63	; 99
 214:	20 f4       	brcc	.+8      	; 0x21e <GPIO_pin_write+0x2c>
 216:	81 36       	cpi	r24, 0x61	; 97
 218:	09 f0       	breq	.+2      	; 0x21c <GPIO_pin_write+0x2a>
 21a:	7b c0       	rjmp	.+246    	; 0x312 <GPIO_pin_write+0x120>
 21c:	07 c0       	rjmp	.+14     	; 0x22c <GPIO_pin_write+0x3a>
 21e:	83 36       	cpi	r24, 0x63	; 99
 220:	09 f4       	brne	.+2      	; 0x224 <GPIO_pin_write+0x32>
 222:	3e c0       	rjmp	.+124    	; 0x2a0 <GPIO_pin_write+0xae>
 224:	84 36       	cpi	r24, 0x64	; 100
 226:	09 f0       	breq	.+2      	; 0x22a <GPIO_pin_write+0x38>
 228:	74 c0       	rjmp	.+232    	; 0x312 <GPIO_pin_write+0x120>
 22a:	57 c0       	rjmp	.+174    	; 0x2da <GPIO_pin_write+0xe8>
    {
        case 'A':
        case 'a':
            if(1 == DATA)
 22c:	41 30       	cpi	r20, 0x01	; 1
 22e:	69 f4       	brne	.+26     	; 0x24a <GPIO_pin_write+0x58>
            {
                SET_BIT(PORTA, BIT); //set output value of this pin in port A to 1
 230:	2b b3       	in	r18, 0x1b	; 27
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	ac 01       	movw	r20, r24
 238:	02 c0       	rjmp	.+4      	; 0x23e <GPIO_pin_write+0x4c>
 23a:	44 0f       	add	r20, r20
 23c:	55 1f       	adc	r21, r21
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <GPIO_pin_write+0x48>
 242:	ba 01       	movw	r22, r20
 244:	62 2b       	or	r22, r18
 246:	6b bb       	out	0x1b, r22	; 27
 248:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTA, BIT); //set output value of this pin in port A to 0
 24a:	2b b3       	in	r18, 0x1b	; 27
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	ac 01       	movw	r20, r24
 252:	02 c0       	rjmp	.+4      	; 0x258 <GPIO_pin_write+0x66>
 254:	44 0f       	add	r20, r20
 256:	55 1f       	adc	r21, r21
 258:	6a 95       	dec	r22
 25a:	e2 f7       	brpl	.-8      	; 0x254 <GPIO_pin_write+0x62>
 25c:	ba 01       	movw	r22, r20
 25e:	60 95       	com	r22
 260:	62 23       	and	r22, r18
 262:	6b bb       	out	0x1b, r22	; 27
 264:	08 95       	ret
            }
        break;
        case 'B':
        case 'b':
            if(1 == DATA)
 266:	41 30       	cpi	r20, 0x01	; 1
 268:	69 f4       	brne	.+26     	; 0x284 <GPIO_pin_write+0x92>
            {
                SET_BIT(PORTB, BIT); //set output value of this pin in port B to 1
 26a:	28 b3       	in	r18, 0x18	; 24
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	ac 01       	movw	r20, r24
 272:	02 c0       	rjmp	.+4      	; 0x278 <GPIO_pin_write+0x86>
 274:	44 0f       	add	r20, r20
 276:	55 1f       	adc	r21, r21
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <GPIO_pin_write+0x82>
 27c:	ba 01       	movw	r22, r20
 27e:	62 2b       	or	r22, r18
 280:	68 bb       	out	0x18, r22	; 24
 282:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTB, BIT); //set output value of this pin in port B to 0
 284:	28 b3       	in	r18, 0x18	; 24
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	ac 01       	movw	r20, r24
 28c:	02 c0       	rjmp	.+4      	; 0x292 <GPIO_pin_write+0xa0>
 28e:	44 0f       	add	r20, r20
 290:	55 1f       	adc	r21, r21
 292:	6a 95       	dec	r22
 294:	e2 f7       	brpl	.-8      	; 0x28e <GPIO_pin_write+0x9c>
 296:	ba 01       	movw	r22, r20
 298:	60 95       	com	r22
 29a:	62 23       	and	r22, r18
 29c:	68 bb       	out	0x18, r22	; 24
 29e:	08 95       	ret
            }
        break;
        case 'C':
        case 'c':
            if(1 == DATA)
 2a0:	41 30       	cpi	r20, 0x01	; 1
 2a2:	69 f4       	brne	.+26     	; 0x2be <GPIO_pin_write+0xcc>
            {
                SET_BIT(PORTC, BIT); //set output value of this pin in port C to 1
 2a4:	25 b3       	in	r18, 0x15	; 21
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	ac 01       	movw	r20, r24
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <GPIO_pin_write+0xc0>
 2ae:	44 0f       	add	r20, r20
 2b0:	55 1f       	adc	r21, r21
 2b2:	6a 95       	dec	r22
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <GPIO_pin_write+0xbc>
 2b6:	ba 01       	movw	r22, r20
 2b8:	62 2b       	or	r22, r18
 2ba:	65 bb       	out	0x15, r22	; 21
 2bc:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTC, BIT); //set output value of this pin in port C to 0
 2be:	25 b3       	in	r18, 0x15	; 21
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	ac 01       	movw	r20, r24
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <GPIO_pin_write+0xda>
 2c8:	44 0f       	add	r20, r20
 2ca:	55 1f       	adc	r21, r21
 2cc:	6a 95       	dec	r22
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <GPIO_pin_write+0xd6>
 2d0:	ba 01       	movw	r22, r20
 2d2:	60 95       	com	r22
 2d4:	62 23       	and	r22, r18
 2d6:	65 bb       	out	0x15, r22	; 21
 2d8:	08 95       	ret
            }
        break;
        case 'D':
        case 'd':
            if(1 == DATA)
 2da:	41 30       	cpi	r20, 0x01	; 1
 2dc:	69 f4       	brne	.+26     	; 0x2f8 <GPIO_pin_write+0x106>
            {
                SET_BIT(PORTD, BIT); //set output value of this pin in port C to 1
 2de:	22 b3       	in	r18, 0x12	; 18
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	ac 01       	movw	r20, r24
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <GPIO_pin_write+0xfa>
 2e8:	44 0f       	add	r20, r20
 2ea:	55 1f       	adc	r21, r21
 2ec:	6a 95       	dec	r22
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <GPIO_pin_write+0xf6>
 2f0:	ba 01       	movw	r22, r20
 2f2:	62 2b       	or	r22, r18
 2f4:	62 bb       	out	0x12, r22	; 18
 2f6:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTD, BIT); //set output value of this pin in port C to 0
 2f8:	22 b3       	in	r18, 0x12	; 18
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	ac 01       	movw	r20, r24
 300:	02 c0       	rjmp	.+4      	; 0x306 <GPIO_pin_write+0x114>
 302:	44 0f       	add	r20, r20
 304:	55 1f       	adc	r21, r21
 306:	6a 95       	dec	r22
 308:	e2 f7       	brpl	.-8      	; 0x302 <GPIO_pin_write+0x110>
 30a:	ba 01       	movw	r22, r20
 30c:	60 95       	com	r22
 30e:	62 23       	and	r22, r18
 310:	62 bb       	out	0x12, r22	; 18
 312:	08 95       	ret

00000314 <GPIO_pin_read>:


uint8 GPIO_pin_read(char PORT, uint8 BIT)
{
    uint8 read_value = 0;
    switch(PORT)
 314:	84 34       	cpi	r24, 0x44	; 68
 316:	99 f1       	breq	.+102    	; 0x37e <GPIO_pin_read+0x6a>
 318:	85 34       	cpi	r24, 0x45	; 69
 31a:	38 f4       	brcc	.+14     	; 0x32a <GPIO_pin_read+0x16>
 31c:	82 34       	cpi	r24, 0x42	; 66
 31e:	d9 f0       	breq	.+54     	; 0x356 <GPIO_pin_read+0x42>
 320:	83 34       	cpi	r24, 0x43	; 67
 322:	18 f5       	brcc	.+70     	; 0x36a <GPIO_pin_read+0x56>
 324:	81 34       	cpi	r24, 0x41	; 65
 326:	a9 f5       	brne	.+106    	; 0x392 <GPIO_pin_read+0x7e>
 328:	0c c0       	rjmp	.+24     	; 0x342 <GPIO_pin_read+0x2e>
 32a:	82 36       	cpi	r24, 0x62	; 98
 32c:	a1 f0       	breq	.+40     	; 0x356 <GPIO_pin_read+0x42>
 32e:	83 36       	cpi	r24, 0x63	; 99
 330:	18 f4       	brcc	.+6      	; 0x338 <GPIO_pin_read+0x24>
 332:	81 36       	cpi	r24, 0x61	; 97
 334:	71 f5       	brne	.+92     	; 0x392 <GPIO_pin_read+0x7e>
 336:	05 c0       	rjmp	.+10     	; 0x342 <GPIO_pin_read+0x2e>
 338:	83 36       	cpi	r24, 0x63	; 99
 33a:	b9 f0       	breq	.+46     	; 0x36a <GPIO_pin_read+0x56>
 33c:	84 36       	cpi	r24, 0x64	; 100
 33e:	49 f5       	brne	.+82     	; 0x392 <GPIO_pin_read+0x7e>
 340:	1e c0       	rjmp	.+60     	; 0x37e <GPIO_pin_read+0x6a>
    {
        case 'A':
        case 'a':
            read_value = READ_BIT(PINA, BIT); //read value of given pin in port A
 342:	29 b3       	in	r18, 0x19	; 25
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	c9 01       	movw	r24, r18
 348:	02 c0       	rjmp	.+4      	; 0x34e <GPIO_pin_read+0x3a>
 34a:	95 95       	asr	r25
 34c:	87 95       	ror	r24
 34e:	6a 95       	dec	r22
 350:	e2 f7       	brpl	.-8      	; 0x34a <GPIO_pin_read+0x36>
 352:	81 70       	andi	r24, 0x01	; 1
        break;
 354:	08 95       	ret
        case 'B':
        case 'b':
            read_value = READ_BIT(PINB, BIT); //read value of given pin in port B
 356:	26 b3       	in	r18, 0x16	; 22
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	c9 01       	movw	r24, r18
 35c:	02 c0       	rjmp	.+4      	; 0x362 <GPIO_pin_read+0x4e>
 35e:	95 95       	asr	r25
 360:	87 95       	ror	r24
 362:	6a 95       	dec	r22
 364:	e2 f7       	brpl	.-8      	; 0x35e <GPIO_pin_read+0x4a>
 366:	81 70       	andi	r24, 0x01	; 1
        break;
 368:	08 95       	ret
        case 'C':
        case 'c':
            read_value = READ_BIT(PINC, BIT); //read value of given pin in port C
 36a:	23 b3       	in	r18, 0x13	; 19
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	c9 01       	movw	r24, r18
 370:	02 c0       	rjmp	.+4      	; 0x376 <GPIO_pin_read+0x62>
 372:	95 95       	asr	r25
 374:	87 95       	ror	r24
 376:	6a 95       	dec	r22
 378:	e2 f7       	brpl	.-8      	; 0x372 <GPIO_pin_read+0x5e>
 37a:	81 70       	andi	r24, 0x01	; 1
        break;
 37c:	08 95       	ret
        case 'D':
        case 'd':
            read_value = READ_BIT(PIND, BIT); //read value of given pin in port D
 37e:	20 b3       	in	r18, 0x10	; 16
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	c9 01       	movw	r24, r18
 384:	02 c0       	rjmp	.+4      	; 0x38a <GPIO_pin_read+0x76>
 386:	95 95       	asr	r25
 388:	87 95       	ror	r24
 38a:	6a 95       	dec	r22
 38c:	e2 f7       	brpl	.-8      	; 0x386 <GPIO_pin_read+0x72>
 38e:	81 70       	andi	r24, 0x01	; 1
        break;
 390:	08 95       	ret
} // end of GPIO_pin_write();


uint8 GPIO_pin_read(char PORT, uint8 BIT)
{
    uint8 read_value = 0;
 392:	80 e0       	ldi	r24, 0x00	; 0
        break;
        default:
        break;
    } //end of switch(PORT);
    return read_value;
} // end of GPIO_pin_read();
 394:	08 95       	ret

00000396 <GPIO_pin_toggle>:


void GPIO_pin_toggle(char PORT, uint8 BIT)
{
    switch(PORT)
 396:	84 34       	cpi	r24, 0x44	; 68
 398:	09 f4       	brne	.+2      	; 0x39c <GPIO_pin_toggle+0x6>
 39a:	3d c0       	rjmp	.+122    	; 0x416 <GPIO_pin_toggle+0x80>
 39c:	85 34       	cpi	r24, 0x45	; 69
 39e:	40 f4       	brcc	.+16     	; 0x3b0 <GPIO_pin_toggle+0x1a>
 3a0:	82 34       	cpi	r24, 0x42	; 66
 3a2:	f9 f0       	breq	.+62     	; 0x3e2 <GPIO_pin_toggle+0x4c>
 3a4:	83 34       	cpi	r24, 0x43	; 67
 3a6:	50 f5       	brcc	.+84     	; 0x3fc <GPIO_pin_toggle+0x66>
 3a8:	81 34       	cpi	r24, 0x41	; 65
 3aa:	09 f0       	breq	.+2      	; 0x3ae <GPIO_pin_toggle+0x18>
 3ac:	40 c0       	rjmp	.+128    	; 0x42e <GPIO_pin_toggle+0x98>
 3ae:	0c c0       	rjmp	.+24     	; 0x3c8 <GPIO_pin_toggle+0x32>
 3b0:	82 36       	cpi	r24, 0x62	; 98
 3b2:	b9 f0       	breq	.+46     	; 0x3e2 <GPIO_pin_toggle+0x4c>
 3b4:	83 36       	cpi	r24, 0x63	; 99
 3b6:	18 f4       	brcc	.+6      	; 0x3be <GPIO_pin_toggle+0x28>
 3b8:	81 36       	cpi	r24, 0x61	; 97
 3ba:	c9 f5       	brne	.+114    	; 0x42e <GPIO_pin_toggle+0x98>
 3bc:	05 c0       	rjmp	.+10     	; 0x3c8 <GPIO_pin_toggle+0x32>
 3be:	83 36       	cpi	r24, 0x63	; 99
 3c0:	e9 f0       	breq	.+58     	; 0x3fc <GPIO_pin_toggle+0x66>
 3c2:	84 36       	cpi	r24, 0x64	; 100
 3c4:	a1 f5       	brne	.+104    	; 0x42e <GPIO_pin_toggle+0x98>
 3c6:	27 c0       	rjmp	.+78     	; 0x416 <GPIO_pin_toggle+0x80>
    {
        case 'A':
        case 'a':
            TOG_BIT(PORTA, BIT); //toggle value of given pin in port A
 3c8:	2b b3       	in	r18, 0x1b	; 27
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	ac 01       	movw	r20, r24
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <GPIO_pin_toggle+0x40>
 3d2:	44 0f       	add	r20, r20
 3d4:	55 1f       	adc	r21, r21
 3d6:	6a 95       	dec	r22
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <GPIO_pin_toggle+0x3c>
 3da:	ba 01       	movw	r22, r20
 3dc:	62 27       	eor	r22, r18
 3de:	6b bb       	out	0x1b, r22	; 27
        break;
 3e0:	08 95       	ret
        case 'B':
        case 'b':
            TOG_BIT(PORTB, BIT); //toggle value of given pin in port B
 3e2:	28 b3       	in	r18, 0x18	; 24
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	ac 01       	movw	r20, r24
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <GPIO_pin_toggle+0x5a>
 3ec:	44 0f       	add	r20, r20
 3ee:	55 1f       	adc	r21, r21
 3f0:	6a 95       	dec	r22
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <GPIO_pin_toggle+0x56>
 3f4:	ba 01       	movw	r22, r20
 3f6:	62 27       	eor	r22, r18
 3f8:	68 bb       	out	0x18, r22	; 24
        break;
 3fa:	08 95       	ret
        case 'C':
        case 'c':
            TOG_BIT(PORTC, BIT); //toggle value of given pin in port C
 3fc:	25 b3       	in	r18, 0x15	; 21
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	ac 01       	movw	r20, r24
 404:	02 c0       	rjmp	.+4      	; 0x40a <GPIO_pin_toggle+0x74>
 406:	44 0f       	add	r20, r20
 408:	55 1f       	adc	r21, r21
 40a:	6a 95       	dec	r22
 40c:	e2 f7       	brpl	.-8      	; 0x406 <GPIO_pin_toggle+0x70>
 40e:	ba 01       	movw	r22, r20
 410:	62 27       	eor	r22, r18
 412:	65 bb       	out	0x15, r22	; 21
        break;
 414:	08 95       	ret
        case 'D':
        case 'd':
            TOG_BIT(PORTD, BIT); //toggle value of given pin in port D
 416:	22 b3       	in	r18, 0x12	; 18
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	ac 01       	movw	r20, r24
 41e:	02 c0       	rjmp	.+4      	; 0x424 <GPIO_pin_toggle+0x8e>
 420:	44 0f       	add	r20, r20
 422:	55 1f       	adc	r21, r21
 424:	6a 95       	dec	r22
 426:	e2 f7       	brpl	.-8      	; 0x420 <GPIO_pin_toggle+0x8a>
 428:	ba 01       	movw	r22, r20
 42a:	62 27       	eor	r22, r18
 42c:	62 bb       	out	0x12, r22	; 18
 42e:	08 95       	ret

00000430 <GPIO_port_direction>:
} // end of GPIO_pin_toggle();


void GPIO_port_direction(char PORT, uint8 DIR)
{
    switch(PORT)
 430:	84 34       	cpi	r24, 0x44	; 68
 432:	d9 f0       	breq	.+54     	; 0x46a <GPIO_port_direction+0x3a>
 434:	85 34       	cpi	r24, 0x45	; 69
 436:	38 f4       	brcc	.+14     	; 0x446 <GPIO_port_direction+0x16>
 438:	82 34       	cpi	r24, 0x42	; 66
 43a:	99 f0       	breq	.+38     	; 0x462 <GPIO_port_direction+0x32>
 43c:	83 34       	cpi	r24, 0x43	; 67
 43e:	98 f4       	brcc	.+38     	; 0x466 <GPIO_port_direction+0x36>
 440:	81 34       	cpi	r24, 0x41	; 65
 442:	a1 f4       	brne	.+40     	; 0x46c <GPIO_port_direction+0x3c>
 444:	0c c0       	rjmp	.+24     	; 0x45e <GPIO_port_direction+0x2e>
 446:	82 36       	cpi	r24, 0x62	; 98
 448:	61 f0       	breq	.+24     	; 0x462 <GPIO_port_direction+0x32>
 44a:	83 36       	cpi	r24, 0x63	; 99
 44c:	18 f4       	brcc	.+6      	; 0x454 <GPIO_port_direction+0x24>
 44e:	81 36       	cpi	r24, 0x61	; 97
 450:	69 f4       	brne	.+26     	; 0x46c <GPIO_port_direction+0x3c>
 452:	05 c0       	rjmp	.+10     	; 0x45e <GPIO_port_direction+0x2e>
 454:	83 36       	cpi	r24, 0x63	; 99
 456:	39 f0       	breq	.+14     	; 0x466 <GPIO_port_direction+0x36>
 458:	84 36       	cpi	r24, 0x64	; 100
 45a:	41 f4       	brne	.+16     	; 0x46c <GPIO_port_direction+0x3c>
 45c:	06 c0       	rjmp	.+12     	; 0x46a <GPIO_port_direction+0x3a>
    {
        case 'A':
        case 'a':
            DDRA = DIR; // set direction of port A to the given DIR
 45e:	6a bb       	out	0x1a, r22	; 26
        break;
 460:	08 95       	ret
        case 'B':
        case 'b':
            DDRB = DIR; // set direction of port B to the given DIR
 462:	67 bb       	out	0x17, r22	; 23
        break;
 464:	08 95       	ret
        case 'C':
        case 'c':
            DDRC = DIR; // set direction of port C to the given DIR
 466:	64 bb       	out	0x14, r22	; 20
        break;
 468:	08 95       	ret
        case 'D':
        case 'd':
            DDRD = DIR; // set direction of port D to the given DIR
 46a:	61 bb       	out	0x11, r22	; 17
 46c:	08 95       	ret

0000046e <GPIO_port_write>:
} // end of GPIO_port_direction();


void GPIO_port_write(char PORT, uint8 DATA)
{
    switch(PORT)
 46e:	84 34       	cpi	r24, 0x44	; 68
 470:	d9 f0       	breq	.+54     	; 0x4a8 <GPIO_port_write+0x3a>
 472:	85 34       	cpi	r24, 0x45	; 69
 474:	38 f4       	brcc	.+14     	; 0x484 <GPIO_port_write+0x16>
 476:	82 34       	cpi	r24, 0x42	; 66
 478:	99 f0       	breq	.+38     	; 0x4a0 <GPIO_port_write+0x32>
 47a:	83 34       	cpi	r24, 0x43	; 67
 47c:	98 f4       	brcc	.+38     	; 0x4a4 <GPIO_port_write+0x36>
 47e:	81 34       	cpi	r24, 0x41	; 65
 480:	a1 f4       	brne	.+40     	; 0x4aa <GPIO_port_write+0x3c>
 482:	0c c0       	rjmp	.+24     	; 0x49c <GPIO_port_write+0x2e>
 484:	82 36       	cpi	r24, 0x62	; 98
 486:	61 f0       	breq	.+24     	; 0x4a0 <GPIO_port_write+0x32>
 488:	83 36       	cpi	r24, 0x63	; 99
 48a:	18 f4       	brcc	.+6      	; 0x492 <GPIO_port_write+0x24>
 48c:	81 36       	cpi	r24, 0x61	; 97
 48e:	69 f4       	brne	.+26     	; 0x4aa <GPIO_port_write+0x3c>
 490:	05 c0       	rjmp	.+10     	; 0x49c <GPIO_port_write+0x2e>
 492:	83 36       	cpi	r24, 0x63	; 99
 494:	39 f0       	breq	.+14     	; 0x4a4 <GPIO_port_write+0x36>
 496:	84 36       	cpi	r24, 0x64	; 100
 498:	41 f4       	brne	.+16     	; 0x4aa <GPIO_port_write+0x3c>
 49a:	06 c0       	rjmp	.+12     	; 0x4a8 <GPIO_port_write+0x3a>
    {
        case 'A':
        case 'a':
            PORTA = DATA; // write these data on port A
 49c:	6b bb       	out	0x1b, r22	; 27
        break;
 49e:	08 95       	ret
        case 'B':
        case 'b':
            PORTB = DATA; // write these data on port B
 4a0:	68 bb       	out	0x18, r22	; 24
        break;
 4a2:	08 95       	ret
        case 'C':
        case 'c':
            PORTC = DATA; // write these data on port C
 4a4:	65 bb       	out	0x15, r22	; 21
        break;
 4a6:	08 95       	ret
        case 'D':
        case 'd':
            PORTD = DATA; // write these data on port D
 4a8:	62 bb       	out	0x12, r22	; 18
 4aa:	08 95       	ret

000004ac <GPIO_port_read>:


uint8 GPIO_port_read(char PORT)
{
    uint8 read_port = 0;
    switch(PORT)
 4ac:	84 34       	cpi	r24, 0x44	; 68
 4ae:	d9 f0       	breq	.+54     	; 0x4e6 <GPIO_port_read+0x3a>
 4b0:	85 34       	cpi	r24, 0x45	; 69
 4b2:	38 f4       	brcc	.+14     	; 0x4c2 <GPIO_port_read+0x16>
 4b4:	82 34       	cpi	r24, 0x42	; 66
 4b6:	99 f0       	breq	.+38     	; 0x4de <GPIO_port_read+0x32>
 4b8:	83 34       	cpi	r24, 0x43	; 67
 4ba:	98 f4       	brcc	.+38     	; 0x4e2 <GPIO_port_read+0x36>
 4bc:	81 34       	cpi	r24, 0x41	; 65
 4be:	a9 f4       	brne	.+42     	; 0x4ea <GPIO_port_read+0x3e>
 4c0:	0c c0       	rjmp	.+24     	; 0x4da <GPIO_port_read+0x2e>
 4c2:	82 36       	cpi	r24, 0x62	; 98
 4c4:	61 f0       	breq	.+24     	; 0x4de <GPIO_port_read+0x32>
 4c6:	83 36       	cpi	r24, 0x63	; 99
 4c8:	18 f4       	brcc	.+6      	; 0x4d0 <GPIO_port_read+0x24>
 4ca:	81 36       	cpi	r24, 0x61	; 97
 4cc:	71 f4       	brne	.+28     	; 0x4ea <GPIO_port_read+0x3e>
 4ce:	05 c0       	rjmp	.+10     	; 0x4da <GPIO_port_read+0x2e>
 4d0:	83 36       	cpi	r24, 0x63	; 99
 4d2:	39 f0       	breq	.+14     	; 0x4e2 <GPIO_port_read+0x36>
 4d4:	84 36       	cpi	r24, 0x64	; 100
 4d6:	49 f4       	brne	.+18     	; 0x4ea <GPIO_port_read+0x3e>
 4d8:	06 c0       	rjmp	.+12     	; 0x4e6 <GPIO_port_read+0x3a>
    {
        case 'A':
        case 'a':
            read_port = PINA; // read data from port A
 4da:	89 b3       	in	r24, 0x19	; 25
        break;
 4dc:	08 95       	ret
        case 'B':
        case 'b':
            read_port = PINB; // read data from port B
 4de:	86 b3       	in	r24, 0x16	; 22
        break;
 4e0:	08 95       	ret
        case 'C':
        case 'c':
            read_port = PINC; // read data from port C
 4e2:	83 b3       	in	r24, 0x13	; 19
        break;
 4e4:	08 95       	ret
        case 'D':
        case 'd':
            read_port = PIND; // read data from port D
 4e6:	80 b3       	in	r24, 0x10	; 16
        break;
 4e8:	08 95       	ret
} // end of GPIO_port_write();


uint8 GPIO_port_read(char PORT)
{
    uint8 read_port = 0;
 4ea:	80 e0       	ldi	r24, 0x00	; 0
        break;
        default:
        break;
    } // end of switch(PORT);
    return read_port;
} // end of GPIO_port_read();
 4ec:	08 95       	ret

000004ee <_exit>:
 4ee:	f8 94       	cli

000004f0 <__stop_program>:
 4f0:	ff cf       	rjmp	.-2      	; 0x4f0 <__stop_program>
