
31-receive_string_through_USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000814  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000814  00000888  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000888  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00000fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ab8  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003c9  00000000  00000000  00001b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000066d  00000000  00000000  00001f41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e0  00000000  00000000  000025b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000374  00000000  00000000  00002790  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000779  00000000  00000000  00002b04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e1       	ldi	r30, 0x14	; 20
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 08 04 	jmp	0x810	; 0x810 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

int main(void)
{
	uint8 row = 1;
	char data = '\0';
	LCD_init();
  92:	0e 94 81 03 	call	0x702	; 0x702 <LCD_init>
	USART_init();
  96:	0e 94 e6 03 	call	0x7cc	; 0x7cc <USART_init>
#include "USART.h"
#include "LCD.h"

int main(void)
{
	uint8 row = 1;
  9a:	d1 e0       	ldi	r29, 0x01	; 1
	USART_init();
	
	
	while(1)
	{
		data = USART_receive_char();
  9c:	0e 94 04 04 	call	0x808	; 0x808 <USART_receive_char>
  a0:	c8 2f       	mov	r28, r24
		if ('\0' != data)
  a2:	88 23       	and	r24, r24
  a4:	d9 f3       	breq	.-10     	; 0x9c <main+0xa>
		{
			LCD_send_character(data);
  a6:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_send_character>
			if ((char) 'd' == (char)data)
  aa:	c4 36       	cpi	r28, 0x64	; 100
  ac:	b9 f7       	brne	.-18     	; 0x9c <main+0xa>
			{
				++row;
  ae:	df 5f       	subi	r29, 0xFF	; 255
				if (6 == row)
  b0:	d6 30       	cpi	r29, 0x06	; 6
  b2:	21 f4       	brne	.+8      	; 0xbc <main+0x2a>
				{
					row = 1;
					LCD_clear_screen();
  b4:	0e 94 6d 03 	call	0x6da	; 0x6da <LCD_clear_screen>
			if ((char) 'd' == (char)data)
			{
				++row;
				if (6 == row)
				{
					row = 1;
  b8:	d1 e0       	ldi	r29, 0x01	; 1
  ba:	f0 cf       	rjmp	.-32     	; 0x9c <main+0xa>
					LCD_clear_screen();
				}
				else
				{
					LCD_move_cursor(row, 1);
  bc:	8d 2f       	mov	r24, r29
  be:	61 e0       	ldi	r22, 0x01	; 1
  c0:	0e 94 c4 03 	call	0x788	; 0x788 <LCD_move_cursor>
  c4:	eb cf       	rjmp	.-42     	; 0x9c <main+0xa>

000000c6 <GPIO_pin_direction>:
#include "Atmega_GPIO.h"

void GPIO_pin_direction(char PORT, uint8 BIT, uint8 DIR)
{
    switch(PORT)
  c6:	84 34       	cpi	r24, 0x44	; 68
  c8:	09 f4       	brne	.+2      	; 0xcc <GPIO_pin_direction+0x6>
  ca:	71 c0       	rjmp	.+226    	; 0x1ae <GPIO_pin_direction+0xe8>
  cc:	85 34       	cpi	r24, 0x45	; 69
  ce:	48 f4       	brcc	.+18     	; 0xe2 <GPIO_pin_direction+0x1c>
  d0:	82 34       	cpi	r24, 0x42	; 66
  d2:	99 f1       	breq	.+102    	; 0x13a <GPIO_pin_direction+0x74>
  d4:	83 34       	cpi	r24, 0x43	; 67
  d6:	08 f0       	brcs	.+2      	; 0xda <GPIO_pin_direction+0x14>
  d8:	4d c0       	rjmp	.+154    	; 0x174 <GPIO_pin_direction+0xae>
  da:	81 34       	cpi	r24, 0x41	; 65
  dc:	09 f0       	breq	.+2      	; 0xe0 <GPIO_pin_direction+0x1a>
  de:	83 c0       	rjmp	.+262    	; 0x1e6 <GPIO_pin_direction+0x120>
  e0:	0f c0       	rjmp	.+30     	; 0x100 <GPIO_pin_direction+0x3a>
  e2:	82 36       	cpi	r24, 0x62	; 98
  e4:	51 f1       	breq	.+84     	; 0x13a <GPIO_pin_direction+0x74>
  e6:	83 36       	cpi	r24, 0x63	; 99
  e8:	20 f4       	brcc	.+8      	; 0xf2 <GPIO_pin_direction+0x2c>
  ea:	81 36       	cpi	r24, 0x61	; 97
  ec:	09 f0       	breq	.+2      	; 0xf0 <GPIO_pin_direction+0x2a>
  ee:	7b c0       	rjmp	.+246    	; 0x1e6 <GPIO_pin_direction+0x120>
  f0:	07 c0       	rjmp	.+14     	; 0x100 <GPIO_pin_direction+0x3a>
  f2:	83 36       	cpi	r24, 0x63	; 99
  f4:	09 f4       	brne	.+2      	; 0xf8 <GPIO_pin_direction+0x32>
  f6:	3e c0       	rjmp	.+124    	; 0x174 <GPIO_pin_direction+0xae>
  f8:	84 36       	cpi	r24, 0x64	; 100
  fa:	09 f0       	breq	.+2      	; 0xfe <GPIO_pin_direction+0x38>
  fc:	74 c0       	rjmp	.+232    	; 0x1e6 <GPIO_pin_direction+0x120>
  fe:	57 c0       	rjmp	.+174    	; 0x1ae <GPIO_pin_direction+0xe8>
    {
        case 'A':
        case 'a':
            if(1 == DIR)
 100:	41 30       	cpi	r20, 0x01	; 1
 102:	69 f4       	brne	.+26     	; 0x11e <GPIO_pin_direction+0x58>
            {
                SET_BIT(DDRA, BIT); //set direction of this pin in port A as output
 104:	2a b3       	in	r18, 0x1a	; 26
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	ac 01       	movw	r20, r24
 10c:	02 c0       	rjmp	.+4      	; 0x112 <GPIO_pin_direction+0x4c>
 10e:	44 0f       	add	r20, r20
 110:	55 1f       	adc	r21, r21
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <GPIO_pin_direction+0x48>
 116:	ba 01       	movw	r22, r20
 118:	62 2b       	or	r22, r18
 11a:	6a bb       	out	0x1a, r22	; 26
 11c:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRA, BIT); //set direction of this pin in port A as input
 11e:	2a b3       	in	r18, 0x1a	; 26
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	ac 01       	movw	r20, r24
 126:	02 c0       	rjmp	.+4      	; 0x12c <GPIO_pin_direction+0x66>
 128:	44 0f       	add	r20, r20
 12a:	55 1f       	adc	r21, r21
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <GPIO_pin_direction+0x62>
 130:	ba 01       	movw	r22, r20
 132:	60 95       	com	r22
 134:	62 23       	and	r22, r18
 136:	6a bb       	out	0x1a, r22	; 26
 138:	08 95       	ret
            }
        break;
        case 'B':
        case 'b':
            if(1 == DIR)
 13a:	41 30       	cpi	r20, 0x01	; 1
 13c:	69 f4       	brne	.+26     	; 0x158 <GPIO_pin_direction+0x92>
            {
                SET_BIT(DDRB, BIT); //set direction of this pin in port B as output
 13e:	27 b3       	in	r18, 0x17	; 23
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	ac 01       	movw	r20, r24
 146:	02 c0       	rjmp	.+4      	; 0x14c <GPIO_pin_direction+0x86>
 148:	44 0f       	add	r20, r20
 14a:	55 1f       	adc	r21, r21
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <GPIO_pin_direction+0x82>
 150:	ba 01       	movw	r22, r20
 152:	62 2b       	or	r22, r18
 154:	67 bb       	out	0x17, r22	; 23
 156:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRB, BIT); //set direction of this pin in port B as input
 158:	27 b3       	in	r18, 0x17	; 23
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	ac 01       	movw	r20, r24
 160:	02 c0       	rjmp	.+4      	; 0x166 <GPIO_pin_direction+0xa0>
 162:	44 0f       	add	r20, r20
 164:	55 1f       	adc	r21, r21
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <GPIO_pin_direction+0x9c>
 16a:	ba 01       	movw	r22, r20
 16c:	60 95       	com	r22
 16e:	62 23       	and	r22, r18
 170:	67 bb       	out	0x17, r22	; 23
 172:	08 95       	ret
            }
        break;
        case 'C':
        case 'c':
            if(1 == DIR)
 174:	41 30       	cpi	r20, 0x01	; 1
 176:	69 f4       	brne	.+26     	; 0x192 <GPIO_pin_direction+0xcc>
            {
                SET_BIT(DDRC, BIT); //set direction of this pin in port B as output
 178:	24 b3       	in	r18, 0x14	; 20
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	ac 01       	movw	r20, r24
 180:	02 c0       	rjmp	.+4      	; 0x186 <GPIO_pin_direction+0xc0>
 182:	44 0f       	add	r20, r20
 184:	55 1f       	adc	r21, r21
 186:	6a 95       	dec	r22
 188:	e2 f7       	brpl	.-8      	; 0x182 <GPIO_pin_direction+0xbc>
 18a:	ba 01       	movw	r22, r20
 18c:	62 2b       	or	r22, r18
 18e:	64 bb       	out	0x14, r22	; 20
 190:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRC, BIT); //set direction of this pin in port B as input
 192:	24 b3       	in	r18, 0x14	; 20
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	ac 01       	movw	r20, r24
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <GPIO_pin_direction+0xda>
 19c:	44 0f       	add	r20, r20
 19e:	55 1f       	adc	r21, r21
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <GPIO_pin_direction+0xd6>
 1a4:	ba 01       	movw	r22, r20
 1a6:	60 95       	com	r22
 1a8:	62 23       	and	r22, r18
 1aa:	64 bb       	out	0x14, r22	; 20
 1ac:	08 95       	ret
            }
        break;
        case 'D':
        case 'd':
            if(1 == DIR)
 1ae:	41 30       	cpi	r20, 0x01	; 1
 1b0:	69 f4       	brne	.+26     	; 0x1cc <GPIO_pin_direction+0x106>
            {
                SET_BIT(DDRD, BIT); //set direction of this pin in port C as output
 1b2:	21 b3       	in	r18, 0x11	; 17
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	ac 01       	movw	r20, r24
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <GPIO_pin_direction+0xfa>
 1bc:	44 0f       	add	r20, r20
 1be:	55 1f       	adc	r21, r21
 1c0:	6a 95       	dec	r22
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <GPIO_pin_direction+0xf6>
 1c4:	ba 01       	movw	r22, r20
 1c6:	62 2b       	or	r22, r18
 1c8:	61 bb       	out	0x11, r22	; 17
 1ca:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRD, BIT); //set direction of this pin in port C as input
 1cc:	21 b3       	in	r18, 0x11	; 17
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	ac 01       	movw	r20, r24
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <GPIO_pin_direction+0x114>
 1d6:	44 0f       	add	r20, r20
 1d8:	55 1f       	adc	r21, r21
 1da:	6a 95       	dec	r22
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <GPIO_pin_direction+0x110>
 1de:	ba 01       	movw	r22, r20
 1e0:	60 95       	com	r22
 1e2:	62 23       	and	r22, r18
 1e4:	61 bb       	out	0x11, r22	; 17
 1e6:	08 95       	ret

000001e8 <GPIO_pin_write>:
} //end of  GPIO_pin_direction();


void GPIO_pin_write(char PORT, uint8 BIT, uint8 DATA)
{
    switch(PORT)
 1e8:	84 34       	cpi	r24, 0x44	; 68
 1ea:	09 f4       	brne	.+2      	; 0x1ee <GPIO_pin_write+0x6>
 1ec:	71 c0       	rjmp	.+226    	; 0x2d0 <GPIO_pin_write+0xe8>
 1ee:	85 34       	cpi	r24, 0x45	; 69
 1f0:	48 f4       	brcc	.+18     	; 0x204 <GPIO_pin_write+0x1c>
 1f2:	82 34       	cpi	r24, 0x42	; 66
 1f4:	99 f1       	breq	.+102    	; 0x25c <GPIO_pin_write+0x74>
 1f6:	83 34       	cpi	r24, 0x43	; 67
 1f8:	08 f0       	brcs	.+2      	; 0x1fc <GPIO_pin_write+0x14>
 1fa:	4d c0       	rjmp	.+154    	; 0x296 <GPIO_pin_write+0xae>
 1fc:	81 34       	cpi	r24, 0x41	; 65
 1fe:	09 f0       	breq	.+2      	; 0x202 <GPIO_pin_write+0x1a>
 200:	83 c0       	rjmp	.+262    	; 0x308 <GPIO_pin_write+0x120>
 202:	0f c0       	rjmp	.+30     	; 0x222 <GPIO_pin_write+0x3a>
 204:	82 36       	cpi	r24, 0x62	; 98
 206:	51 f1       	breq	.+84     	; 0x25c <GPIO_pin_write+0x74>
 208:	83 36       	cpi	r24, 0x63	; 99
 20a:	20 f4       	brcc	.+8      	; 0x214 <GPIO_pin_write+0x2c>
 20c:	81 36       	cpi	r24, 0x61	; 97
 20e:	09 f0       	breq	.+2      	; 0x212 <GPIO_pin_write+0x2a>
 210:	7b c0       	rjmp	.+246    	; 0x308 <GPIO_pin_write+0x120>
 212:	07 c0       	rjmp	.+14     	; 0x222 <GPIO_pin_write+0x3a>
 214:	83 36       	cpi	r24, 0x63	; 99
 216:	09 f4       	brne	.+2      	; 0x21a <GPIO_pin_write+0x32>
 218:	3e c0       	rjmp	.+124    	; 0x296 <GPIO_pin_write+0xae>
 21a:	84 36       	cpi	r24, 0x64	; 100
 21c:	09 f0       	breq	.+2      	; 0x220 <GPIO_pin_write+0x38>
 21e:	74 c0       	rjmp	.+232    	; 0x308 <GPIO_pin_write+0x120>
 220:	57 c0       	rjmp	.+174    	; 0x2d0 <GPIO_pin_write+0xe8>
    {
        case 'A':
        case 'a':
            if(1 == DATA)
 222:	41 30       	cpi	r20, 0x01	; 1
 224:	69 f4       	brne	.+26     	; 0x240 <GPIO_pin_write+0x58>
            {
                SET_BIT(PORTA, BIT); //set output value of this pin in port A to 1
 226:	2b b3       	in	r18, 0x1b	; 27
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	ac 01       	movw	r20, r24
 22e:	02 c0       	rjmp	.+4      	; 0x234 <GPIO_pin_write+0x4c>
 230:	44 0f       	add	r20, r20
 232:	55 1f       	adc	r21, r21
 234:	6a 95       	dec	r22
 236:	e2 f7       	brpl	.-8      	; 0x230 <GPIO_pin_write+0x48>
 238:	ba 01       	movw	r22, r20
 23a:	62 2b       	or	r22, r18
 23c:	6b bb       	out	0x1b, r22	; 27
 23e:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTA, BIT); //set output value of this pin in port A to 0
 240:	2b b3       	in	r18, 0x1b	; 27
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	ac 01       	movw	r20, r24
 248:	02 c0       	rjmp	.+4      	; 0x24e <GPIO_pin_write+0x66>
 24a:	44 0f       	add	r20, r20
 24c:	55 1f       	adc	r21, r21
 24e:	6a 95       	dec	r22
 250:	e2 f7       	brpl	.-8      	; 0x24a <GPIO_pin_write+0x62>
 252:	ba 01       	movw	r22, r20
 254:	60 95       	com	r22
 256:	62 23       	and	r22, r18
 258:	6b bb       	out	0x1b, r22	; 27
 25a:	08 95       	ret
            }
        break;
        case 'B':
        case 'b':
            if(1 == DATA)
 25c:	41 30       	cpi	r20, 0x01	; 1
 25e:	69 f4       	brne	.+26     	; 0x27a <GPIO_pin_write+0x92>
            {
                SET_BIT(PORTB, BIT); //set output value of this pin in port B to 1
 260:	28 b3       	in	r18, 0x18	; 24
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	ac 01       	movw	r20, r24
 268:	02 c0       	rjmp	.+4      	; 0x26e <GPIO_pin_write+0x86>
 26a:	44 0f       	add	r20, r20
 26c:	55 1f       	adc	r21, r21
 26e:	6a 95       	dec	r22
 270:	e2 f7       	brpl	.-8      	; 0x26a <GPIO_pin_write+0x82>
 272:	ba 01       	movw	r22, r20
 274:	62 2b       	or	r22, r18
 276:	68 bb       	out	0x18, r22	; 24
 278:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTB, BIT); //set output value of this pin in port B to 0
 27a:	28 b3       	in	r18, 0x18	; 24
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	ac 01       	movw	r20, r24
 282:	02 c0       	rjmp	.+4      	; 0x288 <GPIO_pin_write+0xa0>
 284:	44 0f       	add	r20, r20
 286:	55 1f       	adc	r21, r21
 288:	6a 95       	dec	r22
 28a:	e2 f7       	brpl	.-8      	; 0x284 <GPIO_pin_write+0x9c>
 28c:	ba 01       	movw	r22, r20
 28e:	60 95       	com	r22
 290:	62 23       	and	r22, r18
 292:	68 bb       	out	0x18, r22	; 24
 294:	08 95       	ret
            }
        break;
        case 'C':
        case 'c':
            if(1 == DATA)
 296:	41 30       	cpi	r20, 0x01	; 1
 298:	69 f4       	brne	.+26     	; 0x2b4 <GPIO_pin_write+0xcc>
            {
                SET_BIT(PORTC, BIT); //set output value of this pin in port C to 1
 29a:	25 b3       	in	r18, 0x15	; 21
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	ac 01       	movw	r20, r24
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <GPIO_pin_write+0xc0>
 2a4:	44 0f       	add	r20, r20
 2a6:	55 1f       	adc	r21, r21
 2a8:	6a 95       	dec	r22
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <GPIO_pin_write+0xbc>
 2ac:	ba 01       	movw	r22, r20
 2ae:	62 2b       	or	r22, r18
 2b0:	65 bb       	out	0x15, r22	; 21
 2b2:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTC, BIT); //set output value of this pin in port C to 0
 2b4:	25 b3       	in	r18, 0x15	; 21
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	ac 01       	movw	r20, r24
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <GPIO_pin_write+0xda>
 2be:	44 0f       	add	r20, r20
 2c0:	55 1f       	adc	r21, r21
 2c2:	6a 95       	dec	r22
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <GPIO_pin_write+0xd6>
 2c6:	ba 01       	movw	r22, r20
 2c8:	60 95       	com	r22
 2ca:	62 23       	and	r22, r18
 2cc:	65 bb       	out	0x15, r22	; 21
 2ce:	08 95       	ret
            }
        break;
        case 'D':
        case 'd':
            if(1 == DATA)
 2d0:	41 30       	cpi	r20, 0x01	; 1
 2d2:	69 f4       	brne	.+26     	; 0x2ee <GPIO_pin_write+0x106>
            {
                SET_BIT(PORTD, BIT); //set output value of this pin in port C to 1
 2d4:	22 b3       	in	r18, 0x12	; 18
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	ac 01       	movw	r20, r24
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <GPIO_pin_write+0xfa>
 2de:	44 0f       	add	r20, r20
 2e0:	55 1f       	adc	r21, r21
 2e2:	6a 95       	dec	r22
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <GPIO_pin_write+0xf6>
 2e6:	ba 01       	movw	r22, r20
 2e8:	62 2b       	or	r22, r18
 2ea:	62 bb       	out	0x12, r22	; 18
 2ec:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTD, BIT); //set output value of this pin in port C to 0
 2ee:	22 b3       	in	r18, 0x12	; 18
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	ac 01       	movw	r20, r24
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <GPIO_pin_write+0x114>
 2f8:	44 0f       	add	r20, r20
 2fa:	55 1f       	adc	r21, r21
 2fc:	6a 95       	dec	r22
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <GPIO_pin_write+0x110>
 300:	ba 01       	movw	r22, r20
 302:	60 95       	com	r22
 304:	62 23       	and	r22, r18
 306:	62 bb       	out	0x12, r22	; 18
 308:	08 95       	ret

0000030a <GPIO_pin_read>:


uint8 GPIO_pin_read(char PORT, uint8 BIT)
{
    uint8 read_value = 0;
    switch(PORT)
 30a:	84 34       	cpi	r24, 0x44	; 68
 30c:	99 f1       	breq	.+102    	; 0x374 <GPIO_pin_read+0x6a>
 30e:	85 34       	cpi	r24, 0x45	; 69
 310:	38 f4       	brcc	.+14     	; 0x320 <GPIO_pin_read+0x16>
 312:	82 34       	cpi	r24, 0x42	; 66
 314:	d9 f0       	breq	.+54     	; 0x34c <GPIO_pin_read+0x42>
 316:	83 34       	cpi	r24, 0x43	; 67
 318:	18 f5       	brcc	.+70     	; 0x360 <GPIO_pin_read+0x56>
 31a:	81 34       	cpi	r24, 0x41	; 65
 31c:	a9 f5       	brne	.+106    	; 0x388 <GPIO_pin_read+0x7e>
 31e:	0c c0       	rjmp	.+24     	; 0x338 <GPIO_pin_read+0x2e>
 320:	82 36       	cpi	r24, 0x62	; 98
 322:	a1 f0       	breq	.+40     	; 0x34c <GPIO_pin_read+0x42>
 324:	83 36       	cpi	r24, 0x63	; 99
 326:	18 f4       	brcc	.+6      	; 0x32e <GPIO_pin_read+0x24>
 328:	81 36       	cpi	r24, 0x61	; 97
 32a:	71 f5       	brne	.+92     	; 0x388 <GPIO_pin_read+0x7e>
 32c:	05 c0       	rjmp	.+10     	; 0x338 <GPIO_pin_read+0x2e>
 32e:	83 36       	cpi	r24, 0x63	; 99
 330:	b9 f0       	breq	.+46     	; 0x360 <GPIO_pin_read+0x56>
 332:	84 36       	cpi	r24, 0x64	; 100
 334:	49 f5       	brne	.+82     	; 0x388 <GPIO_pin_read+0x7e>
 336:	1e c0       	rjmp	.+60     	; 0x374 <GPIO_pin_read+0x6a>
    {
        case 'A':
        case 'a':
            read_value = READ_BIT(PINA, BIT); //read value of given pin in port A
 338:	29 b3       	in	r18, 0x19	; 25
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	c9 01       	movw	r24, r18
 33e:	02 c0       	rjmp	.+4      	; 0x344 <GPIO_pin_read+0x3a>
 340:	95 95       	asr	r25
 342:	87 95       	ror	r24
 344:	6a 95       	dec	r22
 346:	e2 f7       	brpl	.-8      	; 0x340 <GPIO_pin_read+0x36>
 348:	81 70       	andi	r24, 0x01	; 1
        break;
 34a:	08 95       	ret
        case 'B':
        case 'b':
            read_value = READ_BIT(PINB, BIT); //read value of given pin in port B
 34c:	26 b3       	in	r18, 0x16	; 22
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	c9 01       	movw	r24, r18
 352:	02 c0       	rjmp	.+4      	; 0x358 <GPIO_pin_read+0x4e>
 354:	95 95       	asr	r25
 356:	87 95       	ror	r24
 358:	6a 95       	dec	r22
 35a:	e2 f7       	brpl	.-8      	; 0x354 <GPIO_pin_read+0x4a>
 35c:	81 70       	andi	r24, 0x01	; 1
        break;
 35e:	08 95       	ret
        case 'C':
        case 'c':
            read_value = READ_BIT(PINC, BIT); //read value of given pin in port C
 360:	23 b3       	in	r18, 0x13	; 19
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	c9 01       	movw	r24, r18
 366:	02 c0       	rjmp	.+4      	; 0x36c <GPIO_pin_read+0x62>
 368:	95 95       	asr	r25
 36a:	87 95       	ror	r24
 36c:	6a 95       	dec	r22
 36e:	e2 f7       	brpl	.-8      	; 0x368 <GPIO_pin_read+0x5e>
 370:	81 70       	andi	r24, 0x01	; 1
        break;
 372:	08 95       	ret
        case 'D':
        case 'd':
            read_value = READ_BIT(PIND, BIT); //read value of given pin in port D
 374:	20 b3       	in	r18, 0x10	; 16
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	c9 01       	movw	r24, r18
 37a:	02 c0       	rjmp	.+4      	; 0x380 <GPIO_pin_read+0x76>
 37c:	95 95       	asr	r25
 37e:	87 95       	ror	r24
 380:	6a 95       	dec	r22
 382:	e2 f7       	brpl	.-8      	; 0x37c <GPIO_pin_read+0x72>
 384:	81 70       	andi	r24, 0x01	; 1
        break;
 386:	08 95       	ret
} // end of GPIO_pin_write();


uint8 GPIO_pin_read(char PORT, uint8 BIT)
{
    uint8 read_value = 0;
 388:	80 e0       	ldi	r24, 0x00	; 0
        break;
        default:
        break;
    } //end of switch(PORT);
    return read_value;
} // end of GPIO_pin_read();
 38a:	08 95       	ret

0000038c <GPIO_pin_toggle>:


void GPIO_pin_toggle(char PORT, uint8 BIT)
{
    switch(PORT)
 38c:	84 34       	cpi	r24, 0x44	; 68
 38e:	09 f4       	brne	.+2      	; 0x392 <GPIO_pin_toggle+0x6>
 390:	3d c0       	rjmp	.+122    	; 0x40c <GPIO_pin_toggle+0x80>
 392:	85 34       	cpi	r24, 0x45	; 69
 394:	40 f4       	brcc	.+16     	; 0x3a6 <GPIO_pin_toggle+0x1a>
 396:	82 34       	cpi	r24, 0x42	; 66
 398:	f9 f0       	breq	.+62     	; 0x3d8 <GPIO_pin_toggle+0x4c>
 39a:	83 34       	cpi	r24, 0x43	; 67
 39c:	50 f5       	brcc	.+84     	; 0x3f2 <GPIO_pin_toggle+0x66>
 39e:	81 34       	cpi	r24, 0x41	; 65
 3a0:	09 f0       	breq	.+2      	; 0x3a4 <GPIO_pin_toggle+0x18>
 3a2:	40 c0       	rjmp	.+128    	; 0x424 <GPIO_pin_toggle+0x98>
 3a4:	0c c0       	rjmp	.+24     	; 0x3be <GPIO_pin_toggle+0x32>
 3a6:	82 36       	cpi	r24, 0x62	; 98
 3a8:	b9 f0       	breq	.+46     	; 0x3d8 <GPIO_pin_toggle+0x4c>
 3aa:	83 36       	cpi	r24, 0x63	; 99
 3ac:	18 f4       	brcc	.+6      	; 0x3b4 <GPIO_pin_toggle+0x28>
 3ae:	81 36       	cpi	r24, 0x61	; 97
 3b0:	c9 f5       	brne	.+114    	; 0x424 <GPIO_pin_toggle+0x98>
 3b2:	05 c0       	rjmp	.+10     	; 0x3be <GPIO_pin_toggle+0x32>
 3b4:	83 36       	cpi	r24, 0x63	; 99
 3b6:	e9 f0       	breq	.+58     	; 0x3f2 <GPIO_pin_toggle+0x66>
 3b8:	84 36       	cpi	r24, 0x64	; 100
 3ba:	a1 f5       	brne	.+104    	; 0x424 <GPIO_pin_toggle+0x98>
 3bc:	27 c0       	rjmp	.+78     	; 0x40c <GPIO_pin_toggle+0x80>
    {
        case 'A':
        case 'a':
            TOG_BIT(PORTA, BIT); //toggle value of given pin in port A
 3be:	2b b3       	in	r18, 0x1b	; 27
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	ac 01       	movw	r20, r24
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <GPIO_pin_toggle+0x40>
 3c8:	44 0f       	add	r20, r20
 3ca:	55 1f       	adc	r21, r21
 3cc:	6a 95       	dec	r22
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <GPIO_pin_toggle+0x3c>
 3d0:	ba 01       	movw	r22, r20
 3d2:	62 27       	eor	r22, r18
 3d4:	6b bb       	out	0x1b, r22	; 27
        break;
 3d6:	08 95       	ret
        case 'B':
        case 'b':
            TOG_BIT(PORTB, BIT); //toggle value of given pin in port B
 3d8:	28 b3       	in	r18, 0x18	; 24
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	ac 01       	movw	r20, r24
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <GPIO_pin_toggle+0x5a>
 3e2:	44 0f       	add	r20, r20
 3e4:	55 1f       	adc	r21, r21
 3e6:	6a 95       	dec	r22
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <GPIO_pin_toggle+0x56>
 3ea:	ba 01       	movw	r22, r20
 3ec:	62 27       	eor	r22, r18
 3ee:	68 bb       	out	0x18, r22	; 24
        break;
 3f0:	08 95       	ret
        case 'C':
        case 'c':
            TOG_BIT(PORTC, BIT); //toggle value of given pin in port C
 3f2:	25 b3       	in	r18, 0x15	; 21
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	ac 01       	movw	r20, r24
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <GPIO_pin_toggle+0x74>
 3fc:	44 0f       	add	r20, r20
 3fe:	55 1f       	adc	r21, r21
 400:	6a 95       	dec	r22
 402:	e2 f7       	brpl	.-8      	; 0x3fc <GPIO_pin_toggle+0x70>
 404:	ba 01       	movw	r22, r20
 406:	62 27       	eor	r22, r18
 408:	65 bb       	out	0x15, r22	; 21
        break;
 40a:	08 95       	ret
        case 'D':
        case 'd':
            TOG_BIT(PORTD, BIT); //toggle value of given pin in port D
 40c:	22 b3       	in	r18, 0x12	; 18
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	ac 01       	movw	r20, r24
 414:	02 c0       	rjmp	.+4      	; 0x41a <GPIO_pin_toggle+0x8e>
 416:	44 0f       	add	r20, r20
 418:	55 1f       	adc	r21, r21
 41a:	6a 95       	dec	r22
 41c:	e2 f7       	brpl	.-8      	; 0x416 <GPIO_pin_toggle+0x8a>
 41e:	ba 01       	movw	r22, r20
 420:	62 27       	eor	r22, r18
 422:	62 bb       	out	0x12, r22	; 18
 424:	08 95       	ret

00000426 <GPIO_port_direction>:
} // end of GPIO_pin_toggle();


void GPIO_port_direction(char PORT, uint8 DIR)
{
    switch(PORT)
 426:	84 34       	cpi	r24, 0x44	; 68
 428:	d9 f0       	breq	.+54     	; 0x460 <GPIO_port_direction+0x3a>
 42a:	85 34       	cpi	r24, 0x45	; 69
 42c:	38 f4       	brcc	.+14     	; 0x43c <GPIO_port_direction+0x16>
 42e:	82 34       	cpi	r24, 0x42	; 66
 430:	99 f0       	breq	.+38     	; 0x458 <GPIO_port_direction+0x32>
 432:	83 34       	cpi	r24, 0x43	; 67
 434:	98 f4       	brcc	.+38     	; 0x45c <GPIO_port_direction+0x36>
 436:	81 34       	cpi	r24, 0x41	; 65
 438:	a1 f4       	brne	.+40     	; 0x462 <GPIO_port_direction+0x3c>
 43a:	0c c0       	rjmp	.+24     	; 0x454 <GPIO_port_direction+0x2e>
 43c:	82 36       	cpi	r24, 0x62	; 98
 43e:	61 f0       	breq	.+24     	; 0x458 <GPIO_port_direction+0x32>
 440:	83 36       	cpi	r24, 0x63	; 99
 442:	18 f4       	brcc	.+6      	; 0x44a <GPIO_port_direction+0x24>
 444:	81 36       	cpi	r24, 0x61	; 97
 446:	69 f4       	brne	.+26     	; 0x462 <GPIO_port_direction+0x3c>
 448:	05 c0       	rjmp	.+10     	; 0x454 <GPIO_port_direction+0x2e>
 44a:	83 36       	cpi	r24, 0x63	; 99
 44c:	39 f0       	breq	.+14     	; 0x45c <GPIO_port_direction+0x36>
 44e:	84 36       	cpi	r24, 0x64	; 100
 450:	41 f4       	brne	.+16     	; 0x462 <GPIO_port_direction+0x3c>
 452:	06 c0       	rjmp	.+12     	; 0x460 <GPIO_port_direction+0x3a>
    {
        case 'A':
        case 'a':
            DDRA = DIR; // set direction of port A to the given DIR
 454:	6a bb       	out	0x1a, r22	; 26
        break;
 456:	08 95       	ret
        case 'B':
        case 'b':
            DDRB = DIR; // set direction of port B to the given DIR
 458:	67 bb       	out	0x17, r22	; 23
        break;
 45a:	08 95       	ret
        case 'C':
        case 'c':
            DDRC = DIR; // set direction of port C to the given DIR
 45c:	64 bb       	out	0x14, r22	; 20
        break;
 45e:	08 95       	ret
        case 'D':
        case 'd':
            DDRD = DIR; // set direction of port D to the given DIR
 460:	61 bb       	out	0x11, r22	; 17
 462:	08 95       	ret

00000464 <GPIO_port_write>:
} // end of GPIO_port_direction();


void GPIO_port_write(char PORT, uint8 DATA)
{
    switch(PORT)
 464:	84 34       	cpi	r24, 0x44	; 68
 466:	d9 f0       	breq	.+54     	; 0x49e <GPIO_port_write+0x3a>
 468:	85 34       	cpi	r24, 0x45	; 69
 46a:	38 f4       	brcc	.+14     	; 0x47a <GPIO_port_write+0x16>
 46c:	82 34       	cpi	r24, 0x42	; 66
 46e:	99 f0       	breq	.+38     	; 0x496 <GPIO_port_write+0x32>
 470:	83 34       	cpi	r24, 0x43	; 67
 472:	98 f4       	brcc	.+38     	; 0x49a <GPIO_port_write+0x36>
 474:	81 34       	cpi	r24, 0x41	; 65
 476:	a1 f4       	brne	.+40     	; 0x4a0 <GPIO_port_write+0x3c>
 478:	0c c0       	rjmp	.+24     	; 0x492 <GPIO_port_write+0x2e>
 47a:	82 36       	cpi	r24, 0x62	; 98
 47c:	61 f0       	breq	.+24     	; 0x496 <GPIO_port_write+0x32>
 47e:	83 36       	cpi	r24, 0x63	; 99
 480:	18 f4       	brcc	.+6      	; 0x488 <GPIO_port_write+0x24>
 482:	81 36       	cpi	r24, 0x61	; 97
 484:	69 f4       	brne	.+26     	; 0x4a0 <GPIO_port_write+0x3c>
 486:	05 c0       	rjmp	.+10     	; 0x492 <GPIO_port_write+0x2e>
 488:	83 36       	cpi	r24, 0x63	; 99
 48a:	39 f0       	breq	.+14     	; 0x49a <GPIO_port_write+0x36>
 48c:	84 36       	cpi	r24, 0x64	; 100
 48e:	41 f4       	brne	.+16     	; 0x4a0 <GPIO_port_write+0x3c>
 490:	06 c0       	rjmp	.+12     	; 0x49e <GPIO_port_write+0x3a>
    {
        case 'A':
        case 'a':
            PORTA = DATA; // write these data on port A
 492:	6b bb       	out	0x1b, r22	; 27
        break;
 494:	08 95       	ret
        case 'B':
        case 'b':
            PORTB = DATA; // write these data on port B
 496:	68 bb       	out	0x18, r22	; 24
        break;
 498:	08 95       	ret
        case 'C':
        case 'c':
            PORTC = DATA; // write these data on port C
 49a:	65 bb       	out	0x15, r22	; 21
        break;
 49c:	08 95       	ret
        case 'D':
        case 'd':
            PORTD = DATA; // write these data on port D
 49e:	62 bb       	out	0x12, r22	; 18
 4a0:	08 95       	ret

000004a2 <GPIO_port_read>:


uint8 GPIO_port_read(char PORT)
{
    uint8 read_port = 0;
    switch(PORT)
 4a2:	84 34       	cpi	r24, 0x44	; 68
 4a4:	d9 f0       	breq	.+54     	; 0x4dc <GPIO_port_read+0x3a>
 4a6:	85 34       	cpi	r24, 0x45	; 69
 4a8:	38 f4       	brcc	.+14     	; 0x4b8 <GPIO_port_read+0x16>
 4aa:	82 34       	cpi	r24, 0x42	; 66
 4ac:	99 f0       	breq	.+38     	; 0x4d4 <GPIO_port_read+0x32>
 4ae:	83 34       	cpi	r24, 0x43	; 67
 4b0:	98 f4       	brcc	.+38     	; 0x4d8 <GPIO_port_read+0x36>
 4b2:	81 34       	cpi	r24, 0x41	; 65
 4b4:	a9 f4       	brne	.+42     	; 0x4e0 <GPIO_port_read+0x3e>
 4b6:	0c c0       	rjmp	.+24     	; 0x4d0 <GPIO_port_read+0x2e>
 4b8:	82 36       	cpi	r24, 0x62	; 98
 4ba:	61 f0       	breq	.+24     	; 0x4d4 <GPIO_port_read+0x32>
 4bc:	83 36       	cpi	r24, 0x63	; 99
 4be:	18 f4       	brcc	.+6      	; 0x4c6 <GPIO_port_read+0x24>
 4c0:	81 36       	cpi	r24, 0x61	; 97
 4c2:	71 f4       	brne	.+28     	; 0x4e0 <GPIO_port_read+0x3e>
 4c4:	05 c0       	rjmp	.+10     	; 0x4d0 <GPIO_port_read+0x2e>
 4c6:	83 36       	cpi	r24, 0x63	; 99
 4c8:	39 f0       	breq	.+14     	; 0x4d8 <GPIO_port_read+0x36>
 4ca:	84 36       	cpi	r24, 0x64	; 100
 4cc:	49 f4       	brne	.+18     	; 0x4e0 <GPIO_port_read+0x3e>
 4ce:	06 c0       	rjmp	.+12     	; 0x4dc <GPIO_port_read+0x3a>
    {
        case 'A':
        case 'a':
            read_port = PINA; // read data from port A
 4d0:	89 b3       	in	r24, 0x19	; 25
        break;
 4d2:	08 95       	ret
        case 'B':
        case 'b':
            read_port = PINB; // read data from port B
 4d4:	86 b3       	in	r24, 0x16	; 22
        break;
 4d6:	08 95       	ret
        case 'C':
        case 'c':
            read_port = PINC; // read data from port C
 4d8:	83 b3       	in	r24, 0x13	; 19
        break;
 4da:	08 95       	ret
        case 'D':
        case 'd':
            read_port = PIND; // read data from port D
 4dc:	80 b3       	in	r24, 0x10	; 16
        break;
 4de:	08 95       	ret
} // end of GPIO_port_write();


uint8 GPIO_port_read(char PORT)
{
    uint8 read_port = 0;
 4e0:	80 e0       	ldi	r24, 0x00	; 0
        break;
        default:
        break;
    } // end of switch(PORT);
    return read_port;
} // end of GPIO_port_read();
 4e2:	08 95       	ret

000004e4 <GPIO_pin_pull_up>:


void GPIO_pin_pull_up(char port_name, uint8 pin_number)
{
    switch(port_name)
 4e4:	84 34       	cpi	r24, 0x44	; 68
 4e6:	09 f4       	brne	.+2      	; 0x4ea <GPIO_pin_pull_up+0x6>
 4e8:	57 c0       	rjmp	.+174    	; 0x598 <GPIO_pin_pull_up+0xb4>
 4ea:	85 34       	cpi	r24, 0x45	; 69
 4ec:	40 f4       	brcc	.+16     	; 0x4fe <GPIO_pin_pull_up+0x1a>
 4ee:	82 34       	cpi	r24, 0x42	; 66
 4f0:	49 f1       	breq	.+82     	; 0x544 <GPIO_pin_pull_up+0x60>
 4f2:	83 34       	cpi	r24, 0x43	; 67
 4f4:	e0 f5       	brcc	.+120    	; 0x56e <GPIO_pin_pull_up+0x8a>
 4f6:	81 34       	cpi	r24, 0x41	; 65
 4f8:	09 f0       	breq	.+2      	; 0x4fc <GPIO_pin_pull_up+0x18>
 4fa:	62 c0       	rjmp	.+196    	; 0x5c0 <GPIO_pin_pull_up+0xdc>
 4fc:	0e c0       	rjmp	.+28     	; 0x51a <GPIO_pin_pull_up+0x36>
 4fe:	82 36       	cpi	r24, 0x62	; 98
 500:	09 f1       	breq	.+66     	; 0x544 <GPIO_pin_pull_up+0x60>
 502:	83 36       	cpi	r24, 0x63	; 99
 504:	20 f4       	brcc	.+8      	; 0x50e <GPIO_pin_pull_up+0x2a>
 506:	81 36       	cpi	r24, 0x61	; 97
 508:	09 f0       	breq	.+2      	; 0x50c <GPIO_pin_pull_up+0x28>
 50a:	5a c0       	rjmp	.+180    	; 0x5c0 <GPIO_pin_pull_up+0xdc>
 50c:	06 c0       	rjmp	.+12     	; 0x51a <GPIO_pin_pull_up+0x36>
 50e:	83 36       	cpi	r24, 0x63	; 99
 510:	71 f1       	breq	.+92     	; 0x56e <GPIO_pin_pull_up+0x8a>
 512:	84 36       	cpi	r24, 0x64	; 100
 514:	09 f0       	breq	.+2      	; 0x518 <GPIO_pin_pull_up+0x34>
 516:	54 c0       	rjmp	.+168    	; 0x5c0 <GPIO_pin_pull_up+0xdc>
 518:	3f c0       	rjmp	.+126    	; 0x598 <GPIO_pin_pull_up+0xb4>
    {
        case 'A':
        case 'a':
            CLR_BIT(DDRA,pin_number); //set pin_number of port_name as input
 51a:	2a b3       	in	r18, 0x1a	; 26
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	ac 01       	movw	r20, r24
 522:	02 c0       	rjmp	.+4      	; 0x528 <GPIO_pin_pull_up+0x44>
 524:	44 0f       	add	r20, r20
 526:	55 1f       	adc	r21, r21
 528:	6a 95       	dec	r22
 52a:	e2 f7       	brpl	.-8      	; 0x524 <GPIO_pin_pull_up+0x40>
 52c:	ba 01       	movw	r22, r20
 52e:	84 2f       	mov	r24, r20
 530:	80 95       	com	r24
 532:	82 23       	and	r24, r18
 534:	8a bb       	out	0x1a, r24	; 26
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 536:	80 b7       	in	r24, 0x30	; 48
 538:	8b 7f       	andi	r24, 0xFB	; 251
 53a:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTA,pin_number); //set pin_number of port_name as high value
 53c:	8b b3       	in	r24, 0x1b	; 27
 53e:	68 2b       	or	r22, r24
 540:	6b bb       	out	0x1b, r22	; 27
        break;
 542:	08 95       	ret
        case 'B':
        case 'b':
            CLR_BIT(DDRB,pin_number); //set pin_number of port_name as input
 544:	27 b3       	in	r18, 0x17	; 23
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	ac 01       	movw	r20, r24
 54c:	02 c0       	rjmp	.+4      	; 0x552 <GPIO_pin_pull_up+0x6e>
 54e:	44 0f       	add	r20, r20
 550:	55 1f       	adc	r21, r21
 552:	6a 95       	dec	r22
 554:	e2 f7       	brpl	.-8      	; 0x54e <GPIO_pin_pull_up+0x6a>
 556:	ba 01       	movw	r22, r20
 558:	84 2f       	mov	r24, r20
 55a:	80 95       	com	r24
 55c:	82 23       	and	r24, r18
 55e:	87 bb       	out	0x17, r24	; 23
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 560:	80 b7       	in	r24, 0x30	; 48
 562:	8b 7f       	andi	r24, 0xFB	; 251
 564:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTB,pin_number); //set pin_number of port_name as high value
 566:	88 b3       	in	r24, 0x18	; 24
 568:	68 2b       	or	r22, r24
 56a:	68 bb       	out	0x18, r22	; 24
        break;
 56c:	08 95       	ret
        case 'C':
        case 'c':
            CLR_BIT(DDRC,pin_number); //set pin_number of port_name as input
 56e:	24 b3       	in	r18, 0x14	; 20
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	ac 01       	movw	r20, r24
 576:	02 c0       	rjmp	.+4      	; 0x57c <GPIO_pin_pull_up+0x98>
 578:	44 0f       	add	r20, r20
 57a:	55 1f       	adc	r21, r21
 57c:	6a 95       	dec	r22
 57e:	e2 f7       	brpl	.-8      	; 0x578 <GPIO_pin_pull_up+0x94>
 580:	ba 01       	movw	r22, r20
 582:	84 2f       	mov	r24, r20
 584:	80 95       	com	r24
 586:	82 23       	and	r24, r18
 588:	84 bb       	out	0x14, r24	; 20
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 58a:	80 b7       	in	r24, 0x30	; 48
 58c:	8b 7f       	andi	r24, 0xFB	; 251
 58e:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTC,pin_number); //set pin_number of port_name as high value
 590:	85 b3       	in	r24, 0x15	; 21
 592:	68 2b       	or	r22, r24
 594:	65 bb       	out	0x15, r22	; 21
        break;
 596:	08 95       	ret
        case 'D':
        case 'd':
            CLR_BIT(DDRD,pin_number); //set pin_number of port_name as input
 598:	21 b3       	in	r18, 0x11	; 17
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	ac 01       	movw	r20, r24
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <GPIO_pin_pull_up+0xc2>
 5a2:	44 0f       	add	r20, r20
 5a4:	55 1f       	adc	r21, r21
 5a6:	6a 95       	dec	r22
 5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <GPIO_pin_pull_up+0xbe>
 5aa:	ba 01       	movw	r22, r20
 5ac:	84 2f       	mov	r24, r20
 5ae:	80 95       	com	r24
 5b0:	82 23       	and	r24, r18
 5b2:	81 bb       	out	0x11, r24	; 17
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 5b4:	80 b7       	in	r24, 0x30	; 48
 5b6:	8b 7f       	andi	r24, 0xFB	; 251
 5b8:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTD,pin_number); //set pin_number of port_name as high value
 5ba:	82 b3       	in	r24, 0x12	; 18
 5bc:	68 2b       	or	r22, r24
 5be:	62 bb       	out	0x12, r22	; 18
 5c0:	08 95       	ret

000005c2 <GPIO_port_write_high_nibble>:



void GPIO_port_write_high_nibble(char port_name, uint8 high_nibble)
{
    high_nibble <<= 4; //clear low_nibble bits in number
 5c2:	62 95       	swap	r22
 5c4:	60 7f       	andi	r22, 0xF0	; 240
    switch(port_name)
 5c6:	84 34       	cpi	r24, 0x44	; 68
 5c8:	51 f1       	breq	.+84     	; 0x61e <GPIO_port_write_high_nibble+0x5c>
 5ca:	85 34       	cpi	r24, 0x45	; 69
 5cc:	38 f4       	brcc	.+14     	; 0x5dc <GPIO_port_write_high_nibble+0x1a>
 5ce:	82 34       	cpi	r24, 0x42	; 66
 5d0:	c1 f0       	breq	.+48     	; 0x602 <GPIO_port_write_high_nibble+0x40>
 5d2:	83 34       	cpi	r24, 0x43	; 67
 5d4:	e8 f4       	brcc	.+58     	; 0x610 <GPIO_port_write_high_nibble+0x4e>
 5d6:	81 34       	cpi	r24, 0x41	; 65
 5d8:	41 f5       	brne	.+80     	; 0x62a <GPIO_port_write_high_nibble+0x68>
 5da:	0c c0       	rjmp	.+24     	; 0x5f4 <GPIO_port_write_high_nibble+0x32>
 5dc:	82 36       	cpi	r24, 0x62	; 98
 5de:	89 f0       	breq	.+34     	; 0x602 <GPIO_port_write_high_nibble+0x40>
 5e0:	83 36       	cpi	r24, 0x63	; 99
 5e2:	18 f4       	brcc	.+6      	; 0x5ea <GPIO_port_write_high_nibble+0x28>
 5e4:	81 36       	cpi	r24, 0x61	; 97
 5e6:	09 f5       	brne	.+66     	; 0x62a <GPIO_port_write_high_nibble+0x68>
 5e8:	05 c0       	rjmp	.+10     	; 0x5f4 <GPIO_port_write_high_nibble+0x32>
 5ea:	83 36       	cpi	r24, 0x63	; 99
 5ec:	89 f0       	breq	.+34     	; 0x610 <GPIO_port_write_high_nibble+0x4e>
 5ee:	84 36       	cpi	r24, 0x64	; 100
 5f0:	e1 f4       	brne	.+56     	; 0x62a <GPIO_port_write_high_nibble+0x68>
 5f2:	15 c0       	rjmp	.+42     	; 0x61e <GPIO_port_write_high_nibble+0x5c>
    {
        case 'A':
        case 'a':
            PORTA &= 0x0f;
 5f4:	8b b3       	in	r24, 0x1b	; 27
 5f6:	8f 70       	andi	r24, 0x0F	; 15
 5f8:	8b bb       	out	0x1b, r24	; 27
            PORTA |= high_nibble;
 5fa:	8b b3       	in	r24, 0x1b	; 27
 5fc:	68 2b       	or	r22, r24
 5fe:	6b bb       	out	0x1b, r22	; 27
        break;
 600:	08 95       	ret
        case 'B':
        case 'b':
            PORTB &= 0x0f;
 602:	88 b3       	in	r24, 0x18	; 24
 604:	8f 70       	andi	r24, 0x0F	; 15
 606:	88 bb       	out	0x18, r24	; 24
            PORTB |= high_nibble;
 608:	88 b3       	in	r24, 0x18	; 24
 60a:	68 2b       	or	r22, r24
 60c:	68 bb       	out	0x18, r22	; 24
        break;
 60e:	08 95       	ret
        case 'C':
        case 'c':
            PORTC &= 0x0f;
 610:	85 b3       	in	r24, 0x15	; 21
 612:	8f 70       	andi	r24, 0x0F	; 15
 614:	85 bb       	out	0x15, r24	; 21
            PORTC |= high_nibble;
 616:	85 b3       	in	r24, 0x15	; 21
 618:	68 2b       	or	r22, r24
 61a:	65 bb       	out	0x15, r22	; 21
        break;
 61c:	08 95       	ret
        case 'D':
        case 'd':
            PORTD &= 0x0f;
 61e:	82 b3       	in	r24, 0x12	; 18
 620:	8f 70       	andi	r24, 0x0F	; 15
 622:	82 bb       	out	0x12, r24	; 18
            PORTD |= high_nibble;
 624:	82 b3       	in	r24, 0x12	; 18
 626:	68 2b       	or	r22, r24
 628:	62 bb       	out	0x12, r22	; 18
 62a:	08 95       	ret

0000062c <GPIO_port_write_low_nibble>:
    } // end of switch(port_name);
}

void GPIO_port_write_low_nibble(char port_name, uint8 low_nibble)
{
    low_nibble &= 0x0f; //clear high_nibble bits in number
 62c:	6f 70       	andi	r22, 0x0F	; 15
    switch(port_name)
 62e:	84 34       	cpi	r24, 0x44	; 68
 630:	51 f1       	breq	.+84     	; 0x686 <GPIO_port_write_low_nibble+0x5a>
 632:	85 34       	cpi	r24, 0x45	; 69
 634:	38 f4       	brcc	.+14     	; 0x644 <GPIO_port_write_low_nibble+0x18>
 636:	82 34       	cpi	r24, 0x42	; 66
 638:	c1 f0       	breq	.+48     	; 0x66a <GPIO_port_write_low_nibble+0x3e>
 63a:	83 34       	cpi	r24, 0x43	; 67
 63c:	e8 f4       	brcc	.+58     	; 0x678 <GPIO_port_write_low_nibble+0x4c>
 63e:	81 34       	cpi	r24, 0x41	; 65
 640:	41 f5       	brne	.+80     	; 0x692 <GPIO_port_write_low_nibble+0x66>
 642:	0c c0       	rjmp	.+24     	; 0x65c <GPIO_port_write_low_nibble+0x30>
 644:	82 36       	cpi	r24, 0x62	; 98
 646:	89 f0       	breq	.+34     	; 0x66a <GPIO_port_write_low_nibble+0x3e>
 648:	83 36       	cpi	r24, 0x63	; 99
 64a:	18 f4       	brcc	.+6      	; 0x652 <GPIO_port_write_low_nibble+0x26>
 64c:	81 36       	cpi	r24, 0x61	; 97
 64e:	09 f5       	brne	.+66     	; 0x692 <GPIO_port_write_low_nibble+0x66>
 650:	05 c0       	rjmp	.+10     	; 0x65c <GPIO_port_write_low_nibble+0x30>
 652:	83 36       	cpi	r24, 0x63	; 99
 654:	89 f0       	breq	.+34     	; 0x678 <GPIO_port_write_low_nibble+0x4c>
 656:	84 36       	cpi	r24, 0x64	; 100
 658:	e1 f4       	brne	.+56     	; 0x692 <GPIO_port_write_low_nibble+0x66>
 65a:	15 c0       	rjmp	.+42     	; 0x686 <GPIO_port_write_low_nibble+0x5a>
    {
        case 'A':
        case 'a':
            PORTA &= 0xf0;
 65c:	8b b3       	in	r24, 0x1b	; 27
 65e:	80 7f       	andi	r24, 0xF0	; 240
 660:	8b bb       	out	0x1b, r24	; 27
            PORTA |= low_nibble;
 662:	8b b3       	in	r24, 0x1b	; 27
 664:	68 2b       	or	r22, r24
 666:	6b bb       	out	0x1b, r22	; 27
        break;
 668:	08 95       	ret
        case 'B':
        case 'b':
            PORTB &= 0xf0;
 66a:	88 b3       	in	r24, 0x18	; 24
 66c:	80 7f       	andi	r24, 0xF0	; 240
 66e:	88 bb       	out	0x18, r24	; 24
            PORTB |= low_nibble;
 670:	88 b3       	in	r24, 0x18	; 24
 672:	68 2b       	or	r22, r24
 674:	68 bb       	out	0x18, r22	; 24
        break;
 676:	08 95       	ret
        case 'C':
        case 'c':
            PORTC &= 0xf0;
 678:	85 b3       	in	r24, 0x15	; 21
 67a:	80 7f       	andi	r24, 0xF0	; 240
 67c:	85 bb       	out	0x15, r24	; 21
            PORTC |= low_nibble;
 67e:	85 b3       	in	r24, 0x15	; 21
 680:	68 2b       	or	r22, r24
 682:	65 bb       	out	0x15, r22	; 21
        break;
 684:	08 95       	ret
        case 'D':
        case 'd':
            PORTD &= 0xf0;
 686:	82 b3       	in	r24, 0x12	; 18
 688:	80 7f       	andi	r24, 0xF0	; 240
 68a:	82 bb       	out	0x12, r24	; 18
            PORTD |= low_nibble;
 68c:	82 b3       	in	r24, 0x12	; 18
 68e:	68 2b       	or	r22, r24
 690:	62 bb       	out	0x12, r22	; 18
 692:	08 95       	ret

00000694 <LCD_send_pulse>:

#include "LCD.h"

static void LCD_send_pulse(void)
{
	GPIO_pin_write(EN_PORT,EN,1);
 694:	82 e4       	ldi	r24, 0x42	; 66
 696:	60 e0       	ldi	r22, 0x00	; 0
 698:	41 e0       	ldi	r20, 0x01	; 1
 69a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_pin_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 69e:	8f e9       	ldi	r24, 0x9F	; 159
 6a0:	9f e0       	ldi	r25, 0x0F	; 15
 6a2:	01 97       	sbiw	r24, 0x01	; 1
 6a4:	f1 f7       	brne	.-4      	; 0x6a2 <LCD_send_pulse+0xe>
 6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <LCD_send_pulse+0x14>
 6a8:	00 00       	nop
	_delay_ms(2);
	GPIO_pin_write(EN_PORT,EN,0);
 6aa:	82 e4       	ldi	r24, 0x42	; 66
 6ac:	60 e0       	ldi	r22, 0x00	; 0
 6ae:	40 e0       	ldi	r20, 0x00	; 0
 6b0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_pin_write>
 6b4:	8f ec       	ldi	r24, 0xCF	; 207
 6b6:	97 e0       	ldi	r25, 0x07	; 7
 6b8:	01 97       	sbiw	r24, 0x01	; 1
 6ba:	f1 f7       	brne	.-4      	; 0x6b8 <LCD_send_pulse+0x24>
 6bc:	00 c0       	rjmp	.+0      	; 0x6be <LCD_send_pulse+0x2a>
 6be:	00 00       	nop
	_delay_ms(1);	
}
 6c0:	08 95       	ret

000006c2 <LCD_send_command>:


void LCD_send_command(uint8 command)
{
 6c2:	68 2f       	mov	r22, r24
	GPIO_pin_write(RS_PORT,RS,0); //select command register
	LCD_send_pulse();
	
	#elif defined eight_bits_mode
	
	GPIO_port_write(LCD_PORT,command);
 6c4:	81 e4       	ldi	r24, 0x41	; 65
 6c6:	0e 94 32 02 	call	0x464	; 0x464 <GPIO_port_write>
	GPIO_pin_write(RS_PORT,RS,0);
 6ca:	82 e4       	ldi	r24, 0x42	; 66
 6cc:	61 e0       	ldi	r22, 0x01	; 1
 6ce:	40 e0       	ldi	r20, 0x00	; 0
 6d0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_pin_write>
	LCD_send_pulse();
 6d4:	0e 94 4a 03 	call	0x694	; 0x694 <LCD_send_pulse>
	
	#endif
}
 6d8:	08 95       	ret

000006da <LCD_clear_screen>:



void LCD_clear_screen(void)
{
	LCD_send_command(CLEAR_SCREEN);
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	0e 94 61 03 	call	0x6c2	; 0x6c2 <LCD_send_command>
 6e0:	8f e9       	ldi	r24, 0x9F	; 159
 6e2:	9f e0       	ldi	r25, 0x0F	; 15
 6e4:	01 97       	sbiw	r24, 0x01	; 1
 6e6:	f1 f7       	brne	.-4      	; 0x6e4 <LCD_clear_screen+0xa>
 6e8:	00 c0       	rjmp	.+0      	; 0x6ea <LCD_clear_screen+0x10>
 6ea:	00 00       	nop
	_delay_ms(2);
}
 6ec:	08 95       	ret

000006ee <LCD_return_home>:

void LCD_return_home(void)
{
	LCD_send_command(RETURN_HOME);
 6ee:	82 e0       	ldi	r24, 0x02	; 2
 6f0:	0e 94 61 03 	call	0x6c2	; 0x6c2 <LCD_send_command>
 6f4:	8f e9       	ldi	r24, 0x9F	; 159
 6f6:	9f e0       	ldi	r25, 0x0F	; 15
 6f8:	01 97       	sbiw	r24, 0x01	; 1
 6fa:	f1 f7       	brne	.-4      	; 0x6f8 <LCD_return_home+0xa>
 6fc:	00 c0       	rjmp	.+0      	; 0x6fe <LCD_return_home+0x10>
 6fe:	00 00       	nop
	_delay_ms(2);
}
 700:	08 95       	ret

00000702 <LCD_init>:
 702:	8f ef       	ldi	r24, 0xFF	; 255
 704:	99 ef       	ldi	r25, 0xF9	; 249
 706:	a0 e0       	ldi	r26, 0x00	; 0
 708:	81 50       	subi	r24, 0x01	; 1
 70a:	90 40       	sbci	r25, 0x00	; 0
 70c:	a0 40       	sbci	r26, 0x00	; 0
 70e:	e1 f7       	brne	.-8      	; 0x708 <LCD_init+0x6>
 710:	00 c0       	rjmp	.+0      	; 0x712 <LCD_init+0x10>
 712:	00 00       	nop
	GPIO_pin_direction(RS_PORT,RS,1);//set RS pin to output pin
	//send command to inti LCD:
	LCD_send_command(FOUR_BITS);
	#elif defined eight_bits_mode
	//set connection pins:
	GPIO_port_direction(LCD_PORT,1);
 714:	81 e4       	ldi	r24, 0x41	; 65
 716:	61 e0       	ldi	r22, 0x01	; 1
 718:	0e 94 13 02 	call	0x426	; 0x426 <GPIO_port_direction>
	GPIO_pin_direction(EN_PORT,EN,1);//set EN pin to output pin
 71c:	82 e4       	ldi	r24, 0x42	; 66
 71e:	60 e0       	ldi	r22, 0x00	; 0
 720:	41 e0       	ldi	r20, 0x01	; 1
 722:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_pin_direction>
	GPIO_pin_direction(RS_PORT,RS,1);//set RS pin to output pin
 726:	82 e4       	ldi	r24, 0x42	; 66
 728:	61 e0       	ldi	r22, 0x01	; 1
 72a:	41 e0       	ldi	r20, 0x01	; 1
 72c:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_pin_direction>
	//send command to init LCD:
	LCD_send_command(EIGHT_BITS);
 730:	88 e3       	ldi	r24, 0x38	; 56
 732:	0e 94 61 03 	call	0x6c2	; 0x6c2 <LCD_send_command>
	#endif
	LCD_return_home();
 736:	0e 94 77 03 	call	0x6ee	; 0x6ee <LCD_return_home>
	LCD_send_command(DISPLAY_ON_CURSOR_OFF);
 73a:	8c e0       	ldi	r24, 0x0C	; 12
 73c:	0e 94 61 03 	call	0x6c2	; 0x6c2 <LCD_send_command>
	LCD_clear_screen();
 740:	0e 94 6d 03 	call	0x6da	; 0x6da <LCD_clear_screen>
	LCD_send_command(ENGLISH_ENTRY);
 744:	86 e0       	ldi	r24, 0x06	; 6
 746:	0e 94 61 03 	call	0x6c2	; 0x6c2 <LCD_send_command>
}
 74a:	08 95       	ret

0000074c <LCD_send_character>:
	LCD_send_command(RETURN_HOME);
	_delay_ms(2);
}

void LCD_send_character(char character)
{
 74c:	cf 93       	push	r28
 74e:	c8 2f       	mov	r28, r24
	GPIO_port_write_low_nibble(LCD_PORT,character);
	LCD_send_pulse();
	
	#elif defined eight_bits_mode
	
	GPIO_pin_write(RS_PORT,RS,1);
 750:	82 e4       	ldi	r24, 0x42	; 66
 752:	61 e0       	ldi	r22, 0x01	; 1
 754:	41 e0       	ldi	r20, 0x01	; 1
 756:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_pin_write>
	GPIO_port_write(LCD_PORT,character);
 75a:	81 e4       	ldi	r24, 0x41	; 65
 75c:	6c 2f       	mov	r22, r28
 75e:	0e 94 32 02 	call	0x464	; 0x464 <GPIO_port_write>
	LCD_send_pulse();
 762:	0e 94 4a 03 	call	0x694	; 0x694 <LCD_send_pulse>
	
	#endif
	
}
 766:	cf 91       	pop	r28
 768:	08 95       	ret

0000076a <LCD_send_string>:

void LCD_send_string(char* character)
{
 76a:	cf 93       	push	r28
 76c:	df 93       	push	r29
 76e:	ec 01       	movw	r28, r24
	while ('\0' != *character)
 770:	88 81       	ld	r24, Y
 772:	88 23       	and	r24, r24
 774:	31 f0       	breq	.+12     	; 0x782 <LCD_send_string+0x18>
	
	#endif
	
}

void LCD_send_string(char* character)
 776:	21 96       	adiw	r28, 0x01	; 1
{
	while ('\0' != *character)
	{
		LCD_send_character(*character);
 778:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_send_character>
	
}

void LCD_send_string(char* character)
{
	while ('\0' != *character)
 77c:	89 91       	ld	r24, Y+
 77e:	88 23       	and	r24, r24
 780:	d9 f7       	brne	.-10     	; 0x778 <LCD_send_string+0xe>
	{
		LCD_send_character(*character);
		character += 1;
	}
}
 782:	df 91       	pop	r29
 784:	cf 91       	pop	r28
 786:	08 95       	ret

00000788 <LCD_move_cursor>:
void LCD_move_cursor(uint8 row, uint8 column)
{
	uint8 r = 0;
	uint8 c = 0;
	
	if( (row>0) && (row<5) && (column>0) && (column<21) )
 788:	98 2f       	mov	r25, r24
 78a:	91 50       	subi	r25, 0x01	; 1
 78c:	94 30       	cpi	r25, 0x04	; 4
 78e:	b0 f4       	brcc	.+44     	; 0x7bc <LCD_move_cursor+0x34>
 790:	66 23       	and	r22, r22
 792:	b1 f0       	breq	.+44     	; 0x7c0 <LCD_move_cursor+0x38>
 794:	65 31       	cpi	r22, 0x15	; 21
 796:	b0 f4       	brcc	.+44     	; 0x7c4 <LCD_move_cursor+0x3c>
	{
		if (1 == row)
 798:	81 30       	cpi	r24, 0x01	; 1
 79a:	19 f4       	brne	.+6      	; 0x7a2 <LCD_move_cursor+0x1a>
		{
			c = (0x80 + column - 1);
 79c:	86 2f       	mov	r24, r22
 79e:	81 58       	subi	r24, 0x81	; 129
 7a0:	12 c0       	rjmp	.+36     	; 0x7c6 <LCD_move_cursor+0x3e>
		}
		else if (2 == row)
 7a2:	82 30       	cpi	r24, 0x02	; 2
 7a4:	19 f4       	brne	.+6      	; 0x7ac <LCD_move_cursor+0x24>
		{
			c = (0xC0 + column - 1);
 7a6:	86 2f       	mov	r24, r22
 7a8:	81 54       	subi	r24, 0x41	; 65
 7aa:	0d c0       	rjmp	.+26     	; 0x7c6 <LCD_move_cursor+0x3e>
		}
		else if (3 == row)
 7ac:	83 30       	cpi	r24, 0x03	; 3
 7ae:	19 f4       	brne	.+6      	; 0x7b6 <LCD_move_cursor+0x2e>
		{
			c = (0x90 + column - 1);
 7b0:	86 2f       	mov	r24, r22
 7b2:	81 57       	subi	r24, 0x71	; 113
 7b4:	08 c0       	rjmp	.+16     	; 0x7c6 <LCD_move_cursor+0x3e>
		}
		else
		{
			c = (0xD0 + column - 1);
 7b6:	86 2f       	mov	r24, r22
 7b8:	81 53       	subi	r24, 0x31	; 49
 7ba:	05 c0       	rjmp	.+10     	; 0x7c6 <LCD_move_cursor+0x3e>
		}
	}
	else
	{
		c = 0x80;
 7bc:	80 e8       	ldi	r24, 0x80	; 128
 7be:	03 c0       	rjmp	.+6      	; 0x7c6 <LCD_move_cursor+0x3e>
 7c0:	80 e8       	ldi	r24, 0x80	; 128
 7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <LCD_move_cursor+0x3e>
 7c4:	80 e8       	ldi	r24, 0x80	; 128
	}
	LCD_send_command(c);
 7c6:	0e 94 61 03 	call	0x6c2	; 0x6c2 <LCD_send_command>
 7ca:	08 95       	ret

000007cc <USART_init>:
#if defined USART_asynchronous_mode

void USART_init(void)
{
	/*enable TX and RX for USART*/
	UCSRB |= (1 << TXEN) | (1 << RXEN);
 7cc:	8a b1       	in	r24, 0x0a	; 10
 7ce:	88 61       	ori	r24, 0x18	; 24
 7d0:	8a b9       	out	0x0a, r24	; 10
	/*configure 8-bits character size*/
	UCSRC |= (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
 7d2:	80 b5       	in	r24, 0x20	; 32
 7d4:	86 68       	ori	r24, 0x86	; 134
 7d6:	80 bd       	out	0x20, r24	; 32
	/*set baud rate of USART*/
	UBRRL = (char)BAUD_PRESCALE;
 7d8:	83 e3       	ldi	r24, 0x33	; 51
 7da:	89 b9       	out	0x09, r24	; 9
	UBRRH = (char)(BAUD_PRESCALE >> 8);
 7dc:	10 bc       	out	0x20, r1	; 32
}
 7de:	08 95       	ret

000007e0 <USART_send_char>:


void USART_send_char(char character)
{
	/*wait until UDR (data buffer register) be empty*/
	while (!READ_BIT(UCSRA,UDRE))
 7e0:	9b b1       	in	r25, 0x0b	; 11
 7e2:	95 ff       	sbrs	r25, 5
 7e4:	fd cf       	rjmp	.-6      	; 0x7e0 <USART_send_char>
	{
		//wait until empty buffer becomes 1;
	}
	/*now write your data to UDR register*/
	UDR = character;
 7e6:	8c b9       	out	0x0c, r24	; 12
}
 7e8:	08 95       	ret

000007ea <USART_send_string>:


void USART_send_string(char* string)
{
 7ea:	cf 93       	push	r28
 7ec:	df 93       	push	r29
 7ee:	ec 01       	movw	r28, r24
	/*call USART_send_char, until you reach end of string*/
	while (*string != '\0')
 7f0:	88 81       	ld	r24, Y
 7f2:	88 23       	and	r24, r24
 7f4:	31 f0       	breq	.+12     	; 0x802 <USART_send_string+0x18>
	/*now write your data to UDR register*/
	UDR = character;
}


void USART_send_string(char* string)
 7f6:	21 96       	adiw	r28, 0x01	; 1
{
	/*call USART_send_char, until you reach end of string*/
	while (*string != '\0')
	{
		USART_send_char(*string);
 7f8:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <USART_send_char>


void USART_send_string(char* string)
{
	/*call USART_send_char, until you reach end of string*/
	while (*string != '\0')
 7fc:	89 91       	ld	r24, Y+
 7fe:	88 23       	and	r24, r24
 800:	d9 f7       	brne	.-10     	; 0x7f8 <USART_send_string+0xe>
	{
		USART_send_char(*string);
		++string;
	}
}
 802:	df 91       	pop	r29
 804:	cf 91       	pop	r28
 806:	08 95       	ret

00000808 <USART_receive_char>:


char USART_receive_char(void)
{
	char data;
	while(!READ_BIT(UCSRA,RXC))
 808:	5f 9b       	sbis	0x0b, 7	; 11
 80a:	fe cf       	rjmp	.-4      	; 0x808 <USART_receive_char>
	{
		//wait until RXC becomes one;
	}
	/*read 8-bit data from UDR register*/
	data = UDR;
 80c:	8c b1       	in	r24, 0x0c	; 12
	return data;
}
 80e:	08 95       	ret

00000810 <_exit>:
 810:	f8 94       	cli

00000812 <__stop_program>:
 812:	ff cf       	rjmp	.-2      	; 0x812 <__stop_program>
