
24-Toggle_3-LEDs_one_two_three_sec.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000744  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000744  000007d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  000007d8  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000007d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00000f30  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008de  00000000  00000000  00001010  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000275  00000000  00000000  000018ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004cd  00000000  00000000  00001b63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00002030  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002b2  00000000  00000000  000021b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000659  00000000  00000000  00002462  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 76 00 	jmp	0xec	; 0xec <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e4       	ldi	r30, 0x44	; 68
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 36       	cpi	r26, 0x63	; 99
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 a0 03 	jmp	0x740	; 0x740 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
volatile uint8 counter2;
volatile uint8 counter3;

int main(void)
{
	LED_init('A',3);
  92:	81 e4       	ldi	r24, 0x41	; 65
  94:	63 e0       	ldi	r22, 0x03	; 3
  96:	0e 94 78 03 	call	0x6f0	; 0x6f0 <LED_init>
	LED_init('A',4);
  9a:	81 e4       	ldi	r24, 0x41	; 65
  9c:	64 e0       	ldi	r22, 0x04	; 4
  9e:	0e 94 78 03 	call	0x6f0	; 0x6f0 <LED_init>
	LED_init('A',5);
  a2:	81 e4       	ldi	r24, 0x41	; 65
  a4:	65 e0       	ldi	r22, 0x05	; 5
  a6:	0e 94 78 03 	call	0x6f0	; 0x6f0 <LED_init>
	timer0_ctc_init();
  aa:	0e 94 8a 03 	call	0x714	; 0x714 <timer0_ctc_init>

    while(1)
    {
        if (counter1 >= 31)
  ae:	80 91 61 00 	lds	r24, 0x0061
  b2:	8f 31       	cpi	r24, 0x1F	; 31
  b4:	30 f0       	brcs	.+12     	; 0xc2 <main+0x30>
        {
			LED_toggle('A',3);
  b6:	81 e4       	ldi	r24, 0x41	; 65
  b8:	63 e0       	ldi	r22, 0x03	; 3
  ba:	0e 94 84 03 	call	0x708	; 0x708 <LED_toggle>
			counter1 = 0;
  be:	10 92 61 00 	sts	0x0061, r1
        }
		if (counter2 >= 62)
  c2:	80 91 62 00 	lds	r24, 0x0062
  c6:	8e 33       	cpi	r24, 0x3E	; 62
  c8:	30 f0       	brcs	.+12     	; 0xd6 <main+0x44>
		{
			LED_toggle('A',4);
  ca:	81 e4       	ldi	r24, 0x41	; 65
  cc:	64 e0       	ldi	r22, 0x04	; 4
  ce:	0e 94 84 03 	call	0x708	; 0x708 <LED_toggle>
			counter2 = 0;
  d2:	10 92 62 00 	sts	0x0062, r1
		}
		if (counter3 >= 93)
  d6:	80 91 60 00 	lds	r24, 0x0060
  da:	8d 35       	cpi	r24, 0x5D	; 93
  dc:	40 f3       	brcs	.-48     	; 0xae <main+0x1c>
		{
			LED_toggle('A',5);
  de:	81 e4       	ldi	r24, 0x41	; 65
  e0:	65 e0       	ldi	r22, 0x05	; 5
  e2:	0e 94 84 03 	call	0x708	; 0x708 <LED_toggle>
			counter3 = 0;
  e6:	10 92 60 00 	sts	0x0060, r1
  ea:	e1 cf       	rjmp	.-62     	; 0xae <main+0x1c>

000000ec <__vector_10>:
		}
    }
}

ISR(TIMER0_COMP_vect)
{
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	8f 93       	push	r24
	counter1++;
  f8:	80 91 61 00 	lds	r24, 0x0061
  fc:	8f 5f       	subi	r24, 0xFF	; 255
  fe:	80 93 61 00 	sts	0x0061, r24
	counter2++;
 102:	80 91 62 00 	lds	r24, 0x0062
 106:	8f 5f       	subi	r24, 0xFF	; 255
 108:	80 93 62 00 	sts	0x0062, r24
	counter3++;
 10c:	80 91 60 00 	lds	r24, 0x0060
 110:	8f 5f       	subi	r24, 0xFF	; 255
 112:	80 93 60 00 	sts	0x0060, r24
 116:	8f 91       	pop	r24
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <GPIO_pin_direction>:
#include "Atmega_GPIO.h"

void GPIO_pin_direction(char PORT, uint8 BIT, uint8 DIR)
{
    switch(PORT)
 122:	84 34       	cpi	r24, 0x44	; 68
 124:	09 f4       	brne	.+2      	; 0x128 <GPIO_pin_direction+0x6>
 126:	71 c0       	rjmp	.+226    	; 0x20a <GPIO_pin_direction+0xe8>
 128:	85 34       	cpi	r24, 0x45	; 69
 12a:	48 f4       	brcc	.+18     	; 0x13e <GPIO_pin_direction+0x1c>
 12c:	82 34       	cpi	r24, 0x42	; 66
 12e:	99 f1       	breq	.+102    	; 0x196 <GPIO_pin_direction+0x74>
 130:	83 34       	cpi	r24, 0x43	; 67
 132:	08 f0       	brcs	.+2      	; 0x136 <GPIO_pin_direction+0x14>
 134:	4d c0       	rjmp	.+154    	; 0x1d0 <GPIO_pin_direction+0xae>
 136:	81 34       	cpi	r24, 0x41	; 65
 138:	09 f0       	breq	.+2      	; 0x13c <GPIO_pin_direction+0x1a>
 13a:	83 c0       	rjmp	.+262    	; 0x242 <GPIO_pin_direction+0x120>
 13c:	0f c0       	rjmp	.+30     	; 0x15c <GPIO_pin_direction+0x3a>
 13e:	82 36       	cpi	r24, 0x62	; 98
 140:	51 f1       	breq	.+84     	; 0x196 <GPIO_pin_direction+0x74>
 142:	83 36       	cpi	r24, 0x63	; 99
 144:	20 f4       	brcc	.+8      	; 0x14e <GPIO_pin_direction+0x2c>
 146:	81 36       	cpi	r24, 0x61	; 97
 148:	09 f0       	breq	.+2      	; 0x14c <GPIO_pin_direction+0x2a>
 14a:	7b c0       	rjmp	.+246    	; 0x242 <GPIO_pin_direction+0x120>
 14c:	07 c0       	rjmp	.+14     	; 0x15c <GPIO_pin_direction+0x3a>
 14e:	83 36       	cpi	r24, 0x63	; 99
 150:	09 f4       	brne	.+2      	; 0x154 <GPIO_pin_direction+0x32>
 152:	3e c0       	rjmp	.+124    	; 0x1d0 <GPIO_pin_direction+0xae>
 154:	84 36       	cpi	r24, 0x64	; 100
 156:	09 f0       	breq	.+2      	; 0x15a <GPIO_pin_direction+0x38>
 158:	74 c0       	rjmp	.+232    	; 0x242 <GPIO_pin_direction+0x120>
 15a:	57 c0       	rjmp	.+174    	; 0x20a <GPIO_pin_direction+0xe8>
    {
        case 'A':
        case 'a':
            if(1 == DIR)
 15c:	41 30       	cpi	r20, 0x01	; 1
 15e:	69 f4       	brne	.+26     	; 0x17a <GPIO_pin_direction+0x58>
            {
                SET_BIT(DDRA, BIT); //set direction of this pin in port A as output
 160:	2a b3       	in	r18, 0x1a	; 26
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	ac 01       	movw	r20, r24
 168:	02 c0       	rjmp	.+4      	; 0x16e <GPIO_pin_direction+0x4c>
 16a:	44 0f       	add	r20, r20
 16c:	55 1f       	adc	r21, r21
 16e:	6a 95       	dec	r22
 170:	e2 f7       	brpl	.-8      	; 0x16a <GPIO_pin_direction+0x48>
 172:	ba 01       	movw	r22, r20
 174:	62 2b       	or	r22, r18
 176:	6a bb       	out	0x1a, r22	; 26
 178:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRA, BIT); //set direction of this pin in port A as input
 17a:	2a b3       	in	r18, 0x1a	; 26
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	ac 01       	movw	r20, r24
 182:	02 c0       	rjmp	.+4      	; 0x188 <GPIO_pin_direction+0x66>
 184:	44 0f       	add	r20, r20
 186:	55 1f       	adc	r21, r21
 188:	6a 95       	dec	r22
 18a:	e2 f7       	brpl	.-8      	; 0x184 <GPIO_pin_direction+0x62>
 18c:	ba 01       	movw	r22, r20
 18e:	60 95       	com	r22
 190:	62 23       	and	r22, r18
 192:	6a bb       	out	0x1a, r22	; 26
 194:	08 95       	ret
            }
        break;
        case 'B':
        case 'b':
            if(1 == DIR)
 196:	41 30       	cpi	r20, 0x01	; 1
 198:	69 f4       	brne	.+26     	; 0x1b4 <GPIO_pin_direction+0x92>
            {
                SET_BIT(DDRB, BIT); //set direction of this pin in port B as output
 19a:	27 b3       	in	r18, 0x17	; 23
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	ac 01       	movw	r20, r24
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <GPIO_pin_direction+0x86>
 1a4:	44 0f       	add	r20, r20
 1a6:	55 1f       	adc	r21, r21
 1a8:	6a 95       	dec	r22
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <GPIO_pin_direction+0x82>
 1ac:	ba 01       	movw	r22, r20
 1ae:	62 2b       	or	r22, r18
 1b0:	67 bb       	out	0x17, r22	; 23
 1b2:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRB, BIT); //set direction of this pin in port B as input
 1b4:	27 b3       	in	r18, 0x17	; 23
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	ac 01       	movw	r20, r24
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <GPIO_pin_direction+0xa0>
 1be:	44 0f       	add	r20, r20
 1c0:	55 1f       	adc	r21, r21
 1c2:	6a 95       	dec	r22
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <GPIO_pin_direction+0x9c>
 1c6:	ba 01       	movw	r22, r20
 1c8:	60 95       	com	r22
 1ca:	62 23       	and	r22, r18
 1cc:	67 bb       	out	0x17, r22	; 23
 1ce:	08 95       	ret
            }
        break;
        case 'C':
        case 'c':
            if(1 == DIR)
 1d0:	41 30       	cpi	r20, 0x01	; 1
 1d2:	69 f4       	brne	.+26     	; 0x1ee <GPIO_pin_direction+0xcc>
            {
                SET_BIT(DDRC, BIT); //set direction of this pin in port B as output
 1d4:	24 b3       	in	r18, 0x14	; 20
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	ac 01       	movw	r20, r24
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <GPIO_pin_direction+0xc0>
 1de:	44 0f       	add	r20, r20
 1e0:	55 1f       	adc	r21, r21
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <GPIO_pin_direction+0xbc>
 1e6:	ba 01       	movw	r22, r20
 1e8:	62 2b       	or	r22, r18
 1ea:	64 bb       	out	0x14, r22	; 20
 1ec:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRC, BIT); //set direction of this pin in port B as input
 1ee:	24 b3       	in	r18, 0x14	; 20
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	ac 01       	movw	r20, r24
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <GPIO_pin_direction+0xda>
 1f8:	44 0f       	add	r20, r20
 1fa:	55 1f       	adc	r21, r21
 1fc:	6a 95       	dec	r22
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <GPIO_pin_direction+0xd6>
 200:	ba 01       	movw	r22, r20
 202:	60 95       	com	r22
 204:	62 23       	and	r22, r18
 206:	64 bb       	out	0x14, r22	; 20
 208:	08 95       	ret
            }
        break;
        case 'D':
        case 'd':
            if(1 == DIR)
 20a:	41 30       	cpi	r20, 0x01	; 1
 20c:	69 f4       	brne	.+26     	; 0x228 <GPIO_pin_direction+0x106>
            {
                SET_BIT(DDRD, BIT); //set direction of this pin in port C as output
 20e:	21 b3       	in	r18, 0x11	; 17
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	ac 01       	movw	r20, r24
 216:	02 c0       	rjmp	.+4      	; 0x21c <GPIO_pin_direction+0xfa>
 218:	44 0f       	add	r20, r20
 21a:	55 1f       	adc	r21, r21
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <GPIO_pin_direction+0xf6>
 220:	ba 01       	movw	r22, r20
 222:	62 2b       	or	r22, r18
 224:	61 bb       	out	0x11, r22	; 17
 226:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRD, BIT); //set direction of this pin in port C as input
 228:	21 b3       	in	r18, 0x11	; 17
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	ac 01       	movw	r20, r24
 230:	02 c0       	rjmp	.+4      	; 0x236 <GPIO_pin_direction+0x114>
 232:	44 0f       	add	r20, r20
 234:	55 1f       	adc	r21, r21
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <GPIO_pin_direction+0x110>
 23a:	ba 01       	movw	r22, r20
 23c:	60 95       	com	r22
 23e:	62 23       	and	r22, r18
 240:	61 bb       	out	0x11, r22	; 17
 242:	08 95       	ret

00000244 <GPIO_pin_write>:
} //end of  GPIO_pin_direction();


void GPIO_pin_write(char PORT, uint8 BIT, uint8 DATA)
{
    switch(PORT)
 244:	84 34       	cpi	r24, 0x44	; 68
 246:	09 f4       	brne	.+2      	; 0x24a <GPIO_pin_write+0x6>
 248:	71 c0       	rjmp	.+226    	; 0x32c <GPIO_pin_write+0xe8>
 24a:	85 34       	cpi	r24, 0x45	; 69
 24c:	48 f4       	brcc	.+18     	; 0x260 <GPIO_pin_write+0x1c>
 24e:	82 34       	cpi	r24, 0x42	; 66
 250:	99 f1       	breq	.+102    	; 0x2b8 <GPIO_pin_write+0x74>
 252:	83 34       	cpi	r24, 0x43	; 67
 254:	08 f0       	brcs	.+2      	; 0x258 <GPIO_pin_write+0x14>
 256:	4d c0       	rjmp	.+154    	; 0x2f2 <GPIO_pin_write+0xae>
 258:	81 34       	cpi	r24, 0x41	; 65
 25a:	09 f0       	breq	.+2      	; 0x25e <GPIO_pin_write+0x1a>
 25c:	83 c0       	rjmp	.+262    	; 0x364 <GPIO_pin_write+0x120>
 25e:	0f c0       	rjmp	.+30     	; 0x27e <GPIO_pin_write+0x3a>
 260:	82 36       	cpi	r24, 0x62	; 98
 262:	51 f1       	breq	.+84     	; 0x2b8 <GPIO_pin_write+0x74>
 264:	83 36       	cpi	r24, 0x63	; 99
 266:	20 f4       	brcc	.+8      	; 0x270 <GPIO_pin_write+0x2c>
 268:	81 36       	cpi	r24, 0x61	; 97
 26a:	09 f0       	breq	.+2      	; 0x26e <GPIO_pin_write+0x2a>
 26c:	7b c0       	rjmp	.+246    	; 0x364 <GPIO_pin_write+0x120>
 26e:	07 c0       	rjmp	.+14     	; 0x27e <GPIO_pin_write+0x3a>
 270:	83 36       	cpi	r24, 0x63	; 99
 272:	09 f4       	brne	.+2      	; 0x276 <GPIO_pin_write+0x32>
 274:	3e c0       	rjmp	.+124    	; 0x2f2 <GPIO_pin_write+0xae>
 276:	84 36       	cpi	r24, 0x64	; 100
 278:	09 f0       	breq	.+2      	; 0x27c <GPIO_pin_write+0x38>
 27a:	74 c0       	rjmp	.+232    	; 0x364 <GPIO_pin_write+0x120>
 27c:	57 c0       	rjmp	.+174    	; 0x32c <GPIO_pin_write+0xe8>
    {
        case 'A':
        case 'a':
            if(1 == DATA)
 27e:	41 30       	cpi	r20, 0x01	; 1
 280:	69 f4       	brne	.+26     	; 0x29c <GPIO_pin_write+0x58>
            {
                SET_BIT(PORTA, BIT); //set output value of this pin in port A to 1
 282:	2b b3       	in	r18, 0x1b	; 27
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	ac 01       	movw	r20, r24
 28a:	02 c0       	rjmp	.+4      	; 0x290 <GPIO_pin_write+0x4c>
 28c:	44 0f       	add	r20, r20
 28e:	55 1f       	adc	r21, r21
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <GPIO_pin_write+0x48>
 294:	ba 01       	movw	r22, r20
 296:	62 2b       	or	r22, r18
 298:	6b bb       	out	0x1b, r22	; 27
 29a:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTA, BIT); //set output value of this pin in port A to 0
 29c:	2b b3       	in	r18, 0x1b	; 27
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	ac 01       	movw	r20, r24
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <GPIO_pin_write+0x66>
 2a6:	44 0f       	add	r20, r20
 2a8:	55 1f       	adc	r21, r21
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <GPIO_pin_write+0x62>
 2ae:	ba 01       	movw	r22, r20
 2b0:	60 95       	com	r22
 2b2:	62 23       	and	r22, r18
 2b4:	6b bb       	out	0x1b, r22	; 27
 2b6:	08 95       	ret
            }
        break;
        case 'B':
        case 'b':
            if(1 == DATA)
 2b8:	41 30       	cpi	r20, 0x01	; 1
 2ba:	69 f4       	brne	.+26     	; 0x2d6 <GPIO_pin_write+0x92>
            {
                SET_BIT(PORTB, BIT); //set output value of this pin in port B to 1
 2bc:	28 b3       	in	r18, 0x18	; 24
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	ac 01       	movw	r20, r24
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <GPIO_pin_write+0x86>
 2c6:	44 0f       	add	r20, r20
 2c8:	55 1f       	adc	r21, r21
 2ca:	6a 95       	dec	r22
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <GPIO_pin_write+0x82>
 2ce:	ba 01       	movw	r22, r20
 2d0:	62 2b       	or	r22, r18
 2d2:	68 bb       	out	0x18, r22	; 24
 2d4:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTB, BIT); //set output value of this pin in port B to 0
 2d6:	28 b3       	in	r18, 0x18	; 24
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	ac 01       	movw	r20, r24
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <GPIO_pin_write+0xa0>
 2e0:	44 0f       	add	r20, r20
 2e2:	55 1f       	adc	r21, r21
 2e4:	6a 95       	dec	r22
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <GPIO_pin_write+0x9c>
 2e8:	ba 01       	movw	r22, r20
 2ea:	60 95       	com	r22
 2ec:	62 23       	and	r22, r18
 2ee:	68 bb       	out	0x18, r22	; 24
 2f0:	08 95       	ret
            }
        break;
        case 'C':
        case 'c':
            if(1 == DATA)
 2f2:	41 30       	cpi	r20, 0x01	; 1
 2f4:	69 f4       	brne	.+26     	; 0x310 <GPIO_pin_write+0xcc>
            {
                SET_BIT(PORTC, BIT); //set output value of this pin in port C to 1
 2f6:	25 b3       	in	r18, 0x15	; 21
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	ac 01       	movw	r20, r24
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <GPIO_pin_write+0xc0>
 300:	44 0f       	add	r20, r20
 302:	55 1f       	adc	r21, r21
 304:	6a 95       	dec	r22
 306:	e2 f7       	brpl	.-8      	; 0x300 <GPIO_pin_write+0xbc>
 308:	ba 01       	movw	r22, r20
 30a:	62 2b       	or	r22, r18
 30c:	65 bb       	out	0x15, r22	; 21
 30e:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTC, BIT); //set output value of this pin in port C to 0
 310:	25 b3       	in	r18, 0x15	; 21
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	ac 01       	movw	r20, r24
 318:	02 c0       	rjmp	.+4      	; 0x31e <GPIO_pin_write+0xda>
 31a:	44 0f       	add	r20, r20
 31c:	55 1f       	adc	r21, r21
 31e:	6a 95       	dec	r22
 320:	e2 f7       	brpl	.-8      	; 0x31a <GPIO_pin_write+0xd6>
 322:	ba 01       	movw	r22, r20
 324:	60 95       	com	r22
 326:	62 23       	and	r22, r18
 328:	65 bb       	out	0x15, r22	; 21
 32a:	08 95       	ret
            }
        break;
        case 'D':
        case 'd':
            if(1 == DATA)
 32c:	41 30       	cpi	r20, 0x01	; 1
 32e:	69 f4       	brne	.+26     	; 0x34a <GPIO_pin_write+0x106>
            {
                SET_BIT(PORTD, BIT); //set output value of this pin in port C to 1
 330:	22 b3       	in	r18, 0x12	; 18
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	ac 01       	movw	r20, r24
 338:	02 c0       	rjmp	.+4      	; 0x33e <GPIO_pin_write+0xfa>
 33a:	44 0f       	add	r20, r20
 33c:	55 1f       	adc	r21, r21
 33e:	6a 95       	dec	r22
 340:	e2 f7       	brpl	.-8      	; 0x33a <GPIO_pin_write+0xf6>
 342:	ba 01       	movw	r22, r20
 344:	62 2b       	or	r22, r18
 346:	62 bb       	out	0x12, r22	; 18
 348:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTD, BIT); //set output value of this pin in port C to 0
 34a:	22 b3       	in	r18, 0x12	; 18
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	ac 01       	movw	r20, r24
 352:	02 c0       	rjmp	.+4      	; 0x358 <GPIO_pin_write+0x114>
 354:	44 0f       	add	r20, r20
 356:	55 1f       	adc	r21, r21
 358:	6a 95       	dec	r22
 35a:	e2 f7       	brpl	.-8      	; 0x354 <GPIO_pin_write+0x110>
 35c:	ba 01       	movw	r22, r20
 35e:	60 95       	com	r22
 360:	62 23       	and	r22, r18
 362:	62 bb       	out	0x12, r22	; 18
 364:	08 95       	ret

00000366 <GPIO_pin_read>:


uint8 GPIO_pin_read(char PORT, uint8 BIT)
{
    uint8 read_value = 0;
    switch(PORT)
 366:	84 34       	cpi	r24, 0x44	; 68
 368:	99 f1       	breq	.+102    	; 0x3d0 <GPIO_pin_read+0x6a>
 36a:	85 34       	cpi	r24, 0x45	; 69
 36c:	38 f4       	brcc	.+14     	; 0x37c <GPIO_pin_read+0x16>
 36e:	82 34       	cpi	r24, 0x42	; 66
 370:	d9 f0       	breq	.+54     	; 0x3a8 <GPIO_pin_read+0x42>
 372:	83 34       	cpi	r24, 0x43	; 67
 374:	18 f5       	brcc	.+70     	; 0x3bc <GPIO_pin_read+0x56>
 376:	81 34       	cpi	r24, 0x41	; 65
 378:	a9 f5       	brne	.+106    	; 0x3e4 <GPIO_pin_read+0x7e>
 37a:	0c c0       	rjmp	.+24     	; 0x394 <GPIO_pin_read+0x2e>
 37c:	82 36       	cpi	r24, 0x62	; 98
 37e:	a1 f0       	breq	.+40     	; 0x3a8 <GPIO_pin_read+0x42>
 380:	83 36       	cpi	r24, 0x63	; 99
 382:	18 f4       	brcc	.+6      	; 0x38a <GPIO_pin_read+0x24>
 384:	81 36       	cpi	r24, 0x61	; 97
 386:	71 f5       	brne	.+92     	; 0x3e4 <GPIO_pin_read+0x7e>
 388:	05 c0       	rjmp	.+10     	; 0x394 <GPIO_pin_read+0x2e>
 38a:	83 36       	cpi	r24, 0x63	; 99
 38c:	b9 f0       	breq	.+46     	; 0x3bc <GPIO_pin_read+0x56>
 38e:	84 36       	cpi	r24, 0x64	; 100
 390:	49 f5       	brne	.+82     	; 0x3e4 <GPIO_pin_read+0x7e>
 392:	1e c0       	rjmp	.+60     	; 0x3d0 <GPIO_pin_read+0x6a>
    {
        case 'A':
        case 'a':
            read_value = READ_BIT(PINA, BIT); //read value of given pin in port A
 394:	29 b3       	in	r18, 0x19	; 25
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	c9 01       	movw	r24, r18
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <GPIO_pin_read+0x3a>
 39c:	95 95       	asr	r25
 39e:	87 95       	ror	r24
 3a0:	6a 95       	dec	r22
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <GPIO_pin_read+0x36>
 3a4:	81 70       	andi	r24, 0x01	; 1
        break;
 3a6:	08 95       	ret
        case 'B':
        case 'b':
            read_value = READ_BIT(PINB, BIT); //read value of given pin in port B
 3a8:	26 b3       	in	r18, 0x16	; 22
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	c9 01       	movw	r24, r18
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <GPIO_pin_read+0x4e>
 3b0:	95 95       	asr	r25
 3b2:	87 95       	ror	r24
 3b4:	6a 95       	dec	r22
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <GPIO_pin_read+0x4a>
 3b8:	81 70       	andi	r24, 0x01	; 1
        break;
 3ba:	08 95       	ret
        case 'C':
        case 'c':
            read_value = READ_BIT(PINC, BIT); //read value of given pin in port C
 3bc:	23 b3       	in	r18, 0x13	; 19
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	c9 01       	movw	r24, r18
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <GPIO_pin_read+0x62>
 3c4:	95 95       	asr	r25
 3c6:	87 95       	ror	r24
 3c8:	6a 95       	dec	r22
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <GPIO_pin_read+0x5e>
 3cc:	81 70       	andi	r24, 0x01	; 1
        break;
 3ce:	08 95       	ret
        case 'D':
        case 'd':
            read_value = READ_BIT(PIND, BIT); //read value of given pin in port D
 3d0:	20 b3       	in	r18, 0x10	; 16
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	c9 01       	movw	r24, r18
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <GPIO_pin_read+0x76>
 3d8:	95 95       	asr	r25
 3da:	87 95       	ror	r24
 3dc:	6a 95       	dec	r22
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <GPIO_pin_read+0x72>
 3e0:	81 70       	andi	r24, 0x01	; 1
        break;
 3e2:	08 95       	ret
} // end of GPIO_pin_write();


uint8 GPIO_pin_read(char PORT, uint8 BIT)
{
    uint8 read_value = 0;
 3e4:	80 e0       	ldi	r24, 0x00	; 0
        break;
        default:
        break;
    } //end of switch(PORT);
    return read_value;
} // end of GPIO_pin_read();
 3e6:	08 95       	ret

000003e8 <GPIO_pin_toggle>:


void GPIO_pin_toggle(char PORT, uint8 BIT)
{
    switch(PORT)
 3e8:	84 34       	cpi	r24, 0x44	; 68
 3ea:	09 f4       	brne	.+2      	; 0x3ee <GPIO_pin_toggle+0x6>
 3ec:	3d c0       	rjmp	.+122    	; 0x468 <GPIO_pin_toggle+0x80>
 3ee:	85 34       	cpi	r24, 0x45	; 69
 3f0:	40 f4       	brcc	.+16     	; 0x402 <GPIO_pin_toggle+0x1a>
 3f2:	82 34       	cpi	r24, 0x42	; 66
 3f4:	f9 f0       	breq	.+62     	; 0x434 <GPIO_pin_toggle+0x4c>
 3f6:	83 34       	cpi	r24, 0x43	; 67
 3f8:	50 f5       	brcc	.+84     	; 0x44e <GPIO_pin_toggle+0x66>
 3fa:	81 34       	cpi	r24, 0x41	; 65
 3fc:	09 f0       	breq	.+2      	; 0x400 <GPIO_pin_toggle+0x18>
 3fe:	40 c0       	rjmp	.+128    	; 0x480 <GPIO_pin_toggle+0x98>
 400:	0c c0       	rjmp	.+24     	; 0x41a <GPIO_pin_toggle+0x32>
 402:	82 36       	cpi	r24, 0x62	; 98
 404:	b9 f0       	breq	.+46     	; 0x434 <GPIO_pin_toggle+0x4c>
 406:	83 36       	cpi	r24, 0x63	; 99
 408:	18 f4       	brcc	.+6      	; 0x410 <GPIO_pin_toggle+0x28>
 40a:	81 36       	cpi	r24, 0x61	; 97
 40c:	c9 f5       	brne	.+114    	; 0x480 <GPIO_pin_toggle+0x98>
 40e:	05 c0       	rjmp	.+10     	; 0x41a <GPIO_pin_toggle+0x32>
 410:	83 36       	cpi	r24, 0x63	; 99
 412:	e9 f0       	breq	.+58     	; 0x44e <GPIO_pin_toggle+0x66>
 414:	84 36       	cpi	r24, 0x64	; 100
 416:	a1 f5       	brne	.+104    	; 0x480 <GPIO_pin_toggle+0x98>
 418:	27 c0       	rjmp	.+78     	; 0x468 <GPIO_pin_toggle+0x80>
    {
        case 'A':
        case 'a':
            TOG_BIT(PORTA, BIT); //toggle value of given pin in port A
 41a:	2b b3       	in	r18, 0x1b	; 27
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	ac 01       	movw	r20, r24
 422:	02 c0       	rjmp	.+4      	; 0x428 <GPIO_pin_toggle+0x40>
 424:	44 0f       	add	r20, r20
 426:	55 1f       	adc	r21, r21
 428:	6a 95       	dec	r22
 42a:	e2 f7       	brpl	.-8      	; 0x424 <GPIO_pin_toggle+0x3c>
 42c:	ba 01       	movw	r22, r20
 42e:	62 27       	eor	r22, r18
 430:	6b bb       	out	0x1b, r22	; 27
        break;
 432:	08 95       	ret
        case 'B':
        case 'b':
            TOG_BIT(PORTB, BIT); //toggle value of given pin in port B
 434:	28 b3       	in	r18, 0x18	; 24
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	ac 01       	movw	r20, r24
 43c:	02 c0       	rjmp	.+4      	; 0x442 <GPIO_pin_toggle+0x5a>
 43e:	44 0f       	add	r20, r20
 440:	55 1f       	adc	r21, r21
 442:	6a 95       	dec	r22
 444:	e2 f7       	brpl	.-8      	; 0x43e <GPIO_pin_toggle+0x56>
 446:	ba 01       	movw	r22, r20
 448:	62 27       	eor	r22, r18
 44a:	68 bb       	out	0x18, r22	; 24
        break;
 44c:	08 95       	ret
        case 'C':
        case 'c':
            TOG_BIT(PORTC, BIT); //toggle value of given pin in port C
 44e:	25 b3       	in	r18, 0x15	; 21
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	ac 01       	movw	r20, r24
 456:	02 c0       	rjmp	.+4      	; 0x45c <GPIO_pin_toggle+0x74>
 458:	44 0f       	add	r20, r20
 45a:	55 1f       	adc	r21, r21
 45c:	6a 95       	dec	r22
 45e:	e2 f7       	brpl	.-8      	; 0x458 <GPIO_pin_toggle+0x70>
 460:	ba 01       	movw	r22, r20
 462:	62 27       	eor	r22, r18
 464:	65 bb       	out	0x15, r22	; 21
        break;
 466:	08 95       	ret
        case 'D':
        case 'd':
            TOG_BIT(PORTD, BIT); //toggle value of given pin in port D
 468:	22 b3       	in	r18, 0x12	; 18
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	ac 01       	movw	r20, r24
 470:	02 c0       	rjmp	.+4      	; 0x476 <GPIO_pin_toggle+0x8e>
 472:	44 0f       	add	r20, r20
 474:	55 1f       	adc	r21, r21
 476:	6a 95       	dec	r22
 478:	e2 f7       	brpl	.-8      	; 0x472 <GPIO_pin_toggle+0x8a>
 47a:	ba 01       	movw	r22, r20
 47c:	62 27       	eor	r22, r18
 47e:	62 bb       	out	0x12, r22	; 18
 480:	08 95       	ret

00000482 <GPIO_port_direction>:
} // end of GPIO_pin_toggle();


void GPIO_port_direction(char PORT, uint8 DIR)
{
    switch(PORT)
 482:	84 34       	cpi	r24, 0x44	; 68
 484:	d9 f0       	breq	.+54     	; 0x4bc <GPIO_port_direction+0x3a>
 486:	85 34       	cpi	r24, 0x45	; 69
 488:	38 f4       	brcc	.+14     	; 0x498 <GPIO_port_direction+0x16>
 48a:	82 34       	cpi	r24, 0x42	; 66
 48c:	99 f0       	breq	.+38     	; 0x4b4 <GPIO_port_direction+0x32>
 48e:	83 34       	cpi	r24, 0x43	; 67
 490:	98 f4       	brcc	.+38     	; 0x4b8 <GPIO_port_direction+0x36>
 492:	81 34       	cpi	r24, 0x41	; 65
 494:	a1 f4       	brne	.+40     	; 0x4be <GPIO_port_direction+0x3c>
 496:	0c c0       	rjmp	.+24     	; 0x4b0 <GPIO_port_direction+0x2e>
 498:	82 36       	cpi	r24, 0x62	; 98
 49a:	61 f0       	breq	.+24     	; 0x4b4 <GPIO_port_direction+0x32>
 49c:	83 36       	cpi	r24, 0x63	; 99
 49e:	18 f4       	brcc	.+6      	; 0x4a6 <GPIO_port_direction+0x24>
 4a0:	81 36       	cpi	r24, 0x61	; 97
 4a2:	69 f4       	brne	.+26     	; 0x4be <GPIO_port_direction+0x3c>
 4a4:	05 c0       	rjmp	.+10     	; 0x4b0 <GPIO_port_direction+0x2e>
 4a6:	83 36       	cpi	r24, 0x63	; 99
 4a8:	39 f0       	breq	.+14     	; 0x4b8 <GPIO_port_direction+0x36>
 4aa:	84 36       	cpi	r24, 0x64	; 100
 4ac:	41 f4       	brne	.+16     	; 0x4be <GPIO_port_direction+0x3c>
 4ae:	06 c0       	rjmp	.+12     	; 0x4bc <GPIO_port_direction+0x3a>
    {
        case 'A':
        case 'a':
            DDRA = DIR; // set direction of port A to the given DIR
 4b0:	6a bb       	out	0x1a, r22	; 26
        break;
 4b2:	08 95       	ret
        case 'B':
        case 'b':
            DDRB = DIR; // set direction of port B to the given DIR
 4b4:	67 bb       	out	0x17, r22	; 23
        break;
 4b6:	08 95       	ret
        case 'C':
        case 'c':
            DDRC = DIR; // set direction of port C to the given DIR
 4b8:	64 bb       	out	0x14, r22	; 20
        break;
 4ba:	08 95       	ret
        case 'D':
        case 'd':
            DDRD = DIR; // set direction of port D to the given DIR
 4bc:	61 bb       	out	0x11, r22	; 17
 4be:	08 95       	ret

000004c0 <GPIO_port_write>:
} // end of GPIO_port_direction();


void GPIO_port_write(char PORT, uint8 DATA)
{
    switch(PORT)
 4c0:	84 34       	cpi	r24, 0x44	; 68
 4c2:	d9 f0       	breq	.+54     	; 0x4fa <GPIO_port_write+0x3a>
 4c4:	85 34       	cpi	r24, 0x45	; 69
 4c6:	38 f4       	brcc	.+14     	; 0x4d6 <GPIO_port_write+0x16>
 4c8:	82 34       	cpi	r24, 0x42	; 66
 4ca:	99 f0       	breq	.+38     	; 0x4f2 <GPIO_port_write+0x32>
 4cc:	83 34       	cpi	r24, 0x43	; 67
 4ce:	98 f4       	brcc	.+38     	; 0x4f6 <GPIO_port_write+0x36>
 4d0:	81 34       	cpi	r24, 0x41	; 65
 4d2:	a1 f4       	brne	.+40     	; 0x4fc <GPIO_port_write+0x3c>
 4d4:	0c c0       	rjmp	.+24     	; 0x4ee <GPIO_port_write+0x2e>
 4d6:	82 36       	cpi	r24, 0x62	; 98
 4d8:	61 f0       	breq	.+24     	; 0x4f2 <GPIO_port_write+0x32>
 4da:	83 36       	cpi	r24, 0x63	; 99
 4dc:	18 f4       	brcc	.+6      	; 0x4e4 <GPIO_port_write+0x24>
 4de:	81 36       	cpi	r24, 0x61	; 97
 4e0:	69 f4       	brne	.+26     	; 0x4fc <GPIO_port_write+0x3c>
 4e2:	05 c0       	rjmp	.+10     	; 0x4ee <GPIO_port_write+0x2e>
 4e4:	83 36       	cpi	r24, 0x63	; 99
 4e6:	39 f0       	breq	.+14     	; 0x4f6 <GPIO_port_write+0x36>
 4e8:	84 36       	cpi	r24, 0x64	; 100
 4ea:	41 f4       	brne	.+16     	; 0x4fc <GPIO_port_write+0x3c>
 4ec:	06 c0       	rjmp	.+12     	; 0x4fa <GPIO_port_write+0x3a>
    {
        case 'A':
        case 'a':
            PORTA = DATA; // write these data on port A
 4ee:	6b bb       	out	0x1b, r22	; 27
        break;
 4f0:	08 95       	ret
        case 'B':
        case 'b':
            PORTB = DATA; // write these data on port B
 4f2:	68 bb       	out	0x18, r22	; 24
        break;
 4f4:	08 95       	ret
        case 'C':
        case 'c':
            PORTC = DATA; // write these data on port C
 4f6:	65 bb       	out	0x15, r22	; 21
        break;
 4f8:	08 95       	ret
        case 'D':
        case 'd':
            PORTD = DATA; // write these data on port D
 4fa:	62 bb       	out	0x12, r22	; 18
 4fc:	08 95       	ret

000004fe <GPIO_port_read>:


uint8 GPIO_port_read(char PORT)
{
    uint8 read_port = 0;
    switch(PORT)
 4fe:	84 34       	cpi	r24, 0x44	; 68
 500:	d9 f0       	breq	.+54     	; 0x538 <GPIO_port_read+0x3a>
 502:	85 34       	cpi	r24, 0x45	; 69
 504:	38 f4       	brcc	.+14     	; 0x514 <GPIO_port_read+0x16>
 506:	82 34       	cpi	r24, 0x42	; 66
 508:	99 f0       	breq	.+38     	; 0x530 <GPIO_port_read+0x32>
 50a:	83 34       	cpi	r24, 0x43	; 67
 50c:	98 f4       	brcc	.+38     	; 0x534 <GPIO_port_read+0x36>
 50e:	81 34       	cpi	r24, 0x41	; 65
 510:	a9 f4       	brne	.+42     	; 0x53c <GPIO_port_read+0x3e>
 512:	0c c0       	rjmp	.+24     	; 0x52c <GPIO_port_read+0x2e>
 514:	82 36       	cpi	r24, 0x62	; 98
 516:	61 f0       	breq	.+24     	; 0x530 <GPIO_port_read+0x32>
 518:	83 36       	cpi	r24, 0x63	; 99
 51a:	18 f4       	brcc	.+6      	; 0x522 <GPIO_port_read+0x24>
 51c:	81 36       	cpi	r24, 0x61	; 97
 51e:	71 f4       	brne	.+28     	; 0x53c <GPIO_port_read+0x3e>
 520:	05 c0       	rjmp	.+10     	; 0x52c <GPIO_port_read+0x2e>
 522:	83 36       	cpi	r24, 0x63	; 99
 524:	39 f0       	breq	.+14     	; 0x534 <GPIO_port_read+0x36>
 526:	84 36       	cpi	r24, 0x64	; 100
 528:	49 f4       	brne	.+18     	; 0x53c <GPIO_port_read+0x3e>
 52a:	06 c0       	rjmp	.+12     	; 0x538 <GPIO_port_read+0x3a>
    {
        case 'A':
        case 'a':
            read_port = PINA; // read data from port A
 52c:	89 b3       	in	r24, 0x19	; 25
        break;
 52e:	08 95       	ret
        case 'B':
        case 'b':
            read_port = PINB; // read data from port B
 530:	86 b3       	in	r24, 0x16	; 22
        break;
 532:	08 95       	ret
        case 'C':
        case 'c':
            read_port = PINC; // read data from port C
 534:	83 b3       	in	r24, 0x13	; 19
        break;
 536:	08 95       	ret
        case 'D':
        case 'd':
            read_port = PIND; // read data from port D
 538:	80 b3       	in	r24, 0x10	; 16
        break;
 53a:	08 95       	ret
} // end of GPIO_port_write();


uint8 GPIO_port_read(char PORT)
{
    uint8 read_port = 0;
 53c:	80 e0       	ldi	r24, 0x00	; 0
        break;
        default:
        break;
    } // end of switch(PORT);
    return read_port;
} // end of GPIO_port_read();
 53e:	08 95       	ret

00000540 <GPIO_pin_pull_up>:


void GPIO_pin_pull_up(char port_name, uint8 pin_number)
{
    switch(port_name)
 540:	84 34       	cpi	r24, 0x44	; 68
 542:	09 f4       	brne	.+2      	; 0x546 <GPIO_pin_pull_up+0x6>
 544:	57 c0       	rjmp	.+174    	; 0x5f4 <GPIO_pin_pull_up+0xb4>
 546:	85 34       	cpi	r24, 0x45	; 69
 548:	40 f4       	brcc	.+16     	; 0x55a <GPIO_pin_pull_up+0x1a>
 54a:	82 34       	cpi	r24, 0x42	; 66
 54c:	49 f1       	breq	.+82     	; 0x5a0 <GPIO_pin_pull_up+0x60>
 54e:	83 34       	cpi	r24, 0x43	; 67
 550:	e0 f5       	brcc	.+120    	; 0x5ca <GPIO_pin_pull_up+0x8a>
 552:	81 34       	cpi	r24, 0x41	; 65
 554:	09 f0       	breq	.+2      	; 0x558 <GPIO_pin_pull_up+0x18>
 556:	62 c0       	rjmp	.+196    	; 0x61c <GPIO_pin_pull_up+0xdc>
 558:	0e c0       	rjmp	.+28     	; 0x576 <GPIO_pin_pull_up+0x36>
 55a:	82 36       	cpi	r24, 0x62	; 98
 55c:	09 f1       	breq	.+66     	; 0x5a0 <GPIO_pin_pull_up+0x60>
 55e:	83 36       	cpi	r24, 0x63	; 99
 560:	20 f4       	brcc	.+8      	; 0x56a <GPIO_pin_pull_up+0x2a>
 562:	81 36       	cpi	r24, 0x61	; 97
 564:	09 f0       	breq	.+2      	; 0x568 <GPIO_pin_pull_up+0x28>
 566:	5a c0       	rjmp	.+180    	; 0x61c <GPIO_pin_pull_up+0xdc>
 568:	06 c0       	rjmp	.+12     	; 0x576 <GPIO_pin_pull_up+0x36>
 56a:	83 36       	cpi	r24, 0x63	; 99
 56c:	71 f1       	breq	.+92     	; 0x5ca <GPIO_pin_pull_up+0x8a>
 56e:	84 36       	cpi	r24, 0x64	; 100
 570:	09 f0       	breq	.+2      	; 0x574 <GPIO_pin_pull_up+0x34>
 572:	54 c0       	rjmp	.+168    	; 0x61c <GPIO_pin_pull_up+0xdc>
 574:	3f c0       	rjmp	.+126    	; 0x5f4 <GPIO_pin_pull_up+0xb4>
    {
        case 'A':
        case 'a':
            CLR_BIT(DDRA,pin_number); //set pin_number of port_name as input
 576:	2a b3       	in	r18, 0x1a	; 26
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	ac 01       	movw	r20, r24
 57e:	02 c0       	rjmp	.+4      	; 0x584 <GPIO_pin_pull_up+0x44>
 580:	44 0f       	add	r20, r20
 582:	55 1f       	adc	r21, r21
 584:	6a 95       	dec	r22
 586:	e2 f7       	brpl	.-8      	; 0x580 <GPIO_pin_pull_up+0x40>
 588:	ba 01       	movw	r22, r20
 58a:	84 2f       	mov	r24, r20
 58c:	80 95       	com	r24
 58e:	82 23       	and	r24, r18
 590:	8a bb       	out	0x1a, r24	; 26
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 592:	80 b7       	in	r24, 0x30	; 48
 594:	8b 7f       	andi	r24, 0xFB	; 251
 596:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTA,pin_number); //set pin_number of port_name as high value
 598:	8b b3       	in	r24, 0x1b	; 27
 59a:	68 2b       	or	r22, r24
 59c:	6b bb       	out	0x1b, r22	; 27
        break;
 59e:	08 95       	ret
        case 'B':
        case 'b':
            CLR_BIT(DDRB,pin_number); //set pin_number of port_name as input
 5a0:	27 b3       	in	r18, 0x17	; 23
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	ac 01       	movw	r20, r24
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <GPIO_pin_pull_up+0x6e>
 5aa:	44 0f       	add	r20, r20
 5ac:	55 1f       	adc	r21, r21
 5ae:	6a 95       	dec	r22
 5b0:	e2 f7       	brpl	.-8      	; 0x5aa <GPIO_pin_pull_up+0x6a>
 5b2:	ba 01       	movw	r22, r20
 5b4:	84 2f       	mov	r24, r20
 5b6:	80 95       	com	r24
 5b8:	82 23       	and	r24, r18
 5ba:	87 bb       	out	0x17, r24	; 23
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 5bc:	80 b7       	in	r24, 0x30	; 48
 5be:	8b 7f       	andi	r24, 0xFB	; 251
 5c0:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTB,pin_number); //set pin_number of port_name as high value
 5c2:	88 b3       	in	r24, 0x18	; 24
 5c4:	68 2b       	or	r22, r24
 5c6:	68 bb       	out	0x18, r22	; 24
        break;
 5c8:	08 95       	ret
        case 'C':
        case 'c':
            CLR_BIT(DDRC,pin_number); //set pin_number of port_name as input
 5ca:	24 b3       	in	r18, 0x14	; 20
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	ac 01       	movw	r20, r24
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <GPIO_pin_pull_up+0x98>
 5d4:	44 0f       	add	r20, r20
 5d6:	55 1f       	adc	r21, r21
 5d8:	6a 95       	dec	r22
 5da:	e2 f7       	brpl	.-8      	; 0x5d4 <GPIO_pin_pull_up+0x94>
 5dc:	ba 01       	movw	r22, r20
 5de:	84 2f       	mov	r24, r20
 5e0:	80 95       	com	r24
 5e2:	82 23       	and	r24, r18
 5e4:	84 bb       	out	0x14, r24	; 20
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 5e6:	80 b7       	in	r24, 0x30	; 48
 5e8:	8b 7f       	andi	r24, 0xFB	; 251
 5ea:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTC,pin_number); //set pin_number of port_name as high value
 5ec:	85 b3       	in	r24, 0x15	; 21
 5ee:	68 2b       	or	r22, r24
 5f0:	65 bb       	out	0x15, r22	; 21
        break;
 5f2:	08 95       	ret
        case 'D':
        case 'd':
            CLR_BIT(DDRD,pin_number); //set pin_number of port_name as input
 5f4:	21 b3       	in	r18, 0x11	; 17
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	ac 01       	movw	r20, r24
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <GPIO_pin_pull_up+0xc2>
 5fe:	44 0f       	add	r20, r20
 600:	55 1f       	adc	r21, r21
 602:	6a 95       	dec	r22
 604:	e2 f7       	brpl	.-8      	; 0x5fe <GPIO_pin_pull_up+0xbe>
 606:	ba 01       	movw	r22, r20
 608:	84 2f       	mov	r24, r20
 60a:	80 95       	com	r24
 60c:	82 23       	and	r24, r18
 60e:	81 bb       	out	0x11, r24	; 17
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 610:	80 b7       	in	r24, 0x30	; 48
 612:	8b 7f       	andi	r24, 0xFB	; 251
 614:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTD,pin_number); //set pin_number of port_name as high value
 616:	82 b3       	in	r24, 0x12	; 18
 618:	68 2b       	or	r22, r24
 61a:	62 bb       	out	0x12, r22	; 18
 61c:	08 95       	ret

0000061e <GPIO_port_write_high_nibble>:



void GPIO_port_write_high_nibble(char port_name, uint8 high_nibble)
{
    high_nibble <<= 4; //clear low_nibble bits in number
 61e:	62 95       	swap	r22
 620:	60 7f       	andi	r22, 0xF0	; 240
    switch(port_name)
 622:	84 34       	cpi	r24, 0x44	; 68
 624:	51 f1       	breq	.+84     	; 0x67a <GPIO_port_write_high_nibble+0x5c>
 626:	85 34       	cpi	r24, 0x45	; 69
 628:	38 f4       	brcc	.+14     	; 0x638 <GPIO_port_write_high_nibble+0x1a>
 62a:	82 34       	cpi	r24, 0x42	; 66
 62c:	c1 f0       	breq	.+48     	; 0x65e <GPIO_port_write_high_nibble+0x40>
 62e:	83 34       	cpi	r24, 0x43	; 67
 630:	e8 f4       	brcc	.+58     	; 0x66c <GPIO_port_write_high_nibble+0x4e>
 632:	81 34       	cpi	r24, 0x41	; 65
 634:	41 f5       	brne	.+80     	; 0x686 <GPIO_port_write_high_nibble+0x68>
 636:	0c c0       	rjmp	.+24     	; 0x650 <GPIO_port_write_high_nibble+0x32>
 638:	82 36       	cpi	r24, 0x62	; 98
 63a:	89 f0       	breq	.+34     	; 0x65e <GPIO_port_write_high_nibble+0x40>
 63c:	83 36       	cpi	r24, 0x63	; 99
 63e:	18 f4       	brcc	.+6      	; 0x646 <GPIO_port_write_high_nibble+0x28>
 640:	81 36       	cpi	r24, 0x61	; 97
 642:	09 f5       	brne	.+66     	; 0x686 <GPIO_port_write_high_nibble+0x68>
 644:	05 c0       	rjmp	.+10     	; 0x650 <GPIO_port_write_high_nibble+0x32>
 646:	83 36       	cpi	r24, 0x63	; 99
 648:	89 f0       	breq	.+34     	; 0x66c <GPIO_port_write_high_nibble+0x4e>
 64a:	84 36       	cpi	r24, 0x64	; 100
 64c:	e1 f4       	brne	.+56     	; 0x686 <GPIO_port_write_high_nibble+0x68>
 64e:	15 c0       	rjmp	.+42     	; 0x67a <GPIO_port_write_high_nibble+0x5c>
    {
        case 'A':
        case 'a':
            PORTA &= 0x0f;
 650:	8b b3       	in	r24, 0x1b	; 27
 652:	8f 70       	andi	r24, 0x0F	; 15
 654:	8b bb       	out	0x1b, r24	; 27
            PORTA |= high_nibble;
 656:	8b b3       	in	r24, 0x1b	; 27
 658:	68 2b       	or	r22, r24
 65a:	6b bb       	out	0x1b, r22	; 27
        break;
 65c:	08 95       	ret
        case 'B':
        case 'b':
            PORTB &= 0x0f;
 65e:	88 b3       	in	r24, 0x18	; 24
 660:	8f 70       	andi	r24, 0x0F	; 15
 662:	88 bb       	out	0x18, r24	; 24
            PORTB |= high_nibble;
 664:	88 b3       	in	r24, 0x18	; 24
 666:	68 2b       	or	r22, r24
 668:	68 bb       	out	0x18, r22	; 24
        break;
 66a:	08 95       	ret
        case 'C':
        case 'c':
            PORTC &= 0x0f;
 66c:	85 b3       	in	r24, 0x15	; 21
 66e:	8f 70       	andi	r24, 0x0F	; 15
 670:	85 bb       	out	0x15, r24	; 21
            PORTC |= high_nibble;
 672:	85 b3       	in	r24, 0x15	; 21
 674:	68 2b       	or	r22, r24
 676:	65 bb       	out	0x15, r22	; 21
        break;
 678:	08 95       	ret
        case 'D':
        case 'd':
            PORTD &= 0x0f;
 67a:	82 b3       	in	r24, 0x12	; 18
 67c:	8f 70       	andi	r24, 0x0F	; 15
 67e:	82 bb       	out	0x12, r24	; 18
            PORTD |= high_nibble;
 680:	82 b3       	in	r24, 0x12	; 18
 682:	68 2b       	or	r22, r24
 684:	62 bb       	out	0x12, r22	; 18
 686:	08 95       	ret

00000688 <GPIO_port_write_low_nibble>:
    } // end of switch(port_name);
}

void GPIO_port_write_low_nibble(char port_name, uint8 low_nibble)
{
    low_nibble &= 0x0f; //clear high_nibble bits in number
 688:	6f 70       	andi	r22, 0x0F	; 15
    switch(port_name)
 68a:	84 34       	cpi	r24, 0x44	; 68
 68c:	51 f1       	breq	.+84     	; 0x6e2 <GPIO_port_write_low_nibble+0x5a>
 68e:	85 34       	cpi	r24, 0x45	; 69
 690:	38 f4       	brcc	.+14     	; 0x6a0 <GPIO_port_write_low_nibble+0x18>
 692:	82 34       	cpi	r24, 0x42	; 66
 694:	c1 f0       	breq	.+48     	; 0x6c6 <GPIO_port_write_low_nibble+0x3e>
 696:	83 34       	cpi	r24, 0x43	; 67
 698:	e8 f4       	brcc	.+58     	; 0x6d4 <GPIO_port_write_low_nibble+0x4c>
 69a:	81 34       	cpi	r24, 0x41	; 65
 69c:	41 f5       	brne	.+80     	; 0x6ee <GPIO_port_write_low_nibble+0x66>
 69e:	0c c0       	rjmp	.+24     	; 0x6b8 <GPIO_port_write_low_nibble+0x30>
 6a0:	82 36       	cpi	r24, 0x62	; 98
 6a2:	89 f0       	breq	.+34     	; 0x6c6 <GPIO_port_write_low_nibble+0x3e>
 6a4:	83 36       	cpi	r24, 0x63	; 99
 6a6:	18 f4       	brcc	.+6      	; 0x6ae <GPIO_port_write_low_nibble+0x26>
 6a8:	81 36       	cpi	r24, 0x61	; 97
 6aa:	09 f5       	brne	.+66     	; 0x6ee <GPIO_port_write_low_nibble+0x66>
 6ac:	05 c0       	rjmp	.+10     	; 0x6b8 <GPIO_port_write_low_nibble+0x30>
 6ae:	83 36       	cpi	r24, 0x63	; 99
 6b0:	89 f0       	breq	.+34     	; 0x6d4 <GPIO_port_write_low_nibble+0x4c>
 6b2:	84 36       	cpi	r24, 0x64	; 100
 6b4:	e1 f4       	brne	.+56     	; 0x6ee <GPIO_port_write_low_nibble+0x66>
 6b6:	15 c0       	rjmp	.+42     	; 0x6e2 <GPIO_port_write_low_nibble+0x5a>
    {
        case 'A':
        case 'a':
            PORTA &= 0xf0;
 6b8:	8b b3       	in	r24, 0x1b	; 27
 6ba:	80 7f       	andi	r24, 0xF0	; 240
 6bc:	8b bb       	out	0x1b, r24	; 27
            PORTA |= low_nibble;
 6be:	8b b3       	in	r24, 0x1b	; 27
 6c0:	68 2b       	or	r22, r24
 6c2:	6b bb       	out	0x1b, r22	; 27
        break;
 6c4:	08 95       	ret
        case 'B':
        case 'b':
            PORTB &= 0xf0;
 6c6:	88 b3       	in	r24, 0x18	; 24
 6c8:	80 7f       	andi	r24, 0xF0	; 240
 6ca:	88 bb       	out	0x18, r24	; 24
            PORTB |= low_nibble;
 6cc:	88 b3       	in	r24, 0x18	; 24
 6ce:	68 2b       	or	r22, r24
 6d0:	68 bb       	out	0x18, r22	; 24
        break;
 6d2:	08 95       	ret
        case 'C':
        case 'c':
            PORTC &= 0xf0;
 6d4:	85 b3       	in	r24, 0x15	; 21
 6d6:	80 7f       	andi	r24, 0xF0	; 240
 6d8:	85 bb       	out	0x15, r24	; 21
            PORTC |= low_nibble;
 6da:	85 b3       	in	r24, 0x15	; 21
 6dc:	68 2b       	or	r22, r24
 6de:	65 bb       	out	0x15, r22	; 21
        break;
 6e0:	08 95       	ret
        case 'D':
        case 'd':
            PORTD &= 0xf0;
 6e2:	82 b3       	in	r24, 0x12	; 18
 6e4:	80 7f       	andi	r24, 0xF0	; 240
 6e6:	82 bb       	out	0x12, r24	; 18
            PORTD |= low_nibble;
 6e8:	82 b3       	in	r24, 0x12	; 18
 6ea:	68 2b       	or	r22, r24
 6ec:	62 bb       	out	0x12, r22	; 18
 6ee:	08 95       	ret

000006f0 <LED_init>:
#include "led.h"

void LED_init(char port_name, uint8 pin_number)
{
    GPIO_pin_direction(port_name, pin_number, 1);
 6f0:	41 e0       	ldi	r20, 0x01	; 1
 6f2:	0e 94 91 00 	call	0x122	; 0x122 <GPIO_pin_direction>
}
 6f6:	08 95       	ret

000006f8 <LED_turn_on>:


void LED_turn_on(char port_name, uint8 pin_number)
{
    GPIO_pin_write(port_name, pin_number, 1);
 6f8:	41 e0       	ldi	r20, 0x01	; 1
 6fa:	0e 94 22 01 	call	0x244	; 0x244 <GPIO_pin_write>
}
 6fe:	08 95       	ret

00000700 <LED_turn_off>:


void LED_turn_off(char port_name, uint8 pin_number)
{
    GPIO_pin_write(port_name, pin_number, 0);
 700:	40 e0       	ldi	r20, 0x00	; 0
 702:	0e 94 22 01 	call	0x244	; 0x244 <GPIO_pin_write>
}
 706:	08 95       	ret

00000708 <LED_toggle>:


void LED_toggle(char port_name, uint8 pin_number)
{
    GPIO_pin_toggle(port_name, pin_number);
 708:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <GPIO_pin_toggle>
}
 70c:	08 95       	ret

0000070e <LED_status>:


uint8 LED_status(char port_name, uint8 pin_number)
{
    return (GPIO_pin_read(port_name, pin_number));
 70e:	0e 94 b3 01 	call	0x366	; 0x366 <GPIO_pin_read>
 712:	08 95       	ret

00000714 <timer0_ctc_init>:
#include "timer0_CTC_mode.h"

void timer0_ctc_init(void)
{
	/*set timer0 mode to CTC mode*/
	CLR_BIT(TCCR0, WGM00);
 714:	83 b7       	in	r24, 0x33	; 51
 716:	8f 7b       	andi	r24, 0xBF	; 191
 718:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0, WGM01);
 71a:	83 b7       	in	r24, 0x33	; 51
 71c:	88 60       	ori	r24, 0x08	; 8
 71e:	83 bf       	out	0x33, r24	; 51
	/*set OCR register value to (252) so after this counts for (31) times, one sec will be evaluated*/
	OCR0 = 252;
 720:	8c ef       	ldi	r24, 0xFC	; 252
 722:	8c bf       	out	0x3c, r24	; 60
	/*set F_timer0 = F_CPU/1024 = 8000000/1024 = 7812 Hz*/
	/*tick time = (1024/8000000) = 0.128 mSec.*/
	SET_BIT(TCCR0, CS00);
 724:	83 b7       	in	r24, 0x33	; 51
 726:	81 60       	ori	r24, 0x01	; 1
 728:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS01);
 72a:	83 b7       	in	r24, 0x33	; 51
 72c:	8d 7f       	andi	r24, 0xFD	; 253
 72e:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0, CS02);
 730:	83 b7       	in	r24, 0x33	; 51
 732:	84 60       	ori	r24, 0x04	; 4
 734:	83 bf       	out	0x33, r24	; 51
	/*enable interrupt of CTC mode*/
	sei(); //enable I-bit
 736:	78 94       	sei
	SET_BIT(TIMSK, OCIE0); //enable bit of timer0 CTC interrupt
 738:	89 b7       	in	r24, 0x39	; 57
 73a:	82 60       	ori	r24, 0x02	; 2
 73c:	89 bf       	out	0x39, r24	; 57
 73e:	08 95       	ret

00000740 <_exit>:
 740:	f8 94       	cli

00000742 <__stop_program>:
 742:	ff cf       	rjmp	.-2      	; 0x742 <__stop_program>
