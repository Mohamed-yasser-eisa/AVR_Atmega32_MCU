
10-numbers_from_0_1000_BCD_seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  000008fe  00000972  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000099c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00001068  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  000010f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a94  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002d0  00000000  00000000  00001c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000061f  00000000  00000000  00001f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000164  00000000  00000000  00002554  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000030f  00000000  00000000  000026b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000811  00000000  00000000  000029c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ef       	ldi	r30, 0xFE	; 254
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e8       	ldi	r26, 0x8A	; 138
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 38       	cpi	r26, 0x8A	; 138
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 7d 04 	jmp	0x8fa	; 0x8fa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
int main(void)
{
	uint16 number = 0; //the number that will be displayed on 7-segments
	uint16 counter = 0; //counter to the number that will be displayed on 7-segments
	uint8 pressed = 0;
	Seven_segment_init('C',0);
  92:	83 e4       	ldi	r24, 0x43	; 67
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	0e 94 de 03 	call	0x7bc	; 0x7bc <Seven_segment_init>
	/*define common pins of seven-segments as output*/
	GPIO_pin_direction('D', 0, 1);
  9a:	84 e4       	ldi	r24, 0x44	; 68
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	41 e0       	ldi	r20, 0x01	; 1
  a0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GPIO_pin_direction>
	GPIO_pin_direction('D', 1, 1);
  a4:	84 e4       	ldi	r24, 0x44	; 68
  a6:	61 e0       	ldi	r22, 0x01	; 1
  a8:	41 e0       	ldi	r20, 0x01	; 1
  aa:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GPIO_pin_direction>
	GPIO_pin_direction('D', 2, 1);
  ae:	84 e4       	ldi	r24, 0x44	; 68
  b0:	62 e0       	ldi	r22, 0x02	; 2
  b2:	41 e0       	ldi	r20, 0x01	; 1
  b4:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GPIO_pin_direction>
	GPIO_pin_direction('D', 3, 1);
  b8:	84 e4       	ldi	r24, 0x44	; 68
  ba:	63 e0       	ldi	r22, 0x03	; 3
  bc:	41 e0       	ldi	r20, 0x01	; 1
  be:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GPIO_pin_direction>
	/*write 1 on common cathode pins of seven-segments to turn off all segments*/
	GPIO_pin_write('D',0,1);
  c2:	84 e4       	ldi	r24, 0x44	; 68
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	41 e0       	ldi	r20, 0x01	; 1
  c8:	0e 94 88 01 	call	0x310	; 0x310 <GPIO_pin_write>
	GPIO_pin_write('D',1,1);
  cc:	84 e4       	ldi	r24, 0x44	; 68
  ce:	61 e0       	ldi	r22, 0x01	; 1
  d0:	41 e0       	ldi	r20, 0x01	; 1
  d2:	0e 94 88 01 	call	0x310	; 0x310 <GPIO_pin_write>
	GPIO_pin_write('D',2,1);
  d6:	84 e4       	ldi	r24, 0x44	; 68
  d8:	62 e0       	ldi	r22, 0x02	; 2
  da:	41 e0       	ldi	r20, 0x01	; 1
  dc:	0e 94 88 01 	call	0x310	; 0x310 <GPIO_pin_write>
	GPIO_pin_write('D',3,1);
  e0:	84 e4       	ldi	r24, 0x44	; 68
  e2:	63 e0       	ldi	r22, 0x03	; 3
  e4:	41 e0       	ldi	r20, 0x01	; 1
  e6:	0e 94 88 01 	call	0x310	; 0x310 <GPIO_pin_write>

int main(void)
{
	uint16 number = 0; //the number that will be displayed on 7-segments
	uint16 counter = 0; //counter to the number that will be displayed on 7-segments
	uint8 pressed = 0;
  ea:	10 e0       	ldi	r17, 0x00	; 0
/*============================ end ==============================*/

int main(void)
{
	uint16 number = 0; //the number that will be displayed on 7-segments
	uint16 counter = 0; //counter to the number that will be displayed on 7-segments
  ec:	cc 24       	eor	r12, r12
  ee:	dd 24       	eor	r13, r13
    while(1)
    {
		 number = counter;
		 pressed++;
		 GPIO_pin_write('D',3,0);//turn on first seven-segment
		 Seven_segment_write('C',(number%10), 0, 0); //write data on seven-segment
  f0:	ca e0       	ldi	r28, 0x0A	; 10
  f2:	d0 e0       	ldi	r29, 0x00	; 0
		 GPIO_pin_write('D',2,1);//turn off forth seven-segment
		 if (pressed>=5)//45
		 {
			 if (1000==counter)
			 {
				 counter=-1;
  f4:	aa 24       	eor	r10, r10
  f6:	aa 94       	dec	r10
  f8:	ba 2c       	mov	r11, r10
	
	
    while(1)
    {
		 number = counter;
		 pressed++;
  fa:	1f 5f       	subi	r17, 0xFF	; 255
		 GPIO_pin_write('D',3,0);//turn on first seven-segment
  fc:	84 e4       	ldi	r24, 0x44	; 68
  fe:	63 e0       	ldi	r22, 0x03	; 3
 100:	40 e0       	ldi	r20, 0x00	; 0
 102:	0e 94 88 01 	call	0x310	; 0x310 <GPIO_pin_write>
		 Seven_segment_write('C',(number%10), 0, 0); //write data on seven-segment
 106:	c6 01       	movw	r24, r12
 108:	be 01       	movw	r22, r28
 10a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__udivmodhi4>
 10e:	7b 01       	movw	r14, r22
 110:	68 2f       	mov	r22, r24
 112:	83 e4       	ldi	r24, 0x43	; 67
 114:	40 e0       	ldi	r20, 0x00	; 0
 116:	20 e0       	ldi	r18, 0x00	; 0
 118:	0e 94 24 04 	call	0x848	; 0x848 <Seven_segment_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	8f e0       	ldi	r24, 0x0F	; 15
 11e:	97 e2       	ldi	r25, 0x27	; 39
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <main+0x8e>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x94>
 126:	00 00       	nop
		 _delay_ms(5); //wait 5 mill second
		 number /= 10; //remove first digit
		 GPIO_pin_write('D',3,1);//turn off first seven-segment
 128:	84 e4       	ldi	r24, 0x44	; 68
 12a:	63 e0       	ldi	r22, 0x03	; 3
 12c:	41 e0       	ldi	r20, 0x01	; 1
 12e:	0e 94 88 01 	call	0x310	; 0x310 <GPIO_pin_write>
		 GPIO_pin_write('D',0,0);//turn on second seven-segment
 132:	84 e4       	ldi	r24, 0x44	; 68
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	40 e0       	ldi	r20, 0x00	; 0
 138:	0e 94 88 01 	call	0x310	; 0x310 <GPIO_pin_write>
		 Seven_segment_write('C',(number%10), 0, 0);
 13c:	c7 01       	movw	r24, r14
 13e:	be 01       	movw	r22, r28
 140:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__udivmodhi4>
 144:	7b 01       	movw	r14, r22
 146:	68 2f       	mov	r22, r24
 148:	83 e4       	ldi	r24, 0x43	; 67
 14a:	40 e0       	ldi	r20, 0x00	; 0
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	0e 94 24 04 	call	0x848	; 0x848 <Seven_segment_write>
 152:	8f e0       	ldi	r24, 0x0F	; 15
 154:	97 e2       	ldi	r25, 0x27	; 39
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <main+0xc4>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <main+0xca>
 15c:	00 00       	nop
		 _delay_ms(5);
		 number /= 10;
		 GPIO_pin_write('D',0,1);//turn off second seven-segment
 15e:	84 e4       	ldi	r24, 0x44	; 68
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	41 e0       	ldi	r20, 0x01	; 1
 164:	0e 94 88 01 	call	0x310	; 0x310 <GPIO_pin_write>
		 GPIO_pin_write('D',1,0);//turn on third seven-segment
 168:	84 e4       	ldi	r24, 0x44	; 68
 16a:	61 e0       	ldi	r22, 0x01	; 1
 16c:	40 e0       	ldi	r20, 0x00	; 0
 16e:	0e 94 88 01 	call	0x310	; 0x310 <GPIO_pin_write>
		 Seven_segment_write('C',(number%10), 0, 0);
 172:	c7 01       	movw	r24, r14
 174:	be 01       	movw	r22, r28
 176:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__udivmodhi4>
 17a:	7b 01       	movw	r14, r22
 17c:	68 2f       	mov	r22, r24
 17e:	83 e4       	ldi	r24, 0x43	; 67
 180:	40 e0       	ldi	r20, 0x00	; 0
 182:	20 e0       	ldi	r18, 0x00	; 0
 184:	0e 94 24 04 	call	0x848	; 0x848 <Seven_segment_write>
 188:	8f e0       	ldi	r24, 0x0F	; 15
 18a:	97 e2       	ldi	r25, 0x27	; 39
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <main+0xfa>
 190:	00 c0       	rjmp	.+0      	; 0x192 <main+0x100>
 192:	00 00       	nop
		 _delay_ms(5);
		 number /= 10;
		 GPIO_pin_write('D',1,1);//turn off third seven-segment
 194:	84 e4       	ldi	r24, 0x44	; 68
 196:	61 e0       	ldi	r22, 0x01	; 1
 198:	41 e0       	ldi	r20, 0x01	; 1
 19a:	0e 94 88 01 	call	0x310	; 0x310 <GPIO_pin_write>
		 GPIO_pin_write('D',2,0);//turn on forth seven-segment
 19e:	84 e4       	ldi	r24, 0x44	; 68
 1a0:	62 e0       	ldi	r22, 0x02	; 2
 1a2:	40 e0       	ldi	r20, 0x00	; 0
 1a4:	0e 94 88 01 	call	0x310	; 0x310 <GPIO_pin_write>
		 Seven_segment_write('C',(number%10), 0, 0);
 1a8:	c7 01       	movw	r24, r14
 1aa:	be 01       	movw	r22, r28
 1ac:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__udivmodhi4>
 1b0:	68 2f       	mov	r22, r24
 1b2:	83 e4       	ldi	r24, 0x43	; 67
 1b4:	40 e0       	ldi	r20, 0x00	; 0
 1b6:	20 e0       	ldi	r18, 0x00	; 0
 1b8:	0e 94 24 04 	call	0x848	; 0x848 <Seven_segment_write>
 1bc:	8f e0       	ldi	r24, 0x0F	; 15
 1be:	97 e2       	ldi	r25, 0x27	; 39
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <main+0x12e>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <main+0x134>
 1c6:	00 00       	nop
		 _delay_ms(5);
		 GPIO_pin_write('D',2,1);//turn off forth seven-segment
 1c8:	84 e4       	ldi	r24, 0x44	; 68
 1ca:	62 e0       	ldi	r22, 0x02	; 2
 1cc:	41 e0       	ldi	r20, 0x01	; 1
 1ce:	0e 94 88 01 	call	0x310	; 0x310 <GPIO_pin_write>
		 if (pressed>=5)//45
 1d2:	15 30       	cpi	r17, 0x05	; 5
 1d4:	08 f4       	brcc	.+2      	; 0x1d8 <main+0x146>
 1d6:	91 cf       	rjmp	.-222    	; 0xfa <main+0x68>
		 {
			 if (1000==counter)
 1d8:	98 ee       	ldi	r25, 0xE8	; 232
 1da:	c9 16       	cp	r12, r25
 1dc:	93 e0       	ldi	r25, 0x03	; 3
 1de:	d9 06       	cpc	r13, r25
 1e0:	09 f4       	brne	.+2      	; 0x1e4 <main+0x152>
			 {
				 counter=-1;
 1e2:	65 01       	movw	r12, r10
			 }
			 counter++;
 1e4:	08 94       	sec
 1e6:	c1 1c       	adc	r12, r1
 1e8:	d1 1c       	adc	r13, r1
			 pressed=0;
 1ea:	10 e0       	ldi	r17, 0x00	; 0
 1ec:	86 cf       	rjmp	.-244    	; 0xfa <main+0x68>

000001ee <GPIO_pin_direction>:
#include "Atmega_GPIO.h"

void GPIO_pin_direction(char PORT, uint8 BIT, uint8 DIR)
{
    switch(PORT)
 1ee:	84 34       	cpi	r24, 0x44	; 68
 1f0:	09 f4       	brne	.+2      	; 0x1f4 <GPIO_pin_direction+0x6>
 1f2:	71 c0       	rjmp	.+226    	; 0x2d6 <GPIO_pin_direction+0xe8>
 1f4:	85 34       	cpi	r24, 0x45	; 69
 1f6:	48 f4       	brcc	.+18     	; 0x20a <GPIO_pin_direction+0x1c>
 1f8:	82 34       	cpi	r24, 0x42	; 66
 1fa:	99 f1       	breq	.+102    	; 0x262 <GPIO_pin_direction+0x74>
 1fc:	83 34       	cpi	r24, 0x43	; 67
 1fe:	08 f0       	brcs	.+2      	; 0x202 <GPIO_pin_direction+0x14>
 200:	4d c0       	rjmp	.+154    	; 0x29c <GPIO_pin_direction+0xae>
 202:	81 34       	cpi	r24, 0x41	; 65
 204:	09 f0       	breq	.+2      	; 0x208 <GPIO_pin_direction+0x1a>
 206:	83 c0       	rjmp	.+262    	; 0x30e <GPIO_pin_direction+0x120>
 208:	0f c0       	rjmp	.+30     	; 0x228 <GPIO_pin_direction+0x3a>
 20a:	82 36       	cpi	r24, 0x62	; 98
 20c:	51 f1       	breq	.+84     	; 0x262 <GPIO_pin_direction+0x74>
 20e:	83 36       	cpi	r24, 0x63	; 99
 210:	20 f4       	brcc	.+8      	; 0x21a <GPIO_pin_direction+0x2c>
 212:	81 36       	cpi	r24, 0x61	; 97
 214:	09 f0       	breq	.+2      	; 0x218 <GPIO_pin_direction+0x2a>
 216:	7b c0       	rjmp	.+246    	; 0x30e <GPIO_pin_direction+0x120>
 218:	07 c0       	rjmp	.+14     	; 0x228 <GPIO_pin_direction+0x3a>
 21a:	83 36       	cpi	r24, 0x63	; 99
 21c:	09 f4       	brne	.+2      	; 0x220 <GPIO_pin_direction+0x32>
 21e:	3e c0       	rjmp	.+124    	; 0x29c <GPIO_pin_direction+0xae>
 220:	84 36       	cpi	r24, 0x64	; 100
 222:	09 f0       	breq	.+2      	; 0x226 <GPIO_pin_direction+0x38>
 224:	74 c0       	rjmp	.+232    	; 0x30e <GPIO_pin_direction+0x120>
 226:	57 c0       	rjmp	.+174    	; 0x2d6 <GPIO_pin_direction+0xe8>
    {
        case 'A':
        case 'a':
            if(1 == DIR)
 228:	41 30       	cpi	r20, 0x01	; 1
 22a:	69 f4       	brne	.+26     	; 0x246 <GPIO_pin_direction+0x58>
            {
                SET_BIT(DDRA, BIT); //set direction of this pin in port A as output
 22c:	2a b3       	in	r18, 0x1a	; 26
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	ac 01       	movw	r20, r24
 234:	02 c0       	rjmp	.+4      	; 0x23a <GPIO_pin_direction+0x4c>
 236:	44 0f       	add	r20, r20
 238:	55 1f       	adc	r21, r21
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <GPIO_pin_direction+0x48>
 23e:	ba 01       	movw	r22, r20
 240:	62 2b       	or	r22, r18
 242:	6a bb       	out	0x1a, r22	; 26
 244:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRA, BIT); //set direction of this pin in port A as input
 246:	2a b3       	in	r18, 0x1a	; 26
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	ac 01       	movw	r20, r24
 24e:	02 c0       	rjmp	.+4      	; 0x254 <GPIO_pin_direction+0x66>
 250:	44 0f       	add	r20, r20
 252:	55 1f       	adc	r21, r21
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <GPIO_pin_direction+0x62>
 258:	ba 01       	movw	r22, r20
 25a:	60 95       	com	r22
 25c:	62 23       	and	r22, r18
 25e:	6a bb       	out	0x1a, r22	; 26
 260:	08 95       	ret
            }
        break;
        case 'B':
        case 'b':
            if(1 == DIR)
 262:	41 30       	cpi	r20, 0x01	; 1
 264:	69 f4       	brne	.+26     	; 0x280 <GPIO_pin_direction+0x92>
            {
                SET_BIT(DDRB, BIT); //set direction of this pin in port B as output
 266:	27 b3       	in	r18, 0x17	; 23
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	ac 01       	movw	r20, r24
 26e:	02 c0       	rjmp	.+4      	; 0x274 <GPIO_pin_direction+0x86>
 270:	44 0f       	add	r20, r20
 272:	55 1f       	adc	r21, r21
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <GPIO_pin_direction+0x82>
 278:	ba 01       	movw	r22, r20
 27a:	62 2b       	or	r22, r18
 27c:	67 bb       	out	0x17, r22	; 23
 27e:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRB, BIT); //set direction of this pin in port B as input
 280:	27 b3       	in	r18, 0x17	; 23
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	ac 01       	movw	r20, r24
 288:	02 c0       	rjmp	.+4      	; 0x28e <GPIO_pin_direction+0xa0>
 28a:	44 0f       	add	r20, r20
 28c:	55 1f       	adc	r21, r21
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <GPIO_pin_direction+0x9c>
 292:	ba 01       	movw	r22, r20
 294:	60 95       	com	r22
 296:	62 23       	and	r22, r18
 298:	67 bb       	out	0x17, r22	; 23
 29a:	08 95       	ret
            }
        break;
        case 'C':
        case 'c':
            if(1 == DIR)
 29c:	41 30       	cpi	r20, 0x01	; 1
 29e:	69 f4       	brne	.+26     	; 0x2ba <GPIO_pin_direction+0xcc>
            {
                SET_BIT(DDRC, BIT); //set direction of this pin in port B as output
 2a0:	24 b3       	in	r18, 0x14	; 20
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	ac 01       	movw	r20, r24
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <GPIO_pin_direction+0xc0>
 2aa:	44 0f       	add	r20, r20
 2ac:	55 1f       	adc	r21, r21
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <GPIO_pin_direction+0xbc>
 2b2:	ba 01       	movw	r22, r20
 2b4:	62 2b       	or	r22, r18
 2b6:	64 bb       	out	0x14, r22	; 20
 2b8:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRC, BIT); //set direction of this pin in port B as input
 2ba:	24 b3       	in	r18, 0x14	; 20
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	ac 01       	movw	r20, r24
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <GPIO_pin_direction+0xda>
 2c4:	44 0f       	add	r20, r20
 2c6:	55 1f       	adc	r21, r21
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <GPIO_pin_direction+0xd6>
 2cc:	ba 01       	movw	r22, r20
 2ce:	60 95       	com	r22
 2d0:	62 23       	and	r22, r18
 2d2:	64 bb       	out	0x14, r22	; 20
 2d4:	08 95       	ret
            }
        break;
        case 'D':
        case 'd':
            if(1 == DIR)
 2d6:	41 30       	cpi	r20, 0x01	; 1
 2d8:	69 f4       	brne	.+26     	; 0x2f4 <GPIO_pin_direction+0x106>
            {
                SET_BIT(DDRD, BIT); //set direction of this pin in port C as output
 2da:	21 b3       	in	r18, 0x11	; 17
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	ac 01       	movw	r20, r24
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <GPIO_pin_direction+0xfa>
 2e4:	44 0f       	add	r20, r20
 2e6:	55 1f       	adc	r21, r21
 2e8:	6a 95       	dec	r22
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <GPIO_pin_direction+0xf6>
 2ec:	ba 01       	movw	r22, r20
 2ee:	62 2b       	or	r22, r18
 2f0:	61 bb       	out	0x11, r22	; 17
 2f2:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRD, BIT); //set direction of this pin in port C as input
 2f4:	21 b3       	in	r18, 0x11	; 17
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	ac 01       	movw	r20, r24
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <GPIO_pin_direction+0x114>
 2fe:	44 0f       	add	r20, r20
 300:	55 1f       	adc	r21, r21
 302:	6a 95       	dec	r22
 304:	e2 f7       	brpl	.-8      	; 0x2fe <GPIO_pin_direction+0x110>
 306:	ba 01       	movw	r22, r20
 308:	60 95       	com	r22
 30a:	62 23       	and	r22, r18
 30c:	61 bb       	out	0x11, r22	; 17
 30e:	08 95       	ret

00000310 <GPIO_pin_write>:
} //end of  GPIO_pin_direction();


void GPIO_pin_write(char PORT, uint8 BIT, uint8 DATA)
{
    switch(PORT)
 310:	84 34       	cpi	r24, 0x44	; 68
 312:	09 f4       	brne	.+2      	; 0x316 <GPIO_pin_write+0x6>
 314:	71 c0       	rjmp	.+226    	; 0x3f8 <GPIO_pin_write+0xe8>
 316:	85 34       	cpi	r24, 0x45	; 69
 318:	48 f4       	brcc	.+18     	; 0x32c <GPIO_pin_write+0x1c>
 31a:	82 34       	cpi	r24, 0x42	; 66
 31c:	99 f1       	breq	.+102    	; 0x384 <GPIO_pin_write+0x74>
 31e:	83 34       	cpi	r24, 0x43	; 67
 320:	08 f0       	brcs	.+2      	; 0x324 <GPIO_pin_write+0x14>
 322:	4d c0       	rjmp	.+154    	; 0x3be <GPIO_pin_write+0xae>
 324:	81 34       	cpi	r24, 0x41	; 65
 326:	09 f0       	breq	.+2      	; 0x32a <GPIO_pin_write+0x1a>
 328:	83 c0       	rjmp	.+262    	; 0x430 <GPIO_pin_write+0x120>
 32a:	0f c0       	rjmp	.+30     	; 0x34a <GPIO_pin_write+0x3a>
 32c:	82 36       	cpi	r24, 0x62	; 98
 32e:	51 f1       	breq	.+84     	; 0x384 <GPIO_pin_write+0x74>
 330:	83 36       	cpi	r24, 0x63	; 99
 332:	20 f4       	brcc	.+8      	; 0x33c <GPIO_pin_write+0x2c>
 334:	81 36       	cpi	r24, 0x61	; 97
 336:	09 f0       	breq	.+2      	; 0x33a <GPIO_pin_write+0x2a>
 338:	7b c0       	rjmp	.+246    	; 0x430 <GPIO_pin_write+0x120>
 33a:	07 c0       	rjmp	.+14     	; 0x34a <GPIO_pin_write+0x3a>
 33c:	83 36       	cpi	r24, 0x63	; 99
 33e:	09 f4       	brne	.+2      	; 0x342 <GPIO_pin_write+0x32>
 340:	3e c0       	rjmp	.+124    	; 0x3be <GPIO_pin_write+0xae>
 342:	84 36       	cpi	r24, 0x64	; 100
 344:	09 f0       	breq	.+2      	; 0x348 <GPIO_pin_write+0x38>
 346:	74 c0       	rjmp	.+232    	; 0x430 <GPIO_pin_write+0x120>
 348:	57 c0       	rjmp	.+174    	; 0x3f8 <GPIO_pin_write+0xe8>
    {
        case 'A':
        case 'a':
            if(1 == DATA)
 34a:	41 30       	cpi	r20, 0x01	; 1
 34c:	69 f4       	brne	.+26     	; 0x368 <GPIO_pin_write+0x58>
            {
                SET_BIT(PORTA, BIT); //set output value of this pin in port A to 1
 34e:	2b b3       	in	r18, 0x1b	; 27
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	ac 01       	movw	r20, r24
 356:	02 c0       	rjmp	.+4      	; 0x35c <GPIO_pin_write+0x4c>
 358:	44 0f       	add	r20, r20
 35a:	55 1f       	adc	r21, r21
 35c:	6a 95       	dec	r22
 35e:	e2 f7       	brpl	.-8      	; 0x358 <GPIO_pin_write+0x48>
 360:	ba 01       	movw	r22, r20
 362:	62 2b       	or	r22, r18
 364:	6b bb       	out	0x1b, r22	; 27
 366:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTA, BIT); //set output value of this pin in port A to 0
 368:	2b b3       	in	r18, 0x1b	; 27
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	ac 01       	movw	r20, r24
 370:	02 c0       	rjmp	.+4      	; 0x376 <GPIO_pin_write+0x66>
 372:	44 0f       	add	r20, r20
 374:	55 1f       	adc	r21, r21
 376:	6a 95       	dec	r22
 378:	e2 f7       	brpl	.-8      	; 0x372 <GPIO_pin_write+0x62>
 37a:	ba 01       	movw	r22, r20
 37c:	60 95       	com	r22
 37e:	62 23       	and	r22, r18
 380:	6b bb       	out	0x1b, r22	; 27
 382:	08 95       	ret
            }
        break;
        case 'B':
        case 'b':
            if(1 == DATA)
 384:	41 30       	cpi	r20, 0x01	; 1
 386:	69 f4       	brne	.+26     	; 0x3a2 <GPIO_pin_write+0x92>
            {
                SET_BIT(PORTB, BIT); //set output value of this pin in port B to 1
 388:	28 b3       	in	r18, 0x18	; 24
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	ac 01       	movw	r20, r24
 390:	02 c0       	rjmp	.+4      	; 0x396 <GPIO_pin_write+0x86>
 392:	44 0f       	add	r20, r20
 394:	55 1f       	adc	r21, r21
 396:	6a 95       	dec	r22
 398:	e2 f7       	brpl	.-8      	; 0x392 <GPIO_pin_write+0x82>
 39a:	ba 01       	movw	r22, r20
 39c:	62 2b       	or	r22, r18
 39e:	68 bb       	out	0x18, r22	; 24
 3a0:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTB, BIT); //set output value of this pin in port B to 0
 3a2:	28 b3       	in	r18, 0x18	; 24
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	ac 01       	movw	r20, r24
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <GPIO_pin_write+0xa0>
 3ac:	44 0f       	add	r20, r20
 3ae:	55 1f       	adc	r21, r21
 3b0:	6a 95       	dec	r22
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <GPIO_pin_write+0x9c>
 3b4:	ba 01       	movw	r22, r20
 3b6:	60 95       	com	r22
 3b8:	62 23       	and	r22, r18
 3ba:	68 bb       	out	0x18, r22	; 24
 3bc:	08 95       	ret
            }
        break;
        case 'C':
        case 'c':
            if(1 == DATA)
 3be:	41 30       	cpi	r20, 0x01	; 1
 3c0:	69 f4       	brne	.+26     	; 0x3dc <GPIO_pin_write+0xcc>
            {
                SET_BIT(PORTC, BIT); //set output value of this pin in port C to 1
 3c2:	25 b3       	in	r18, 0x15	; 21
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	ac 01       	movw	r20, r24
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <GPIO_pin_write+0xc0>
 3cc:	44 0f       	add	r20, r20
 3ce:	55 1f       	adc	r21, r21
 3d0:	6a 95       	dec	r22
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <GPIO_pin_write+0xbc>
 3d4:	ba 01       	movw	r22, r20
 3d6:	62 2b       	or	r22, r18
 3d8:	65 bb       	out	0x15, r22	; 21
 3da:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTC, BIT); //set output value of this pin in port C to 0
 3dc:	25 b3       	in	r18, 0x15	; 21
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	ac 01       	movw	r20, r24
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <GPIO_pin_write+0xda>
 3e6:	44 0f       	add	r20, r20
 3e8:	55 1f       	adc	r21, r21
 3ea:	6a 95       	dec	r22
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <GPIO_pin_write+0xd6>
 3ee:	ba 01       	movw	r22, r20
 3f0:	60 95       	com	r22
 3f2:	62 23       	and	r22, r18
 3f4:	65 bb       	out	0x15, r22	; 21
 3f6:	08 95       	ret
            }
        break;
        case 'D':
        case 'd':
            if(1 == DATA)
 3f8:	41 30       	cpi	r20, 0x01	; 1
 3fa:	69 f4       	brne	.+26     	; 0x416 <GPIO_pin_write+0x106>
            {
                SET_BIT(PORTD, BIT); //set output value of this pin in port C to 1
 3fc:	22 b3       	in	r18, 0x12	; 18
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	ac 01       	movw	r20, r24
 404:	02 c0       	rjmp	.+4      	; 0x40a <GPIO_pin_write+0xfa>
 406:	44 0f       	add	r20, r20
 408:	55 1f       	adc	r21, r21
 40a:	6a 95       	dec	r22
 40c:	e2 f7       	brpl	.-8      	; 0x406 <GPIO_pin_write+0xf6>
 40e:	ba 01       	movw	r22, r20
 410:	62 2b       	or	r22, r18
 412:	62 bb       	out	0x12, r22	; 18
 414:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTD, BIT); //set output value of this pin in port C to 0
 416:	22 b3       	in	r18, 0x12	; 18
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	ac 01       	movw	r20, r24
 41e:	02 c0       	rjmp	.+4      	; 0x424 <GPIO_pin_write+0x114>
 420:	44 0f       	add	r20, r20
 422:	55 1f       	adc	r21, r21
 424:	6a 95       	dec	r22
 426:	e2 f7       	brpl	.-8      	; 0x420 <GPIO_pin_write+0x110>
 428:	ba 01       	movw	r22, r20
 42a:	60 95       	com	r22
 42c:	62 23       	and	r22, r18
 42e:	62 bb       	out	0x12, r22	; 18
 430:	08 95       	ret

00000432 <GPIO_pin_read>:


uint8 GPIO_pin_read(char PORT, uint8 BIT)
{
    uint8 read_value = 0;
    switch(PORT)
 432:	84 34       	cpi	r24, 0x44	; 68
 434:	99 f1       	breq	.+102    	; 0x49c <GPIO_pin_read+0x6a>
 436:	85 34       	cpi	r24, 0x45	; 69
 438:	38 f4       	brcc	.+14     	; 0x448 <GPIO_pin_read+0x16>
 43a:	82 34       	cpi	r24, 0x42	; 66
 43c:	d9 f0       	breq	.+54     	; 0x474 <GPIO_pin_read+0x42>
 43e:	83 34       	cpi	r24, 0x43	; 67
 440:	18 f5       	brcc	.+70     	; 0x488 <GPIO_pin_read+0x56>
 442:	81 34       	cpi	r24, 0x41	; 65
 444:	a9 f5       	brne	.+106    	; 0x4b0 <GPIO_pin_read+0x7e>
 446:	0c c0       	rjmp	.+24     	; 0x460 <GPIO_pin_read+0x2e>
 448:	82 36       	cpi	r24, 0x62	; 98
 44a:	a1 f0       	breq	.+40     	; 0x474 <GPIO_pin_read+0x42>
 44c:	83 36       	cpi	r24, 0x63	; 99
 44e:	18 f4       	brcc	.+6      	; 0x456 <GPIO_pin_read+0x24>
 450:	81 36       	cpi	r24, 0x61	; 97
 452:	71 f5       	brne	.+92     	; 0x4b0 <GPIO_pin_read+0x7e>
 454:	05 c0       	rjmp	.+10     	; 0x460 <GPIO_pin_read+0x2e>
 456:	83 36       	cpi	r24, 0x63	; 99
 458:	b9 f0       	breq	.+46     	; 0x488 <GPIO_pin_read+0x56>
 45a:	84 36       	cpi	r24, 0x64	; 100
 45c:	49 f5       	brne	.+82     	; 0x4b0 <GPIO_pin_read+0x7e>
 45e:	1e c0       	rjmp	.+60     	; 0x49c <GPIO_pin_read+0x6a>
    {
        case 'A':
        case 'a':
            read_value = READ_BIT(PINA, BIT); //read value of given pin in port A
 460:	29 b3       	in	r18, 0x19	; 25
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	c9 01       	movw	r24, r18
 466:	02 c0       	rjmp	.+4      	; 0x46c <GPIO_pin_read+0x3a>
 468:	95 95       	asr	r25
 46a:	87 95       	ror	r24
 46c:	6a 95       	dec	r22
 46e:	e2 f7       	brpl	.-8      	; 0x468 <GPIO_pin_read+0x36>
 470:	81 70       	andi	r24, 0x01	; 1
        break;
 472:	08 95       	ret
        case 'B':
        case 'b':
            read_value = READ_BIT(PINB, BIT); //read value of given pin in port B
 474:	26 b3       	in	r18, 0x16	; 22
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	c9 01       	movw	r24, r18
 47a:	02 c0       	rjmp	.+4      	; 0x480 <GPIO_pin_read+0x4e>
 47c:	95 95       	asr	r25
 47e:	87 95       	ror	r24
 480:	6a 95       	dec	r22
 482:	e2 f7       	brpl	.-8      	; 0x47c <GPIO_pin_read+0x4a>
 484:	81 70       	andi	r24, 0x01	; 1
        break;
 486:	08 95       	ret
        case 'C':
        case 'c':
            read_value = READ_BIT(PINC, BIT); //read value of given pin in port C
 488:	23 b3       	in	r18, 0x13	; 19
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	c9 01       	movw	r24, r18
 48e:	02 c0       	rjmp	.+4      	; 0x494 <GPIO_pin_read+0x62>
 490:	95 95       	asr	r25
 492:	87 95       	ror	r24
 494:	6a 95       	dec	r22
 496:	e2 f7       	brpl	.-8      	; 0x490 <GPIO_pin_read+0x5e>
 498:	81 70       	andi	r24, 0x01	; 1
        break;
 49a:	08 95       	ret
        case 'D':
        case 'd':
            read_value = READ_BIT(PIND, BIT); //read value of given pin in port D
 49c:	20 b3       	in	r18, 0x10	; 16
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	c9 01       	movw	r24, r18
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <GPIO_pin_read+0x76>
 4a4:	95 95       	asr	r25
 4a6:	87 95       	ror	r24
 4a8:	6a 95       	dec	r22
 4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <GPIO_pin_read+0x72>
 4ac:	81 70       	andi	r24, 0x01	; 1
        break;
 4ae:	08 95       	ret
} // end of GPIO_pin_write();


uint8 GPIO_pin_read(char PORT, uint8 BIT)
{
    uint8 read_value = 0;
 4b0:	80 e0       	ldi	r24, 0x00	; 0
        break;
        default:
        break;
    } //end of switch(PORT);
    return read_value;
} // end of GPIO_pin_read();
 4b2:	08 95       	ret

000004b4 <GPIO_pin_toggle>:


void GPIO_pin_toggle(char PORT, uint8 BIT)
{
    switch(PORT)
 4b4:	84 34       	cpi	r24, 0x44	; 68
 4b6:	09 f4       	brne	.+2      	; 0x4ba <GPIO_pin_toggle+0x6>
 4b8:	3d c0       	rjmp	.+122    	; 0x534 <GPIO_pin_toggle+0x80>
 4ba:	85 34       	cpi	r24, 0x45	; 69
 4bc:	40 f4       	brcc	.+16     	; 0x4ce <GPIO_pin_toggle+0x1a>
 4be:	82 34       	cpi	r24, 0x42	; 66
 4c0:	f9 f0       	breq	.+62     	; 0x500 <GPIO_pin_toggle+0x4c>
 4c2:	83 34       	cpi	r24, 0x43	; 67
 4c4:	50 f5       	brcc	.+84     	; 0x51a <GPIO_pin_toggle+0x66>
 4c6:	81 34       	cpi	r24, 0x41	; 65
 4c8:	09 f0       	breq	.+2      	; 0x4cc <GPIO_pin_toggle+0x18>
 4ca:	40 c0       	rjmp	.+128    	; 0x54c <GPIO_pin_toggle+0x98>
 4cc:	0c c0       	rjmp	.+24     	; 0x4e6 <GPIO_pin_toggle+0x32>
 4ce:	82 36       	cpi	r24, 0x62	; 98
 4d0:	b9 f0       	breq	.+46     	; 0x500 <GPIO_pin_toggle+0x4c>
 4d2:	83 36       	cpi	r24, 0x63	; 99
 4d4:	18 f4       	brcc	.+6      	; 0x4dc <GPIO_pin_toggle+0x28>
 4d6:	81 36       	cpi	r24, 0x61	; 97
 4d8:	c9 f5       	brne	.+114    	; 0x54c <GPIO_pin_toggle+0x98>
 4da:	05 c0       	rjmp	.+10     	; 0x4e6 <GPIO_pin_toggle+0x32>
 4dc:	83 36       	cpi	r24, 0x63	; 99
 4de:	e9 f0       	breq	.+58     	; 0x51a <GPIO_pin_toggle+0x66>
 4e0:	84 36       	cpi	r24, 0x64	; 100
 4e2:	a1 f5       	brne	.+104    	; 0x54c <GPIO_pin_toggle+0x98>
 4e4:	27 c0       	rjmp	.+78     	; 0x534 <GPIO_pin_toggle+0x80>
    {
        case 'A':
        case 'a':
            TOG_BIT(PORTA, BIT); //toggle value of given pin in port A
 4e6:	2b b3       	in	r18, 0x1b	; 27
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	ac 01       	movw	r20, r24
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <GPIO_pin_toggle+0x40>
 4f0:	44 0f       	add	r20, r20
 4f2:	55 1f       	adc	r21, r21
 4f4:	6a 95       	dec	r22
 4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <GPIO_pin_toggle+0x3c>
 4f8:	ba 01       	movw	r22, r20
 4fa:	62 27       	eor	r22, r18
 4fc:	6b bb       	out	0x1b, r22	; 27
        break;
 4fe:	08 95       	ret
        case 'B':
        case 'b':
            TOG_BIT(PORTB, BIT); //toggle value of given pin in port B
 500:	28 b3       	in	r18, 0x18	; 24
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	ac 01       	movw	r20, r24
 508:	02 c0       	rjmp	.+4      	; 0x50e <GPIO_pin_toggle+0x5a>
 50a:	44 0f       	add	r20, r20
 50c:	55 1f       	adc	r21, r21
 50e:	6a 95       	dec	r22
 510:	e2 f7       	brpl	.-8      	; 0x50a <GPIO_pin_toggle+0x56>
 512:	ba 01       	movw	r22, r20
 514:	62 27       	eor	r22, r18
 516:	68 bb       	out	0x18, r22	; 24
        break;
 518:	08 95       	ret
        case 'C':
        case 'c':
            TOG_BIT(PORTC, BIT); //toggle value of given pin in port C
 51a:	25 b3       	in	r18, 0x15	; 21
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	ac 01       	movw	r20, r24
 522:	02 c0       	rjmp	.+4      	; 0x528 <GPIO_pin_toggle+0x74>
 524:	44 0f       	add	r20, r20
 526:	55 1f       	adc	r21, r21
 528:	6a 95       	dec	r22
 52a:	e2 f7       	brpl	.-8      	; 0x524 <GPIO_pin_toggle+0x70>
 52c:	ba 01       	movw	r22, r20
 52e:	62 27       	eor	r22, r18
 530:	65 bb       	out	0x15, r22	; 21
        break;
 532:	08 95       	ret
        case 'D':
        case 'd':
            TOG_BIT(PORTD, BIT); //toggle value of given pin in port D
 534:	22 b3       	in	r18, 0x12	; 18
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	ac 01       	movw	r20, r24
 53c:	02 c0       	rjmp	.+4      	; 0x542 <GPIO_pin_toggle+0x8e>
 53e:	44 0f       	add	r20, r20
 540:	55 1f       	adc	r21, r21
 542:	6a 95       	dec	r22
 544:	e2 f7       	brpl	.-8      	; 0x53e <GPIO_pin_toggle+0x8a>
 546:	ba 01       	movw	r22, r20
 548:	62 27       	eor	r22, r18
 54a:	62 bb       	out	0x12, r22	; 18
 54c:	08 95       	ret

0000054e <GPIO_port_direction>:
} // end of GPIO_pin_toggle();


void GPIO_port_direction(char PORT, uint8 DIR)
{
    switch(PORT)
 54e:	84 34       	cpi	r24, 0x44	; 68
 550:	d9 f0       	breq	.+54     	; 0x588 <GPIO_port_direction+0x3a>
 552:	85 34       	cpi	r24, 0x45	; 69
 554:	38 f4       	brcc	.+14     	; 0x564 <GPIO_port_direction+0x16>
 556:	82 34       	cpi	r24, 0x42	; 66
 558:	99 f0       	breq	.+38     	; 0x580 <GPIO_port_direction+0x32>
 55a:	83 34       	cpi	r24, 0x43	; 67
 55c:	98 f4       	brcc	.+38     	; 0x584 <GPIO_port_direction+0x36>
 55e:	81 34       	cpi	r24, 0x41	; 65
 560:	a1 f4       	brne	.+40     	; 0x58a <GPIO_port_direction+0x3c>
 562:	0c c0       	rjmp	.+24     	; 0x57c <GPIO_port_direction+0x2e>
 564:	82 36       	cpi	r24, 0x62	; 98
 566:	61 f0       	breq	.+24     	; 0x580 <GPIO_port_direction+0x32>
 568:	83 36       	cpi	r24, 0x63	; 99
 56a:	18 f4       	brcc	.+6      	; 0x572 <GPIO_port_direction+0x24>
 56c:	81 36       	cpi	r24, 0x61	; 97
 56e:	69 f4       	brne	.+26     	; 0x58a <GPIO_port_direction+0x3c>
 570:	05 c0       	rjmp	.+10     	; 0x57c <GPIO_port_direction+0x2e>
 572:	83 36       	cpi	r24, 0x63	; 99
 574:	39 f0       	breq	.+14     	; 0x584 <GPIO_port_direction+0x36>
 576:	84 36       	cpi	r24, 0x64	; 100
 578:	41 f4       	brne	.+16     	; 0x58a <GPIO_port_direction+0x3c>
 57a:	06 c0       	rjmp	.+12     	; 0x588 <GPIO_port_direction+0x3a>
    {
        case 'A':
        case 'a':
            DDRA = DIR; // set direction of port A to the given DIR
 57c:	6a bb       	out	0x1a, r22	; 26
        break;
 57e:	08 95       	ret
        case 'B':
        case 'b':
            DDRB = DIR; // set direction of port B to the given DIR
 580:	67 bb       	out	0x17, r22	; 23
        break;
 582:	08 95       	ret
        case 'C':
        case 'c':
            DDRC = DIR; // set direction of port C to the given DIR
 584:	64 bb       	out	0x14, r22	; 20
        break;
 586:	08 95       	ret
        case 'D':
        case 'd':
            DDRD = DIR; // set direction of port D to the given DIR
 588:	61 bb       	out	0x11, r22	; 17
 58a:	08 95       	ret

0000058c <GPIO_port_write>:
} // end of GPIO_port_direction();


void GPIO_port_write(char PORT, uint8 DATA)
{
    switch(PORT)
 58c:	84 34       	cpi	r24, 0x44	; 68
 58e:	d9 f0       	breq	.+54     	; 0x5c6 <GPIO_port_write+0x3a>
 590:	85 34       	cpi	r24, 0x45	; 69
 592:	38 f4       	brcc	.+14     	; 0x5a2 <GPIO_port_write+0x16>
 594:	82 34       	cpi	r24, 0x42	; 66
 596:	99 f0       	breq	.+38     	; 0x5be <GPIO_port_write+0x32>
 598:	83 34       	cpi	r24, 0x43	; 67
 59a:	98 f4       	brcc	.+38     	; 0x5c2 <GPIO_port_write+0x36>
 59c:	81 34       	cpi	r24, 0x41	; 65
 59e:	a1 f4       	brne	.+40     	; 0x5c8 <GPIO_port_write+0x3c>
 5a0:	0c c0       	rjmp	.+24     	; 0x5ba <GPIO_port_write+0x2e>
 5a2:	82 36       	cpi	r24, 0x62	; 98
 5a4:	61 f0       	breq	.+24     	; 0x5be <GPIO_port_write+0x32>
 5a6:	83 36       	cpi	r24, 0x63	; 99
 5a8:	18 f4       	brcc	.+6      	; 0x5b0 <GPIO_port_write+0x24>
 5aa:	81 36       	cpi	r24, 0x61	; 97
 5ac:	69 f4       	brne	.+26     	; 0x5c8 <GPIO_port_write+0x3c>
 5ae:	05 c0       	rjmp	.+10     	; 0x5ba <GPIO_port_write+0x2e>
 5b0:	83 36       	cpi	r24, 0x63	; 99
 5b2:	39 f0       	breq	.+14     	; 0x5c2 <GPIO_port_write+0x36>
 5b4:	84 36       	cpi	r24, 0x64	; 100
 5b6:	41 f4       	brne	.+16     	; 0x5c8 <GPIO_port_write+0x3c>
 5b8:	06 c0       	rjmp	.+12     	; 0x5c6 <GPIO_port_write+0x3a>
    {
        case 'A':
        case 'a':
            PORTA = DATA; // write these data on port A
 5ba:	6b bb       	out	0x1b, r22	; 27
        break;
 5bc:	08 95       	ret
        case 'B':
        case 'b':
            PORTB = DATA; // write these data on port B
 5be:	68 bb       	out	0x18, r22	; 24
        break;
 5c0:	08 95       	ret
        case 'C':
        case 'c':
            PORTC = DATA; // write these data on port C
 5c2:	65 bb       	out	0x15, r22	; 21
        break;
 5c4:	08 95       	ret
        case 'D':
        case 'd':
            PORTD = DATA; // write these data on port D
 5c6:	62 bb       	out	0x12, r22	; 18
 5c8:	08 95       	ret

000005ca <GPIO_port_read>:


uint8 GPIO_port_read(char PORT)
{
    uint8 read_port = 0;
    switch(PORT)
 5ca:	84 34       	cpi	r24, 0x44	; 68
 5cc:	d9 f0       	breq	.+54     	; 0x604 <GPIO_port_read+0x3a>
 5ce:	85 34       	cpi	r24, 0x45	; 69
 5d0:	38 f4       	brcc	.+14     	; 0x5e0 <GPIO_port_read+0x16>
 5d2:	82 34       	cpi	r24, 0x42	; 66
 5d4:	99 f0       	breq	.+38     	; 0x5fc <GPIO_port_read+0x32>
 5d6:	83 34       	cpi	r24, 0x43	; 67
 5d8:	98 f4       	brcc	.+38     	; 0x600 <GPIO_port_read+0x36>
 5da:	81 34       	cpi	r24, 0x41	; 65
 5dc:	a9 f4       	brne	.+42     	; 0x608 <GPIO_port_read+0x3e>
 5de:	0c c0       	rjmp	.+24     	; 0x5f8 <GPIO_port_read+0x2e>
 5e0:	82 36       	cpi	r24, 0x62	; 98
 5e2:	61 f0       	breq	.+24     	; 0x5fc <GPIO_port_read+0x32>
 5e4:	83 36       	cpi	r24, 0x63	; 99
 5e6:	18 f4       	brcc	.+6      	; 0x5ee <GPIO_port_read+0x24>
 5e8:	81 36       	cpi	r24, 0x61	; 97
 5ea:	71 f4       	brne	.+28     	; 0x608 <GPIO_port_read+0x3e>
 5ec:	05 c0       	rjmp	.+10     	; 0x5f8 <GPIO_port_read+0x2e>
 5ee:	83 36       	cpi	r24, 0x63	; 99
 5f0:	39 f0       	breq	.+14     	; 0x600 <GPIO_port_read+0x36>
 5f2:	84 36       	cpi	r24, 0x64	; 100
 5f4:	49 f4       	brne	.+18     	; 0x608 <GPIO_port_read+0x3e>
 5f6:	06 c0       	rjmp	.+12     	; 0x604 <GPIO_port_read+0x3a>
    {
        case 'A':
        case 'a':
            read_port = PINA; // read data from port A
 5f8:	89 b3       	in	r24, 0x19	; 25
        break;
 5fa:	08 95       	ret
        case 'B':
        case 'b':
            read_port = PINB; // read data from port B
 5fc:	86 b3       	in	r24, 0x16	; 22
        break;
 5fe:	08 95       	ret
        case 'C':
        case 'c':
            read_port = PINC; // read data from port C
 600:	83 b3       	in	r24, 0x13	; 19
        break;
 602:	08 95       	ret
        case 'D':
        case 'd':
            read_port = PIND; // read data from port D
 604:	80 b3       	in	r24, 0x10	; 16
        break;
 606:	08 95       	ret
} // end of GPIO_port_write();


uint8 GPIO_port_read(char PORT)
{
    uint8 read_port = 0;
 608:	80 e0       	ldi	r24, 0x00	; 0
        break;
        default:
        break;
    } // end of switch(PORT);
    return read_port;
} // end of GPIO_port_read();
 60a:	08 95       	ret

0000060c <GPIO_pin_pull_up>:


void GPIO_pin_pull_up(char port_name, uint8 pin_number)
{
    switch(port_name)
 60c:	84 34       	cpi	r24, 0x44	; 68
 60e:	09 f4       	brne	.+2      	; 0x612 <GPIO_pin_pull_up+0x6>
 610:	57 c0       	rjmp	.+174    	; 0x6c0 <GPIO_pin_pull_up+0xb4>
 612:	85 34       	cpi	r24, 0x45	; 69
 614:	40 f4       	brcc	.+16     	; 0x626 <GPIO_pin_pull_up+0x1a>
 616:	82 34       	cpi	r24, 0x42	; 66
 618:	49 f1       	breq	.+82     	; 0x66c <GPIO_pin_pull_up+0x60>
 61a:	83 34       	cpi	r24, 0x43	; 67
 61c:	e0 f5       	brcc	.+120    	; 0x696 <GPIO_pin_pull_up+0x8a>
 61e:	81 34       	cpi	r24, 0x41	; 65
 620:	09 f0       	breq	.+2      	; 0x624 <GPIO_pin_pull_up+0x18>
 622:	62 c0       	rjmp	.+196    	; 0x6e8 <GPIO_pin_pull_up+0xdc>
 624:	0e c0       	rjmp	.+28     	; 0x642 <GPIO_pin_pull_up+0x36>
 626:	82 36       	cpi	r24, 0x62	; 98
 628:	09 f1       	breq	.+66     	; 0x66c <GPIO_pin_pull_up+0x60>
 62a:	83 36       	cpi	r24, 0x63	; 99
 62c:	20 f4       	brcc	.+8      	; 0x636 <GPIO_pin_pull_up+0x2a>
 62e:	81 36       	cpi	r24, 0x61	; 97
 630:	09 f0       	breq	.+2      	; 0x634 <GPIO_pin_pull_up+0x28>
 632:	5a c0       	rjmp	.+180    	; 0x6e8 <GPIO_pin_pull_up+0xdc>
 634:	06 c0       	rjmp	.+12     	; 0x642 <GPIO_pin_pull_up+0x36>
 636:	83 36       	cpi	r24, 0x63	; 99
 638:	71 f1       	breq	.+92     	; 0x696 <GPIO_pin_pull_up+0x8a>
 63a:	84 36       	cpi	r24, 0x64	; 100
 63c:	09 f0       	breq	.+2      	; 0x640 <GPIO_pin_pull_up+0x34>
 63e:	54 c0       	rjmp	.+168    	; 0x6e8 <GPIO_pin_pull_up+0xdc>
 640:	3f c0       	rjmp	.+126    	; 0x6c0 <GPIO_pin_pull_up+0xb4>
    {
        case 'A':
        case 'a':
            CLR_BIT(DDRA,pin_number); //set pin_number of port_name as input
 642:	2a b3       	in	r18, 0x1a	; 26
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	ac 01       	movw	r20, r24
 64a:	02 c0       	rjmp	.+4      	; 0x650 <GPIO_pin_pull_up+0x44>
 64c:	44 0f       	add	r20, r20
 64e:	55 1f       	adc	r21, r21
 650:	6a 95       	dec	r22
 652:	e2 f7       	brpl	.-8      	; 0x64c <GPIO_pin_pull_up+0x40>
 654:	ba 01       	movw	r22, r20
 656:	84 2f       	mov	r24, r20
 658:	80 95       	com	r24
 65a:	82 23       	and	r24, r18
 65c:	8a bb       	out	0x1a, r24	; 26
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 65e:	80 b7       	in	r24, 0x30	; 48
 660:	8b 7f       	andi	r24, 0xFB	; 251
 662:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTA,pin_number); //set pin_number of port_name as high value
 664:	8b b3       	in	r24, 0x1b	; 27
 666:	68 2b       	or	r22, r24
 668:	6b bb       	out	0x1b, r22	; 27
        break;
 66a:	08 95       	ret
        case 'B':
        case 'b':
            CLR_BIT(DDRB,pin_number); //set pin_number of port_name as input
 66c:	27 b3       	in	r18, 0x17	; 23
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	ac 01       	movw	r20, r24
 674:	02 c0       	rjmp	.+4      	; 0x67a <GPIO_pin_pull_up+0x6e>
 676:	44 0f       	add	r20, r20
 678:	55 1f       	adc	r21, r21
 67a:	6a 95       	dec	r22
 67c:	e2 f7       	brpl	.-8      	; 0x676 <GPIO_pin_pull_up+0x6a>
 67e:	ba 01       	movw	r22, r20
 680:	84 2f       	mov	r24, r20
 682:	80 95       	com	r24
 684:	82 23       	and	r24, r18
 686:	87 bb       	out	0x17, r24	; 23
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 688:	80 b7       	in	r24, 0x30	; 48
 68a:	8b 7f       	andi	r24, 0xFB	; 251
 68c:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTB,pin_number); //set pin_number of port_name as high value
 68e:	88 b3       	in	r24, 0x18	; 24
 690:	68 2b       	or	r22, r24
 692:	68 bb       	out	0x18, r22	; 24
        break;
 694:	08 95       	ret
        case 'C':
        case 'c':
            CLR_BIT(DDRC,pin_number); //set pin_number of port_name as input
 696:	24 b3       	in	r18, 0x14	; 20
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	ac 01       	movw	r20, r24
 69e:	02 c0       	rjmp	.+4      	; 0x6a4 <GPIO_pin_pull_up+0x98>
 6a0:	44 0f       	add	r20, r20
 6a2:	55 1f       	adc	r21, r21
 6a4:	6a 95       	dec	r22
 6a6:	e2 f7       	brpl	.-8      	; 0x6a0 <GPIO_pin_pull_up+0x94>
 6a8:	ba 01       	movw	r22, r20
 6aa:	84 2f       	mov	r24, r20
 6ac:	80 95       	com	r24
 6ae:	82 23       	and	r24, r18
 6b0:	84 bb       	out	0x14, r24	; 20
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 6b2:	80 b7       	in	r24, 0x30	; 48
 6b4:	8b 7f       	andi	r24, 0xFB	; 251
 6b6:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTC,pin_number); //set pin_number of port_name as high value
 6b8:	85 b3       	in	r24, 0x15	; 21
 6ba:	68 2b       	or	r22, r24
 6bc:	65 bb       	out	0x15, r22	; 21
        break;
 6be:	08 95       	ret
        case 'D':
        case 'd':
            CLR_BIT(DDRD,pin_number); //set pin_number of port_name as input
 6c0:	21 b3       	in	r18, 0x11	; 17
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	ac 01       	movw	r20, r24
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <GPIO_pin_pull_up+0xc2>
 6ca:	44 0f       	add	r20, r20
 6cc:	55 1f       	adc	r21, r21
 6ce:	6a 95       	dec	r22
 6d0:	e2 f7       	brpl	.-8      	; 0x6ca <GPIO_pin_pull_up+0xbe>
 6d2:	ba 01       	movw	r22, r20
 6d4:	84 2f       	mov	r24, r20
 6d6:	80 95       	com	r24
 6d8:	82 23       	and	r24, r18
 6da:	81 bb       	out	0x11, r24	; 17
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 6dc:	80 b7       	in	r24, 0x30	; 48
 6de:	8b 7f       	andi	r24, 0xFB	; 251
 6e0:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTD,pin_number); //set pin_number of port_name as high value
 6e2:	82 b3       	in	r24, 0x12	; 18
 6e4:	68 2b       	or	r22, r24
 6e6:	62 bb       	out	0x12, r22	; 18
 6e8:	08 95       	ret

000006ea <GPIO_port_write_high_nibble>:



void GPIO_port_write_high_nibble(char port_name, uint8 high_nibble)
{
    high_nibble <<= 4; //clear low_nibble bits in number
 6ea:	62 95       	swap	r22
 6ec:	60 7f       	andi	r22, 0xF0	; 240
    switch(port_name)
 6ee:	84 34       	cpi	r24, 0x44	; 68
 6f0:	51 f1       	breq	.+84     	; 0x746 <GPIO_port_write_high_nibble+0x5c>
 6f2:	85 34       	cpi	r24, 0x45	; 69
 6f4:	38 f4       	brcc	.+14     	; 0x704 <GPIO_port_write_high_nibble+0x1a>
 6f6:	82 34       	cpi	r24, 0x42	; 66
 6f8:	c1 f0       	breq	.+48     	; 0x72a <GPIO_port_write_high_nibble+0x40>
 6fa:	83 34       	cpi	r24, 0x43	; 67
 6fc:	e8 f4       	brcc	.+58     	; 0x738 <GPIO_port_write_high_nibble+0x4e>
 6fe:	81 34       	cpi	r24, 0x41	; 65
 700:	41 f5       	brne	.+80     	; 0x752 <GPIO_port_write_high_nibble+0x68>
 702:	0c c0       	rjmp	.+24     	; 0x71c <GPIO_port_write_high_nibble+0x32>
 704:	82 36       	cpi	r24, 0x62	; 98
 706:	89 f0       	breq	.+34     	; 0x72a <GPIO_port_write_high_nibble+0x40>
 708:	83 36       	cpi	r24, 0x63	; 99
 70a:	18 f4       	brcc	.+6      	; 0x712 <GPIO_port_write_high_nibble+0x28>
 70c:	81 36       	cpi	r24, 0x61	; 97
 70e:	09 f5       	brne	.+66     	; 0x752 <GPIO_port_write_high_nibble+0x68>
 710:	05 c0       	rjmp	.+10     	; 0x71c <GPIO_port_write_high_nibble+0x32>
 712:	83 36       	cpi	r24, 0x63	; 99
 714:	89 f0       	breq	.+34     	; 0x738 <GPIO_port_write_high_nibble+0x4e>
 716:	84 36       	cpi	r24, 0x64	; 100
 718:	e1 f4       	brne	.+56     	; 0x752 <GPIO_port_write_high_nibble+0x68>
 71a:	15 c0       	rjmp	.+42     	; 0x746 <GPIO_port_write_high_nibble+0x5c>
    {
        case 'A':
        case 'a':
            PORTA &= 0x0f;
 71c:	8b b3       	in	r24, 0x1b	; 27
 71e:	8f 70       	andi	r24, 0x0F	; 15
 720:	8b bb       	out	0x1b, r24	; 27
            PORTA |= high_nibble;
 722:	8b b3       	in	r24, 0x1b	; 27
 724:	68 2b       	or	r22, r24
 726:	6b bb       	out	0x1b, r22	; 27
        break;
 728:	08 95       	ret
        case 'B':
        case 'b':
            PORTB &= 0x0f;
 72a:	88 b3       	in	r24, 0x18	; 24
 72c:	8f 70       	andi	r24, 0x0F	; 15
 72e:	88 bb       	out	0x18, r24	; 24
            PORTB |= high_nibble;
 730:	88 b3       	in	r24, 0x18	; 24
 732:	68 2b       	or	r22, r24
 734:	68 bb       	out	0x18, r22	; 24
        break;
 736:	08 95       	ret
        case 'C':
        case 'c':
            PORTC &= 0x0f;
 738:	85 b3       	in	r24, 0x15	; 21
 73a:	8f 70       	andi	r24, 0x0F	; 15
 73c:	85 bb       	out	0x15, r24	; 21
            PORTC |= high_nibble;
 73e:	85 b3       	in	r24, 0x15	; 21
 740:	68 2b       	or	r22, r24
 742:	65 bb       	out	0x15, r22	; 21
        break;
 744:	08 95       	ret
        case 'D':
        case 'd':
            PORTD &= 0x0f;
 746:	82 b3       	in	r24, 0x12	; 18
 748:	8f 70       	andi	r24, 0x0F	; 15
 74a:	82 bb       	out	0x12, r24	; 18
            PORTD |= high_nibble;
 74c:	82 b3       	in	r24, 0x12	; 18
 74e:	68 2b       	or	r22, r24
 750:	62 bb       	out	0x12, r22	; 18
 752:	08 95       	ret

00000754 <GPIO_port_write_low_nibble>:
    } // end of switch(port_name);
}

void GPIO_port_write_low_nibble(char port_name, uint8 low_nibble)
{
    low_nibble &= 0x0f; //clear high_nibble bits in number
 754:	6f 70       	andi	r22, 0x0F	; 15
    switch(port_name)
 756:	84 34       	cpi	r24, 0x44	; 68
 758:	51 f1       	breq	.+84     	; 0x7ae <GPIO_port_write_low_nibble+0x5a>
 75a:	85 34       	cpi	r24, 0x45	; 69
 75c:	38 f4       	brcc	.+14     	; 0x76c <GPIO_port_write_low_nibble+0x18>
 75e:	82 34       	cpi	r24, 0x42	; 66
 760:	c1 f0       	breq	.+48     	; 0x792 <GPIO_port_write_low_nibble+0x3e>
 762:	83 34       	cpi	r24, 0x43	; 67
 764:	e8 f4       	brcc	.+58     	; 0x7a0 <GPIO_port_write_low_nibble+0x4c>
 766:	81 34       	cpi	r24, 0x41	; 65
 768:	41 f5       	brne	.+80     	; 0x7ba <GPIO_port_write_low_nibble+0x66>
 76a:	0c c0       	rjmp	.+24     	; 0x784 <GPIO_port_write_low_nibble+0x30>
 76c:	82 36       	cpi	r24, 0x62	; 98
 76e:	89 f0       	breq	.+34     	; 0x792 <GPIO_port_write_low_nibble+0x3e>
 770:	83 36       	cpi	r24, 0x63	; 99
 772:	18 f4       	brcc	.+6      	; 0x77a <GPIO_port_write_low_nibble+0x26>
 774:	81 36       	cpi	r24, 0x61	; 97
 776:	09 f5       	brne	.+66     	; 0x7ba <GPIO_port_write_low_nibble+0x66>
 778:	05 c0       	rjmp	.+10     	; 0x784 <GPIO_port_write_low_nibble+0x30>
 77a:	83 36       	cpi	r24, 0x63	; 99
 77c:	89 f0       	breq	.+34     	; 0x7a0 <GPIO_port_write_low_nibble+0x4c>
 77e:	84 36       	cpi	r24, 0x64	; 100
 780:	e1 f4       	brne	.+56     	; 0x7ba <GPIO_port_write_low_nibble+0x66>
 782:	15 c0       	rjmp	.+42     	; 0x7ae <GPIO_port_write_low_nibble+0x5a>
    {
        case 'A':
        case 'a':
            PORTA &= 0xf0;
 784:	8b b3       	in	r24, 0x1b	; 27
 786:	80 7f       	andi	r24, 0xF0	; 240
 788:	8b bb       	out	0x1b, r24	; 27
            PORTA |= low_nibble;
 78a:	8b b3       	in	r24, 0x1b	; 27
 78c:	68 2b       	or	r22, r24
 78e:	6b bb       	out	0x1b, r22	; 27
        break;
 790:	08 95       	ret
        case 'B':
        case 'b':
            PORTB &= 0xf0;
 792:	88 b3       	in	r24, 0x18	; 24
 794:	80 7f       	andi	r24, 0xF0	; 240
 796:	88 bb       	out	0x18, r24	; 24
            PORTB |= low_nibble;
 798:	88 b3       	in	r24, 0x18	; 24
 79a:	68 2b       	or	r22, r24
 79c:	68 bb       	out	0x18, r22	; 24
        break;
 79e:	08 95       	ret
        case 'C':
        case 'c':
            PORTC &= 0xf0;
 7a0:	85 b3       	in	r24, 0x15	; 21
 7a2:	80 7f       	andi	r24, 0xF0	; 240
 7a4:	85 bb       	out	0x15, r24	; 21
            PORTC |= low_nibble;
 7a6:	85 b3       	in	r24, 0x15	; 21
 7a8:	68 2b       	or	r22, r24
 7aa:	65 bb       	out	0x15, r22	; 21
        break;
 7ac:	08 95       	ret
        case 'D':
        case 'd':
            PORTD &= 0xf0;
 7ae:	82 b3       	in	r24, 0x12	; 18
 7b0:	80 7f       	andi	r24, 0xF0	; 240
 7b2:	82 bb       	out	0x12, r24	; 18
            PORTD |= low_nibble;
 7b4:	82 b3       	in	r24, 0x12	; 18
 7b6:	68 2b       	or	r22, r24
 7b8:	62 bb       	out	0x12, r22	; 18
 7ba:	08 95       	ret

000007bc <Seven_segment_init>:
#include "seven_segment.h"

void Seven_segment_init(char port_name, uint8 DP_pin)
{
 7bc:	cf 93       	push	r28
 7be:	df 93       	push	r29
 7c0:	d8 2f       	mov	r29, r24
    if(1 == DP_pin)
 7c2:	61 30       	cpi	r22, 0x01	; 1
 7c4:	21 f4       	brne	.+8      	; 0x7ce <Seven_segment_init+0x12>
    {
        GPIO_port_direction(port_name, 0xff); //initialize port_name as output pins with "DP" pin
 7c6:	6f ef       	ldi	r22, 0xFF	; 255
 7c8:	0e 94 a7 02 	call	0x54e	; 0x54e <GPIO_port_direction>
 7cc:	09 c0       	rjmp	.+18     	; 0x7e0 <Seven_segment_init+0x24>
#include "seven_segment.h"

void Seven_segment_init(char port_name, uint8 DP_pin)
{
    if(1 == DP_pin)
 7ce:	c0 e0       	ldi	r28, 0x00	; 0
    else
    {
        uint8 counter = 0;
        for(counter=0; counter<7; ++counter)
        {
            GPIO_pin_direction(port_name,counter,1);
 7d0:	8d 2f       	mov	r24, r29
 7d2:	6c 2f       	mov	r22, r28
 7d4:	41 e0       	ldi	r20, 0x01	; 1
 7d6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GPIO_pin_direction>
        GPIO_port_direction(port_name, 0xff); //initialize port_name as output pins with "DP" pin
    }
    else
    {
        uint8 counter = 0;
        for(counter=0; counter<7; ++counter)
 7da:	cf 5f       	subi	r28, 0xFF	; 255
 7dc:	c7 30       	cpi	r28, 0x07	; 7
 7de:	c1 f7       	brne	.-16     	; 0x7d0 <Seven_segment_init+0x14>
        {
            GPIO_pin_direction(port_name,counter,1);
        }
    }
}
 7e0:	df 91       	pop	r29
 7e2:	cf 91       	pop	r28
 7e4:	08 95       	ret

000007e6 <Seven_seg_BCD_init>:


void Seven_seg_BCD_init(char port_name)
{
 7e6:	cf 93       	push	r28
 7e8:	df 93       	push	r29
 7ea:	d8 2f       	mov	r29, r24
    uint8 counter = 0;
        for(counter=0; counter<4; ++counter)
 7ec:	c0 e0       	ldi	r28, 0x00	; 0
        {
            GPIO_pin_direction(port_name,counter,1);//initialize 4 pins from port_name as output pins
 7ee:	8d 2f       	mov	r24, r29
 7f0:	6c 2f       	mov	r22, r28
 7f2:	41 e0       	ldi	r20, 0x01	; 1
 7f4:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GPIO_pin_direction>


void Seven_seg_BCD_init(char port_name)
{
    uint8 counter = 0;
        for(counter=0; counter<4; ++counter)
 7f8:	cf 5f       	subi	r28, 0xFF	; 255
 7fa:	c4 30       	cpi	r28, 0x04	; 4
 7fc:	c1 f7       	brne	.-16     	; 0x7ee <Seven_seg_BCD_init+0x8>
        {
            GPIO_pin_direction(port_name,counter,1);//initialize 4 pins from port_name as output pins
        }
}
 7fe:	df 91       	pop	r29
 800:	cf 91       	pop	r28
 802:	08 95       	ret

00000804 <Seven_seg_BCD_write>:


void Seven_seg_BCD_write(char port_name, uint8 number)
{
 804:	cf 93       	push	r28
 806:	df 93       	push	r29
 808:	cd b7       	in	r28, 0x3d	; 61
 80a:	de b7       	in	r29, 0x3e	; 62
 80c:	2a 97       	sbiw	r28, 0x0a	; 10
 80e:	0f b6       	in	r0, 0x3f	; 63
 810:	f8 94       	cli
 812:	de bf       	out	0x3e, r29	; 62
 814:	0f be       	out	0x3f, r0	; 63
 816:	cd bf       	out	0x3d, r28	; 61
    uint8 cAnode_hex[] = {0x00,0x1,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09}; //{0,1,2,3,4,5,6,7,8,9}
 818:	de 01       	movw	r26, r28
 81a:	11 96       	adiw	r26, 0x01	; 1
 81c:	e0 e6       	ldi	r30, 0x60	; 96
 81e:	f0 e0       	ldi	r31, 0x00	; 0
 820:	9a e0       	ldi	r25, 0x0A	; 10
 822:	01 90       	ld	r0, Z+
 824:	0d 92       	st	X+, r0
 826:	91 50       	subi	r25, 0x01	; 1
 828:	e1 f7       	brne	.-8      	; 0x822 <Seven_seg_BCD_write+0x1e>
    GPIO_port_write(port_name, cAnode_hex[number]);
 82a:	fe 01       	movw	r30, r28
 82c:	e6 0f       	add	r30, r22
 82e:	f1 1d       	adc	r31, r1
 830:	61 81       	ldd	r22, Z+1	; 0x01
 832:	0e 94 c6 02 	call	0x58c	; 0x58c <GPIO_port_write>
}
 836:	2a 96       	adiw	r28, 0x0a	; 10
 838:	0f b6       	in	r0, 0x3f	; 63
 83a:	f8 94       	cli
 83c:	de bf       	out	0x3e, r29	; 62
 83e:	0f be       	out	0x3f, r0	; 63
 840:	cd bf       	out	0x3d, r28	; 61
 842:	df 91       	pop	r29
 844:	cf 91       	pop	r28
 846:	08 95       	ret

00000848 <Seven_segment_write>:




void Seven_segment_write(char port_name, uint8 number, uint8 DP_pin, uint8 common_anod)
{
 848:	cf 93       	push	r28
 84a:	df 93       	push	r29
 84c:	cd b7       	in	r28, 0x3d	; 61
 84e:	de b7       	in	r29, 0x3e	; 62
 850:	60 97       	sbiw	r28, 0x10	; 16
 852:	0f b6       	in	r0, 0x3f	; 63
 854:	f8 94       	cli
 856:	de bf       	out	0x3e, r29	; 62
 858:	0f be       	out	0x3f, r0	; 63
 85a:	cd bf       	out	0x3d, r28	; 61
    if(1 == common_anod) //Is the connected display a common anode?
 85c:	21 30       	cpi	r18, 0x01	; 1
 85e:	c9 f4       	brne	.+50     	; 0x892 <__stack+0x33>
    {
        uint8 cAnode_hex[] = {0x40,0x79,0x24,0x30,0x19,0x12,0x02,0x38,0x00,0x10,0x08,0x00,0x46,0x40,0x06,0x0e}; //{0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F}
 860:	de 01       	movw	r26, r28
 862:	11 96       	adiw	r26, 0x01	; 1
 864:	ea e6       	ldi	r30, 0x6A	; 106
 866:	f0 e0       	ldi	r31, 0x00	; 0
 868:	90 e1       	ldi	r25, 0x10	; 16
 86a:	01 90       	ld	r0, Z+
 86c:	0d 92       	st	X+, r0
 86e:	91 50       	subi	r25, 0x01	; 1
 870:	e1 f7       	brne	.-8      	; 0x86a <__stack+0xb>
        if(1 == DP_pin) //turn on the digit LED
 872:	41 30       	cpi	r20, 0x01	; 1
 874:	31 f4       	brne	.+12     	; 0x882 <__stack+0x23>
        {
            number = ( (cAnode_hex[number]) & (~(1<<7)) );
 876:	fe 01       	movw	r30, r28
 878:	e6 0f       	add	r30, r22
 87a:	f1 1d       	adc	r31, r1
 87c:	61 81       	ldd	r22, Z+1	; 0x01
 87e:	6f 77       	andi	r22, 0x7F	; 127
 880:	05 c0       	rjmp	.+10     	; 0x88c <__stack+0x2d>
        }
        else
        {
            number = ( (cAnode_hex[number]) | (1<<7) );
 882:	fe 01       	movw	r30, r28
 884:	e6 0f       	add	r30, r22
 886:	f1 1d       	adc	r31, r1
 888:	61 81       	ldd	r22, Z+1	; 0x01
 88a:	60 68       	ori	r22, 0x80	; 128
        }
        GPIO_port_write(port_name, number);
 88c:	0e 94 c6 02 	call	0x58c	; 0x58c <GPIO_port_write>
 890:	17 c0       	rjmp	.+46     	; 0x8c0 <__stack+0x61>
    }
    else
    {
        uint8 cCathode_hex[] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x47,0x7f,0x6f,0x77,0x7f,0x39,0x3f,0x79,0x71}; //{0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F}
 892:	de 01       	movw	r26, r28
 894:	11 96       	adiw	r26, 0x01	; 1
 896:	ea e7       	ldi	r30, 0x7A	; 122
 898:	f0 e0       	ldi	r31, 0x00	; 0
 89a:	90 e1       	ldi	r25, 0x10	; 16
 89c:	01 90       	ld	r0, Z+
 89e:	0d 92       	st	X+, r0
 8a0:	91 50       	subi	r25, 0x01	; 1
 8a2:	e1 f7       	brne	.-8      	; 0x89c <__stack+0x3d>
        if(1 == DP_pin) //turn on the digit LED
 8a4:	41 30       	cpi	r20, 0x01	; 1
 8a6:	31 f4       	brne	.+12     	; 0x8b4 <__stack+0x55>
        {
            number = ( (cCathode_hex[number]) | (DP_pin<<7) );
 8a8:	fe 01       	movw	r30, r28
 8aa:	e6 0f       	add	r30, r22
 8ac:	f1 1d       	adc	r31, r1
 8ae:	61 81       	ldd	r22, Z+1	; 0x01
 8b0:	60 68       	ori	r22, 0x80	; 128
 8b2:	04 c0       	rjmp	.+8      	; 0x8bc <__stack+0x5d>
        }
        else
        {
            number = cCathode_hex[number];
 8b4:	fe 01       	movw	r30, r28
 8b6:	e6 0f       	add	r30, r22
 8b8:	f1 1d       	adc	r31, r1
 8ba:	61 81       	ldd	r22, Z+1	; 0x01
        }
        GPIO_port_write(port_name, number);
 8bc:	0e 94 c6 02 	call	0x58c	; 0x58c <GPIO_port_write>
    }
}
 8c0:	60 96       	adiw	r28, 0x10	; 16
 8c2:	0f b6       	in	r0, 0x3f	; 63
 8c4:	f8 94       	cli
 8c6:	de bf       	out	0x3e, r29	; 62
 8c8:	0f be       	out	0x3f, r0	; 63
 8ca:	cd bf       	out	0x3d, r28	; 61
 8cc:	df 91       	pop	r29
 8ce:	cf 91       	pop	r28
 8d0:	08 95       	ret

000008d2 <__udivmodhi4>:
 8d2:	aa 1b       	sub	r26, r26
 8d4:	bb 1b       	sub	r27, r27
 8d6:	51 e1       	ldi	r21, 0x11	; 17
 8d8:	07 c0       	rjmp	.+14     	; 0x8e8 <__udivmodhi4_ep>

000008da <__udivmodhi4_loop>:
 8da:	aa 1f       	adc	r26, r26
 8dc:	bb 1f       	adc	r27, r27
 8de:	a6 17       	cp	r26, r22
 8e0:	b7 07       	cpc	r27, r23
 8e2:	10 f0       	brcs	.+4      	; 0x8e8 <__udivmodhi4_ep>
 8e4:	a6 1b       	sub	r26, r22
 8e6:	b7 0b       	sbc	r27, r23

000008e8 <__udivmodhi4_ep>:
 8e8:	88 1f       	adc	r24, r24
 8ea:	99 1f       	adc	r25, r25
 8ec:	5a 95       	dec	r21
 8ee:	a9 f7       	brne	.-22     	; 0x8da <__udivmodhi4_loop>
 8f0:	80 95       	com	r24
 8f2:	90 95       	com	r25
 8f4:	bc 01       	movw	r22, r24
 8f6:	cd 01       	movw	r24, r26
 8f8:	08 95       	ret

000008fa <_exit>:
 8fa:	f8 94       	cli

000008fc <__stop_program>:
 8fc:	ff cf       	rjmp	.-2      	; 0x8fc <__stop_program>
