
19-The_safe_using_LCD_keypad_EEPROM_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000123c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000078  00800060  0000123c  000012b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000c84  00000000  00000000  00001328  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000001b6  00000000  00000000  00001fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000200  00000000  00000000  00002168  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001959  00000000  00000000  00002368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000981  00000000  00000000  00003cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000fda  00000000  00000000  00004642  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003f0  00000000  00000000  0000561c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005e7  00000000  00000000  00005a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000137e  00000000  00000000  00005ff3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00007371  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e3       	ldi	r30, 0x3C	; 60
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 3d       	cpi	r26, 0xD8	; 216
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 ed       	ldi	r26, 0xD8	; 216
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3d       	cpi	r26, 0xD8	; 216
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

int main(void)
{
	uint32 password = 0;
	uint8 flag = 0xff, count = 0 ;
	LCD_init();
      92:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_init>
	keypad_init();
      96:	0e 94 7d 03 	call	0x6fa	; 0x6fa <keypad_init>
	LED_init('D',0); //initialize red LED.
      9a:	84 e4       	ldi	r24, 0x44	; 68
      9c:	60 e0       	ldi	r22, 0x00	; 0
      9e:	0e 94 8c 04 	call	0x918	; 0x918 <LED_init>
	LED_init('D',1); //initialize green LED.
      a2:	84 e4       	ldi	r24, 0x44	; 68
      a4:	61 e0       	ldi	r22, 0x01	; 1
      a6:	0e 94 8c 04 	call	0x918	; 0x918 <LED_init>
	
	/*turn off LEDs*/
	LED_turn_off('D',0);
      aa:	84 e4       	ldi	r24, 0x44	; 68
      ac:	60 e0       	ldi	r22, 0x00	; 0
      ae:	0e 94 94 04 	call	0x928	; 0x928 <LED_turn_off>
	LED_turn_off('D',1);
      b2:	84 e4       	ldi	r24, 0x44	; 68
      b4:	61 e0       	ldi	r22, 0x01	; 1
      b6:	0e 94 94 04 	call	0x928	; 0x928 <LED_turn_off>
	
	/*read the password from EEPROM*/
	password = safe_read_pass(address);
      ba:	80 e6       	ldi	r24, 0x60	; 96
      bc:	90 e0       	ldi	r25, 0x00	; 0
      be:	0e 94 9e 04 	call	0x93c	; 0x93c <safe_read_pass>
      c2:	dc 01       	movw	r26, r24
      c4:	cb 01       	movw	r24, r22
	
	/*check if it is first time to set password or not*/
	if (0xffffffff == password)
      c6:	8f 3f       	cpi	r24, 0xFF	; 255
      c8:	2f ef       	ldi	r18, 0xFF	; 255
      ca:	92 07       	cpc	r25, r18
      cc:	2f ef       	ldi	r18, 0xFF	; 255
      ce:	a2 07       	cpc	r26, r18
      d0:	2f ef       	ldi	r18, 0xFF	; 255
      d2:	b2 07       	cpc	r27, r18
      d4:	29 f4       	brne	.+10     	; 0xe0 <main+0x4e>
	{
		password = safe_set_pass(address);
      d6:	80 e6       	ldi	r24, 0x60	; 96
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <safe_set_pass>
      de:	0c c0       	rjmp	.+24     	; 0xf8 <main+0x66>
	}
	else
	{
		//not the first time, ask for the correct password.
		LED_turn_on('D',0); //turn on red LED, the safe is closed.
      e0:	84 e4       	ldi	r24, 0x44	; 68
      e2:	60 e0       	ldi	r22, 0x00	; 0
      e4:	0e 94 90 04 	call	0x920	; 0x920 <LED_turn_on>
		LED_turn_off('D',1);
      e8:	84 e4       	ldi	r24, 0x44	; 68
      ea:	61 e0       	ldi	r22, 0x01	; 1
      ec:	0e 94 94 04 	call	0x928	; 0x928 <LED_turn_off>
		flag = safe_check_pass(address);
      f0:	80 e6       	ldi	r24, 0x60	; 96
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	0e 94 b4 05 	call	0xb68	; 0xb68 <safe_check_pass>
	}
		
		
      f8:	80 e0       	ldi	r24, 0x00	; 0
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	08 95       	ret

000000fe <GPIO_pin_direction>:
#include "Atmega_GPIO.h"

void GPIO_pin_direction(char PORT, uint8 BIT, uint8 DIR)
{
    switch(PORT)
      fe:	84 34       	cpi	r24, 0x44	; 68
     100:	09 f4       	brne	.+2      	; 0x104 <GPIO_pin_direction+0x6>
     102:	71 c0       	rjmp	.+226    	; 0x1e6 <GPIO_pin_direction+0xe8>
     104:	85 34       	cpi	r24, 0x45	; 69
     106:	48 f4       	brcc	.+18     	; 0x11a <GPIO_pin_direction+0x1c>
     108:	82 34       	cpi	r24, 0x42	; 66
     10a:	99 f1       	breq	.+102    	; 0x172 <GPIO_pin_direction+0x74>
     10c:	83 34       	cpi	r24, 0x43	; 67
     10e:	08 f0       	brcs	.+2      	; 0x112 <GPIO_pin_direction+0x14>
     110:	4d c0       	rjmp	.+154    	; 0x1ac <GPIO_pin_direction+0xae>
     112:	81 34       	cpi	r24, 0x41	; 65
     114:	09 f0       	breq	.+2      	; 0x118 <GPIO_pin_direction+0x1a>
     116:	83 c0       	rjmp	.+262    	; 0x21e <GPIO_pin_direction+0x120>
     118:	0f c0       	rjmp	.+30     	; 0x138 <GPIO_pin_direction+0x3a>
     11a:	82 36       	cpi	r24, 0x62	; 98
     11c:	51 f1       	breq	.+84     	; 0x172 <GPIO_pin_direction+0x74>
     11e:	83 36       	cpi	r24, 0x63	; 99
     120:	20 f4       	brcc	.+8      	; 0x12a <GPIO_pin_direction+0x2c>
     122:	81 36       	cpi	r24, 0x61	; 97
     124:	09 f0       	breq	.+2      	; 0x128 <GPIO_pin_direction+0x2a>
     126:	7b c0       	rjmp	.+246    	; 0x21e <GPIO_pin_direction+0x120>
     128:	07 c0       	rjmp	.+14     	; 0x138 <GPIO_pin_direction+0x3a>
     12a:	83 36       	cpi	r24, 0x63	; 99
     12c:	09 f4       	brne	.+2      	; 0x130 <GPIO_pin_direction+0x32>
     12e:	3e c0       	rjmp	.+124    	; 0x1ac <GPIO_pin_direction+0xae>
     130:	84 36       	cpi	r24, 0x64	; 100
     132:	09 f0       	breq	.+2      	; 0x136 <GPIO_pin_direction+0x38>
     134:	74 c0       	rjmp	.+232    	; 0x21e <GPIO_pin_direction+0x120>
     136:	57 c0       	rjmp	.+174    	; 0x1e6 <GPIO_pin_direction+0xe8>
    {
        case 'A':
        case 'a':
            if(1 == DIR)
     138:	41 30       	cpi	r20, 0x01	; 1
     13a:	69 f4       	brne	.+26     	; 0x156 <GPIO_pin_direction+0x58>
            {
                SET_BIT(DDRA, BIT); //set direction of this pin in port A as output
     13c:	2a b3       	in	r18, 0x1a	; 26
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	ac 01       	movw	r20, r24
     144:	02 c0       	rjmp	.+4      	; 0x14a <GPIO_pin_direction+0x4c>
     146:	44 0f       	add	r20, r20
     148:	55 1f       	adc	r21, r21
     14a:	6a 95       	dec	r22
     14c:	e2 f7       	brpl	.-8      	; 0x146 <GPIO_pin_direction+0x48>
     14e:	ba 01       	movw	r22, r20
     150:	62 2b       	or	r22, r18
     152:	6a bb       	out	0x1a, r22	; 26
     154:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRA, BIT); //set direction of this pin in port A as input
     156:	2a b3       	in	r18, 0x1a	; 26
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	ac 01       	movw	r20, r24
     15e:	02 c0       	rjmp	.+4      	; 0x164 <GPIO_pin_direction+0x66>
     160:	44 0f       	add	r20, r20
     162:	55 1f       	adc	r21, r21
     164:	6a 95       	dec	r22
     166:	e2 f7       	brpl	.-8      	; 0x160 <GPIO_pin_direction+0x62>
     168:	ba 01       	movw	r22, r20
     16a:	60 95       	com	r22
     16c:	62 23       	and	r22, r18
     16e:	6a bb       	out	0x1a, r22	; 26
     170:	08 95       	ret
            }
        break;
        case 'B':
        case 'b':
            if(1 == DIR)
     172:	41 30       	cpi	r20, 0x01	; 1
     174:	69 f4       	brne	.+26     	; 0x190 <GPIO_pin_direction+0x92>
            {
                SET_BIT(DDRB, BIT); //set direction of this pin in port B as output
     176:	27 b3       	in	r18, 0x17	; 23
     178:	81 e0       	ldi	r24, 0x01	; 1
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	ac 01       	movw	r20, r24
     17e:	02 c0       	rjmp	.+4      	; 0x184 <GPIO_pin_direction+0x86>
     180:	44 0f       	add	r20, r20
     182:	55 1f       	adc	r21, r21
     184:	6a 95       	dec	r22
     186:	e2 f7       	brpl	.-8      	; 0x180 <GPIO_pin_direction+0x82>
     188:	ba 01       	movw	r22, r20
     18a:	62 2b       	or	r22, r18
     18c:	67 bb       	out	0x17, r22	; 23
     18e:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRB, BIT); //set direction of this pin in port B as input
     190:	27 b3       	in	r18, 0x17	; 23
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	ac 01       	movw	r20, r24
     198:	02 c0       	rjmp	.+4      	; 0x19e <GPIO_pin_direction+0xa0>
     19a:	44 0f       	add	r20, r20
     19c:	55 1f       	adc	r21, r21
     19e:	6a 95       	dec	r22
     1a0:	e2 f7       	brpl	.-8      	; 0x19a <GPIO_pin_direction+0x9c>
     1a2:	ba 01       	movw	r22, r20
     1a4:	60 95       	com	r22
     1a6:	62 23       	and	r22, r18
     1a8:	67 bb       	out	0x17, r22	; 23
     1aa:	08 95       	ret
            }
        break;
        case 'C':
        case 'c':
            if(1 == DIR)
     1ac:	41 30       	cpi	r20, 0x01	; 1
     1ae:	69 f4       	brne	.+26     	; 0x1ca <GPIO_pin_direction+0xcc>
            {
                SET_BIT(DDRC, BIT); //set direction of this pin in port B as output
     1b0:	24 b3       	in	r18, 0x14	; 20
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	ac 01       	movw	r20, r24
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <GPIO_pin_direction+0xc0>
     1ba:	44 0f       	add	r20, r20
     1bc:	55 1f       	adc	r21, r21
     1be:	6a 95       	dec	r22
     1c0:	e2 f7       	brpl	.-8      	; 0x1ba <GPIO_pin_direction+0xbc>
     1c2:	ba 01       	movw	r22, r20
     1c4:	62 2b       	or	r22, r18
     1c6:	64 bb       	out	0x14, r22	; 20
     1c8:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRC, BIT); //set direction of this pin in port B as input
     1ca:	24 b3       	in	r18, 0x14	; 20
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	ac 01       	movw	r20, r24
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <GPIO_pin_direction+0xda>
     1d4:	44 0f       	add	r20, r20
     1d6:	55 1f       	adc	r21, r21
     1d8:	6a 95       	dec	r22
     1da:	e2 f7       	brpl	.-8      	; 0x1d4 <GPIO_pin_direction+0xd6>
     1dc:	ba 01       	movw	r22, r20
     1de:	60 95       	com	r22
     1e0:	62 23       	and	r22, r18
     1e2:	64 bb       	out	0x14, r22	; 20
     1e4:	08 95       	ret
            }
        break;
        case 'D':
        case 'd':
            if(1 == DIR)
     1e6:	41 30       	cpi	r20, 0x01	; 1
     1e8:	69 f4       	brne	.+26     	; 0x204 <GPIO_pin_direction+0x106>
            {
                SET_BIT(DDRD, BIT); //set direction of this pin in port C as output
     1ea:	21 b3       	in	r18, 0x11	; 17
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	ac 01       	movw	r20, r24
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <GPIO_pin_direction+0xfa>
     1f4:	44 0f       	add	r20, r20
     1f6:	55 1f       	adc	r21, r21
     1f8:	6a 95       	dec	r22
     1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <GPIO_pin_direction+0xf6>
     1fc:	ba 01       	movw	r22, r20
     1fe:	62 2b       	or	r22, r18
     200:	61 bb       	out	0x11, r22	; 17
     202:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRD, BIT); //set direction of this pin in port C as input
     204:	21 b3       	in	r18, 0x11	; 17
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	ac 01       	movw	r20, r24
     20c:	02 c0       	rjmp	.+4      	; 0x212 <GPIO_pin_direction+0x114>
     20e:	44 0f       	add	r20, r20
     210:	55 1f       	adc	r21, r21
     212:	6a 95       	dec	r22
     214:	e2 f7       	brpl	.-8      	; 0x20e <GPIO_pin_direction+0x110>
     216:	ba 01       	movw	r22, r20
     218:	60 95       	com	r22
     21a:	62 23       	and	r22, r18
     21c:	61 bb       	out	0x11, r22	; 17
     21e:	08 95       	ret

00000220 <GPIO_pin_write>:
} //end of  GPIO_pin_direction();


void GPIO_pin_write(char PORT, uint8 BIT, uint8 DATA)
{
    switch(PORT)
     220:	84 34       	cpi	r24, 0x44	; 68
     222:	09 f4       	brne	.+2      	; 0x226 <GPIO_pin_write+0x6>
     224:	71 c0       	rjmp	.+226    	; 0x308 <GPIO_pin_write+0xe8>
     226:	85 34       	cpi	r24, 0x45	; 69
     228:	48 f4       	brcc	.+18     	; 0x23c <GPIO_pin_write+0x1c>
     22a:	82 34       	cpi	r24, 0x42	; 66
     22c:	99 f1       	breq	.+102    	; 0x294 <GPIO_pin_write+0x74>
     22e:	83 34       	cpi	r24, 0x43	; 67
     230:	08 f0       	brcs	.+2      	; 0x234 <GPIO_pin_write+0x14>
     232:	4d c0       	rjmp	.+154    	; 0x2ce <GPIO_pin_write+0xae>
     234:	81 34       	cpi	r24, 0x41	; 65
     236:	09 f0       	breq	.+2      	; 0x23a <GPIO_pin_write+0x1a>
     238:	83 c0       	rjmp	.+262    	; 0x340 <GPIO_pin_write+0x120>
     23a:	0f c0       	rjmp	.+30     	; 0x25a <GPIO_pin_write+0x3a>
     23c:	82 36       	cpi	r24, 0x62	; 98
     23e:	51 f1       	breq	.+84     	; 0x294 <GPIO_pin_write+0x74>
     240:	83 36       	cpi	r24, 0x63	; 99
     242:	20 f4       	brcc	.+8      	; 0x24c <GPIO_pin_write+0x2c>
     244:	81 36       	cpi	r24, 0x61	; 97
     246:	09 f0       	breq	.+2      	; 0x24a <GPIO_pin_write+0x2a>
     248:	7b c0       	rjmp	.+246    	; 0x340 <GPIO_pin_write+0x120>
     24a:	07 c0       	rjmp	.+14     	; 0x25a <GPIO_pin_write+0x3a>
     24c:	83 36       	cpi	r24, 0x63	; 99
     24e:	09 f4       	brne	.+2      	; 0x252 <GPIO_pin_write+0x32>
     250:	3e c0       	rjmp	.+124    	; 0x2ce <GPIO_pin_write+0xae>
     252:	84 36       	cpi	r24, 0x64	; 100
     254:	09 f0       	breq	.+2      	; 0x258 <GPIO_pin_write+0x38>
     256:	74 c0       	rjmp	.+232    	; 0x340 <GPIO_pin_write+0x120>
     258:	57 c0       	rjmp	.+174    	; 0x308 <GPIO_pin_write+0xe8>
    {
        case 'A':
        case 'a':
            if(1 == DATA)
     25a:	41 30       	cpi	r20, 0x01	; 1
     25c:	69 f4       	brne	.+26     	; 0x278 <GPIO_pin_write+0x58>
            {
                SET_BIT(PORTA, BIT); //set output value of this pin in port A to 1
     25e:	2b b3       	in	r18, 0x1b	; 27
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	ac 01       	movw	r20, r24
     266:	02 c0       	rjmp	.+4      	; 0x26c <GPIO_pin_write+0x4c>
     268:	44 0f       	add	r20, r20
     26a:	55 1f       	adc	r21, r21
     26c:	6a 95       	dec	r22
     26e:	e2 f7       	brpl	.-8      	; 0x268 <GPIO_pin_write+0x48>
     270:	ba 01       	movw	r22, r20
     272:	62 2b       	or	r22, r18
     274:	6b bb       	out	0x1b, r22	; 27
     276:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTA, BIT); //set output value of this pin in port A to 0
     278:	2b b3       	in	r18, 0x1b	; 27
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	ac 01       	movw	r20, r24
     280:	02 c0       	rjmp	.+4      	; 0x286 <GPIO_pin_write+0x66>
     282:	44 0f       	add	r20, r20
     284:	55 1f       	adc	r21, r21
     286:	6a 95       	dec	r22
     288:	e2 f7       	brpl	.-8      	; 0x282 <GPIO_pin_write+0x62>
     28a:	ba 01       	movw	r22, r20
     28c:	60 95       	com	r22
     28e:	62 23       	and	r22, r18
     290:	6b bb       	out	0x1b, r22	; 27
     292:	08 95       	ret
            }
        break;
        case 'B':
        case 'b':
            if(1 == DATA)
     294:	41 30       	cpi	r20, 0x01	; 1
     296:	69 f4       	brne	.+26     	; 0x2b2 <GPIO_pin_write+0x92>
            {
                SET_BIT(PORTB, BIT); //set output value of this pin in port B to 1
     298:	28 b3       	in	r18, 0x18	; 24
     29a:	81 e0       	ldi	r24, 0x01	; 1
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	ac 01       	movw	r20, r24
     2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <GPIO_pin_write+0x86>
     2a2:	44 0f       	add	r20, r20
     2a4:	55 1f       	adc	r21, r21
     2a6:	6a 95       	dec	r22
     2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <GPIO_pin_write+0x82>
     2aa:	ba 01       	movw	r22, r20
     2ac:	62 2b       	or	r22, r18
     2ae:	68 bb       	out	0x18, r22	; 24
     2b0:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTB, BIT); //set output value of this pin in port B to 0
     2b2:	28 b3       	in	r18, 0x18	; 24
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	ac 01       	movw	r20, r24
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <GPIO_pin_write+0xa0>
     2bc:	44 0f       	add	r20, r20
     2be:	55 1f       	adc	r21, r21
     2c0:	6a 95       	dec	r22
     2c2:	e2 f7       	brpl	.-8      	; 0x2bc <GPIO_pin_write+0x9c>
     2c4:	ba 01       	movw	r22, r20
     2c6:	60 95       	com	r22
     2c8:	62 23       	and	r22, r18
     2ca:	68 bb       	out	0x18, r22	; 24
     2cc:	08 95       	ret
            }
        break;
        case 'C':
        case 'c':
            if(1 == DATA)
     2ce:	41 30       	cpi	r20, 0x01	; 1
     2d0:	69 f4       	brne	.+26     	; 0x2ec <GPIO_pin_write+0xcc>
            {
                SET_BIT(PORTC, BIT); //set output value of this pin in port C to 1
     2d2:	25 b3       	in	r18, 0x15	; 21
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	ac 01       	movw	r20, r24
     2da:	02 c0       	rjmp	.+4      	; 0x2e0 <GPIO_pin_write+0xc0>
     2dc:	44 0f       	add	r20, r20
     2de:	55 1f       	adc	r21, r21
     2e0:	6a 95       	dec	r22
     2e2:	e2 f7       	brpl	.-8      	; 0x2dc <GPIO_pin_write+0xbc>
     2e4:	ba 01       	movw	r22, r20
     2e6:	62 2b       	or	r22, r18
     2e8:	65 bb       	out	0x15, r22	; 21
     2ea:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTC, BIT); //set output value of this pin in port C to 0
     2ec:	25 b3       	in	r18, 0x15	; 21
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	ac 01       	movw	r20, r24
     2f4:	02 c0       	rjmp	.+4      	; 0x2fa <GPIO_pin_write+0xda>
     2f6:	44 0f       	add	r20, r20
     2f8:	55 1f       	adc	r21, r21
     2fa:	6a 95       	dec	r22
     2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <GPIO_pin_write+0xd6>
     2fe:	ba 01       	movw	r22, r20
     300:	60 95       	com	r22
     302:	62 23       	and	r22, r18
     304:	65 bb       	out	0x15, r22	; 21
     306:	08 95       	ret
            }
        break;
        case 'D':
        case 'd':
            if(1 == DATA)
     308:	41 30       	cpi	r20, 0x01	; 1
     30a:	69 f4       	brne	.+26     	; 0x326 <GPIO_pin_write+0x106>
            {
                SET_BIT(PORTD, BIT); //set output value of this pin in port C to 1
     30c:	22 b3       	in	r18, 0x12	; 18
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	ac 01       	movw	r20, r24
     314:	02 c0       	rjmp	.+4      	; 0x31a <GPIO_pin_write+0xfa>
     316:	44 0f       	add	r20, r20
     318:	55 1f       	adc	r21, r21
     31a:	6a 95       	dec	r22
     31c:	e2 f7       	brpl	.-8      	; 0x316 <GPIO_pin_write+0xf6>
     31e:	ba 01       	movw	r22, r20
     320:	62 2b       	or	r22, r18
     322:	62 bb       	out	0x12, r22	; 18
     324:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTD, BIT); //set output value of this pin in port C to 0
     326:	22 b3       	in	r18, 0x12	; 18
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	ac 01       	movw	r20, r24
     32e:	02 c0       	rjmp	.+4      	; 0x334 <GPIO_pin_write+0x114>
     330:	44 0f       	add	r20, r20
     332:	55 1f       	adc	r21, r21
     334:	6a 95       	dec	r22
     336:	e2 f7       	brpl	.-8      	; 0x330 <GPIO_pin_write+0x110>
     338:	ba 01       	movw	r22, r20
     33a:	60 95       	com	r22
     33c:	62 23       	and	r22, r18
     33e:	62 bb       	out	0x12, r22	; 18
     340:	08 95       	ret

00000342 <GPIO_pin_read>:


uint8 GPIO_pin_read(char PORT, uint8 BIT)
{
    uint8 read_value = 0;
    switch(PORT)
     342:	84 34       	cpi	r24, 0x44	; 68
     344:	99 f1       	breq	.+102    	; 0x3ac <GPIO_pin_read+0x6a>
     346:	85 34       	cpi	r24, 0x45	; 69
     348:	38 f4       	brcc	.+14     	; 0x358 <GPIO_pin_read+0x16>
     34a:	82 34       	cpi	r24, 0x42	; 66
     34c:	d9 f0       	breq	.+54     	; 0x384 <GPIO_pin_read+0x42>
     34e:	83 34       	cpi	r24, 0x43	; 67
     350:	18 f5       	brcc	.+70     	; 0x398 <GPIO_pin_read+0x56>
     352:	81 34       	cpi	r24, 0x41	; 65
     354:	a9 f5       	brne	.+106    	; 0x3c0 <GPIO_pin_read+0x7e>
     356:	0c c0       	rjmp	.+24     	; 0x370 <GPIO_pin_read+0x2e>
     358:	82 36       	cpi	r24, 0x62	; 98
     35a:	a1 f0       	breq	.+40     	; 0x384 <GPIO_pin_read+0x42>
     35c:	83 36       	cpi	r24, 0x63	; 99
     35e:	18 f4       	brcc	.+6      	; 0x366 <GPIO_pin_read+0x24>
     360:	81 36       	cpi	r24, 0x61	; 97
     362:	71 f5       	brne	.+92     	; 0x3c0 <GPIO_pin_read+0x7e>
     364:	05 c0       	rjmp	.+10     	; 0x370 <GPIO_pin_read+0x2e>
     366:	83 36       	cpi	r24, 0x63	; 99
     368:	b9 f0       	breq	.+46     	; 0x398 <GPIO_pin_read+0x56>
     36a:	84 36       	cpi	r24, 0x64	; 100
     36c:	49 f5       	brne	.+82     	; 0x3c0 <GPIO_pin_read+0x7e>
     36e:	1e c0       	rjmp	.+60     	; 0x3ac <GPIO_pin_read+0x6a>
    {
        case 'A':
        case 'a':
            read_value = READ_BIT(PINA, BIT); //read value of given pin in port A
     370:	29 b3       	in	r18, 0x19	; 25
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	c9 01       	movw	r24, r18
     376:	02 c0       	rjmp	.+4      	; 0x37c <GPIO_pin_read+0x3a>
     378:	95 95       	asr	r25
     37a:	87 95       	ror	r24
     37c:	6a 95       	dec	r22
     37e:	e2 f7       	brpl	.-8      	; 0x378 <GPIO_pin_read+0x36>
     380:	81 70       	andi	r24, 0x01	; 1
        break;
     382:	08 95       	ret
        case 'B':
        case 'b':
            read_value = READ_BIT(PINB, BIT); //read value of given pin in port B
     384:	26 b3       	in	r18, 0x16	; 22
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	c9 01       	movw	r24, r18
     38a:	02 c0       	rjmp	.+4      	; 0x390 <GPIO_pin_read+0x4e>
     38c:	95 95       	asr	r25
     38e:	87 95       	ror	r24
     390:	6a 95       	dec	r22
     392:	e2 f7       	brpl	.-8      	; 0x38c <GPIO_pin_read+0x4a>
     394:	81 70       	andi	r24, 0x01	; 1
        break;
     396:	08 95       	ret
        case 'C':
        case 'c':
            read_value = READ_BIT(PINC, BIT); //read value of given pin in port C
     398:	23 b3       	in	r18, 0x13	; 19
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	c9 01       	movw	r24, r18
     39e:	02 c0       	rjmp	.+4      	; 0x3a4 <GPIO_pin_read+0x62>
     3a0:	95 95       	asr	r25
     3a2:	87 95       	ror	r24
     3a4:	6a 95       	dec	r22
     3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <GPIO_pin_read+0x5e>
     3a8:	81 70       	andi	r24, 0x01	; 1
        break;
     3aa:	08 95       	ret
        case 'D':
        case 'd':
            read_value = READ_BIT(PIND, BIT); //read value of given pin in port D
     3ac:	20 b3       	in	r18, 0x10	; 16
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	c9 01       	movw	r24, r18
     3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <GPIO_pin_read+0x76>
     3b4:	95 95       	asr	r25
     3b6:	87 95       	ror	r24
     3b8:	6a 95       	dec	r22
     3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <GPIO_pin_read+0x72>
     3bc:	81 70       	andi	r24, 0x01	; 1
        break;
     3be:	08 95       	ret
} // end of GPIO_pin_write();


uint8 GPIO_pin_read(char PORT, uint8 BIT)
{
    uint8 read_value = 0;
     3c0:	80 e0       	ldi	r24, 0x00	; 0
        break;
        default:
        break;
    } //end of switch(PORT);
    return read_value;
} // end of GPIO_pin_read();
     3c2:	08 95       	ret

000003c4 <GPIO_pin_toggle>:


void GPIO_pin_toggle(char PORT, uint8 BIT)
{
    switch(PORT)
     3c4:	84 34       	cpi	r24, 0x44	; 68
     3c6:	09 f4       	brne	.+2      	; 0x3ca <GPIO_pin_toggle+0x6>
     3c8:	3d c0       	rjmp	.+122    	; 0x444 <GPIO_pin_toggle+0x80>
     3ca:	85 34       	cpi	r24, 0x45	; 69
     3cc:	40 f4       	brcc	.+16     	; 0x3de <GPIO_pin_toggle+0x1a>
     3ce:	82 34       	cpi	r24, 0x42	; 66
     3d0:	f9 f0       	breq	.+62     	; 0x410 <GPIO_pin_toggle+0x4c>
     3d2:	83 34       	cpi	r24, 0x43	; 67
     3d4:	50 f5       	brcc	.+84     	; 0x42a <GPIO_pin_toggle+0x66>
     3d6:	81 34       	cpi	r24, 0x41	; 65
     3d8:	09 f0       	breq	.+2      	; 0x3dc <GPIO_pin_toggle+0x18>
     3da:	40 c0       	rjmp	.+128    	; 0x45c <GPIO_pin_toggle+0x98>
     3dc:	0c c0       	rjmp	.+24     	; 0x3f6 <GPIO_pin_toggle+0x32>
     3de:	82 36       	cpi	r24, 0x62	; 98
     3e0:	b9 f0       	breq	.+46     	; 0x410 <GPIO_pin_toggle+0x4c>
     3e2:	83 36       	cpi	r24, 0x63	; 99
     3e4:	18 f4       	brcc	.+6      	; 0x3ec <GPIO_pin_toggle+0x28>
     3e6:	81 36       	cpi	r24, 0x61	; 97
     3e8:	c9 f5       	brne	.+114    	; 0x45c <GPIO_pin_toggle+0x98>
     3ea:	05 c0       	rjmp	.+10     	; 0x3f6 <GPIO_pin_toggle+0x32>
     3ec:	83 36       	cpi	r24, 0x63	; 99
     3ee:	e9 f0       	breq	.+58     	; 0x42a <GPIO_pin_toggle+0x66>
     3f0:	84 36       	cpi	r24, 0x64	; 100
     3f2:	a1 f5       	brne	.+104    	; 0x45c <GPIO_pin_toggle+0x98>
     3f4:	27 c0       	rjmp	.+78     	; 0x444 <GPIO_pin_toggle+0x80>
    {
        case 'A':
        case 'a':
            TOG_BIT(PORTA, BIT); //toggle value of given pin in port A
     3f6:	2b b3       	in	r18, 0x1b	; 27
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	ac 01       	movw	r20, r24
     3fe:	02 c0       	rjmp	.+4      	; 0x404 <GPIO_pin_toggle+0x40>
     400:	44 0f       	add	r20, r20
     402:	55 1f       	adc	r21, r21
     404:	6a 95       	dec	r22
     406:	e2 f7       	brpl	.-8      	; 0x400 <GPIO_pin_toggle+0x3c>
     408:	ba 01       	movw	r22, r20
     40a:	62 27       	eor	r22, r18
     40c:	6b bb       	out	0x1b, r22	; 27
        break;
     40e:	08 95       	ret
        case 'B':
        case 'b':
            TOG_BIT(PORTB, BIT); //toggle value of given pin in port B
     410:	28 b3       	in	r18, 0x18	; 24
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	ac 01       	movw	r20, r24
     418:	02 c0       	rjmp	.+4      	; 0x41e <GPIO_pin_toggle+0x5a>
     41a:	44 0f       	add	r20, r20
     41c:	55 1f       	adc	r21, r21
     41e:	6a 95       	dec	r22
     420:	e2 f7       	brpl	.-8      	; 0x41a <GPIO_pin_toggle+0x56>
     422:	ba 01       	movw	r22, r20
     424:	62 27       	eor	r22, r18
     426:	68 bb       	out	0x18, r22	; 24
        break;
     428:	08 95       	ret
        case 'C':
        case 'c':
            TOG_BIT(PORTC, BIT); //toggle value of given pin in port C
     42a:	25 b3       	in	r18, 0x15	; 21
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	ac 01       	movw	r20, r24
     432:	02 c0       	rjmp	.+4      	; 0x438 <GPIO_pin_toggle+0x74>
     434:	44 0f       	add	r20, r20
     436:	55 1f       	adc	r21, r21
     438:	6a 95       	dec	r22
     43a:	e2 f7       	brpl	.-8      	; 0x434 <GPIO_pin_toggle+0x70>
     43c:	ba 01       	movw	r22, r20
     43e:	62 27       	eor	r22, r18
     440:	65 bb       	out	0x15, r22	; 21
        break;
     442:	08 95       	ret
        case 'D':
        case 'd':
            TOG_BIT(PORTD, BIT); //toggle value of given pin in port D
     444:	22 b3       	in	r18, 0x12	; 18
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	ac 01       	movw	r20, r24
     44c:	02 c0       	rjmp	.+4      	; 0x452 <GPIO_pin_toggle+0x8e>
     44e:	44 0f       	add	r20, r20
     450:	55 1f       	adc	r21, r21
     452:	6a 95       	dec	r22
     454:	e2 f7       	brpl	.-8      	; 0x44e <GPIO_pin_toggle+0x8a>
     456:	ba 01       	movw	r22, r20
     458:	62 27       	eor	r22, r18
     45a:	62 bb       	out	0x12, r22	; 18
     45c:	08 95       	ret

0000045e <GPIO_port_direction>:
} // end of GPIO_pin_toggle();


void GPIO_port_direction(char PORT, uint8 DIR)
{
    switch(PORT)
     45e:	84 34       	cpi	r24, 0x44	; 68
     460:	d9 f0       	breq	.+54     	; 0x498 <GPIO_port_direction+0x3a>
     462:	85 34       	cpi	r24, 0x45	; 69
     464:	38 f4       	brcc	.+14     	; 0x474 <GPIO_port_direction+0x16>
     466:	82 34       	cpi	r24, 0x42	; 66
     468:	99 f0       	breq	.+38     	; 0x490 <GPIO_port_direction+0x32>
     46a:	83 34       	cpi	r24, 0x43	; 67
     46c:	98 f4       	brcc	.+38     	; 0x494 <GPIO_port_direction+0x36>
     46e:	81 34       	cpi	r24, 0x41	; 65
     470:	a1 f4       	brne	.+40     	; 0x49a <GPIO_port_direction+0x3c>
     472:	0c c0       	rjmp	.+24     	; 0x48c <GPIO_port_direction+0x2e>
     474:	82 36       	cpi	r24, 0x62	; 98
     476:	61 f0       	breq	.+24     	; 0x490 <GPIO_port_direction+0x32>
     478:	83 36       	cpi	r24, 0x63	; 99
     47a:	18 f4       	brcc	.+6      	; 0x482 <GPIO_port_direction+0x24>
     47c:	81 36       	cpi	r24, 0x61	; 97
     47e:	69 f4       	brne	.+26     	; 0x49a <GPIO_port_direction+0x3c>
     480:	05 c0       	rjmp	.+10     	; 0x48c <GPIO_port_direction+0x2e>
     482:	83 36       	cpi	r24, 0x63	; 99
     484:	39 f0       	breq	.+14     	; 0x494 <GPIO_port_direction+0x36>
     486:	84 36       	cpi	r24, 0x64	; 100
     488:	41 f4       	brne	.+16     	; 0x49a <GPIO_port_direction+0x3c>
     48a:	06 c0       	rjmp	.+12     	; 0x498 <GPIO_port_direction+0x3a>
    {
        case 'A':
        case 'a':
            DDRA = DIR; // set direction of port A to the given DIR
     48c:	6a bb       	out	0x1a, r22	; 26
        break;
     48e:	08 95       	ret
        case 'B':
        case 'b':
            DDRB = DIR; // set direction of port B to the given DIR
     490:	67 bb       	out	0x17, r22	; 23
        break;
     492:	08 95       	ret
        case 'C':
        case 'c':
            DDRC = DIR; // set direction of port C to the given DIR
     494:	64 bb       	out	0x14, r22	; 20
        break;
     496:	08 95       	ret
        case 'D':
        case 'd':
            DDRD = DIR; // set direction of port D to the given DIR
     498:	61 bb       	out	0x11, r22	; 17
     49a:	08 95       	ret

0000049c <GPIO_port_write>:
} // end of GPIO_port_direction();


void GPIO_port_write(char PORT, uint8 DATA)
{
    switch(PORT)
     49c:	84 34       	cpi	r24, 0x44	; 68
     49e:	d9 f0       	breq	.+54     	; 0x4d6 <GPIO_port_write+0x3a>
     4a0:	85 34       	cpi	r24, 0x45	; 69
     4a2:	38 f4       	brcc	.+14     	; 0x4b2 <GPIO_port_write+0x16>
     4a4:	82 34       	cpi	r24, 0x42	; 66
     4a6:	99 f0       	breq	.+38     	; 0x4ce <GPIO_port_write+0x32>
     4a8:	83 34       	cpi	r24, 0x43	; 67
     4aa:	98 f4       	brcc	.+38     	; 0x4d2 <GPIO_port_write+0x36>
     4ac:	81 34       	cpi	r24, 0x41	; 65
     4ae:	a1 f4       	brne	.+40     	; 0x4d8 <GPIO_port_write+0x3c>
     4b0:	0c c0       	rjmp	.+24     	; 0x4ca <GPIO_port_write+0x2e>
     4b2:	82 36       	cpi	r24, 0x62	; 98
     4b4:	61 f0       	breq	.+24     	; 0x4ce <GPIO_port_write+0x32>
     4b6:	83 36       	cpi	r24, 0x63	; 99
     4b8:	18 f4       	brcc	.+6      	; 0x4c0 <GPIO_port_write+0x24>
     4ba:	81 36       	cpi	r24, 0x61	; 97
     4bc:	69 f4       	brne	.+26     	; 0x4d8 <GPIO_port_write+0x3c>
     4be:	05 c0       	rjmp	.+10     	; 0x4ca <GPIO_port_write+0x2e>
     4c0:	83 36       	cpi	r24, 0x63	; 99
     4c2:	39 f0       	breq	.+14     	; 0x4d2 <GPIO_port_write+0x36>
     4c4:	84 36       	cpi	r24, 0x64	; 100
     4c6:	41 f4       	brne	.+16     	; 0x4d8 <GPIO_port_write+0x3c>
     4c8:	06 c0       	rjmp	.+12     	; 0x4d6 <GPIO_port_write+0x3a>
    {
        case 'A':
        case 'a':
            PORTA = DATA; // write these data on port A
     4ca:	6b bb       	out	0x1b, r22	; 27
        break;
     4cc:	08 95       	ret
        case 'B':
        case 'b':
            PORTB = DATA; // write these data on port B
     4ce:	68 bb       	out	0x18, r22	; 24
        break;
     4d0:	08 95       	ret
        case 'C':
        case 'c':
            PORTC = DATA; // write these data on port C
     4d2:	65 bb       	out	0x15, r22	; 21
        break;
     4d4:	08 95       	ret
        case 'D':
        case 'd':
            PORTD = DATA; // write these data on port D
     4d6:	62 bb       	out	0x12, r22	; 18
     4d8:	08 95       	ret

000004da <GPIO_port_read>:


uint8 GPIO_port_read(char PORT)
{
    uint8 read_port = 0;
    switch(PORT)
     4da:	84 34       	cpi	r24, 0x44	; 68
     4dc:	d9 f0       	breq	.+54     	; 0x514 <GPIO_port_read+0x3a>
     4de:	85 34       	cpi	r24, 0x45	; 69
     4e0:	38 f4       	brcc	.+14     	; 0x4f0 <GPIO_port_read+0x16>
     4e2:	82 34       	cpi	r24, 0x42	; 66
     4e4:	99 f0       	breq	.+38     	; 0x50c <GPIO_port_read+0x32>
     4e6:	83 34       	cpi	r24, 0x43	; 67
     4e8:	98 f4       	brcc	.+38     	; 0x510 <GPIO_port_read+0x36>
     4ea:	81 34       	cpi	r24, 0x41	; 65
     4ec:	a9 f4       	brne	.+42     	; 0x518 <GPIO_port_read+0x3e>
     4ee:	0c c0       	rjmp	.+24     	; 0x508 <GPIO_port_read+0x2e>
     4f0:	82 36       	cpi	r24, 0x62	; 98
     4f2:	61 f0       	breq	.+24     	; 0x50c <GPIO_port_read+0x32>
     4f4:	83 36       	cpi	r24, 0x63	; 99
     4f6:	18 f4       	brcc	.+6      	; 0x4fe <GPIO_port_read+0x24>
     4f8:	81 36       	cpi	r24, 0x61	; 97
     4fa:	71 f4       	brne	.+28     	; 0x518 <GPIO_port_read+0x3e>
     4fc:	05 c0       	rjmp	.+10     	; 0x508 <GPIO_port_read+0x2e>
     4fe:	83 36       	cpi	r24, 0x63	; 99
     500:	39 f0       	breq	.+14     	; 0x510 <GPIO_port_read+0x36>
     502:	84 36       	cpi	r24, 0x64	; 100
     504:	49 f4       	brne	.+18     	; 0x518 <GPIO_port_read+0x3e>
     506:	06 c0       	rjmp	.+12     	; 0x514 <GPIO_port_read+0x3a>
    {
        case 'A':
        case 'a':
            read_port = PINA; // read data from port A
     508:	89 b3       	in	r24, 0x19	; 25
        break;
     50a:	08 95       	ret
        case 'B':
        case 'b':
            read_port = PINB; // read data from port B
     50c:	86 b3       	in	r24, 0x16	; 22
        break;
     50e:	08 95       	ret
        case 'C':
        case 'c':
            read_port = PINC; // read data from port C
     510:	83 b3       	in	r24, 0x13	; 19
        break;
     512:	08 95       	ret
        case 'D':
        case 'd':
            read_port = PIND; // read data from port D
     514:	80 b3       	in	r24, 0x10	; 16
        break;
     516:	08 95       	ret
} // end of GPIO_port_write();


uint8 GPIO_port_read(char PORT)
{
    uint8 read_port = 0;
     518:	80 e0       	ldi	r24, 0x00	; 0
        break;
        default:
        break;
    } // end of switch(PORT);
    return read_port;
} // end of GPIO_port_read();
     51a:	08 95       	ret

0000051c <GPIO_pin_pull_up>:


void GPIO_pin_pull_up(char port_name, uint8 pin_number)
{
    switch(port_name)
     51c:	84 34       	cpi	r24, 0x44	; 68
     51e:	09 f4       	brne	.+2      	; 0x522 <GPIO_pin_pull_up+0x6>
     520:	57 c0       	rjmp	.+174    	; 0x5d0 <GPIO_pin_pull_up+0xb4>
     522:	85 34       	cpi	r24, 0x45	; 69
     524:	40 f4       	brcc	.+16     	; 0x536 <GPIO_pin_pull_up+0x1a>
     526:	82 34       	cpi	r24, 0x42	; 66
     528:	49 f1       	breq	.+82     	; 0x57c <GPIO_pin_pull_up+0x60>
     52a:	83 34       	cpi	r24, 0x43	; 67
     52c:	e0 f5       	brcc	.+120    	; 0x5a6 <GPIO_pin_pull_up+0x8a>
     52e:	81 34       	cpi	r24, 0x41	; 65
     530:	09 f0       	breq	.+2      	; 0x534 <GPIO_pin_pull_up+0x18>
     532:	62 c0       	rjmp	.+196    	; 0x5f8 <GPIO_pin_pull_up+0xdc>
     534:	0e c0       	rjmp	.+28     	; 0x552 <GPIO_pin_pull_up+0x36>
     536:	82 36       	cpi	r24, 0x62	; 98
     538:	09 f1       	breq	.+66     	; 0x57c <GPIO_pin_pull_up+0x60>
     53a:	83 36       	cpi	r24, 0x63	; 99
     53c:	20 f4       	brcc	.+8      	; 0x546 <GPIO_pin_pull_up+0x2a>
     53e:	81 36       	cpi	r24, 0x61	; 97
     540:	09 f0       	breq	.+2      	; 0x544 <GPIO_pin_pull_up+0x28>
     542:	5a c0       	rjmp	.+180    	; 0x5f8 <GPIO_pin_pull_up+0xdc>
     544:	06 c0       	rjmp	.+12     	; 0x552 <GPIO_pin_pull_up+0x36>
     546:	83 36       	cpi	r24, 0x63	; 99
     548:	71 f1       	breq	.+92     	; 0x5a6 <GPIO_pin_pull_up+0x8a>
     54a:	84 36       	cpi	r24, 0x64	; 100
     54c:	09 f0       	breq	.+2      	; 0x550 <GPIO_pin_pull_up+0x34>
     54e:	54 c0       	rjmp	.+168    	; 0x5f8 <GPIO_pin_pull_up+0xdc>
     550:	3f c0       	rjmp	.+126    	; 0x5d0 <GPIO_pin_pull_up+0xb4>
    {
        case 'A':
        case 'a':
            CLR_BIT(DDRA,pin_number); //set pin_number of port_name as input
     552:	2a b3       	in	r18, 0x1a	; 26
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	ac 01       	movw	r20, r24
     55a:	02 c0       	rjmp	.+4      	; 0x560 <GPIO_pin_pull_up+0x44>
     55c:	44 0f       	add	r20, r20
     55e:	55 1f       	adc	r21, r21
     560:	6a 95       	dec	r22
     562:	e2 f7       	brpl	.-8      	; 0x55c <GPIO_pin_pull_up+0x40>
     564:	ba 01       	movw	r22, r20
     566:	84 2f       	mov	r24, r20
     568:	80 95       	com	r24
     56a:	82 23       	and	r24, r18
     56c:	8a bb       	out	0x1a, r24	; 26
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
     56e:	80 b7       	in	r24, 0x30	; 48
     570:	8b 7f       	andi	r24, 0xFB	; 251
     572:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTA,pin_number); //set pin_number of port_name as high value
     574:	8b b3       	in	r24, 0x1b	; 27
     576:	68 2b       	or	r22, r24
     578:	6b bb       	out	0x1b, r22	; 27
        break;
     57a:	08 95       	ret
        case 'B':
        case 'b':
            CLR_BIT(DDRB,pin_number); //set pin_number of port_name as input
     57c:	27 b3       	in	r18, 0x17	; 23
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	ac 01       	movw	r20, r24
     584:	02 c0       	rjmp	.+4      	; 0x58a <GPIO_pin_pull_up+0x6e>
     586:	44 0f       	add	r20, r20
     588:	55 1f       	adc	r21, r21
     58a:	6a 95       	dec	r22
     58c:	e2 f7       	brpl	.-8      	; 0x586 <GPIO_pin_pull_up+0x6a>
     58e:	ba 01       	movw	r22, r20
     590:	84 2f       	mov	r24, r20
     592:	80 95       	com	r24
     594:	82 23       	and	r24, r18
     596:	87 bb       	out	0x17, r24	; 23
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
     598:	80 b7       	in	r24, 0x30	; 48
     59a:	8b 7f       	andi	r24, 0xFB	; 251
     59c:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTB,pin_number); //set pin_number of port_name as high value
     59e:	88 b3       	in	r24, 0x18	; 24
     5a0:	68 2b       	or	r22, r24
     5a2:	68 bb       	out	0x18, r22	; 24
        break;
     5a4:	08 95       	ret
        case 'C':
        case 'c':
            CLR_BIT(DDRC,pin_number); //set pin_number of port_name as input
     5a6:	24 b3       	in	r18, 0x14	; 20
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	ac 01       	movw	r20, r24
     5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <GPIO_pin_pull_up+0x98>
     5b0:	44 0f       	add	r20, r20
     5b2:	55 1f       	adc	r21, r21
     5b4:	6a 95       	dec	r22
     5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <GPIO_pin_pull_up+0x94>
     5b8:	ba 01       	movw	r22, r20
     5ba:	84 2f       	mov	r24, r20
     5bc:	80 95       	com	r24
     5be:	82 23       	and	r24, r18
     5c0:	84 bb       	out	0x14, r24	; 20
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
     5c2:	80 b7       	in	r24, 0x30	; 48
     5c4:	8b 7f       	andi	r24, 0xFB	; 251
     5c6:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTC,pin_number); //set pin_number of port_name as high value
     5c8:	85 b3       	in	r24, 0x15	; 21
     5ca:	68 2b       	or	r22, r24
     5cc:	65 bb       	out	0x15, r22	; 21
        break;
     5ce:	08 95       	ret
        case 'D':
        case 'd':
            CLR_BIT(DDRD,pin_number); //set pin_number of port_name as input
     5d0:	21 b3       	in	r18, 0x11	; 17
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	ac 01       	movw	r20, r24
     5d8:	02 c0       	rjmp	.+4      	; 0x5de <GPIO_pin_pull_up+0xc2>
     5da:	44 0f       	add	r20, r20
     5dc:	55 1f       	adc	r21, r21
     5de:	6a 95       	dec	r22
     5e0:	e2 f7       	brpl	.-8      	; 0x5da <GPIO_pin_pull_up+0xbe>
     5e2:	ba 01       	movw	r22, r20
     5e4:	84 2f       	mov	r24, r20
     5e6:	80 95       	com	r24
     5e8:	82 23       	and	r24, r18
     5ea:	81 bb       	out	0x11, r24	; 17
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
     5ec:	80 b7       	in	r24, 0x30	; 48
     5ee:	8b 7f       	andi	r24, 0xFB	; 251
     5f0:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTD,pin_number); //set pin_number of port_name as high value
     5f2:	82 b3       	in	r24, 0x12	; 18
     5f4:	68 2b       	or	r22, r24
     5f6:	62 bb       	out	0x12, r22	; 18
     5f8:	08 95       	ret

000005fa <GPIO_port_write_high_nibble>:



void GPIO_port_write_high_nibble(char port_name, uint8 high_nibble)
{
    high_nibble <<= 4; //clear low_nibble bits in number
     5fa:	62 95       	swap	r22
     5fc:	60 7f       	andi	r22, 0xF0	; 240
    switch(port_name)
     5fe:	84 34       	cpi	r24, 0x44	; 68
     600:	51 f1       	breq	.+84     	; 0x656 <GPIO_port_write_high_nibble+0x5c>
     602:	85 34       	cpi	r24, 0x45	; 69
     604:	38 f4       	brcc	.+14     	; 0x614 <GPIO_port_write_high_nibble+0x1a>
     606:	82 34       	cpi	r24, 0x42	; 66
     608:	c1 f0       	breq	.+48     	; 0x63a <GPIO_port_write_high_nibble+0x40>
     60a:	83 34       	cpi	r24, 0x43	; 67
     60c:	e8 f4       	brcc	.+58     	; 0x648 <GPIO_port_write_high_nibble+0x4e>
     60e:	81 34       	cpi	r24, 0x41	; 65
     610:	41 f5       	brne	.+80     	; 0x662 <GPIO_port_write_high_nibble+0x68>
     612:	0c c0       	rjmp	.+24     	; 0x62c <GPIO_port_write_high_nibble+0x32>
     614:	82 36       	cpi	r24, 0x62	; 98
     616:	89 f0       	breq	.+34     	; 0x63a <GPIO_port_write_high_nibble+0x40>
     618:	83 36       	cpi	r24, 0x63	; 99
     61a:	18 f4       	brcc	.+6      	; 0x622 <GPIO_port_write_high_nibble+0x28>
     61c:	81 36       	cpi	r24, 0x61	; 97
     61e:	09 f5       	brne	.+66     	; 0x662 <GPIO_port_write_high_nibble+0x68>
     620:	05 c0       	rjmp	.+10     	; 0x62c <GPIO_port_write_high_nibble+0x32>
     622:	83 36       	cpi	r24, 0x63	; 99
     624:	89 f0       	breq	.+34     	; 0x648 <GPIO_port_write_high_nibble+0x4e>
     626:	84 36       	cpi	r24, 0x64	; 100
     628:	e1 f4       	brne	.+56     	; 0x662 <GPIO_port_write_high_nibble+0x68>
     62a:	15 c0       	rjmp	.+42     	; 0x656 <GPIO_port_write_high_nibble+0x5c>
    {
        case 'A':
        case 'a':
            PORTA &= 0x0f;
     62c:	8b b3       	in	r24, 0x1b	; 27
     62e:	8f 70       	andi	r24, 0x0F	; 15
     630:	8b bb       	out	0x1b, r24	; 27
            PORTA |= high_nibble;
     632:	8b b3       	in	r24, 0x1b	; 27
     634:	68 2b       	or	r22, r24
     636:	6b bb       	out	0x1b, r22	; 27
        break;
     638:	08 95       	ret
        case 'B':
        case 'b':
            PORTB &= 0x0f;
     63a:	88 b3       	in	r24, 0x18	; 24
     63c:	8f 70       	andi	r24, 0x0F	; 15
     63e:	88 bb       	out	0x18, r24	; 24
            PORTB |= high_nibble;
     640:	88 b3       	in	r24, 0x18	; 24
     642:	68 2b       	or	r22, r24
     644:	68 bb       	out	0x18, r22	; 24
        break;
     646:	08 95       	ret
        case 'C':
        case 'c':
            PORTC &= 0x0f;
     648:	85 b3       	in	r24, 0x15	; 21
     64a:	8f 70       	andi	r24, 0x0F	; 15
     64c:	85 bb       	out	0x15, r24	; 21
            PORTC |= high_nibble;
     64e:	85 b3       	in	r24, 0x15	; 21
     650:	68 2b       	or	r22, r24
     652:	65 bb       	out	0x15, r22	; 21
        break;
     654:	08 95       	ret
        case 'D':
        case 'd':
            PORTD &= 0x0f;
     656:	82 b3       	in	r24, 0x12	; 18
     658:	8f 70       	andi	r24, 0x0F	; 15
     65a:	82 bb       	out	0x12, r24	; 18
            PORTD |= high_nibble;
     65c:	82 b3       	in	r24, 0x12	; 18
     65e:	68 2b       	or	r22, r24
     660:	62 bb       	out	0x12, r22	; 18
     662:	08 95       	ret

00000664 <GPIO_port_write_low_nibble>:
    } // end of switch(port_name);
}

void GPIO_port_write_low_nibble(char port_name, uint8 low_nibble)
{
    low_nibble &= 0x0f; //clear high_nibble bits in number
     664:	6f 70       	andi	r22, 0x0F	; 15
    switch(port_name)
     666:	84 34       	cpi	r24, 0x44	; 68
     668:	51 f1       	breq	.+84     	; 0x6be <GPIO_port_write_low_nibble+0x5a>
     66a:	85 34       	cpi	r24, 0x45	; 69
     66c:	38 f4       	brcc	.+14     	; 0x67c <GPIO_port_write_low_nibble+0x18>
     66e:	82 34       	cpi	r24, 0x42	; 66
     670:	c1 f0       	breq	.+48     	; 0x6a2 <GPIO_port_write_low_nibble+0x3e>
     672:	83 34       	cpi	r24, 0x43	; 67
     674:	e8 f4       	brcc	.+58     	; 0x6b0 <GPIO_port_write_low_nibble+0x4c>
     676:	81 34       	cpi	r24, 0x41	; 65
     678:	41 f5       	brne	.+80     	; 0x6ca <GPIO_port_write_low_nibble+0x66>
     67a:	0c c0       	rjmp	.+24     	; 0x694 <GPIO_port_write_low_nibble+0x30>
     67c:	82 36       	cpi	r24, 0x62	; 98
     67e:	89 f0       	breq	.+34     	; 0x6a2 <GPIO_port_write_low_nibble+0x3e>
     680:	83 36       	cpi	r24, 0x63	; 99
     682:	18 f4       	brcc	.+6      	; 0x68a <GPIO_port_write_low_nibble+0x26>
     684:	81 36       	cpi	r24, 0x61	; 97
     686:	09 f5       	brne	.+66     	; 0x6ca <GPIO_port_write_low_nibble+0x66>
     688:	05 c0       	rjmp	.+10     	; 0x694 <GPIO_port_write_low_nibble+0x30>
     68a:	83 36       	cpi	r24, 0x63	; 99
     68c:	89 f0       	breq	.+34     	; 0x6b0 <GPIO_port_write_low_nibble+0x4c>
     68e:	84 36       	cpi	r24, 0x64	; 100
     690:	e1 f4       	brne	.+56     	; 0x6ca <GPIO_port_write_low_nibble+0x66>
     692:	15 c0       	rjmp	.+42     	; 0x6be <GPIO_port_write_low_nibble+0x5a>
    {
        case 'A':
        case 'a':
            PORTA &= 0xf0;
     694:	8b b3       	in	r24, 0x1b	; 27
     696:	80 7f       	andi	r24, 0xF0	; 240
     698:	8b bb       	out	0x1b, r24	; 27
            PORTA |= low_nibble;
     69a:	8b b3       	in	r24, 0x1b	; 27
     69c:	68 2b       	or	r22, r24
     69e:	6b bb       	out	0x1b, r22	; 27
        break;
     6a0:	08 95       	ret
        case 'B':
        case 'b':
            PORTB &= 0xf0;
     6a2:	88 b3       	in	r24, 0x18	; 24
     6a4:	80 7f       	andi	r24, 0xF0	; 240
     6a6:	88 bb       	out	0x18, r24	; 24
            PORTB |= low_nibble;
     6a8:	88 b3       	in	r24, 0x18	; 24
     6aa:	68 2b       	or	r22, r24
     6ac:	68 bb       	out	0x18, r22	; 24
        break;
     6ae:	08 95       	ret
        case 'C':
        case 'c':
            PORTC &= 0xf0;
     6b0:	85 b3       	in	r24, 0x15	; 21
     6b2:	80 7f       	andi	r24, 0xF0	; 240
     6b4:	85 bb       	out	0x15, r24	; 21
            PORTC |= low_nibble;
     6b6:	85 b3       	in	r24, 0x15	; 21
     6b8:	68 2b       	or	r22, r24
     6ba:	65 bb       	out	0x15, r22	; 21
        break;
     6bc:	08 95       	ret
        case 'D':
        case 'd':
            PORTD &= 0xf0;
     6be:	82 b3       	in	r24, 0x12	; 18
     6c0:	80 7f       	andi	r24, 0xF0	; 240
     6c2:	82 bb       	out	0x12, r24	; 18
            PORTD |= low_nibble;
     6c4:	82 b3       	in	r24, 0x12	; 18
     6c6:	68 2b       	or	r22, r24
     6c8:	62 bb       	out	0x12, r22	; 18
     6ca:	08 95       	ret

000006cc <EEPROM_write>:
#include "internalEEPROM.h"

void EEPROM_write(uint16 address, uint8 data)
{
	/*wait until (EEWE) bit in (EECR), becomes ZERO, to start new write operation*/
	while (READ_BIT(EECR,EEWE))
     6cc:	2c b3       	in	r18, 0x1c	; 28
     6ce:	21 fd       	sbrc	r18, 1
     6d0:	fd cf       	rjmp	.-6      	; 0x6cc <EEPROM_write>
	{
		//do nothing
	}
	/*wait until (SPMEN) bit in (SPMCR) becomes zero*/
	while (READ_BIT(SPMCR,SPMEN))
     6d2:	07 b6       	in	r0, 0x37	; 55
     6d4:	00 fc       	sbrc	r0, 0
     6d6:	fd cf       	rjmp	.-6      	; 0x6d2 <EEPROM_write+0x6>
	{
		//do nothing
	}
	/*load address in (EEARL, EEARH)*/
	EEARL = (uint8) address;
     6d8:	8e bb       	out	0x1e, r24	; 30
	EEARH = (uint8) (address>>8);
     6da:	9f bb       	out	0x1f, r25	; 31
	/*load data to (EEDR)*/
	EEDR = data;
     6dc:	6d bb       	out	0x1d, r22	; 29
	/*write logic '1' to (EEMWE) bit in (EECR)*/
	SET_BIT(EECR,EEMWE);
     6de:	e2 9a       	sbi	0x1c, 2	; 28
	/*start EEPROM write operation, by setting the (EEWE) bit in (EECR)*/
	SET_BIT(EECR,EEWE);
     6e0:	e1 9a       	sbi	0x1c, 1	; 28
	/*wait for 4 clock cycles, until write operation is done*/
	while (READ_BIT(EECR,EEWE))
     6e2:	8c b3       	in	r24, 0x1c	; 28
     6e4:	81 fd       	sbrc	r24, 1
     6e6:	fd cf       	rjmp	.-6      	; 0x6e2 <EEPROM_write+0x16>
	{
		//wait for 4 clock cycles.
	}
}
     6e8:	08 95       	ret

000006ea <EEPROM_read>:

uint8 EEPROM_read(uint16 address)
{
	uint8 data = 0;
	/*first make sure that any write operation is finished first*/
	while (READ_BIT(EECR,EEWE))
     6ea:	2c b3       	in	r18, 0x1c	; 28
     6ec:	21 fd       	sbrc	r18, 1
     6ee:	fd cf       	rjmp	.-6      	; 0x6ea <EEPROM_read>
	{
		//do nothing
	}
	/*load address in (EEARL, EEARH)*/
	EEARL = (uint8) address;
     6f0:	8e bb       	out	0x1e, r24	; 30
	EEARH = (uint8) (address>>8);
     6f2:	9f bb       	out	0x1f, r25	; 31
	/*start EEPROM read operation by setting (EERE) bit in (EECR)*/
	SET_BIT(EECR,EERE);
     6f4:	e0 9a       	sbi	0x1c, 0	; 28
	/*read data from (EEDR) and return it*/
	data = EEDR;
     6f6:	8d b3       	in	r24, 0x1d	; 29
	/*return data*/
	return data;
     6f8:	08 95       	ret

000006fa <keypad_init>:
#include "keypad.h"


void keypad_init(void)
{
	GPIO_pin_direction(KEYPAD_PORT,0,1);
     6fa:	83 e4       	ldi	r24, 0x43	; 67
     6fc:	60 e0       	ldi	r22, 0x00	; 0
     6fe:	41 e0       	ldi	r20, 0x01	; 1
     700:	0e 94 7f 00 	call	0xfe	; 0xfe <GPIO_pin_direction>
	GPIO_pin_direction(KEYPAD_PORT,1,1);
     704:	83 e4       	ldi	r24, 0x43	; 67
     706:	61 e0       	ldi	r22, 0x01	; 1
     708:	41 e0       	ldi	r20, 0x01	; 1
     70a:	0e 94 7f 00 	call	0xfe	; 0xfe <GPIO_pin_direction>
	GPIO_pin_direction(KEYPAD_PORT,2,1);
     70e:	83 e4       	ldi	r24, 0x43	; 67
     710:	62 e0       	ldi	r22, 0x02	; 2
     712:	41 e0       	ldi	r20, 0x01	; 1
     714:	0e 94 7f 00 	call	0xfe	; 0xfe <GPIO_pin_direction>
	
	GPIO_pin_pull_up(KEYPAD_PORT,3);
     718:	83 e4       	ldi	r24, 0x43	; 67
     71a:	63 e0       	ldi	r22, 0x03	; 3
     71c:	0e 94 8e 02 	call	0x51c	; 0x51c <GPIO_pin_pull_up>
	GPIO_pin_pull_up(KEYPAD_PORT,4);
     720:	83 e4       	ldi	r24, 0x43	; 67
     722:	64 e0       	ldi	r22, 0x04	; 4
     724:	0e 94 8e 02 	call	0x51c	; 0x51c <GPIO_pin_pull_up>
	GPIO_pin_pull_up(KEYPAD_PORT,5);
     728:	83 e4       	ldi	r24, 0x43	; 67
     72a:	65 e0       	ldi	r22, 0x05	; 5
     72c:	0e 94 8e 02 	call	0x51c	; 0x51c <GPIO_pin_pull_up>
	GPIO_pin_pull_up(KEYPAD_PORT,6);
     730:	83 e4       	ldi	r24, 0x43	; 67
     732:	66 e0       	ldi	r22, 0x06	; 6
     734:	0e 94 8e 02 	call	0x51c	; 0x51c <GPIO_pin_pull_up>
}
     738:	08 95       	ret

0000073a <keypad_check_press>:

char keypad_check_press(void)
{
     73a:	0f 93       	push	r16
     73c:	1f 93       	push	r17
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
     742:	cd b7       	in	r28, 0x3d	; 61
     744:	de b7       	in	r29, 0x3e	; 62
     746:	2c 97       	sbiw	r28, 0x0c	; 12
     748:	0f b6       	in	r0, 0x3f	; 63
     74a:	f8 94       	cli
     74c:	de bf       	out	0x3e, r29	; 62
     74e:	0f be       	out	0x3f, r0	; 63
     750:	cd bf       	out	0x3d, r28	; 61
	char button[4][3] = { {'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'} };
     752:	de 01       	movw	r26, r28
     754:	11 96       	adiw	r26, 0x01	; 1
     756:	e8 e6       	ldi	r30, 0x68	; 104
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	8c e0       	ldi	r24, 0x0C	; 12
     75c:	01 90       	ld	r0, Z+
     75e:	0d 92       	st	X+, r0
     760:	81 50       	subi	r24, 0x01	; 1
     762:	e1 f7       	brne	.-8      	; 0x75c <keypad_check_press+0x22>
	uint8 row = 0, column = 0, pressed = 1;
	char val = NOTPRESSED;
	
	for (column=0; column<3; ++column)
     764:	10 e0       	ldi	r17, 0x00	; 0
	{
		GPIO_pin_write(KEYPAD_PORT,0,1);
     766:	83 e4       	ldi	r24, 0x43	; 67
     768:	60 e0       	ldi	r22, 0x00	; 0
     76a:	41 e0       	ldi	r20, 0x01	; 1
     76c:	0e 94 10 01 	call	0x220	; 0x220 <GPIO_pin_write>
		GPIO_pin_write(KEYPAD_PORT,1,1);
     770:	83 e4       	ldi	r24, 0x43	; 67
     772:	61 e0       	ldi	r22, 0x01	; 1
     774:	41 e0       	ldi	r20, 0x01	; 1
     776:	0e 94 10 01 	call	0x220	; 0x220 <GPIO_pin_write>
		GPIO_pin_write(KEYPAD_PORT,2,1);
     77a:	83 e4       	ldi	r24, 0x43	; 67
     77c:	62 e0       	ldi	r22, 0x02	; 2
     77e:	41 e0       	ldi	r20, 0x01	; 1
     780:	0e 94 10 01 	call	0x220	; 0x220 <GPIO_pin_write>
		GPIO_pin_write(KEYPAD_PORT,column,0);
     784:	83 e4       	ldi	r24, 0x43	; 67
     786:	61 2f       	mov	r22, r17
     788:	40 e0       	ldi	r20, 0x00	; 0
     78a:	0e 94 10 01 	call	0x220	; 0x220 <GPIO_pin_write>
		for (row=0; row<4; ++row)
     78e:	00 e0       	ldi	r16, 0x00	; 0
		{
			pressed = GPIO_pin_read(KEYPAD_PORT,(row+3));
     790:	60 2f       	mov	r22, r16
     792:	6d 5f       	subi	r22, 0xFD	; 253
     794:	83 e4       	ldi	r24, 0x43	; 67
     796:	0e 94 a1 01 	call	0x342	; 0x342 <GPIO_pin_read>
			if (0 == pressed)
     79a:	88 23       	and	r24, r24
     79c:	69 f4       	brne	.+26     	; 0x7b8 <keypad_check_press+0x7e>
			{
				val = button[row][column];
     79e:	80 2f       	mov	r24, r16
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	fc 01       	movw	r30, r24
     7a4:	ee 0f       	add	r30, r30
     7a6:	ff 1f       	adc	r31, r31
     7a8:	e8 0f       	add	r30, r24
     7aa:	f9 1f       	adc	r31, r25
     7ac:	e1 0f       	add	r30, r17
     7ae:	f1 1d       	adc	r31, r1
     7b0:	ec 0f       	add	r30, r28
     7b2:	fd 1f       	adc	r31, r29
     7b4:	81 81       	ldd	r24, Z+1	; 0x01
     7b6:	04 c0       	rjmp	.+8      	; 0x7c0 <keypad_check_press+0x86>
	{
		GPIO_pin_write(KEYPAD_PORT,0,1);
		GPIO_pin_write(KEYPAD_PORT,1,1);
		GPIO_pin_write(KEYPAD_PORT,2,1);
		GPIO_pin_write(KEYPAD_PORT,column,0);
		for (row=0; row<4; ++row)
     7b8:	0f 5f       	subi	r16, 0xFF	; 255
     7ba:	04 30       	cpi	r16, 0x04	; 4
     7bc:	49 f7       	brne	.-46     	; 0x790 <keypad_check_press+0x56>
     7be:	0b c0       	rjmp	.+22     	; 0x7d6 <keypad_check_press+0x9c>
		{
			break;
		}
	}
	return val;
     7c0:	2c 96       	adiw	r28, 0x0c	; 12
     7c2:	0f b6       	in	r0, 0x3f	; 63
     7c4:	f8 94       	cli
     7c6:	de bf       	out	0x3e, r29	; 62
     7c8:	0f be       	out	0x3f, r0	; 63
     7ca:	cd bf       	out	0x3d, r28	; 61
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	1f 91       	pop	r17
     7d2:	0f 91       	pop	r16
     7d4:	08 95       	ret
{
	char button[4][3] = { {'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'} };
	uint8 row = 0, column = 0, pressed = 1;
	char val = NOTPRESSED;
	
	for (column=0; column<3; ++column)
     7d6:	1f 5f       	subi	r17, 0xFF	; 255
     7d8:	13 30       	cpi	r17, 0x03	; 3
     7da:	29 f6       	brne	.-118    	; 0x766 <keypad_check_press+0x2c>
     7dc:	8f ef       	ldi	r24, 0xFF	; 255
     7de:	f0 cf       	rjmp	.-32     	; 0x7c0 <keypad_check_press+0x86>

000007e0 <LCD_send_pulse>:

#include "LCD.h"

static void LCD_send_pulse(void)
{
	GPIO_pin_write(EN_PORT,EN,1);
     7e0:	82 e4       	ldi	r24, 0x42	; 66
     7e2:	60 e0       	ldi	r22, 0x00	; 0
     7e4:	41 e0       	ldi	r20, 0x01	; 1
     7e6:	0e 94 10 01 	call	0x220	; 0x220 <GPIO_pin_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7ea:	8f e9       	ldi	r24, 0x9F	; 159
     7ec:	9f e0       	ldi	r25, 0x0F	; 15
     7ee:	01 97       	sbiw	r24, 0x01	; 1
     7f0:	f1 f7       	brne	.-4      	; 0x7ee <LCD_send_pulse+0xe>
     7f2:	00 c0       	rjmp	.+0      	; 0x7f4 <LCD_send_pulse+0x14>
     7f4:	00 00       	nop
	_delay_ms(2);
	GPIO_pin_write(EN_PORT,EN,0);
     7f6:	82 e4       	ldi	r24, 0x42	; 66
     7f8:	60 e0       	ldi	r22, 0x00	; 0
     7fa:	40 e0       	ldi	r20, 0x00	; 0
     7fc:	0e 94 10 01 	call	0x220	; 0x220 <GPIO_pin_write>
     800:	8f ec       	ldi	r24, 0xCF	; 207
     802:	97 e0       	ldi	r25, 0x07	; 7
     804:	01 97       	sbiw	r24, 0x01	; 1
     806:	f1 f7       	brne	.-4      	; 0x804 <LCD_send_pulse+0x24>
     808:	00 c0       	rjmp	.+0      	; 0x80a <LCD_send_pulse+0x2a>
     80a:	00 00       	nop
	_delay_ms(1);	
}
     80c:	08 95       	ret

0000080e <LCD_send_command>:


void LCD_send_command(uint8 command)
{
     80e:	68 2f       	mov	r22, r24
	GPIO_pin_write(RS_PORT,RS,0); //select command register
	LCD_send_pulse();
	
	#elif defined eight_bits_mode
	
	GPIO_port_write(LCD_PORT,command);
     810:	81 e4       	ldi	r24, 0x41	; 65
     812:	0e 94 4e 02 	call	0x49c	; 0x49c <GPIO_port_write>
	GPIO_pin_write(RS_PORT,RS,0);
     816:	82 e4       	ldi	r24, 0x42	; 66
     818:	61 e0       	ldi	r22, 0x01	; 1
     81a:	40 e0       	ldi	r20, 0x00	; 0
     81c:	0e 94 10 01 	call	0x220	; 0x220 <GPIO_pin_write>
	LCD_send_pulse();
     820:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_send_pulse>
	
	#endif
}
     824:	08 95       	ret

00000826 <LCD_clear_screen>:



void LCD_clear_screen(void)
{
	LCD_send_command(CLEAR_SCREEN);
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	0e 94 07 04 	call	0x80e	; 0x80e <LCD_send_command>
     82c:	8f e9       	ldi	r24, 0x9F	; 159
     82e:	9f e0       	ldi	r25, 0x0F	; 15
     830:	01 97       	sbiw	r24, 0x01	; 1
     832:	f1 f7       	brne	.-4      	; 0x830 <LCD_clear_screen+0xa>
     834:	00 c0       	rjmp	.+0      	; 0x836 <LCD_clear_screen+0x10>
     836:	00 00       	nop
	_delay_ms(2);
}
     838:	08 95       	ret

0000083a <LCD_return_home>:

void LCD_return_home(void)
{
	LCD_send_command(RETURN_HOME);
     83a:	82 e0       	ldi	r24, 0x02	; 2
     83c:	0e 94 07 04 	call	0x80e	; 0x80e <LCD_send_command>
     840:	8f e9       	ldi	r24, 0x9F	; 159
     842:	9f e0       	ldi	r25, 0x0F	; 15
     844:	01 97       	sbiw	r24, 0x01	; 1
     846:	f1 f7       	brne	.-4      	; 0x844 <LCD_return_home+0xa>
     848:	00 c0       	rjmp	.+0      	; 0x84a <LCD_return_home+0x10>
     84a:	00 00       	nop
	_delay_ms(2);
}
     84c:	08 95       	ret

0000084e <LCD_init>:
     84e:	8f ef       	ldi	r24, 0xFF	; 255
     850:	99 ef       	ldi	r25, 0xF9	; 249
     852:	a0 e0       	ldi	r26, 0x00	; 0
     854:	81 50       	subi	r24, 0x01	; 1
     856:	90 40       	sbci	r25, 0x00	; 0
     858:	a0 40       	sbci	r26, 0x00	; 0
     85a:	e1 f7       	brne	.-8      	; 0x854 <LCD_init+0x6>
     85c:	00 c0       	rjmp	.+0      	; 0x85e <LCD_init+0x10>
     85e:	00 00       	nop
	GPIO_pin_direction(RS_PORT,RS,1);//set RS pin to output pin
	//send command to inti LCD:
	LCD_send_command(FOUR_BITS);
	#elif defined eight_bits_mode
	//set connection pins:
	GPIO_port_direction(LCD_PORT,1);
     860:	81 e4       	ldi	r24, 0x41	; 65
     862:	61 e0       	ldi	r22, 0x01	; 1
     864:	0e 94 2f 02 	call	0x45e	; 0x45e <GPIO_port_direction>
	GPIO_pin_direction(EN_PORT,EN,1);//set EN pin to output pin
     868:	82 e4       	ldi	r24, 0x42	; 66
     86a:	60 e0       	ldi	r22, 0x00	; 0
     86c:	41 e0       	ldi	r20, 0x01	; 1
     86e:	0e 94 7f 00 	call	0xfe	; 0xfe <GPIO_pin_direction>
	GPIO_pin_direction(RS_PORT,RS,1);//set RS pin to output pin
     872:	82 e4       	ldi	r24, 0x42	; 66
     874:	61 e0       	ldi	r22, 0x01	; 1
     876:	41 e0       	ldi	r20, 0x01	; 1
     878:	0e 94 7f 00 	call	0xfe	; 0xfe <GPIO_pin_direction>
	//send command to init LCD:
	LCD_send_command(EIGHT_BITS);
     87c:	88 e3       	ldi	r24, 0x38	; 56
     87e:	0e 94 07 04 	call	0x80e	; 0x80e <LCD_send_command>
	#endif
	LCD_return_home();
     882:	0e 94 1d 04 	call	0x83a	; 0x83a <LCD_return_home>
	LCD_send_command(DISPLAY_ON_CURSOR_OFF);
     886:	8c e0       	ldi	r24, 0x0C	; 12
     888:	0e 94 07 04 	call	0x80e	; 0x80e <LCD_send_command>
	LCD_clear_screen();
     88c:	0e 94 13 04 	call	0x826	; 0x826 <LCD_clear_screen>
	LCD_send_command(ENGLISH_ENTRY);
     890:	86 e0       	ldi	r24, 0x06	; 6
     892:	0e 94 07 04 	call	0x80e	; 0x80e <LCD_send_command>
}
     896:	08 95       	ret

00000898 <LCD_send_character>:
	LCD_send_command(RETURN_HOME);
	_delay_ms(2);
}

void LCD_send_character(char character)
{
     898:	cf 93       	push	r28
     89a:	c8 2f       	mov	r28, r24
	GPIO_port_write_low_nibble(LCD_PORT,character);
	LCD_send_pulse();
	
	#elif defined eight_bits_mode
	
	GPIO_pin_write(RS_PORT,RS,1);
     89c:	82 e4       	ldi	r24, 0x42	; 66
     89e:	61 e0       	ldi	r22, 0x01	; 1
     8a0:	41 e0       	ldi	r20, 0x01	; 1
     8a2:	0e 94 10 01 	call	0x220	; 0x220 <GPIO_pin_write>
	GPIO_port_write(LCD_PORT,character);
     8a6:	81 e4       	ldi	r24, 0x41	; 65
     8a8:	6c 2f       	mov	r22, r28
     8aa:	0e 94 4e 02 	call	0x49c	; 0x49c <GPIO_port_write>
	LCD_send_pulse();
     8ae:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_send_pulse>
	
	#endif
	
}
     8b2:	cf 91       	pop	r28
     8b4:	08 95       	ret

000008b6 <LCD_send_string>:

void LCD_send_string(char* character)
{
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
	while ('\0' != *character)
     8bc:	88 81       	ld	r24, Y
     8be:	88 23       	and	r24, r24
     8c0:	31 f0       	breq	.+12     	; 0x8ce <LCD_send_string+0x18>
	
	#endif
	
}

void LCD_send_string(char* character)
     8c2:	21 96       	adiw	r28, 0x01	; 1
{
	while ('\0' != *character)
	{
		LCD_send_character(*character);
     8c4:	0e 94 4c 04 	call	0x898	; 0x898 <LCD_send_character>
	
}

void LCD_send_string(char* character)
{
	while ('\0' != *character)
     8c8:	89 91       	ld	r24, Y+
     8ca:	88 23       	and	r24, r24
     8cc:	d9 f7       	brne	.-10     	; 0x8c4 <LCD_send_string+0xe>
	{
		LCD_send_character(*character);
		character += 1;
	}
}
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	08 95       	ret

000008d4 <LCD_move_cursor>:
void LCD_move_cursor(uint8 row, uint8 column)
{
	uint8 r = 0;
	uint8 c = 0;
	
	if( (row>0) && (row<5) && (column>0) && (column<21) )
     8d4:	98 2f       	mov	r25, r24
     8d6:	91 50       	subi	r25, 0x01	; 1
     8d8:	94 30       	cpi	r25, 0x04	; 4
     8da:	b0 f4       	brcc	.+44     	; 0x908 <LCD_move_cursor+0x34>
     8dc:	66 23       	and	r22, r22
     8de:	b1 f0       	breq	.+44     	; 0x90c <LCD_move_cursor+0x38>
     8e0:	65 31       	cpi	r22, 0x15	; 21
     8e2:	b0 f4       	brcc	.+44     	; 0x910 <LCD_move_cursor+0x3c>
	{
		if (1 == row)
     8e4:	81 30       	cpi	r24, 0x01	; 1
     8e6:	19 f4       	brne	.+6      	; 0x8ee <LCD_move_cursor+0x1a>
		{
			c = (0x80 + column - 1);
     8e8:	86 2f       	mov	r24, r22
     8ea:	81 58       	subi	r24, 0x81	; 129
     8ec:	12 c0       	rjmp	.+36     	; 0x912 <LCD_move_cursor+0x3e>
		}
		else if (2 == row)
     8ee:	82 30       	cpi	r24, 0x02	; 2
     8f0:	19 f4       	brne	.+6      	; 0x8f8 <LCD_move_cursor+0x24>
		{
			c = (0xC0 + column - 1);
     8f2:	86 2f       	mov	r24, r22
     8f4:	81 54       	subi	r24, 0x41	; 65
     8f6:	0d c0       	rjmp	.+26     	; 0x912 <LCD_move_cursor+0x3e>
		}
		else if (3 == row)
     8f8:	83 30       	cpi	r24, 0x03	; 3
     8fa:	19 f4       	brne	.+6      	; 0x902 <LCD_move_cursor+0x2e>
		{
			c = (0x90 + column - 1);
     8fc:	86 2f       	mov	r24, r22
     8fe:	81 57       	subi	r24, 0x71	; 113
     900:	08 c0       	rjmp	.+16     	; 0x912 <LCD_move_cursor+0x3e>
		}
		else
		{
			c = (0xD0 + column - 1);
     902:	86 2f       	mov	r24, r22
     904:	81 53       	subi	r24, 0x31	; 49
     906:	05 c0       	rjmp	.+10     	; 0x912 <LCD_move_cursor+0x3e>
		}
	}
	else
	{
		c = 0x80;
     908:	80 e8       	ldi	r24, 0x80	; 128
     90a:	03 c0       	rjmp	.+6      	; 0x912 <LCD_move_cursor+0x3e>
     90c:	80 e8       	ldi	r24, 0x80	; 128
     90e:	01 c0       	rjmp	.+2      	; 0x912 <LCD_move_cursor+0x3e>
     910:	80 e8       	ldi	r24, 0x80	; 128
	}
	LCD_send_command(c);
     912:	0e 94 07 04 	call	0x80e	; 0x80e <LCD_send_command>
     916:	08 95       	ret

00000918 <LED_init>:
#include "led.h"

void LED_init(char port_name, uint8 pin_number)
{
    GPIO_pin_direction(port_name, pin_number, 1);
     918:	41 e0       	ldi	r20, 0x01	; 1
     91a:	0e 94 7f 00 	call	0xfe	; 0xfe <GPIO_pin_direction>
}
     91e:	08 95       	ret

00000920 <LED_turn_on>:


void LED_turn_on(char port_name, uint8 pin_number)
{
    GPIO_pin_write(port_name, pin_number, 1);
     920:	41 e0       	ldi	r20, 0x01	; 1
     922:	0e 94 10 01 	call	0x220	; 0x220 <GPIO_pin_write>
}
     926:	08 95       	ret

00000928 <LED_turn_off>:


void LED_turn_off(char port_name, uint8 pin_number)
{
    GPIO_pin_write(port_name, pin_number, 0);
     928:	40 e0       	ldi	r20, 0x00	; 0
     92a:	0e 94 10 01 	call	0x220	; 0x220 <GPIO_pin_write>
}
     92e:	08 95       	ret

00000930 <LED_toggle>:


void LED_toggle(char port_name, uint8 pin_number)
{
    GPIO_pin_toggle(port_name, pin_number);
     930:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <GPIO_pin_toggle>
}
     934:	08 95       	ret

00000936 <LED_status>:


uint8 LED_status(char port_name, uint8 pin_number)
{
    return (GPIO_pin_read(port_name, pin_number));
     936:	0e 94 a1 01 	call	0x342	; 0x342 <GPIO_pin_read>
     93a:	08 95       	ret

0000093c <safe_read_pass>:
 */ 

#include "safe.h"

uint32 safe_read_pass(uint16* address)
{
     93c:	cf 92       	push	r12
     93e:	df 92       	push	r13
     940:	ef 92       	push	r14
     942:	ff 92       	push	r15
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	ec 01       	movw	r28, r24
	uint32 pass_value = 0;
	/*read the password from EEPROM*/
	pass_value = (uint8)EEPROM_read(*(address+0));
     94a:	88 81       	ld	r24, Y
     94c:	99 81       	ldd	r25, Y+1	; 0x01
     94e:	0e 94 75 03 	call	0x6ea	; 0x6ea <EEPROM_read>
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	a0 e0       	ldi	r26, 0x00	; 0
     956:	b0 e0       	ldi	r27, 0x00	; 0
	pass_value <<= 8;
     958:	cc 24       	eor	r12, r12
     95a:	d8 2e       	mov	r13, r24
     95c:	e9 2e       	mov	r14, r25
     95e:	fa 2e       	mov	r15, r26
	pass_value |= (uint8)EEPROM_read(*(address+1));
     960:	8a 81       	ldd	r24, Y+2	; 0x02
     962:	9b 81       	ldd	r25, Y+3	; 0x03
     964:	0e 94 75 03 	call	0x6ea	; 0x6ea <EEPROM_read>
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	a0 e0       	ldi	r26, 0x00	; 0
     96c:	b0 e0       	ldi	r27, 0x00	; 0
     96e:	c8 2a       	or	r12, r24
     970:	d9 2a       	or	r13, r25
     972:	ea 2a       	or	r14, r26
     974:	fb 2a       	or	r15, r27
	pass_value <<= 8;
     976:	fe 2c       	mov	r15, r14
     978:	ed 2c       	mov	r14, r13
     97a:	dc 2c       	mov	r13, r12
     97c:	cc 24       	eor	r12, r12
	pass_value |= (uint8)EEPROM_read(*(address+2));
     97e:	8c 81       	ldd	r24, Y+4	; 0x04
     980:	9d 81       	ldd	r25, Y+5	; 0x05
     982:	0e 94 75 03 	call	0x6ea	; 0x6ea <EEPROM_read>
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	a0 e0       	ldi	r26, 0x00	; 0
     98a:	b0 e0       	ldi	r27, 0x00	; 0
     98c:	c8 2a       	or	r12, r24
     98e:	d9 2a       	or	r13, r25
     990:	ea 2a       	or	r14, r26
     992:	fb 2a       	or	r15, r27
	pass_value <<= 8;
     994:	fe 2c       	mov	r15, r14
     996:	ed 2c       	mov	r14, r13
     998:	dc 2c       	mov	r13, r12
     99a:	cc 24       	eor	r12, r12
	pass_value |= (uint8)EEPROM_read(*(address+3));
     99c:	8e 81       	ldd	r24, Y+6	; 0x06
     99e:	9f 81       	ldd	r25, Y+7	; 0x07
     9a0:	0e 94 75 03 	call	0x6ea	; 0x6ea <EEPROM_read>
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	a0 e0       	ldi	r26, 0x00	; 0
     9a8:	b0 e0       	ldi	r27, 0x00	; 0
     9aa:	c8 2a       	or	r12, r24
     9ac:	d9 2a       	or	r13, r25
     9ae:	ea 2a       	or	r14, r26
     9b0:	fb 2a       	or	r15, r27
	/*now return password*/
	return pass_value;
}
     9b2:	6c 2d       	mov	r22, r12
     9b4:	7d 2d       	mov	r23, r13
     9b6:	8e 2d       	mov	r24, r14
     9b8:	9f 2d       	mov	r25, r15
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	ff 90       	pop	r15
     9c0:	ef 90       	pop	r14
     9c2:	df 90       	pop	r13
     9c4:	cf 90       	pop	r12
     9c6:	08 95       	ret

000009c8 <safe_set_pass>:

uint32 safe_set_pass(uint16* address)
{
     9c8:	9f 92       	push	r9
     9ca:	af 92       	push	r10
     9cc:	bf 92       	push	r11
     9ce:	cf 92       	push	r12
     9d0:	df 92       	push	r13
     9d2:	ef 92       	push	r14
     9d4:	ff 92       	push	r15
     9d6:	0f 93       	push	r16
     9d8:	1f 93       	push	r17
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
     9de:	cd b7       	in	r28, 0x3d	; 61
     9e0:	de b7       	in	r29, 0x3e	; 62
     9e2:	a1 97       	sbiw	r28, 0x21	; 33
     9e4:	0f b6       	in	r0, 0x3f	; 63
     9e6:	f8 94       	cli
     9e8:	de bf       	out	0x3e, r29	; 62
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	cd bf       	out	0x3d, r28	; 61
     9ee:	5c 01       	movw	r10, r24
	uint32 password = 0;
	char pass = '\0', pass_arr[33] = {'\0'};
     9f0:	fe 01       	movw	r30, r28
     9f2:	31 96       	adiw	r30, 0x01	; 1
     9f4:	81 e2       	ldi	r24, 0x21	; 33
     9f6:	df 01       	movw	r26, r30
     9f8:	1d 92       	st	X+, r1
     9fa:	8a 95       	dec	r24
     9fc:	e9 f7       	brne	.-6      	; 0x9f8 <safe_set_pass+0x30>
	uint8 factor = 1;
	
	LCD_move_cursor(1,1);
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	61 e0       	ldi	r22, 0x01	; 1
     a02:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <LCD_move_cursor>
	LCD_send_string("Set a password");
     a06:	84 e7       	ldi	r24, 0x74	; 116
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <LCD_send_string>
	LCD_move_cursor(2,1);
     a0e:	82 e0       	ldi	r24, 0x02	; 2
     a10:	61 e0       	ldi	r22, 0x01	; 1
     a12:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <LCD_move_cursor>
	LCD_send_string("Then enter '#' ");
     a16:	83 e8       	ldi	r24, 0x83	; 131
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <LCD_send_string>
	LCD_move_cursor(3,1);
     a1e:	83 e0       	ldi	r24, 0x03	; 3
     a20:	61 e0       	ldi	r22, 0x01	; 1
     a22:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <LCD_move_cursor>

uint32 safe_set_pass(uint16* address)
{
	uint32 password = 0;
	char pass = '\0', pass_arr[33] = {'\0'};
	uint8 factor = 1;
     a26:	11 e0       	ldi	r17, 0x01	; 1
	return pass_value;
}

uint32 safe_set_pass(uint16* address)
{
	uint32 password = 0;
     a28:	cc 24       	eor	r12, r12
     a2a:	dd 24       	eor	r13, r13
     a2c:	76 01       	movw	r14, r12
		if ( (0xff != pass) && ( (char)pass!=(char)'#') ) 
		{
			LCD_send_character(pass);
			password *= factor;
			password += (pass - 48);
			factor = 10;
     a2e:	0f 2e       	mov	r0, r31
     a30:	fa e0       	ldi	r31, 0x0A	; 10
     a32:	9f 2e       	mov	r9, r31
     a34:	f0 2d       	mov	r31, r0
	LCD_send_string("Then enter '#' ");
	LCD_move_cursor(3,1);
	
	while( (char)pass!=(char)'#' )
	{
		pass = keypad_check_press();
     a36:	0e 94 9d 03 	call	0x73a	; 0x73a <keypad_check_press>
     a3a:	08 2f       	mov	r16, r24
		if ( (0xff != pass) && ( (char)pass!=(char)'#') ) 
     a3c:	8f 3f       	cpi	r24, 0xFF	; 255
     a3e:	d9 f3       	breq	.-10     	; 0xa36 <safe_set_pass+0x6e>
     a40:	83 32       	cpi	r24, 0x23	; 35
     a42:	19 f1       	breq	.+70     	; 0xa8a <safe_set_pass+0xc2>
		{
			LCD_send_character(pass);
     a44:	0e 94 4c 04 	call	0x898	; 0x898 <LCD_send_character>
			password *= factor;
     a48:	61 2f       	mov	r22, r17
     a4a:	70 e0       	ldi	r23, 0x00	; 0
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	a7 01       	movw	r20, r14
     a52:	96 01       	movw	r18, r12
     a54:	0e 94 26 06 	call	0xc4c	; 0xc4c <__mulsi3>
     a58:	dc 01       	movw	r26, r24
     a5a:	cb 01       	movw	r24, r22
			password += (pass - 48);
     a5c:	10 e0       	ldi	r17, 0x00	; 0
     a5e:	00 53       	subi	r16, 0x30	; 48
     a60:	10 40       	sbci	r17, 0x00	; 0
     a62:	68 01       	movw	r12, r16
     a64:	ee 24       	eor	r14, r14
     a66:	d7 fc       	sbrc	r13, 7
     a68:	e0 94       	com	r14
     a6a:	fe 2c       	mov	r15, r14
     a6c:	c8 0e       	add	r12, r24
     a6e:	d9 1e       	adc	r13, r25
     a70:	ea 1e       	adc	r14, r26
     a72:	fb 1e       	adc	r15, r27
     a74:	8f e7       	ldi	r24, 0x7F	; 127
     a76:	9a e1       	ldi	r25, 0x1A	; 26
     a78:	a6 e0       	ldi	r26, 0x06	; 6
     a7a:	81 50       	subi	r24, 0x01	; 1
     a7c:	90 40       	sbci	r25, 0x00	; 0
     a7e:	a0 40       	sbci	r26, 0x00	; 0
     a80:	e1 f7       	brne	.-8      	; 0xa7a <safe_set_pass+0xb2>
     a82:	00 c0       	rjmp	.+0      	; 0xa84 <safe_set_pass+0xbc>
     a84:	00 00       	nop
			factor = 10;
     a86:	19 2d       	mov	r17, r9
     a88:	d6 cf       	rjmp	.-84     	; 0xa36 <safe_set_pass+0x6e>
			_delay_ms(250);
		}
	}
	LCD_send_character('#');
     a8a:	83 e2       	ldi	r24, 0x23	; 35
     a8c:	0e 94 4c 04 	call	0x898	; 0x898 <LCD_send_character>
	LCD_clear_screen();
     a90:	0e 94 13 04 	call	0x826	; 0x826 <LCD_clear_screen>
	LCD_send_string("Your password is");
     a94:	83 e9       	ldi	r24, 0x93	; 147
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <LCD_send_string>
	LCD_move_cursor(2,1);
     a9c:	82 e0       	ldi	r24, 0x02	; 2
     a9e:	61 e0       	ldi	r22, 0x01	; 1
     aa0:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <LCD_move_cursor>
	sprintf(pass_arr, "%lu", password); //convert number to string
     aa4:	ad b7       	in	r26, 0x3d	; 61
     aa6:	be b7       	in	r27, 0x3e	; 62
     aa8:	18 97       	sbiw	r26, 0x08	; 8
     aaa:	0f b6       	in	r0, 0x3f	; 63
     aac:	f8 94       	cli
     aae:	be bf       	out	0x3e, r27	; 62
     ab0:	0f be       	out	0x3f, r0	; 63
     ab2:	ad bf       	out	0x3d, r26	; 61
     ab4:	ed b7       	in	r30, 0x3d	; 61
     ab6:	fe b7       	in	r31, 0x3e	; 62
     ab8:	31 96       	adiw	r30, 0x01	; 1
     aba:	8e 01       	movw	r16, r28
     abc:	0f 5f       	subi	r16, 0xFF	; 255
     abe:	1f 4f       	sbci	r17, 0xFF	; 255
     ac0:	12 96       	adiw	r26, 0x02	; 2
     ac2:	1c 93       	st	X, r17
     ac4:	0e 93       	st	-X, r16
     ac6:	11 97       	sbiw	r26, 0x01	; 1
     ac8:	84 ea       	ldi	r24, 0xA4	; 164
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	93 83       	std	Z+3, r25	; 0x03
     ace:	82 83       	std	Z+2, r24	; 0x02
     ad0:	c4 82       	std	Z+4, r12	; 0x04
     ad2:	d5 82       	std	Z+5, r13	; 0x05
     ad4:	e6 82       	std	Z+6, r14	; 0x06
     ad6:	f7 82       	std	Z+7, r15	; 0x07
     ad8:	0e 94 45 06 	call	0xc8a	; 0xc8a <sprintf>
	LCD_send_string(pass_arr);
     adc:	ed b7       	in	r30, 0x3d	; 61
     ade:	fe b7       	in	r31, 0x3e	; 62
     ae0:	38 96       	adiw	r30, 0x08	; 8
     ae2:	0f b6       	in	r0, 0x3f	; 63
     ae4:	f8 94       	cli
     ae6:	fe bf       	out	0x3e, r31	; 62
     ae8:	0f be       	out	0x3f, r0	; 63
     aea:	ed bf       	out	0x3d, r30	; 61
     aec:	c8 01       	movw	r24, r16
     aee:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <LCD_send_string>
	/*save password to EEPROM*/
	EEPROM_write(*(address+0),(uint8)(password>>24));
     af2:	4f 2d       	mov	r20, r15
     af4:	55 27       	eor	r21, r21
     af6:	66 27       	eor	r22, r22
     af8:	77 27       	eor	r23, r23
     afa:	d5 01       	movw	r26, r10
     afc:	8d 91       	ld	r24, X+
     afe:	9c 91       	ld	r25, X
     b00:	64 2f       	mov	r22, r20
     b02:	0e 94 66 03 	call	0x6cc	; 0x6cc <EEPROM_write>
	EEPROM_write(*(address+1),(uint8)(password>>16));
     b06:	a7 01       	movw	r20, r14
     b08:	66 27       	eor	r22, r22
     b0a:	77 27       	eor	r23, r23
     b0c:	f5 01       	movw	r30, r10
     b0e:	82 81       	ldd	r24, Z+2	; 0x02
     b10:	93 81       	ldd	r25, Z+3	; 0x03
     b12:	64 2f       	mov	r22, r20
     b14:	0e 94 66 03 	call	0x6cc	; 0x6cc <EEPROM_write>
	EEPROM_write(*(address+2),(uint8)(password>>8));
     b18:	77 27       	eor	r23, r23
     b1a:	6f 2d       	mov	r22, r15
     b1c:	5e 2d       	mov	r21, r14
     b1e:	4d 2d       	mov	r20, r13
     b20:	d5 01       	movw	r26, r10
     b22:	14 96       	adiw	r26, 0x04	; 4
     b24:	8d 91       	ld	r24, X+
     b26:	9c 91       	ld	r25, X
     b28:	15 97       	sbiw	r26, 0x05	; 5
     b2a:	64 2f       	mov	r22, r20
     b2c:	0e 94 66 03 	call	0x6cc	; 0x6cc <EEPROM_write>
	EEPROM_write(*(address+3),(uint8)(password));
     b30:	f5 01       	movw	r30, r10
     b32:	86 81       	ldd	r24, Z+6	; 0x06
     b34:	97 81       	ldd	r25, Z+7	; 0x07
     b36:	6c 2d       	mov	r22, r12
     b38:	0e 94 66 03 	call	0x6cc	; 0x6cc <EEPROM_write>
	
	return password;
}
     b3c:	6c 2d       	mov	r22, r12
     b3e:	7d 2d       	mov	r23, r13
     b40:	8e 2d       	mov	r24, r14
     b42:	9f 2d       	mov	r25, r15
     b44:	a1 96       	adiw	r28, 0x21	; 33
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	f8 94       	cli
     b4a:	de bf       	out	0x3e, r29	; 62
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	cd bf       	out	0x3d, r28	; 61
     b50:	df 91       	pop	r29
     b52:	cf 91       	pop	r28
     b54:	1f 91       	pop	r17
     b56:	0f 91       	pop	r16
     b58:	ff 90       	pop	r15
     b5a:	ef 90       	pop	r14
     b5c:	df 90       	pop	r13
     b5e:	cf 90       	pop	r12
     b60:	bf 90       	pop	r11
     b62:	af 90       	pop	r10
     b64:	9f 90       	pop	r9
     b66:	08 95       	ret

00000b68 <safe_check_pass>:

uint8 safe_check_pass(uint16* address)
{
     b68:	af 92       	push	r10
     b6a:	bf 92       	push	r11
     b6c:	cf 92       	push	r12
     b6e:	df 92       	push	r13
     b70:	ef 92       	push	r14
     b72:	ff 92       	push	r15
     b74:	1f 93       	push	r17
     b76:	cf 93       	push	r28
     b78:	df 93       	push	r29
     b7a:	5c 01       	movw	r10, r24
	uint32 password1 = 0, password2 = 0;
	uint8 i=0;
	char pass = '\0', pass_arr[33] = {'\0'};
	uint8 factor = 1;

	LCD_move_cursor(1,1);
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	61 e0       	ldi	r22, 0x01	; 1
     b80:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <LCD_move_cursor>
	LCD_send_string("Enter password");
     b84:	88 ea       	ldi	r24, 0xA8	; 168
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <LCD_send_string>
	LCD_move_cursor(2,1);
     b8c:	82 e0       	ldi	r24, 0x02	; 2
     b8e:	61 e0       	ldi	r22, 0x01	; 1
     b90:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <LCD_move_cursor>
	LCD_send_string("Then enter '#' ");
     b94:	83 e8       	ldi	r24, 0x83	; 131
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <LCD_send_string>
	LCD_move_cursor(3,1);
     b9c:	83 e0       	ldi	r24, 0x03	; 3
     b9e:	61 e0       	ldi	r22, 0x01	; 1
     ba0:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <LCD_move_cursor>
{
	uint8 flag = 0;
	uint32 password1 = 0, password2 = 0;
	uint8 i=0;
	char pass = '\0', pass_arr[33] = {'\0'};
	uint8 factor = 1;
     ba4:	d1 e0       	ldi	r29, 0x01	; 1
}

uint8 safe_check_pass(uint16* address)
{
	uint8 flag = 0;
	uint32 password1 = 0, password2 = 0;
     ba6:	cc 24       	eor	r12, r12
     ba8:	dd 24       	eor	r13, r13
     baa:	76 01       	movw	r14, r12
		if ( (0xff != pass) && ( (char)pass!=(char)'#') )
		{
			LCD_send_character(pass);
			password1 *= factor;
			password1 += (pass - 48);
			factor = 10;
     bac:	1a e0       	ldi	r17, 0x0A	; 10
	LCD_send_string("Then enter '#' ");
	LCD_move_cursor(3,1);
	
	while( (char)pass!=(char)'#' )
	{
		pass = keypad_check_press();
     bae:	0e 94 9d 03 	call	0x73a	; 0x73a <keypad_check_press>
     bb2:	c8 2f       	mov	r28, r24
		if ( (0xff != pass) && ( (char)pass!=(char)'#') )
     bb4:	8f 3f       	cpi	r24, 0xFF	; 255
     bb6:	d9 f3       	breq	.-10     	; 0xbae <safe_check_pass+0x46>
     bb8:	83 32       	cpi	r24, 0x23	; 35
     bba:	11 f1       	breq	.+68     	; 0xc00 <safe_check_pass+0x98>
		{
			LCD_send_character(pass);
     bbc:	0e 94 4c 04 	call	0x898	; 0x898 <LCD_send_character>
			password1 *= factor;
     bc0:	6d 2f       	mov	r22, r29
     bc2:	70 e0       	ldi	r23, 0x00	; 0
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	a7 01       	movw	r20, r14
     bca:	96 01       	movw	r18, r12
     bcc:	0e 94 26 06 	call	0xc4c	; 0xc4c <__mulsi3>
     bd0:	dc 01       	movw	r26, r24
     bd2:	cb 01       	movw	r24, r22
			password1 += (pass - 48);
     bd4:	d0 e0       	ldi	r29, 0x00	; 0
     bd6:	e0 97       	sbiw	r28, 0x30	; 48
     bd8:	6e 01       	movw	r12, r28
     bda:	ee 24       	eor	r14, r14
     bdc:	d7 fc       	sbrc	r13, 7
     bde:	e0 94       	com	r14
     be0:	fe 2c       	mov	r15, r14
     be2:	c8 0e       	add	r12, r24
     be4:	d9 1e       	adc	r13, r25
     be6:	ea 1e       	adc	r14, r26
     be8:	fb 1e       	adc	r15, r27
     bea:	8f e7       	ldi	r24, 0x7F	; 127
     bec:	9a e1       	ldi	r25, 0x1A	; 26
     bee:	a6 e0       	ldi	r26, 0x06	; 6
     bf0:	81 50       	subi	r24, 0x01	; 1
     bf2:	90 40       	sbci	r25, 0x00	; 0
     bf4:	a0 40       	sbci	r26, 0x00	; 0
     bf6:	e1 f7       	brne	.-8      	; 0xbf0 <safe_check_pass+0x88>
     bf8:	00 c0       	rjmp	.+0      	; 0xbfa <safe_check_pass+0x92>
     bfa:	00 00       	nop
			factor = 10;
     bfc:	d1 2f       	mov	r29, r17
     bfe:	d7 cf       	rjmp	.-82     	; 0xbae <safe_check_pass+0x46>
			_delay_ms(250);
		}
	}
	LCD_send_character('#');
     c00:	83 e2       	ldi	r24, 0x23	; 35
     c02:	0e 94 4c 04 	call	0x898	; 0x898 <LCD_send_character>
	password2 = safe_read_pass(address);
     c06:	c5 01       	movw	r24, r10
     c08:	0e 94 9e 04 	call	0x93c	; 0x93c <safe_read_pass>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
	if (password1 == password2)
     c10:	8c 15       	cp	r24, r12
     c12:	9d 05       	cpc	r25, r13
     c14:	ae 05       	cpc	r26, r14
     c16:	bf 05       	cpc	r27, r15
     c18:	41 f4       	brne	.+16     	; 0xc2a <safe_check_pass+0xc2>
	{
		flag = 1;
		LCD_clear_screen();
     c1a:	0e 94 13 04 	call	0x826	; 0x826 <LCD_clear_screen>
		LCD_send_string("Password correct");
     c1e:	87 eb       	ldi	r24, 0xB7	; 183
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <LCD_send_string>
	}
	LCD_send_character('#');
	password2 = safe_read_pass(address);
	if (password1 == password2)
	{
		flag = 1;
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	07 c0       	rjmp	.+14     	; 0xc38 <safe_check_pass+0xd0>
		LCD_send_string("Password correct");
	}
	else
	{
		flag = 0;
		LCD_clear_screen();
     c2a:	0e 94 13 04 	call	0x826	; 0x826 <LCD_clear_screen>
		LCD_send_string("Pass incorrect");	
     c2e:	88 ec       	ldi	r24, 0xC8	; 200
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <LCD_send_string>
		LCD_clear_screen();
		LCD_send_string("Password correct");
	}
	else
	{
		flag = 0;
     c36:	80 e0       	ldi	r24, 0x00	; 0
		LCD_clear_screen();
		LCD_send_string("Pass incorrect");	
	}
	return flag;
     c38:	df 91       	pop	r29
     c3a:	cf 91       	pop	r28
     c3c:	1f 91       	pop	r17
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	df 90       	pop	r13
     c44:	cf 90       	pop	r12
     c46:	bf 90       	pop	r11
     c48:	af 90       	pop	r10
     c4a:	08 95       	ret

00000c4c <__mulsi3>:
     c4c:	62 9f       	mul	r22, r18
     c4e:	d0 01       	movw	r26, r0
     c50:	73 9f       	mul	r23, r19
     c52:	f0 01       	movw	r30, r0
     c54:	82 9f       	mul	r24, r18
     c56:	e0 0d       	add	r30, r0
     c58:	f1 1d       	adc	r31, r1
     c5a:	64 9f       	mul	r22, r20
     c5c:	e0 0d       	add	r30, r0
     c5e:	f1 1d       	adc	r31, r1
     c60:	92 9f       	mul	r25, r18
     c62:	f0 0d       	add	r31, r0
     c64:	83 9f       	mul	r24, r19
     c66:	f0 0d       	add	r31, r0
     c68:	74 9f       	mul	r23, r20
     c6a:	f0 0d       	add	r31, r0
     c6c:	65 9f       	mul	r22, r21
     c6e:	f0 0d       	add	r31, r0
     c70:	99 27       	eor	r25, r25
     c72:	72 9f       	mul	r23, r18
     c74:	b0 0d       	add	r27, r0
     c76:	e1 1d       	adc	r30, r1
     c78:	f9 1f       	adc	r31, r25
     c7a:	63 9f       	mul	r22, r19
     c7c:	b0 0d       	add	r27, r0
     c7e:	e1 1d       	adc	r30, r1
     c80:	f9 1f       	adc	r31, r25
     c82:	bd 01       	movw	r22, r26
     c84:	cf 01       	movw	r24, r30
     c86:	11 24       	eor	r1, r1
     c88:	08 95       	ret

00000c8a <sprintf>:
     c8a:	ae e0       	ldi	r26, 0x0E	; 14
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	eb e4       	ldi	r30, 0x4B	; 75
     c90:	f6 e0       	ldi	r31, 0x06	; 6
     c92:	0c 94 f3 08 	jmp	0x11e6	; 0x11e6 <__prologue_saves__+0x1c>
     c96:	0d 89       	ldd	r16, Y+21	; 0x15
     c98:	1e 89       	ldd	r17, Y+22	; 0x16
     c9a:	86 e0       	ldi	r24, 0x06	; 6
     c9c:	8c 83       	std	Y+4, r24	; 0x04
     c9e:	1a 83       	std	Y+2, r17	; 0x02
     ca0:	09 83       	std	Y+1, r16	; 0x01
     ca2:	8f ef       	ldi	r24, 0xFF	; 255
     ca4:	9f e7       	ldi	r25, 0x7F	; 127
     ca6:	9e 83       	std	Y+6, r25	; 0x06
     ca8:	8d 83       	std	Y+5, r24	; 0x05
     caa:	ae 01       	movw	r20, r28
     cac:	47 5e       	subi	r20, 0xE7	; 231
     cae:	5f 4f       	sbci	r21, 0xFF	; 255
     cb0:	ce 01       	movw	r24, r28
     cb2:	01 96       	adiw	r24, 0x01	; 1
     cb4:	6f 89       	ldd	r22, Y+23	; 0x17
     cb6:	78 8d       	ldd	r23, Y+24	; 0x18
     cb8:	0e 94 67 06 	call	0xcce	; 0xcce <vfprintf>
     cbc:	ef 81       	ldd	r30, Y+7	; 0x07
     cbe:	f8 85       	ldd	r31, Y+8	; 0x08
     cc0:	e0 0f       	add	r30, r16
     cc2:	f1 1f       	adc	r31, r17
     cc4:	10 82       	st	Z, r1
     cc6:	2e 96       	adiw	r28, 0x0e	; 14
     cc8:	e4 e0       	ldi	r30, 0x04	; 4
     cca:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__epilogue_restores__+0x1c>

00000cce <vfprintf>:
     cce:	ad e0       	ldi	r26, 0x0D	; 13
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	ed e6       	ldi	r30, 0x6D	; 109
     cd4:	f6 e0       	ldi	r31, 0x06	; 6
     cd6:	0c 94 e5 08 	jmp	0x11ca	; 0x11ca <__prologue_saves__>
     cda:	3c 01       	movw	r6, r24
     cdc:	7d 87       	std	Y+13, r23	; 0x0d
     cde:	6c 87       	std	Y+12, r22	; 0x0c
     ce0:	5a 01       	movw	r10, r20
     ce2:	fc 01       	movw	r30, r24
     ce4:	17 82       	std	Z+7, r1	; 0x07
     ce6:	16 82       	std	Z+6, r1	; 0x06
     ce8:	83 81       	ldd	r24, Z+3	; 0x03
     cea:	81 ff       	sbrs	r24, 1
     cec:	c8 c1       	rjmp	.+912    	; 0x107e <vfprintf+0x3b0>
     cee:	2e 01       	movw	r4, r28
     cf0:	08 94       	sec
     cf2:	41 1c       	adc	r4, r1
     cf4:	51 1c       	adc	r5, r1
     cf6:	f3 01       	movw	r30, r6
     cf8:	93 81       	ldd	r25, Z+3	; 0x03
     cfa:	ec 85       	ldd	r30, Y+12	; 0x0c
     cfc:	fd 85       	ldd	r31, Y+13	; 0x0d
     cfe:	93 fd       	sbrc	r25, 3
     d00:	85 91       	lpm	r24, Z+
     d02:	93 ff       	sbrs	r25, 3
     d04:	81 91       	ld	r24, Z+
     d06:	fd 87       	std	Y+13, r31	; 0x0d
     d08:	ec 87       	std	Y+12, r30	; 0x0c
     d0a:	88 23       	and	r24, r24
     d0c:	09 f4       	brne	.+2      	; 0xd10 <vfprintf+0x42>
     d0e:	b3 c1       	rjmp	.+870    	; 0x1076 <vfprintf+0x3a8>
     d10:	85 32       	cpi	r24, 0x25	; 37
     d12:	41 f4       	brne	.+16     	; 0xd24 <vfprintf+0x56>
     d14:	93 fd       	sbrc	r25, 3
     d16:	85 91       	lpm	r24, Z+
     d18:	93 ff       	sbrs	r25, 3
     d1a:	81 91       	ld	r24, Z+
     d1c:	fd 87       	std	Y+13, r31	; 0x0d
     d1e:	ec 87       	std	Y+12, r30	; 0x0c
     d20:	85 32       	cpi	r24, 0x25	; 37
     d22:	29 f4       	brne	.+10     	; 0xd2e <vfprintf+0x60>
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	b3 01       	movw	r22, r6
     d28:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <fputc>
     d2c:	e4 cf       	rjmp	.-56     	; 0xcf6 <vfprintf+0x28>
     d2e:	ff 24       	eor	r15, r15
     d30:	ee 24       	eor	r14, r14
     d32:	10 e0       	ldi	r17, 0x00	; 0
     d34:	10 32       	cpi	r17, 0x20	; 32
     d36:	b0 f4       	brcc	.+44     	; 0xd64 <vfprintf+0x96>
     d38:	8b 32       	cpi	r24, 0x2B	; 43
     d3a:	69 f0       	breq	.+26     	; 0xd56 <vfprintf+0x88>
     d3c:	8c 32       	cpi	r24, 0x2C	; 44
     d3e:	28 f4       	brcc	.+10     	; 0xd4a <vfprintf+0x7c>
     d40:	80 32       	cpi	r24, 0x20	; 32
     d42:	51 f0       	breq	.+20     	; 0xd58 <vfprintf+0x8a>
     d44:	83 32       	cpi	r24, 0x23	; 35
     d46:	71 f4       	brne	.+28     	; 0xd64 <vfprintf+0x96>
     d48:	0b c0       	rjmp	.+22     	; 0xd60 <vfprintf+0x92>
     d4a:	8d 32       	cpi	r24, 0x2D	; 45
     d4c:	39 f0       	breq	.+14     	; 0xd5c <vfprintf+0x8e>
     d4e:	80 33       	cpi	r24, 0x30	; 48
     d50:	49 f4       	brne	.+18     	; 0xd64 <vfprintf+0x96>
     d52:	11 60       	ori	r17, 0x01	; 1
     d54:	2c c0       	rjmp	.+88     	; 0xdae <vfprintf+0xe0>
     d56:	12 60       	ori	r17, 0x02	; 2
     d58:	14 60       	ori	r17, 0x04	; 4
     d5a:	29 c0       	rjmp	.+82     	; 0xdae <vfprintf+0xe0>
     d5c:	18 60       	ori	r17, 0x08	; 8
     d5e:	27 c0       	rjmp	.+78     	; 0xdae <vfprintf+0xe0>
     d60:	10 61       	ori	r17, 0x10	; 16
     d62:	25 c0       	rjmp	.+74     	; 0xdae <vfprintf+0xe0>
     d64:	17 fd       	sbrc	r17, 7
     d66:	2e c0       	rjmp	.+92     	; 0xdc4 <vfprintf+0xf6>
     d68:	28 2f       	mov	r18, r24
     d6a:	20 53       	subi	r18, 0x30	; 48
     d6c:	2a 30       	cpi	r18, 0x0A	; 10
     d6e:	98 f4       	brcc	.+38     	; 0xd96 <vfprintf+0xc8>
     d70:	16 ff       	sbrs	r17, 6
     d72:	08 c0       	rjmp	.+16     	; 0xd84 <vfprintf+0xb6>
     d74:	8f 2d       	mov	r24, r15
     d76:	88 0f       	add	r24, r24
     d78:	f8 2e       	mov	r15, r24
     d7a:	ff 0c       	add	r15, r15
     d7c:	ff 0c       	add	r15, r15
     d7e:	f8 0e       	add	r15, r24
     d80:	f2 0e       	add	r15, r18
     d82:	15 c0       	rjmp	.+42     	; 0xdae <vfprintf+0xe0>
     d84:	8e 2d       	mov	r24, r14
     d86:	88 0f       	add	r24, r24
     d88:	e8 2e       	mov	r14, r24
     d8a:	ee 0c       	add	r14, r14
     d8c:	ee 0c       	add	r14, r14
     d8e:	e8 0e       	add	r14, r24
     d90:	e2 0e       	add	r14, r18
     d92:	10 62       	ori	r17, 0x20	; 32
     d94:	0c c0       	rjmp	.+24     	; 0xdae <vfprintf+0xe0>
     d96:	8e 32       	cpi	r24, 0x2E	; 46
     d98:	21 f4       	brne	.+8      	; 0xda2 <vfprintf+0xd4>
     d9a:	16 fd       	sbrc	r17, 6
     d9c:	6c c1       	rjmp	.+728    	; 0x1076 <vfprintf+0x3a8>
     d9e:	10 64       	ori	r17, 0x40	; 64
     da0:	06 c0       	rjmp	.+12     	; 0xdae <vfprintf+0xe0>
     da2:	8c 36       	cpi	r24, 0x6C	; 108
     da4:	11 f4       	brne	.+4      	; 0xdaa <vfprintf+0xdc>
     da6:	10 68       	ori	r17, 0x80	; 128
     da8:	02 c0       	rjmp	.+4      	; 0xdae <vfprintf+0xe0>
     daa:	88 36       	cpi	r24, 0x68	; 104
     dac:	59 f4       	brne	.+22     	; 0xdc4 <vfprintf+0xf6>
     dae:	ec 85       	ldd	r30, Y+12	; 0x0c
     db0:	fd 85       	ldd	r31, Y+13	; 0x0d
     db2:	93 fd       	sbrc	r25, 3
     db4:	85 91       	lpm	r24, Z+
     db6:	93 ff       	sbrs	r25, 3
     db8:	81 91       	ld	r24, Z+
     dba:	fd 87       	std	Y+13, r31	; 0x0d
     dbc:	ec 87       	std	Y+12, r30	; 0x0c
     dbe:	88 23       	and	r24, r24
     dc0:	09 f0       	breq	.+2      	; 0xdc4 <vfprintf+0xf6>
     dc2:	b8 cf       	rjmp	.-144    	; 0xd34 <vfprintf+0x66>
     dc4:	98 2f       	mov	r25, r24
     dc6:	95 54       	subi	r25, 0x45	; 69
     dc8:	93 30       	cpi	r25, 0x03	; 3
     dca:	18 f0       	brcs	.+6      	; 0xdd2 <vfprintf+0x104>
     dcc:	90 52       	subi	r25, 0x20	; 32
     dce:	93 30       	cpi	r25, 0x03	; 3
     dd0:	38 f4       	brcc	.+14     	; 0xde0 <vfprintf+0x112>
     dd2:	24 e0       	ldi	r18, 0x04	; 4
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	a2 0e       	add	r10, r18
     dd8:	b3 1e       	adc	r11, r19
     dda:	3f e3       	ldi	r19, 0x3F	; 63
     ddc:	39 83       	std	Y+1, r19	; 0x01
     dde:	0f c0       	rjmp	.+30     	; 0xdfe <vfprintf+0x130>
     de0:	83 36       	cpi	r24, 0x63	; 99
     de2:	31 f0       	breq	.+12     	; 0xdf0 <vfprintf+0x122>
     de4:	83 37       	cpi	r24, 0x73	; 115
     de6:	81 f0       	breq	.+32     	; 0xe08 <vfprintf+0x13a>
     de8:	83 35       	cpi	r24, 0x53	; 83
     dea:	09 f0       	breq	.+2      	; 0xdee <vfprintf+0x120>
     dec:	5a c0       	rjmp	.+180    	; 0xea2 <vfprintf+0x1d4>
     dee:	22 c0       	rjmp	.+68     	; 0xe34 <vfprintf+0x166>
     df0:	f5 01       	movw	r30, r10
     df2:	80 81       	ld	r24, Z
     df4:	89 83       	std	Y+1, r24	; 0x01
     df6:	22 e0       	ldi	r18, 0x02	; 2
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	a2 0e       	add	r10, r18
     dfc:	b3 1e       	adc	r11, r19
     dfe:	21 e0       	ldi	r18, 0x01	; 1
     e00:	c2 2e       	mov	r12, r18
     e02:	d1 2c       	mov	r13, r1
     e04:	42 01       	movw	r8, r4
     e06:	14 c0       	rjmp	.+40     	; 0xe30 <vfprintf+0x162>
     e08:	92 e0       	ldi	r25, 0x02	; 2
     e0a:	29 2e       	mov	r2, r25
     e0c:	31 2c       	mov	r3, r1
     e0e:	2a 0c       	add	r2, r10
     e10:	3b 1c       	adc	r3, r11
     e12:	f5 01       	movw	r30, r10
     e14:	80 80       	ld	r8, Z
     e16:	91 80       	ldd	r9, Z+1	; 0x01
     e18:	16 ff       	sbrs	r17, 6
     e1a:	03 c0       	rjmp	.+6      	; 0xe22 <vfprintf+0x154>
     e1c:	6f 2d       	mov	r22, r15
     e1e:	70 e0       	ldi	r23, 0x00	; 0
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <vfprintf+0x158>
     e22:	6f ef       	ldi	r22, 0xFF	; 255
     e24:	7f ef       	ldi	r23, 0xFF	; 255
     e26:	c4 01       	movw	r24, r8
     e28:	0e 94 50 08 	call	0x10a0	; 0x10a0 <strnlen>
     e2c:	6c 01       	movw	r12, r24
     e2e:	51 01       	movw	r10, r2
     e30:	1f 77       	andi	r17, 0x7F	; 127
     e32:	15 c0       	rjmp	.+42     	; 0xe5e <vfprintf+0x190>
     e34:	82 e0       	ldi	r24, 0x02	; 2
     e36:	28 2e       	mov	r2, r24
     e38:	31 2c       	mov	r3, r1
     e3a:	2a 0c       	add	r2, r10
     e3c:	3b 1c       	adc	r3, r11
     e3e:	f5 01       	movw	r30, r10
     e40:	80 80       	ld	r8, Z
     e42:	91 80       	ldd	r9, Z+1	; 0x01
     e44:	16 ff       	sbrs	r17, 6
     e46:	03 c0       	rjmp	.+6      	; 0xe4e <vfprintf+0x180>
     e48:	6f 2d       	mov	r22, r15
     e4a:	70 e0       	ldi	r23, 0x00	; 0
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <vfprintf+0x184>
     e4e:	6f ef       	ldi	r22, 0xFF	; 255
     e50:	7f ef       	ldi	r23, 0xFF	; 255
     e52:	c4 01       	movw	r24, r8
     e54:	0e 94 45 08 	call	0x108a	; 0x108a <strnlen_P>
     e58:	6c 01       	movw	r12, r24
     e5a:	10 68       	ori	r17, 0x80	; 128
     e5c:	51 01       	movw	r10, r2
     e5e:	13 fd       	sbrc	r17, 3
     e60:	1c c0       	rjmp	.+56     	; 0xe9a <vfprintf+0x1cc>
     e62:	06 c0       	rjmp	.+12     	; 0xe70 <vfprintf+0x1a2>
     e64:	80 e2       	ldi	r24, 0x20	; 32
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	b3 01       	movw	r22, r6
     e6a:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <fputc>
     e6e:	ea 94       	dec	r14
     e70:	8e 2d       	mov	r24, r14
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	c8 16       	cp	r12, r24
     e76:	d9 06       	cpc	r13, r25
     e78:	a8 f3       	brcs	.-22     	; 0xe64 <vfprintf+0x196>
     e7a:	0f c0       	rjmp	.+30     	; 0xe9a <vfprintf+0x1cc>
     e7c:	f4 01       	movw	r30, r8
     e7e:	17 fd       	sbrc	r17, 7
     e80:	85 91       	lpm	r24, Z+
     e82:	17 ff       	sbrs	r17, 7
     e84:	81 91       	ld	r24, Z+
     e86:	4f 01       	movw	r8, r30
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	b3 01       	movw	r22, r6
     e8c:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <fputc>
     e90:	e1 10       	cpse	r14, r1
     e92:	ea 94       	dec	r14
     e94:	08 94       	sec
     e96:	c1 08       	sbc	r12, r1
     e98:	d1 08       	sbc	r13, r1
     e9a:	c1 14       	cp	r12, r1
     e9c:	d1 04       	cpc	r13, r1
     e9e:	71 f7       	brne	.-36     	; 0xe7c <vfprintf+0x1ae>
     ea0:	e7 c0       	rjmp	.+462    	; 0x1070 <vfprintf+0x3a2>
     ea2:	84 36       	cpi	r24, 0x64	; 100
     ea4:	11 f0       	breq	.+4      	; 0xeaa <vfprintf+0x1dc>
     ea6:	89 36       	cpi	r24, 0x69	; 105
     ea8:	51 f5       	brne	.+84     	; 0xefe <vfprintf+0x230>
     eaa:	f5 01       	movw	r30, r10
     eac:	17 ff       	sbrs	r17, 7
     eae:	07 c0       	rjmp	.+14     	; 0xebe <vfprintf+0x1f0>
     eb0:	80 81       	ld	r24, Z
     eb2:	91 81       	ldd	r25, Z+1	; 0x01
     eb4:	a2 81       	ldd	r26, Z+2	; 0x02
     eb6:	b3 81       	ldd	r27, Z+3	; 0x03
     eb8:	24 e0       	ldi	r18, 0x04	; 4
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	08 c0       	rjmp	.+16     	; 0xece <vfprintf+0x200>
     ebe:	80 81       	ld	r24, Z
     ec0:	91 81       	ldd	r25, Z+1	; 0x01
     ec2:	aa 27       	eor	r26, r26
     ec4:	97 fd       	sbrc	r25, 7
     ec6:	a0 95       	com	r26
     ec8:	ba 2f       	mov	r27, r26
     eca:	22 e0       	ldi	r18, 0x02	; 2
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	a2 0e       	add	r10, r18
     ed0:	b3 1e       	adc	r11, r19
     ed2:	01 2f       	mov	r16, r17
     ed4:	0f 76       	andi	r16, 0x6F	; 111
     ed6:	b7 ff       	sbrs	r27, 7
     ed8:	08 c0       	rjmp	.+16     	; 0xeea <vfprintf+0x21c>
     eda:	b0 95       	com	r27
     edc:	a0 95       	com	r26
     ede:	90 95       	com	r25
     ee0:	81 95       	neg	r24
     ee2:	9f 4f       	sbci	r25, 0xFF	; 255
     ee4:	af 4f       	sbci	r26, 0xFF	; 255
     ee6:	bf 4f       	sbci	r27, 0xFF	; 255
     ee8:	00 68       	ori	r16, 0x80	; 128
     eea:	bc 01       	movw	r22, r24
     eec:	cd 01       	movw	r24, r26
     eee:	a2 01       	movw	r20, r4
     ef0:	2a e0       	ldi	r18, 0x0A	; 10
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	0e 94 87 08 	call	0x110e	; 0x110e <__ultoa_invert>
     ef8:	d8 2e       	mov	r13, r24
     efa:	d4 18       	sub	r13, r4
     efc:	3f c0       	rjmp	.+126    	; 0xf7c <vfprintf+0x2ae>
     efe:	85 37       	cpi	r24, 0x75	; 117
     f00:	21 f4       	brne	.+8      	; 0xf0a <vfprintf+0x23c>
     f02:	1f 7e       	andi	r17, 0xEF	; 239
     f04:	2a e0       	ldi	r18, 0x0A	; 10
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	20 c0       	rjmp	.+64     	; 0xf4a <vfprintf+0x27c>
     f0a:	19 7f       	andi	r17, 0xF9	; 249
     f0c:	8f 36       	cpi	r24, 0x6F	; 111
     f0e:	a9 f0       	breq	.+42     	; 0xf3a <vfprintf+0x26c>
     f10:	80 37       	cpi	r24, 0x70	; 112
     f12:	20 f4       	brcc	.+8      	; 0xf1c <vfprintf+0x24e>
     f14:	88 35       	cpi	r24, 0x58	; 88
     f16:	09 f0       	breq	.+2      	; 0xf1a <vfprintf+0x24c>
     f18:	ae c0       	rjmp	.+348    	; 0x1076 <vfprintf+0x3a8>
     f1a:	0b c0       	rjmp	.+22     	; 0xf32 <vfprintf+0x264>
     f1c:	80 37       	cpi	r24, 0x70	; 112
     f1e:	21 f0       	breq	.+8      	; 0xf28 <vfprintf+0x25a>
     f20:	88 37       	cpi	r24, 0x78	; 120
     f22:	09 f0       	breq	.+2      	; 0xf26 <vfprintf+0x258>
     f24:	a8 c0       	rjmp	.+336    	; 0x1076 <vfprintf+0x3a8>
     f26:	01 c0       	rjmp	.+2      	; 0xf2a <vfprintf+0x25c>
     f28:	10 61       	ori	r17, 0x10	; 16
     f2a:	14 ff       	sbrs	r17, 4
     f2c:	09 c0       	rjmp	.+18     	; 0xf40 <vfprintf+0x272>
     f2e:	14 60       	ori	r17, 0x04	; 4
     f30:	07 c0       	rjmp	.+14     	; 0xf40 <vfprintf+0x272>
     f32:	14 ff       	sbrs	r17, 4
     f34:	08 c0       	rjmp	.+16     	; 0xf46 <vfprintf+0x278>
     f36:	16 60       	ori	r17, 0x06	; 6
     f38:	06 c0       	rjmp	.+12     	; 0xf46 <vfprintf+0x278>
     f3a:	28 e0       	ldi	r18, 0x08	; 8
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	05 c0       	rjmp	.+10     	; 0xf4a <vfprintf+0x27c>
     f40:	20 e1       	ldi	r18, 0x10	; 16
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <vfprintf+0x27c>
     f46:	20 e1       	ldi	r18, 0x10	; 16
     f48:	32 e0       	ldi	r19, 0x02	; 2
     f4a:	f5 01       	movw	r30, r10
     f4c:	17 ff       	sbrs	r17, 7
     f4e:	07 c0       	rjmp	.+14     	; 0xf5e <vfprintf+0x290>
     f50:	60 81       	ld	r22, Z
     f52:	71 81       	ldd	r23, Z+1	; 0x01
     f54:	82 81       	ldd	r24, Z+2	; 0x02
     f56:	93 81       	ldd	r25, Z+3	; 0x03
     f58:	44 e0       	ldi	r20, 0x04	; 4
     f5a:	50 e0       	ldi	r21, 0x00	; 0
     f5c:	06 c0       	rjmp	.+12     	; 0xf6a <vfprintf+0x29c>
     f5e:	60 81       	ld	r22, Z
     f60:	71 81       	ldd	r23, Z+1	; 0x01
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	42 e0       	ldi	r20, 0x02	; 2
     f68:	50 e0       	ldi	r21, 0x00	; 0
     f6a:	a4 0e       	add	r10, r20
     f6c:	b5 1e       	adc	r11, r21
     f6e:	a2 01       	movw	r20, r4
     f70:	0e 94 87 08 	call	0x110e	; 0x110e <__ultoa_invert>
     f74:	d8 2e       	mov	r13, r24
     f76:	d4 18       	sub	r13, r4
     f78:	01 2f       	mov	r16, r17
     f7a:	0f 77       	andi	r16, 0x7F	; 127
     f7c:	06 ff       	sbrs	r16, 6
     f7e:	09 c0       	rjmp	.+18     	; 0xf92 <vfprintf+0x2c4>
     f80:	0e 7f       	andi	r16, 0xFE	; 254
     f82:	df 14       	cp	r13, r15
     f84:	30 f4       	brcc	.+12     	; 0xf92 <vfprintf+0x2c4>
     f86:	04 ff       	sbrs	r16, 4
     f88:	06 c0       	rjmp	.+12     	; 0xf96 <vfprintf+0x2c8>
     f8a:	02 fd       	sbrc	r16, 2
     f8c:	04 c0       	rjmp	.+8      	; 0xf96 <vfprintf+0x2c8>
     f8e:	0f 7e       	andi	r16, 0xEF	; 239
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <vfprintf+0x2c8>
     f92:	1d 2d       	mov	r17, r13
     f94:	01 c0       	rjmp	.+2      	; 0xf98 <vfprintf+0x2ca>
     f96:	1f 2d       	mov	r17, r15
     f98:	80 2f       	mov	r24, r16
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	04 ff       	sbrs	r16, 4
     f9e:	0c c0       	rjmp	.+24     	; 0xfb8 <vfprintf+0x2ea>
     fa0:	fe 01       	movw	r30, r28
     fa2:	ed 0d       	add	r30, r13
     fa4:	f1 1d       	adc	r31, r1
     fa6:	20 81       	ld	r18, Z
     fa8:	20 33       	cpi	r18, 0x30	; 48
     faa:	11 f4       	brne	.+4      	; 0xfb0 <vfprintf+0x2e2>
     fac:	09 7e       	andi	r16, 0xE9	; 233
     fae:	09 c0       	rjmp	.+18     	; 0xfc2 <vfprintf+0x2f4>
     fb0:	02 ff       	sbrs	r16, 2
     fb2:	06 c0       	rjmp	.+12     	; 0xfc0 <vfprintf+0x2f2>
     fb4:	1e 5f       	subi	r17, 0xFE	; 254
     fb6:	05 c0       	rjmp	.+10     	; 0xfc2 <vfprintf+0x2f4>
     fb8:	86 78       	andi	r24, 0x86	; 134
     fba:	90 70       	andi	r25, 0x00	; 0
     fbc:	00 97       	sbiw	r24, 0x00	; 0
     fbe:	09 f0       	breq	.+2      	; 0xfc2 <vfprintf+0x2f4>
     fc0:	1f 5f       	subi	r17, 0xFF	; 255
     fc2:	80 2e       	mov	r8, r16
     fc4:	99 24       	eor	r9, r9
     fc6:	03 fd       	sbrc	r16, 3
     fc8:	12 c0       	rjmp	.+36     	; 0xfee <vfprintf+0x320>
     fca:	00 ff       	sbrs	r16, 0
     fcc:	0d c0       	rjmp	.+26     	; 0xfe8 <vfprintf+0x31a>
     fce:	fd 2c       	mov	r15, r13
     fd0:	1e 15       	cp	r17, r14
     fd2:	50 f4       	brcc	.+20     	; 0xfe8 <vfprintf+0x31a>
     fd4:	fe 0c       	add	r15, r14
     fd6:	f1 1a       	sub	r15, r17
     fd8:	1e 2d       	mov	r17, r14
     fda:	06 c0       	rjmp	.+12     	; 0xfe8 <vfprintf+0x31a>
     fdc:	80 e2       	ldi	r24, 0x20	; 32
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	b3 01       	movw	r22, r6
     fe2:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <fputc>
     fe6:	1f 5f       	subi	r17, 0xFF	; 255
     fe8:	1e 15       	cp	r17, r14
     fea:	c0 f3       	brcs	.-16     	; 0xfdc <vfprintf+0x30e>
     fec:	04 c0       	rjmp	.+8      	; 0xff6 <vfprintf+0x328>
     fee:	1e 15       	cp	r17, r14
     ff0:	10 f4       	brcc	.+4      	; 0xff6 <vfprintf+0x328>
     ff2:	e1 1a       	sub	r14, r17
     ff4:	01 c0       	rjmp	.+2      	; 0xff8 <vfprintf+0x32a>
     ff6:	ee 24       	eor	r14, r14
     ff8:	84 fe       	sbrs	r8, 4
     ffa:	0f c0       	rjmp	.+30     	; 0x101a <vfprintf+0x34c>
     ffc:	80 e3       	ldi	r24, 0x30	; 48
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	b3 01       	movw	r22, r6
    1002:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <fputc>
    1006:	82 fe       	sbrs	r8, 2
    1008:	1f c0       	rjmp	.+62     	; 0x1048 <vfprintf+0x37a>
    100a:	81 fe       	sbrs	r8, 1
    100c:	03 c0       	rjmp	.+6      	; 0x1014 <vfprintf+0x346>
    100e:	88 e5       	ldi	r24, 0x58	; 88
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	10 c0       	rjmp	.+32     	; 0x1034 <vfprintf+0x366>
    1014:	88 e7       	ldi	r24, 0x78	; 120
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	0d c0       	rjmp	.+26     	; 0x1034 <vfprintf+0x366>
    101a:	c4 01       	movw	r24, r8
    101c:	86 78       	andi	r24, 0x86	; 134
    101e:	90 70       	andi	r25, 0x00	; 0
    1020:	00 97       	sbiw	r24, 0x00	; 0
    1022:	91 f0       	breq	.+36     	; 0x1048 <vfprintf+0x37a>
    1024:	81 fc       	sbrc	r8, 1
    1026:	02 c0       	rjmp	.+4      	; 0x102c <vfprintf+0x35e>
    1028:	80 e2       	ldi	r24, 0x20	; 32
    102a:	01 c0       	rjmp	.+2      	; 0x102e <vfprintf+0x360>
    102c:	8b e2       	ldi	r24, 0x2B	; 43
    102e:	07 fd       	sbrc	r16, 7
    1030:	8d e2       	ldi	r24, 0x2D	; 45
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	b3 01       	movw	r22, r6
    1036:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <fputc>
    103a:	06 c0       	rjmp	.+12     	; 0x1048 <vfprintf+0x37a>
    103c:	80 e3       	ldi	r24, 0x30	; 48
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	b3 01       	movw	r22, r6
    1042:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <fputc>
    1046:	fa 94       	dec	r15
    1048:	df 14       	cp	r13, r15
    104a:	c0 f3       	brcs	.-16     	; 0x103c <vfprintf+0x36e>
    104c:	da 94       	dec	r13
    104e:	f2 01       	movw	r30, r4
    1050:	ed 0d       	add	r30, r13
    1052:	f1 1d       	adc	r31, r1
    1054:	80 81       	ld	r24, Z
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	b3 01       	movw	r22, r6
    105a:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <fputc>
    105e:	dd 20       	and	r13, r13
    1060:	a9 f7       	brne	.-22     	; 0x104c <vfprintf+0x37e>
    1062:	06 c0       	rjmp	.+12     	; 0x1070 <vfprintf+0x3a2>
    1064:	80 e2       	ldi	r24, 0x20	; 32
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	b3 01       	movw	r22, r6
    106a:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <fputc>
    106e:	ea 94       	dec	r14
    1070:	ee 20       	and	r14, r14
    1072:	c1 f7       	brne	.-16     	; 0x1064 <vfprintf+0x396>
    1074:	40 ce       	rjmp	.-896    	; 0xcf6 <vfprintf+0x28>
    1076:	f3 01       	movw	r30, r6
    1078:	86 81       	ldd	r24, Z+6	; 0x06
    107a:	97 81       	ldd	r25, Z+7	; 0x07
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <vfprintf+0x3b4>
    107e:	8f ef       	ldi	r24, 0xFF	; 255
    1080:	9f ef       	ldi	r25, 0xFF	; 255
    1082:	2d 96       	adiw	r28, 0x0d	; 13
    1084:	e2 e1       	ldi	r30, 0x12	; 18
    1086:	0c 94 01 09 	jmp	0x1202	; 0x1202 <__epilogue_restores__>

0000108a <strnlen_P>:
    108a:	fc 01       	movw	r30, r24
    108c:	05 90       	lpm	r0, Z+
    108e:	61 50       	subi	r22, 0x01	; 1
    1090:	70 40       	sbci	r23, 0x00	; 0
    1092:	01 10       	cpse	r0, r1
    1094:	d8 f7       	brcc	.-10     	; 0x108c <strnlen_P+0x2>
    1096:	80 95       	com	r24
    1098:	90 95       	com	r25
    109a:	8e 0f       	add	r24, r30
    109c:	9f 1f       	adc	r25, r31
    109e:	08 95       	ret

000010a0 <strnlen>:
    10a0:	fc 01       	movw	r30, r24
    10a2:	61 50       	subi	r22, 0x01	; 1
    10a4:	70 40       	sbci	r23, 0x00	; 0
    10a6:	01 90       	ld	r0, Z+
    10a8:	01 10       	cpse	r0, r1
    10aa:	d8 f7       	brcc	.-10     	; 0x10a2 <strnlen+0x2>
    10ac:	80 95       	com	r24
    10ae:	90 95       	com	r25
    10b0:	8e 0f       	add	r24, r30
    10b2:	9f 1f       	adc	r25, r31
    10b4:	08 95       	ret

000010b6 <fputc>:
    10b6:	0f 93       	push	r16
    10b8:	1f 93       	push	r17
    10ba:	cf 93       	push	r28
    10bc:	df 93       	push	r29
    10be:	8c 01       	movw	r16, r24
    10c0:	eb 01       	movw	r28, r22
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	81 ff       	sbrs	r24, 1
    10c6:	1b c0       	rjmp	.+54     	; 0x10fe <fputc+0x48>
    10c8:	82 ff       	sbrs	r24, 2
    10ca:	0d c0       	rjmp	.+26     	; 0x10e6 <fputc+0x30>
    10cc:	2e 81       	ldd	r18, Y+6	; 0x06
    10ce:	3f 81       	ldd	r19, Y+7	; 0x07
    10d0:	8c 81       	ldd	r24, Y+4	; 0x04
    10d2:	9d 81       	ldd	r25, Y+5	; 0x05
    10d4:	28 17       	cp	r18, r24
    10d6:	39 07       	cpc	r19, r25
    10d8:	64 f4       	brge	.+24     	; 0x10f2 <fputc+0x3c>
    10da:	e8 81       	ld	r30, Y
    10dc:	f9 81       	ldd	r31, Y+1	; 0x01
    10de:	01 93       	st	Z+, r16
    10e0:	f9 83       	std	Y+1, r31	; 0x01
    10e2:	e8 83       	st	Y, r30
    10e4:	06 c0       	rjmp	.+12     	; 0x10f2 <fputc+0x3c>
    10e6:	e8 85       	ldd	r30, Y+8	; 0x08
    10e8:	f9 85       	ldd	r31, Y+9	; 0x09
    10ea:	80 2f       	mov	r24, r16
    10ec:	09 95       	icall
    10ee:	00 97       	sbiw	r24, 0x00	; 0
    10f0:	31 f4       	brne	.+12     	; 0x10fe <fputc+0x48>
    10f2:	8e 81       	ldd	r24, Y+6	; 0x06
    10f4:	9f 81       	ldd	r25, Y+7	; 0x07
    10f6:	01 96       	adiw	r24, 0x01	; 1
    10f8:	9f 83       	std	Y+7, r25	; 0x07
    10fa:	8e 83       	std	Y+6, r24	; 0x06
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <fputc+0x4c>
    10fe:	0f ef       	ldi	r16, 0xFF	; 255
    1100:	1f ef       	ldi	r17, 0xFF	; 255
    1102:	c8 01       	movw	r24, r16
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	1f 91       	pop	r17
    110a:	0f 91       	pop	r16
    110c:	08 95       	ret

0000110e <__ultoa_invert>:
    110e:	fa 01       	movw	r30, r20
    1110:	aa 27       	eor	r26, r26
    1112:	28 30       	cpi	r18, 0x08	; 8
    1114:	51 f1       	breq	.+84     	; 0x116a <__ultoa_invert+0x5c>
    1116:	20 31       	cpi	r18, 0x10	; 16
    1118:	81 f1       	breq	.+96     	; 0x117a <__ultoa_invert+0x6c>
    111a:	e8 94       	clt
    111c:	6f 93       	push	r22
    111e:	6e 7f       	andi	r22, 0xFE	; 254
    1120:	6e 5f       	subi	r22, 0xFE	; 254
    1122:	7f 4f       	sbci	r23, 0xFF	; 255
    1124:	8f 4f       	sbci	r24, 0xFF	; 255
    1126:	9f 4f       	sbci	r25, 0xFF	; 255
    1128:	af 4f       	sbci	r26, 0xFF	; 255
    112a:	b1 e0       	ldi	r27, 0x01	; 1
    112c:	3e d0       	rcall	.+124    	; 0x11aa <__ultoa_invert+0x9c>
    112e:	b4 e0       	ldi	r27, 0x04	; 4
    1130:	3c d0       	rcall	.+120    	; 0x11aa <__ultoa_invert+0x9c>
    1132:	67 0f       	add	r22, r23
    1134:	78 1f       	adc	r23, r24
    1136:	89 1f       	adc	r24, r25
    1138:	9a 1f       	adc	r25, r26
    113a:	a1 1d       	adc	r26, r1
    113c:	68 0f       	add	r22, r24
    113e:	79 1f       	adc	r23, r25
    1140:	8a 1f       	adc	r24, r26
    1142:	91 1d       	adc	r25, r1
    1144:	a1 1d       	adc	r26, r1
    1146:	6a 0f       	add	r22, r26
    1148:	71 1d       	adc	r23, r1
    114a:	81 1d       	adc	r24, r1
    114c:	91 1d       	adc	r25, r1
    114e:	a1 1d       	adc	r26, r1
    1150:	20 d0       	rcall	.+64     	; 0x1192 <__ultoa_invert+0x84>
    1152:	09 f4       	brne	.+2      	; 0x1156 <__ultoa_invert+0x48>
    1154:	68 94       	set
    1156:	3f 91       	pop	r19
    1158:	2a e0       	ldi	r18, 0x0A	; 10
    115a:	26 9f       	mul	r18, r22
    115c:	11 24       	eor	r1, r1
    115e:	30 19       	sub	r19, r0
    1160:	30 5d       	subi	r19, 0xD0	; 208
    1162:	31 93       	st	Z+, r19
    1164:	de f6       	brtc	.-74     	; 0x111c <__ultoa_invert+0xe>
    1166:	cf 01       	movw	r24, r30
    1168:	08 95       	ret
    116a:	46 2f       	mov	r20, r22
    116c:	47 70       	andi	r20, 0x07	; 7
    116e:	40 5d       	subi	r20, 0xD0	; 208
    1170:	41 93       	st	Z+, r20
    1172:	b3 e0       	ldi	r27, 0x03	; 3
    1174:	0f d0       	rcall	.+30     	; 0x1194 <__ultoa_invert+0x86>
    1176:	c9 f7       	brne	.-14     	; 0x116a <__ultoa_invert+0x5c>
    1178:	f6 cf       	rjmp	.-20     	; 0x1166 <__ultoa_invert+0x58>
    117a:	46 2f       	mov	r20, r22
    117c:	4f 70       	andi	r20, 0x0F	; 15
    117e:	40 5d       	subi	r20, 0xD0	; 208
    1180:	4a 33       	cpi	r20, 0x3A	; 58
    1182:	18 f0       	brcs	.+6      	; 0x118a <__ultoa_invert+0x7c>
    1184:	49 5d       	subi	r20, 0xD9	; 217
    1186:	31 fd       	sbrc	r19, 1
    1188:	40 52       	subi	r20, 0x20	; 32
    118a:	41 93       	st	Z+, r20
    118c:	02 d0       	rcall	.+4      	; 0x1192 <__ultoa_invert+0x84>
    118e:	a9 f7       	brne	.-22     	; 0x117a <__ultoa_invert+0x6c>
    1190:	ea cf       	rjmp	.-44     	; 0x1166 <__ultoa_invert+0x58>
    1192:	b4 e0       	ldi	r27, 0x04	; 4
    1194:	a6 95       	lsr	r26
    1196:	97 95       	ror	r25
    1198:	87 95       	ror	r24
    119a:	77 95       	ror	r23
    119c:	67 95       	ror	r22
    119e:	ba 95       	dec	r27
    11a0:	c9 f7       	brne	.-14     	; 0x1194 <__ultoa_invert+0x86>
    11a2:	00 97       	sbiw	r24, 0x00	; 0
    11a4:	61 05       	cpc	r22, r1
    11a6:	71 05       	cpc	r23, r1
    11a8:	08 95       	ret
    11aa:	9b 01       	movw	r18, r22
    11ac:	ac 01       	movw	r20, r24
    11ae:	0a 2e       	mov	r0, r26
    11b0:	06 94       	lsr	r0
    11b2:	57 95       	ror	r21
    11b4:	47 95       	ror	r20
    11b6:	37 95       	ror	r19
    11b8:	27 95       	ror	r18
    11ba:	ba 95       	dec	r27
    11bc:	c9 f7       	brne	.-14     	; 0x11b0 <__ultoa_invert+0xa2>
    11be:	62 0f       	add	r22, r18
    11c0:	73 1f       	adc	r23, r19
    11c2:	84 1f       	adc	r24, r20
    11c4:	95 1f       	adc	r25, r21
    11c6:	a0 1d       	adc	r26, r0
    11c8:	08 95       	ret

000011ca <__prologue_saves__>:
    11ca:	2f 92       	push	r2
    11cc:	3f 92       	push	r3
    11ce:	4f 92       	push	r4
    11d0:	5f 92       	push	r5
    11d2:	6f 92       	push	r6
    11d4:	7f 92       	push	r7
    11d6:	8f 92       	push	r8
    11d8:	9f 92       	push	r9
    11da:	af 92       	push	r10
    11dc:	bf 92       	push	r11
    11de:	cf 92       	push	r12
    11e0:	df 92       	push	r13
    11e2:	ef 92       	push	r14
    11e4:	ff 92       	push	r15
    11e6:	0f 93       	push	r16
    11e8:	1f 93       	push	r17
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	ca 1b       	sub	r28, r26
    11f4:	db 0b       	sbc	r29, r27
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	de bf       	out	0x3e, r29	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	cd bf       	out	0x3d, r28	; 61
    1200:	09 94       	ijmp

00001202 <__epilogue_restores__>:
    1202:	2a 88       	ldd	r2, Y+18	; 0x12
    1204:	39 88       	ldd	r3, Y+17	; 0x11
    1206:	48 88       	ldd	r4, Y+16	; 0x10
    1208:	5f 84       	ldd	r5, Y+15	; 0x0f
    120a:	6e 84       	ldd	r6, Y+14	; 0x0e
    120c:	7d 84       	ldd	r7, Y+13	; 0x0d
    120e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1210:	9b 84       	ldd	r9, Y+11	; 0x0b
    1212:	aa 84       	ldd	r10, Y+10	; 0x0a
    1214:	b9 84       	ldd	r11, Y+9	; 0x09
    1216:	c8 84       	ldd	r12, Y+8	; 0x08
    1218:	df 80       	ldd	r13, Y+7	; 0x07
    121a:	ee 80       	ldd	r14, Y+6	; 0x06
    121c:	fd 80       	ldd	r15, Y+5	; 0x05
    121e:	0c 81       	ldd	r16, Y+4	; 0x04
    1220:	1b 81       	ldd	r17, Y+3	; 0x03
    1222:	aa 81       	ldd	r26, Y+2	; 0x02
    1224:	b9 81       	ldd	r27, Y+1	; 0x01
    1226:	ce 0f       	add	r28, r30
    1228:	d1 1d       	adc	r29, r1
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	f8 94       	cli
    122e:	de bf       	out	0x3e, r29	; 62
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	cd bf       	out	0x3d, r28	; 61
    1234:	ed 01       	movw	r28, r26
    1236:	08 95       	ret

00001238 <_exit>:
    1238:	f8 94       	cli

0000123a <__stop_program>:
    123a:	ff cf       	rjmp	.-2      	; 0x123a <__stop_program>
