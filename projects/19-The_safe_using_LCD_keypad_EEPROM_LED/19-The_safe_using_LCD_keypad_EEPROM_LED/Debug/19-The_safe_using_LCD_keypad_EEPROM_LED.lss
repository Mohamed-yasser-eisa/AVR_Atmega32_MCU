
19-The_safe_using_LCD_keypad_EEPROM_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000092  00800060  00000c66  00000cfa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000f2  008000f2  00000d8c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001458  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000014e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011b2  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a6  00000000  00000000  000027d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aaa  00000000  00000000  00002e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000378  00000000  00000000  00003924  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000470  00000000  00000000  00003c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000da3  00000000  00000000  0000410c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e6       	ldi	r30, 0x66	; 102
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3f       	cpi	r26, 0xF2	; 242
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 ef       	ldi	r26, 0xF2	; 242
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3f       	cpi	r26, 0xF8	; 248
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 31 06 	jmp	0xc62	; 0xc62 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
uint16 set_pass = 0x76; //in this address will write '0' (pass set) or 0xff (pass not set)
uint16 address[4] = {0x7A, 0x7B, 0x7C, 0x7D}; //addresses where password will be stored
uint8 password[6];

int main(void)
{
  92:	af 92       	push	r10
  94:	bf 92       	push	r11
  96:	cf 92       	push	r12
  98:	df 92       	push	r13
  9a:	ef 92       	push	r14
  9c:	ff 92       	push	r15
  9e:	0f 93       	push	r16
  a0:	1f 93       	push	r17
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
	uint8 flag = 0x00, count = 0, pass_status = 0;
	
	LCD_init();
  a6:	0e 94 95 04 	call	0x92a	; 0x92a <LCD_init>
	keypad_init();
  aa:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <keypad_init>
	LED_init('D',0); //initialize red LED.
  ae:	84 e4       	ldi	r24, 0x44	; 68
  b0:	60 e0       	ldi	r22, 0x00	; 0
  b2:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <LED_init>
	LED_init('D',1); //initialize green LED.
  b6:	84 e4       	ldi	r24, 0x44	; 68
  b8:	61 e0       	ldi	r22, 0x01	; 1
  ba:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <LED_init>
	
	/*turn off LEDs*/
	LED_turn_off('D',0);
  be:	84 e4       	ldi	r24, 0x44	; 68
  c0:	60 e0       	ldi	r22, 0x00	; 0
  c2:	0e 94 02 05 	call	0xa04	; 0xa04 <LED_turn_off>
	LED_turn_off('D',1);
  c6:	84 e4       	ldi	r24, 0x44	; 68
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	0e 94 02 05 	call	0xa04	; 0xa04 <LED_turn_off>
	
	/*get password status*/
	pass_status = safe_pass_status(set_pass);
  ce:	80 91 b3 00 	lds	r24, 0x00B3
  d2:	90 91 b4 00 	lds	r25, 0x00B4
  d6:	0e 94 0c 05 	call	0xa18	; 0xa18 <safe_pass_status>
	
	/*check if it is first time to set password or not*/
	if (0xff == pass_status)
  da:	8f 3f       	cpi	r24, 0xFF	; 255
  dc:	91 f4       	brne	.+36     	; 0x102 <main+0x70>
	{
		LED_turn_on('D',1); //turn on green LED, the safe is opened.
  de:	84 e4       	ldi	r24, 0x44	; 68
  e0:	61 e0       	ldi	r22, 0x01	; 1
  e2:	0e 94 fe 04 	call	0x9fc	; 0x9fc <LED_turn_on>
		LED_turn_off('D',0);
  e6:	84 e4       	ldi	r24, 0x44	; 68
  e8:	60 e0       	ldi	r22, 0x00	; 0
  ea:	0e 94 02 05 	call	0xa04	; 0xa04 <LED_turn_off>
		safe_set_pass(password, address, set_pass);
  ee:	40 91 b3 00 	lds	r20, 0x00B3
  f2:	50 91 b4 00 	lds	r21, 0x00B4
  f6:	82 ef       	ldi	r24, 0xF2	; 242
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	6b ea       	ldi	r22, 0xAB	; 171
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	0e 94 55 05 	call	0xaaa	; 0xaaa <safe_set_pass>
uint16 set_pass = 0x76; //in this address will write '0' (pass set) or 0xff (pass not set)
uint16 address[4] = {0x7A, 0x7B, 0x7C, 0x7D}; //addresses where password will be stored
uint8 password[6];

int main(void)
{
 102:	d2 e3       	ldi	r29, 0x32	; 50
		count++;
		//not the first time, ask for the correct password.
		LED_turn_on('D',0); //turn on red LED, the safe is closed.
		LED_turn_off('D',1);
		/*ask user to enter password, and check if it is correct*/
		flag = safe_check_pass(address);
 104:	0b ea       	ldi	r16, 0xAB	; 171
 106:	10 e0       	ldi	r17, 0x00	; 0
			break;
		}
		else
		{
			LCD_clear_screen();
			LCD_send_string("Incorrect pass");
 108:	0f 2e       	mov	r0, r31
 10a:	f0 e8       	ldi	r31, 0x80	; 128
 10c:	ef 2e       	mov	r14, r31
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	ff 2e       	mov	r15, r31
 112:	f0 2d       	mov	r31, r0
			LCD_move_cursor(2,1);
			LCD_send_string("Safe is closed");
 114:	0f 2e       	mov	r0, r31
 116:	ff e8       	ldi	r31, 0x8F	; 143
 118:	cf 2e       	mov	r12, r31
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	df 2e       	mov	r13, r31
 11e:	f0 2d       	mov	r31, r0
			LCD_move_cursor(3,1);
			LCD_send_string("Tries left: ");
 120:	0f 2e       	mov	r0, r31
 122:	fe e9       	ldi	r31, 0x9E	; 158
 124:	af 2e       	mov	r10, r31
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	bf 2e       	mov	r11, r31
 12a:	f0 2d       	mov	r31, r0
	}
	while( (0x00 == flag) && (count < MAX_TRIES) )
	{
		count++;
		//not the first time, ask for the correct password.
		LED_turn_on('D',0); //turn on red LED, the safe is closed.
 12c:	84 e4       	ldi	r24, 0x44	; 68
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	0e 94 fe 04 	call	0x9fc	; 0x9fc <LED_turn_on>
		LED_turn_off('D',1);
 134:	84 e4       	ldi	r24, 0x44	; 68
 136:	61 e0       	ldi	r22, 0x01	; 1
 138:	0e 94 02 05 	call	0xa04	; 0xa04 <LED_turn_off>
		/*ask user to enter password, and check if it is correct*/
		flag = safe_check_pass(address);
 13c:	c8 01       	movw	r24, r16
 13e:	0e 94 a9 05 	call	0xb52	; 0xb52 <safe_check_pass>
 142:	c8 2f       	mov	r28, r24
		if (0xff == flag)
 144:	8f 3f       	cpi	r24, 0xFF	; 255
 146:	b9 f4       	brne	.+46     	; 0x176 <main+0xe4>
		{
			LED_turn_off('D',0);
 148:	84 e4       	ldi	r24, 0x44	; 68
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	0e 94 02 05 	call	0xa04	; 0xa04 <LED_turn_off>
			LED_turn_on('D',1); //turn on green LED, the safe is opened.
 150:	84 e4       	ldi	r24, 0x44	; 68
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	0e 94 fe 04 	call	0x9fc	; 0x9fc <LED_turn_on>
			LCD_clear_screen();
 158:	0e 94 81 04 	call	0x902	; 0x902 <LCD_clear_screen>
			LCD_send_string("Correct password");
 15c:	80 e6       	ldi	r24, 0x60	; 96
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 c9 04 	call	0x992	; 0x992 <LCD_send_string>
			LCD_move_cursor(2,1);
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCD_move_cursor>
			LCD_send_string("Safe is opened");
 16c:	81 e7       	ldi	r24, 0x71	; 113
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 c9 04 	call	0x992	; 0x992 <LCD_send_string>
			break;
 174:	25 c0       	rjmp	.+74     	; 0x1c0 <main+0x12e>
		}
		else
		{
			LCD_clear_screen();
 176:	0e 94 81 04 	call	0x902	; 0x902 <LCD_clear_screen>
			LCD_send_string("Incorrect pass");
 17a:	c7 01       	movw	r24, r14
 17c:	0e 94 c9 04 	call	0x992	; 0x992 <LCD_send_string>
			LCD_move_cursor(2,1);
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	61 e0       	ldi	r22, 0x01	; 1
 184:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCD_move_cursor>
			LCD_send_string("Safe is closed");
 188:	c6 01       	movw	r24, r12
 18a:	0e 94 c9 04 	call	0x992	; 0x992 <LCD_send_string>
			LCD_move_cursor(3,1);
 18e:	83 e0       	ldi	r24, 0x03	; 3
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCD_move_cursor>
			LCD_send_string("Tries left: ");
 196:	c5 01       	movw	r24, r10
 198:	0e 94 c9 04 	call	0x992	; 0x992 <LCD_send_string>
			LCD_send_character(48+(MAX_TRIES-count));
 19c:	8d 2f       	mov	r24, r29
 19e:	0e 94 ba 04 	call	0x974	; 0x974 <LCD_send_character>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a2:	8f ef       	ldi	r24, 0xFF	; 255
 1a4:	93 ed       	ldi	r25, 0xD3	; 211
 1a6:	a0 e3       	ldi	r26, 0x30	; 48
 1a8:	81 50       	subi	r24, 0x01	; 1
 1aa:	90 40       	sbci	r25, 0x00	; 0
 1ac:	a0 40       	sbci	r26, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <main+0x116>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <main+0x120>
 1b2:	00 00       	nop
	{
		LED_turn_on('D',1); //turn on green LED, the safe is opened.
		LED_turn_off('D',0);
		safe_set_pass(password, address, set_pass);
	}
	while( (0x00 == flag) && (count < MAX_TRIES) )
 1b4:	cc 23       	and	r28, r28
 1b6:	21 f4       	brne	.+8      	; 0x1c0 <main+0x12e>
 1b8:	d1 50       	subi	r29, 0x01	; 1
 1ba:	df 32       	cpi	r29, 0x2F	; 47
 1bc:	09 f0       	breq	.+2      	; 0x1c0 <main+0x12e>
 1be:	b6 cf       	rjmp	.-148    	; 0x12c <main+0x9a>
		}
		_delay_ms(2000);
	}
		
		
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	1f 91       	pop	r17
 1ca:	0f 91       	pop	r16
 1cc:	ff 90       	pop	r15
 1ce:	ef 90       	pop	r14
 1d0:	df 90       	pop	r13
 1d2:	cf 90       	pop	r12
 1d4:	bf 90       	pop	r11
 1d6:	af 90       	pop	r10
 1d8:	08 95       	ret

000001da <GPIO_pin_direction>:
#include "Atmega_GPIO.h"

void GPIO_pin_direction(char PORT, uint8 BIT, uint8 DIR)
{
    switch(PORT)
 1da:	84 34       	cpi	r24, 0x44	; 68
 1dc:	09 f4       	brne	.+2      	; 0x1e0 <GPIO_pin_direction+0x6>
 1de:	71 c0       	rjmp	.+226    	; 0x2c2 <GPIO_pin_direction+0xe8>
 1e0:	85 34       	cpi	r24, 0x45	; 69
 1e2:	48 f4       	brcc	.+18     	; 0x1f6 <GPIO_pin_direction+0x1c>
 1e4:	82 34       	cpi	r24, 0x42	; 66
 1e6:	99 f1       	breq	.+102    	; 0x24e <GPIO_pin_direction+0x74>
 1e8:	83 34       	cpi	r24, 0x43	; 67
 1ea:	08 f0       	brcs	.+2      	; 0x1ee <GPIO_pin_direction+0x14>
 1ec:	4d c0       	rjmp	.+154    	; 0x288 <GPIO_pin_direction+0xae>
 1ee:	81 34       	cpi	r24, 0x41	; 65
 1f0:	09 f0       	breq	.+2      	; 0x1f4 <GPIO_pin_direction+0x1a>
 1f2:	83 c0       	rjmp	.+262    	; 0x2fa <GPIO_pin_direction+0x120>
 1f4:	0f c0       	rjmp	.+30     	; 0x214 <GPIO_pin_direction+0x3a>
 1f6:	82 36       	cpi	r24, 0x62	; 98
 1f8:	51 f1       	breq	.+84     	; 0x24e <GPIO_pin_direction+0x74>
 1fa:	83 36       	cpi	r24, 0x63	; 99
 1fc:	20 f4       	brcc	.+8      	; 0x206 <GPIO_pin_direction+0x2c>
 1fe:	81 36       	cpi	r24, 0x61	; 97
 200:	09 f0       	breq	.+2      	; 0x204 <GPIO_pin_direction+0x2a>
 202:	7b c0       	rjmp	.+246    	; 0x2fa <GPIO_pin_direction+0x120>
 204:	07 c0       	rjmp	.+14     	; 0x214 <GPIO_pin_direction+0x3a>
 206:	83 36       	cpi	r24, 0x63	; 99
 208:	09 f4       	brne	.+2      	; 0x20c <GPIO_pin_direction+0x32>
 20a:	3e c0       	rjmp	.+124    	; 0x288 <GPIO_pin_direction+0xae>
 20c:	84 36       	cpi	r24, 0x64	; 100
 20e:	09 f0       	breq	.+2      	; 0x212 <GPIO_pin_direction+0x38>
 210:	74 c0       	rjmp	.+232    	; 0x2fa <GPIO_pin_direction+0x120>
 212:	57 c0       	rjmp	.+174    	; 0x2c2 <GPIO_pin_direction+0xe8>
    {
        case 'A':
        case 'a':
            if(1 == DIR)
 214:	41 30       	cpi	r20, 0x01	; 1
 216:	69 f4       	brne	.+26     	; 0x232 <GPIO_pin_direction+0x58>
            {
                SET_BIT(DDRA, BIT); //set direction of this pin in port A as output
 218:	2a b3       	in	r18, 0x1a	; 26
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	ac 01       	movw	r20, r24
 220:	02 c0       	rjmp	.+4      	; 0x226 <GPIO_pin_direction+0x4c>
 222:	44 0f       	add	r20, r20
 224:	55 1f       	adc	r21, r21
 226:	6a 95       	dec	r22
 228:	e2 f7       	brpl	.-8      	; 0x222 <GPIO_pin_direction+0x48>
 22a:	ba 01       	movw	r22, r20
 22c:	62 2b       	or	r22, r18
 22e:	6a bb       	out	0x1a, r22	; 26
 230:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRA, BIT); //set direction of this pin in port A as input
 232:	2a b3       	in	r18, 0x1a	; 26
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	ac 01       	movw	r20, r24
 23a:	02 c0       	rjmp	.+4      	; 0x240 <GPIO_pin_direction+0x66>
 23c:	44 0f       	add	r20, r20
 23e:	55 1f       	adc	r21, r21
 240:	6a 95       	dec	r22
 242:	e2 f7       	brpl	.-8      	; 0x23c <GPIO_pin_direction+0x62>
 244:	ba 01       	movw	r22, r20
 246:	60 95       	com	r22
 248:	62 23       	and	r22, r18
 24a:	6a bb       	out	0x1a, r22	; 26
 24c:	08 95       	ret
            }
        break;
        case 'B':
        case 'b':
            if(1 == DIR)
 24e:	41 30       	cpi	r20, 0x01	; 1
 250:	69 f4       	brne	.+26     	; 0x26c <GPIO_pin_direction+0x92>
            {
                SET_BIT(DDRB, BIT); //set direction of this pin in port B as output
 252:	27 b3       	in	r18, 0x17	; 23
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	ac 01       	movw	r20, r24
 25a:	02 c0       	rjmp	.+4      	; 0x260 <GPIO_pin_direction+0x86>
 25c:	44 0f       	add	r20, r20
 25e:	55 1f       	adc	r21, r21
 260:	6a 95       	dec	r22
 262:	e2 f7       	brpl	.-8      	; 0x25c <GPIO_pin_direction+0x82>
 264:	ba 01       	movw	r22, r20
 266:	62 2b       	or	r22, r18
 268:	67 bb       	out	0x17, r22	; 23
 26a:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRB, BIT); //set direction of this pin in port B as input
 26c:	27 b3       	in	r18, 0x17	; 23
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	ac 01       	movw	r20, r24
 274:	02 c0       	rjmp	.+4      	; 0x27a <GPIO_pin_direction+0xa0>
 276:	44 0f       	add	r20, r20
 278:	55 1f       	adc	r21, r21
 27a:	6a 95       	dec	r22
 27c:	e2 f7       	brpl	.-8      	; 0x276 <GPIO_pin_direction+0x9c>
 27e:	ba 01       	movw	r22, r20
 280:	60 95       	com	r22
 282:	62 23       	and	r22, r18
 284:	67 bb       	out	0x17, r22	; 23
 286:	08 95       	ret
            }
        break;
        case 'C':
        case 'c':
            if(1 == DIR)
 288:	41 30       	cpi	r20, 0x01	; 1
 28a:	69 f4       	brne	.+26     	; 0x2a6 <GPIO_pin_direction+0xcc>
            {
                SET_BIT(DDRC, BIT); //set direction of this pin in port B as output
 28c:	24 b3       	in	r18, 0x14	; 20
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	ac 01       	movw	r20, r24
 294:	02 c0       	rjmp	.+4      	; 0x29a <GPIO_pin_direction+0xc0>
 296:	44 0f       	add	r20, r20
 298:	55 1f       	adc	r21, r21
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <GPIO_pin_direction+0xbc>
 29e:	ba 01       	movw	r22, r20
 2a0:	62 2b       	or	r22, r18
 2a2:	64 bb       	out	0x14, r22	; 20
 2a4:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRC, BIT); //set direction of this pin in port B as input
 2a6:	24 b3       	in	r18, 0x14	; 20
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	ac 01       	movw	r20, r24
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <GPIO_pin_direction+0xda>
 2b0:	44 0f       	add	r20, r20
 2b2:	55 1f       	adc	r21, r21
 2b4:	6a 95       	dec	r22
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <GPIO_pin_direction+0xd6>
 2b8:	ba 01       	movw	r22, r20
 2ba:	60 95       	com	r22
 2bc:	62 23       	and	r22, r18
 2be:	64 bb       	out	0x14, r22	; 20
 2c0:	08 95       	ret
            }
        break;
        case 'D':
        case 'd':
            if(1 == DIR)
 2c2:	41 30       	cpi	r20, 0x01	; 1
 2c4:	69 f4       	brne	.+26     	; 0x2e0 <GPIO_pin_direction+0x106>
            {
                SET_BIT(DDRD, BIT); //set direction of this pin in port C as output
 2c6:	21 b3       	in	r18, 0x11	; 17
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	ac 01       	movw	r20, r24
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <GPIO_pin_direction+0xfa>
 2d0:	44 0f       	add	r20, r20
 2d2:	55 1f       	adc	r21, r21
 2d4:	6a 95       	dec	r22
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <GPIO_pin_direction+0xf6>
 2d8:	ba 01       	movw	r22, r20
 2da:	62 2b       	or	r22, r18
 2dc:	61 bb       	out	0x11, r22	; 17
 2de:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRD, BIT); //set direction of this pin in port C as input
 2e0:	21 b3       	in	r18, 0x11	; 17
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	ac 01       	movw	r20, r24
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <GPIO_pin_direction+0x114>
 2ea:	44 0f       	add	r20, r20
 2ec:	55 1f       	adc	r21, r21
 2ee:	6a 95       	dec	r22
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <GPIO_pin_direction+0x110>
 2f2:	ba 01       	movw	r22, r20
 2f4:	60 95       	com	r22
 2f6:	62 23       	and	r22, r18
 2f8:	61 bb       	out	0x11, r22	; 17
 2fa:	08 95       	ret

000002fc <GPIO_pin_write>:
} //end of  GPIO_pin_direction();


void GPIO_pin_write(char PORT, uint8 BIT, uint8 DATA)
{
    switch(PORT)
 2fc:	84 34       	cpi	r24, 0x44	; 68
 2fe:	09 f4       	brne	.+2      	; 0x302 <GPIO_pin_write+0x6>
 300:	71 c0       	rjmp	.+226    	; 0x3e4 <GPIO_pin_write+0xe8>
 302:	85 34       	cpi	r24, 0x45	; 69
 304:	48 f4       	brcc	.+18     	; 0x318 <GPIO_pin_write+0x1c>
 306:	82 34       	cpi	r24, 0x42	; 66
 308:	99 f1       	breq	.+102    	; 0x370 <GPIO_pin_write+0x74>
 30a:	83 34       	cpi	r24, 0x43	; 67
 30c:	08 f0       	brcs	.+2      	; 0x310 <GPIO_pin_write+0x14>
 30e:	4d c0       	rjmp	.+154    	; 0x3aa <GPIO_pin_write+0xae>
 310:	81 34       	cpi	r24, 0x41	; 65
 312:	09 f0       	breq	.+2      	; 0x316 <GPIO_pin_write+0x1a>
 314:	83 c0       	rjmp	.+262    	; 0x41c <GPIO_pin_write+0x120>
 316:	0f c0       	rjmp	.+30     	; 0x336 <GPIO_pin_write+0x3a>
 318:	82 36       	cpi	r24, 0x62	; 98
 31a:	51 f1       	breq	.+84     	; 0x370 <GPIO_pin_write+0x74>
 31c:	83 36       	cpi	r24, 0x63	; 99
 31e:	20 f4       	brcc	.+8      	; 0x328 <GPIO_pin_write+0x2c>
 320:	81 36       	cpi	r24, 0x61	; 97
 322:	09 f0       	breq	.+2      	; 0x326 <GPIO_pin_write+0x2a>
 324:	7b c0       	rjmp	.+246    	; 0x41c <GPIO_pin_write+0x120>
 326:	07 c0       	rjmp	.+14     	; 0x336 <GPIO_pin_write+0x3a>
 328:	83 36       	cpi	r24, 0x63	; 99
 32a:	09 f4       	brne	.+2      	; 0x32e <GPIO_pin_write+0x32>
 32c:	3e c0       	rjmp	.+124    	; 0x3aa <GPIO_pin_write+0xae>
 32e:	84 36       	cpi	r24, 0x64	; 100
 330:	09 f0       	breq	.+2      	; 0x334 <GPIO_pin_write+0x38>
 332:	74 c0       	rjmp	.+232    	; 0x41c <GPIO_pin_write+0x120>
 334:	57 c0       	rjmp	.+174    	; 0x3e4 <GPIO_pin_write+0xe8>
    {
        case 'A':
        case 'a':
            if(1 == DATA)
 336:	41 30       	cpi	r20, 0x01	; 1
 338:	69 f4       	brne	.+26     	; 0x354 <GPIO_pin_write+0x58>
            {
                SET_BIT(PORTA, BIT); //set output value of this pin in port A to 1
 33a:	2b b3       	in	r18, 0x1b	; 27
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	ac 01       	movw	r20, r24
 342:	02 c0       	rjmp	.+4      	; 0x348 <GPIO_pin_write+0x4c>
 344:	44 0f       	add	r20, r20
 346:	55 1f       	adc	r21, r21
 348:	6a 95       	dec	r22
 34a:	e2 f7       	brpl	.-8      	; 0x344 <GPIO_pin_write+0x48>
 34c:	ba 01       	movw	r22, r20
 34e:	62 2b       	or	r22, r18
 350:	6b bb       	out	0x1b, r22	; 27
 352:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTA, BIT); //set output value of this pin in port A to 0
 354:	2b b3       	in	r18, 0x1b	; 27
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	ac 01       	movw	r20, r24
 35c:	02 c0       	rjmp	.+4      	; 0x362 <GPIO_pin_write+0x66>
 35e:	44 0f       	add	r20, r20
 360:	55 1f       	adc	r21, r21
 362:	6a 95       	dec	r22
 364:	e2 f7       	brpl	.-8      	; 0x35e <GPIO_pin_write+0x62>
 366:	ba 01       	movw	r22, r20
 368:	60 95       	com	r22
 36a:	62 23       	and	r22, r18
 36c:	6b bb       	out	0x1b, r22	; 27
 36e:	08 95       	ret
            }
        break;
        case 'B':
        case 'b':
            if(1 == DATA)
 370:	41 30       	cpi	r20, 0x01	; 1
 372:	69 f4       	brne	.+26     	; 0x38e <GPIO_pin_write+0x92>
            {
                SET_BIT(PORTB, BIT); //set output value of this pin in port B to 1
 374:	28 b3       	in	r18, 0x18	; 24
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	ac 01       	movw	r20, r24
 37c:	02 c0       	rjmp	.+4      	; 0x382 <GPIO_pin_write+0x86>
 37e:	44 0f       	add	r20, r20
 380:	55 1f       	adc	r21, r21
 382:	6a 95       	dec	r22
 384:	e2 f7       	brpl	.-8      	; 0x37e <GPIO_pin_write+0x82>
 386:	ba 01       	movw	r22, r20
 388:	62 2b       	or	r22, r18
 38a:	68 bb       	out	0x18, r22	; 24
 38c:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTB, BIT); //set output value of this pin in port B to 0
 38e:	28 b3       	in	r18, 0x18	; 24
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	ac 01       	movw	r20, r24
 396:	02 c0       	rjmp	.+4      	; 0x39c <GPIO_pin_write+0xa0>
 398:	44 0f       	add	r20, r20
 39a:	55 1f       	adc	r21, r21
 39c:	6a 95       	dec	r22
 39e:	e2 f7       	brpl	.-8      	; 0x398 <GPIO_pin_write+0x9c>
 3a0:	ba 01       	movw	r22, r20
 3a2:	60 95       	com	r22
 3a4:	62 23       	and	r22, r18
 3a6:	68 bb       	out	0x18, r22	; 24
 3a8:	08 95       	ret
            }
        break;
        case 'C':
        case 'c':
            if(1 == DATA)
 3aa:	41 30       	cpi	r20, 0x01	; 1
 3ac:	69 f4       	brne	.+26     	; 0x3c8 <GPIO_pin_write+0xcc>
            {
                SET_BIT(PORTC, BIT); //set output value of this pin in port C to 1
 3ae:	25 b3       	in	r18, 0x15	; 21
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	ac 01       	movw	r20, r24
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <GPIO_pin_write+0xc0>
 3b8:	44 0f       	add	r20, r20
 3ba:	55 1f       	adc	r21, r21
 3bc:	6a 95       	dec	r22
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <GPIO_pin_write+0xbc>
 3c0:	ba 01       	movw	r22, r20
 3c2:	62 2b       	or	r22, r18
 3c4:	65 bb       	out	0x15, r22	; 21
 3c6:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTC, BIT); //set output value of this pin in port C to 0
 3c8:	25 b3       	in	r18, 0x15	; 21
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	ac 01       	movw	r20, r24
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <GPIO_pin_write+0xda>
 3d2:	44 0f       	add	r20, r20
 3d4:	55 1f       	adc	r21, r21
 3d6:	6a 95       	dec	r22
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <GPIO_pin_write+0xd6>
 3da:	ba 01       	movw	r22, r20
 3dc:	60 95       	com	r22
 3de:	62 23       	and	r22, r18
 3e0:	65 bb       	out	0x15, r22	; 21
 3e2:	08 95       	ret
            }
        break;
        case 'D':
        case 'd':
            if(1 == DATA)
 3e4:	41 30       	cpi	r20, 0x01	; 1
 3e6:	69 f4       	brne	.+26     	; 0x402 <GPIO_pin_write+0x106>
            {
                SET_BIT(PORTD, BIT); //set output value of this pin in port C to 1
 3e8:	22 b3       	in	r18, 0x12	; 18
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	ac 01       	movw	r20, r24
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <GPIO_pin_write+0xfa>
 3f2:	44 0f       	add	r20, r20
 3f4:	55 1f       	adc	r21, r21
 3f6:	6a 95       	dec	r22
 3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <GPIO_pin_write+0xf6>
 3fa:	ba 01       	movw	r22, r20
 3fc:	62 2b       	or	r22, r18
 3fe:	62 bb       	out	0x12, r22	; 18
 400:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTD, BIT); //set output value of this pin in port C to 0
 402:	22 b3       	in	r18, 0x12	; 18
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	ac 01       	movw	r20, r24
 40a:	02 c0       	rjmp	.+4      	; 0x410 <GPIO_pin_write+0x114>
 40c:	44 0f       	add	r20, r20
 40e:	55 1f       	adc	r21, r21
 410:	6a 95       	dec	r22
 412:	e2 f7       	brpl	.-8      	; 0x40c <GPIO_pin_write+0x110>
 414:	ba 01       	movw	r22, r20
 416:	60 95       	com	r22
 418:	62 23       	and	r22, r18
 41a:	62 bb       	out	0x12, r22	; 18
 41c:	08 95       	ret

0000041e <GPIO_pin_read>:


uint8 GPIO_pin_read(char PORT, uint8 BIT)
{
    uint8 read_value = 0;
    switch(PORT)
 41e:	84 34       	cpi	r24, 0x44	; 68
 420:	99 f1       	breq	.+102    	; 0x488 <GPIO_pin_read+0x6a>
 422:	85 34       	cpi	r24, 0x45	; 69
 424:	38 f4       	brcc	.+14     	; 0x434 <GPIO_pin_read+0x16>
 426:	82 34       	cpi	r24, 0x42	; 66
 428:	d9 f0       	breq	.+54     	; 0x460 <GPIO_pin_read+0x42>
 42a:	83 34       	cpi	r24, 0x43	; 67
 42c:	18 f5       	brcc	.+70     	; 0x474 <GPIO_pin_read+0x56>
 42e:	81 34       	cpi	r24, 0x41	; 65
 430:	a9 f5       	brne	.+106    	; 0x49c <GPIO_pin_read+0x7e>
 432:	0c c0       	rjmp	.+24     	; 0x44c <GPIO_pin_read+0x2e>
 434:	82 36       	cpi	r24, 0x62	; 98
 436:	a1 f0       	breq	.+40     	; 0x460 <GPIO_pin_read+0x42>
 438:	83 36       	cpi	r24, 0x63	; 99
 43a:	18 f4       	brcc	.+6      	; 0x442 <GPIO_pin_read+0x24>
 43c:	81 36       	cpi	r24, 0x61	; 97
 43e:	71 f5       	brne	.+92     	; 0x49c <GPIO_pin_read+0x7e>
 440:	05 c0       	rjmp	.+10     	; 0x44c <GPIO_pin_read+0x2e>
 442:	83 36       	cpi	r24, 0x63	; 99
 444:	b9 f0       	breq	.+46     	; 0x474 <GPIO_pin_read+0x56>
 446:	84 36       	cpi	r24, 0x64	; 100
 448:	49 f5       	brne	.+82     	; 0x49c <GPIO_pin_read+0x7e>
 44a:	1e c0       	rjmp	.+60     	; 0x488 <GPIO_pin_read+0x6a>
    {
        case 'A':
        case 'a':
            read_value = READ_BIT(PINA, BIT); //read value of given pin in port A
 44c:	29 b3       	in	r18, 0x19	; 25
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	c9 01       	movw	r24, r18
 452:	02 c0       	rjmp	.+4      	; 0x458 <GPIO_pin_read+0x3a>
 454:	95 95       	asr	r25
 456:	87 95       	ror	r24
 458:	6a 95       	dec	r22
 45a:	e2 f7       	brpl	.-8      	; 0x454 <GPIO_pin_read+0x36>
 45c:	81 70       	andi	r24, 0x01	; 1
        break;
 45e:	08 95       	ret
        case 'B':
        case 'b':
            read_value = READ_BIT(PINB, BIT); //read value of given pin in port B
 460:	26 b3       	in	r18, 0x16	; 22
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	c9 01       	movw	r24, r18
 466:	02 c0       	rjmp	.+4      	; 0x46c <GPIO_pin_read+0x4e>
 468:	95 95       	asr	r25
 46a:	87 95       	ror	r24
 46c:	6a 95       	dec	r22
 46e:	e2 f7       	brpl	.-8      	; 0x468 <GPIO_pin_read+0x4a>
 470:	81 70       	andi	r24, 0x01	; 1
        break;
 472:	08 95       	ret
        case 'C':
        case 'c':
            read_value = READ_BIT(PINC, BIT); //read value of given pin in port C
 474:	23 b3       	in	r18, 0x13	; 19
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	c9 01       	movw	r24, r18
 47a:	02 c0       	rjmp	.+4      	; 0x480 <GPIO_pin_read+0x62>
 47c:	95 95       	asr	r25
 47e:	87 95       	ror	r24
 480:	6a 95       	dec	r22
 482:	e2 f7       	brpl	.-8      	; 0x47c <GPIO_pin_read+0x5e>
 484:	81 70       	andi	r24, 0x01	; 1
        break;
 486:	08 95       	ret
        case 'D':
        case 'd':
            read_value = READ_BIT(PIND, BIT); //read value of given pin in port D
 488:	20 b3       	in	r18, 0x10	; 16
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	c9 01       	movw	r24, r18
 48e:	02 c0       	rjmp	.+4      	; 0x494 <GPIO_pin_read+0x76>
 490:	95 95       	asr	r25
 492:	87 95       	ror	r24
 494:	6a 95       	dec	r22
 496:	e2 f7       	brpl	.-8      	; 0x490 <GPIO_pin_read+0x72>
 498:	81 70       	andi	r24, 0x01	; 1
        break;
 49a:	08 95       	ret
} // end of GPIO_pin_write();


uint8 GPIO_pin_read(char PORT, uint8 BIT)
{
    uint8 read_value = 0;
 49c:	80 e0       	ldi	r24, 0x00	; 0
        break;
        default:
        break;
    } //end of switch(PORT);
    return read_value;
} // end of GPIO_pin_read();
 49e:	08 95       	ret

000004a0 <GPIO_pin_toggle>:


void GPIO_pin_toggle(char PORT, uint8 BIT)
{
    switch(PORT)
 4a0:	84 34       	cpi	r24, 0x44	; 68
 4a2:	09 f4       	brne	.+2      	; 0x4a6 <GPIO_pin_toggle+0x6>
 4a4:	3d c0       	rjmp	.+122    	; 0x520 <GPIO_pin_toggle+0x80>
 4a6:	85 34       	cpi	r24, 0x45	; 69
 4a8:	40 f4       	brcc	.+16     	; 0x4ba <GPIO_pin_toggle+0x1a>
 4aa:	82 34       	cpi	r24, 0x42	; 66
 4ac:	f9 f0       	breq	.+62     	; 0x4ec <GPIO_pin_toggle+0x4c>
 4ae:	83 34       	cpi	r24, 0x43	; 67
 4b0:	50 f5       	brcc	.+84     	; 0x506 <GPIO_pin_toggle+0x66>
 4b2:	81 34       	cpi	r24, 0x41	; 65
 4b4:	09 f0       	breq	.+2      	; 0x4b8 <GPIO_pin_toggle+0x18>
 4b6:	40 c0       	rjmp	.+128    	; 0x538 <GPIO_pin_toggle+0x98>
 4b8:	0c c0       	rjmp	.+24     	; 0x4d2 <GPIO_pin_toggle+0x32>
 4ba:	82 36       	cpi	r24, 0x62	; 98
 4bc:	b9 f0       	breq	.+46     	; 0x4ec <GPIO_pin_toggle+0x4c>
 4be:	83 36       	cpi	r24, 0x63	; 99
 4c0:	18 f4       	brcc	.+6      	; 0x4c8 <GPIO_pin_toggle+0x28>
 4c2:	81 36       	cpi	r24, 0x61	; 97
 4c4:	c9 f5       	brne	.+114    	; 0x538 <GPIO_pin_toggle+0x98>
 4c6:	05 c0       	rjmp	.+10     	; 0x4d2 <GPIO_pin_toggle+0x32>
 4c8:	83 36       	cpi	r24, 0x63	; 99
 4ca:	e9 f0       	breq	.+58     	; 0x506 <GPIO_pin_toggle+0x66>
 4cc:	84 36       	cpi	r24, 0x64	; 100
 4ce:	a1 f5       	brne	.+104    	; 0x538 <GPIO_pin_toggle+0x98>
 4d0:	27 c0       	rjmp	.+78     	; 0x520 <GPIO_pin_toggle+0x80>
    {
        case 'A':
        case 'a':
            TOG_BIT(PORTA, BIT); //toggle value of given pin in port A
 4d2:	2b b3       	in	r18, 0x1b	; 27
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	ac 01       	movw	r20, r24
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <GPIO_pin_toggle+0x40>
 4dc:	44 0f       	add	r20, r20
 4de:	55 1f       	adc	r21, r21
 4e0:	6a 95       	dec	r22
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <GPIO_pin_toggle+0x3c>
 4e4:	ba 01       	movw	r22, r20
 4e6:	62 27       	eor	r22, r18
 4e8:	6b bb       	out	0x1b, r22	; 27
        break;
 4ea:	08 95       	ret
        case 'B':
        case 'b':
            TOG_BIT(PORTB, BIT); //toggle value of given pin in port B
 4ec:	28 b3       	in	r18, 0x18	; 24
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	ac 01       	movw	r20, r24
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <GPIO_pin_toggle+0x5a>
 4f6:	44 0f       	add	r20, r20
 4f8:	55 1f       	adc	r21, r21
 4fa:	6a 95       	dec	r22
 4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <GPIO_pin_toggle+0x56>
 4fe:	ba 01       	movw	r22, r20
 500:	62 27       	eor	r22, r18
 502:	68 bb       	out	0x18, r22	; 24
        break;
 504:	08 95       	ret
        case 'C':
        case 'c':
            TOG_BIT(PORTC, BIT); //toggle value of given pin in port C
 506:	25 b3       	in	r18, 0x15	; 21
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	ac 01       	movw	r20, r24
 50e:	02 c0       	rjmp	.+4      	; 0x514 <GPIO_pin_toggle+0x74>
 510:	44 0f       	add	r20, r20
 512:	55 1f       	adc	r21, r21
 514:	6a 95       	dec	r22
 516:	e2 f7       	brpl	.-8      	; 0x510 <GPIO_pin_toggle+0x70>
 518:	ba 01       	movw	r22, r20
 51a:	62 27       	eor	r22, r18
 51c:	65 bb       	out	0x15, r22	; 21
        break;
 51e:	08 95       	ret
        case 'D':
        case 'd':
            TOG_BIT(PORTD, BIT); //toggle value of given pin in port D
 520:	22 b3       	in	r18, 0x12	; 18
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	ac 01       	movw	r20, r24
 528:	02 c0       	rjmp	.+4      	; 0x52e <GPIO_pin_toggle+0x8e>
 52a:	44 0f       	add	r20, r20
 52c:	55 1f       	adc	r21, r21
 52e:	6a 95       	dec	r22
 530:	e2 f7       	brpl	.-8      	; 0x52a <GPIO_pin_toggle+0x8a>
 532:	ba 01       	movw	r22, r20
 534:	62 27       	eor	r22, r18
 536:	62 bb       	out	0x12, r22	; 18
 538:	08 95       	ret

0000053a <GPIO_port_direction>:
} // end of GPIO_pin_toggle();


void GPIO_port_direction(char PORT, uint8 DIR)
{
    switch(PORT)
 53a:	84 34       	cpi	r24, 0x44	; 68
 53c:	d9 f0       	breq	.+54     	; 0x574 <GPIO_port_direction+0x3a>
 53e:	85 34       	cpi	r24, 0x45	; 69
 540:	38 f4       	brcc	.+14     	; 0x550 <GPIO_port_direction+0x16>
 542:	82 34       	cpi	r24, 0x42	; 66
 544:	99 f0       	breq	.+38     	; 0x56c <GPIO_port_direction+0x32>
 546:	83 34       	cpi	r24, 0x43	; 67
 548:	98 f4       	brcc	.+38     	; 0x570 <GPIO_port_direction+0x36>
 54a:	81 34       	cpi	r24, 0x41	; 65
 54c:	a1 f4       	brne	.+40     	; 0x576 <GPIO_port_direction+0x3c>
 54e:	0c c0       	rjmp	.+24     	; 0x568 <GPIO_port_direction+0x2e>
 550:	82 36       	cpi	r24, 0x62	; 98
 552:	61 f0       	breq	.+24     	; 0x56c <GPIO_port_direction+0x32>
 554:	83 36       	cpi	r24, 0x63	; 99
 556:	18 f4       	brcc	.+6      	; 0x55e <GPIO_port_direction+0x24>
 558:	81 36       	cpi	r24, 0x61	; 97
 55a:	69 f4       	brne	.+26     	; 0x576 <GPIO_port_direction+0x3c>
 55c:	05 c0       	rjmp	.+10     	; 0x568 <GPIO_port_direction+0x2e>
 55e:	83 36       	cpi	r24, 0x63	; 99
 560:	39 f0       	breq	.+14     	; 0x570 <GPIO_port_direction+0x36>
 562:	84 36       	cpi	r24, 0x64	; 100
 564:	41 f4       	brne	.+16     	; 0x576 <GPIO_port_direction+0x3c>
 566:	06 c0       	rjmp	.+12     	; 0x574 <GPIO_port_direction+0x3a>
    {
        case 'A':
        case 'a':
            DDRA = DIR; // set direction of port A to the given DIR
 568:	6a bb       	out	0x1a, r22	; 26
        break;
 56a:	08 95       	ret
        case 'B':
        case 'b':
            DDRB = DIR; // set direction of port B to the given DIR
 56c:	67 bb       	out	0x17, r22	; 23
        break;
 56e:	08 95       	ret
        case 'C':
        case 'c':
            DDRC = DIR; // set direction of port C to the given DIR
 570:	64 bb       	out	0x14, r22	; 20
        break;
 572:	08 95       	ret
        case 'D':
        case 'd':
            DDRD = DIR; // set direction of port D to the given DIR
 574:	61 bb       	out	0x11, r22	; 17
 576:	08 95       	ret

00000578 <GPIO_port_write>:
} // end of GPIO_port_direction();


void GPIO_port_write(char PORT, uint8 DATA)
{
    switch(PORT)
 578:	84 34       	cpi	r24, 0x44	; 68
 57a:	d9 f0       	breq	.+54     	; 0x5b2 <GPIO_port_write+0x3a>
 57c:	85 34       	cpi	r24, 0x45	; 69
 57e:	38 f4       	brcc	.+14     	; 0x58e <GPIO_port_write+0x16>
 580:	82 34       	cpi	r24, 0x42	; 66
 582:	99 f0       	breq	.+38     	; 0x5aa <GPIO_port_write+0x32>
 584:	83 34       	cpi	r24, 0x43	; 67
 586:	98 f4       	brcc	.+38     	; 0x5ae <GPIO_port_write+0x36>
 588:	81 34       	cpi	r24, 0x41	; 65
 58a:	a1 f4       	brne	.+40     	; 0x5b4 <GPIO_port_write+0x3c>
 58c:	0c c0       	rjmp	.+24     	; 0x5a6 <GPIO_port_write+0x2e>
 58e:	82 36       	cpi	r24, 0x62	; 98
 590:	61 f0       	breq	.+24     	; 0x5aa <GPIO_port_write+0x32>
 592:	83 36       	cpi	r24, 0x63	; 99
 594:	18 f4       	brcc	.+6      	; 0x59c <GPIO_port_write+0x24>
 596:	81 36       	cpi	r24, 0x61	; 97
 598:	69 f4       	brne	.+26     	; 0x5b4 <GPIO_port_write+0x3c>
 59a:	05 c0       	rjmp	.+10     	; 0x5a6 <GPIO_port_write+0x2e>
 59c:	83 36       	cpi	r24, 0x63	; 99
 59e:	39 f0       	breq	.+14     	; 0x5ae <GPIO_port_write+0x36>
 5a0:	84 36       	cpi	r24, 0x64	; 100
 5a2:	41 f4       	brne	.+16     	; 0x5b4 <GPIO_port_write+0x3c>
 5a4:	06 c0       	rjmp	.+12     	; 0x5b2 <GPIO_port_write+0x3a>
    {
        case 'A':
        case 'a':
            PORTA = DATA; // write these data on port A
 5a6:	6b bb       	out	0x1b, r22	; 27
        break;
 5a8:	08 95       	ret
        case 'B':
        case 'b':
            PORTB = DATA; // write these data on port B
 5aa:	68 bb       	out	0x18, r22	; 24
        break;
 5ac:	08 95       	ret
        case 'C':
        case 'c':
            PORTC = DATA; // write these data on port C
 5ae:	65 bb       	out	0x15, r22	; 21
        break;
 5b0:	08 95       	ret
        case 'D':
        case 'd':
            PORTD = DATA; // write these data on port D
 5b2:	62 bb       	out	0x12, r22	; 18
 5b4:	08 95       	ret

000005b6 <GPIO_port_read>:


uint8 GPIO_port_read(char PORT)
{
    uint8 read_port = 0;
    switch(PORT)
 5b6:	84 34       	cpi	r24, 0x44	; 68
 5b8:	d9 f0       	breq	.+54     	; 0x5f0 <GPIO_port_read+0x3a>
 5ba:	85 34       	cpi	r24, 0x45	; 69
 5bc:	38 f4       	brcc	.+14     	; 0x5cc <GPIO_port_read+0x16>
 5be:	82 34       	cpi	r24, 0x42	; 66
 5c0:	99 f0       	breq	.+38     	; 0x5e8 <GPIO_port_read+0x32>
 5c2:	83 34       	cpi	r24, 0x43	; 67
 5c4:	98 f4       	brcc	.+38     	; 0x5ec <GPIO_port_read+0x36>
 5c6:	81 34       	cpi	r24, 0x41	; 65
 5c8:	a9 f4       	brne	.+42     	; 0x5f4 <GPIO_port_read+0x3e>
 5ca:	0c c0       	rjmp	.+24     	; 0x5e4 <GPIO_port_read+0x2e>
 5cc:	82 36       	cpi	r24, 0x62	; 98
 5ce:	61 f0       	breq	.+24     	; 0x5e8 <GPIO_port_read+0x32>
 5d0:	83 36       	cpi	r24, 0x63	; 99
 5d2:	18 f4       	brcc	.+6      	; 0x5da <GPIO_port_read+0x24>
 5d4:	81 36       	cpi	r24, 0x61	; 97
 5d6:	71 f4       	brne	.+28     	; 0x5f4 <GPIO_port_read+0x3e>
 5d8:	05 c0       	rjmp	.+10     	; 0x5e4 <GPIO_port_read+0x2e>
 5da:	83 36       	cpi	r24, 0x63	; 99
 5dc:	39 f0       	breq	.+14     	; 0x5ec <GPIO_port_read+0x36>
 5de:	84 36       	cpi	r24, 0x64	; 100
 5e0:	49 f4       	brne	.+18     	; 0x5f4 <GPIO_port_read+0x3e>
 5e2:	06 c0       	rjmp	.+12     	; 0x5f0 <GPIO_port_read+0x3a>
    {
        case 'A':
        case 'a':
            read_port = PINA; // read data from port A
 5e4:	89 b3       	in	r24, 0x19	; 25
        break;
 5e6:	08 95       	ret
        case 'B':
        case 'b':
            read_port = PINB; // read data from port B
 5e8:	86 b3       	in	r24, 0x16	; 22
        break;
 5ea:	08 95       	ret
        case 'C':
        case 'c':
            read_port = PINC; // read data from port C
 5ec:	83 b3       	in	r24, 0x13	; 19
        break;
 5ee:	08 95       	ret
        case 'D':
        case 'd':
            read_port = PIND; // read data from port D
 5f0:	80 b3       	in	r24, 0x10	; 16
        break;
 5f2:	08 95       	ret
} // end of GPIO_port_write();


uint8 GPIO_port_read(char PORT)
{
    uint8 read_port = 0;
 5f4:	80 e0       	ldi	r24, 0x00	; 0
        break;
        default:
        break;
    } // end of switch(PORT);
    return read_port;
} // end of GPIO_port_read();
 5f6:	08 95       	ret

000005f8 <GPIO_pin_pull_up>:


void GPIO_pin_pull_up(char port_name, uint8 pin_number)
{
    switch(port_name)
 5f8:	84 34       	cpi	r24, 0x44	; 68
 5fa:	09 f4       	brne	.+2      	; 0x5fe <GPIO_pin_pull_up+0x6>
 5fc:	57 c0       	rjmp	.+174    	; 0x6ac <GPIO_pin_pull_up+0xb4>
 5fe:	85 34       	cpi	r24, 0x45	; 69
 600:	40 f4       	brcc	.+16     	; 0x612 <GPIO_pin_pull_up+0x1a>
 602:	82 34       	cpi	r24, 0x42	; 66
 604:	49 f1       	breq	.+82     	; 0x658 <GPIO_pin_pull_up+0x60>
 606:	83 34       	cpi	r24, 0x43	; 67
 608:	e0 f5       	brcc	.+120    	; 0x682 <GPIO_pin_pull_up+0x8a>
 60a:	81 34       	cpi	r24, 0x41	; 65
 60c:	09 f0       	breq	.+2      	; 0x610 <GPIO_pin_pull_up+0x18>
 60e:	62 c0       	rjmp	.+196    	; 0x6d4 <GPIO_pin_pull_up+0xdc>
 610:	0e c0       	rjmp	.+28     	; 0x62e <GPIO_pin_pull_up+0x36>
 612:	82 36       	cpi	r24, 0x62	; 98
 614:	09 f1       	breq	.+66     	; 0x658 <GPIO_pin_pull_up+0x60>
 616:	83 36       	cpi	r24, 0x63	; 99
 618:	20 f4       	brcc	.+8      	; 0x622 <GPIO_pin_pull_up+0x2a>
 61a:	81 36       	cpi	r24, 0x61	; 97
 61c:	09 f0       	breq	.+2      	; 0x620 <GPIO_pin_pull_up+0x28>
 61e:	5a c0       	rjmp	.+180    	; 0x6d4 <GPIO_pin_pull_up+0xdc>
 620:	06 c0       	rjmp	.+12     	; 0x62e <GPIO_pin_pull_up+0x36>
 622:	83 36       	cpi	r24, 0x63	; 99
 624:	71 f1       	breq	.+92     	; 0x682 <GPIO_pin_pull_up+0x8a>
 626:	84 36       	cpi	r24, 0x64	; 100
 628:	09 f0       	breq	.+2      	; 0x62c <GPIO_pin_pull_up+0x34>
 62a:	54 c0       	rjmp	.+168    	; 0x6d4 <GPIO_pin_pull_up+0xdc>
 62c:	3f c0       	rjmp	.+126    	; 0x6ac <GPIO_pin_pull_up+0xb4>
    {
        case 'A':
        case 'a':
            CLR_BIT(DDRA,pin_number); //set pin_number of port_name as input
 62e:	2a b3       	in	r18, 0x1a	; 26
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	ac 01       	movw	r20, r24
 636:	02 c0       	rjmp	.+4      	; 0x63c <GPIO_pin_pull_up+0x44>
 638:	44 0f       	add	r20, r20
 63a:	55 1f       	adc	r21, r21
 63c:	6a 95       	dec	r22
 63e:	e2 f7       	brpl	.-8      	; 0x638 <GPIO_pin_pull_up+0x40>
 640:	ba 01       	movw	r22, r20
 642:	84 2f       	mov	r24, r20
 644:	80 95       	com	r24
 646:	82 23       	and	r24, r18
 648:	8a bb       	out	0x1a, r24	; 26
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 64a:	80 b7       	in	r24, 0x30	; 48
 64c:	8b 7f       	andi	r24, 0xFB	; 251
 64e:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTA,pin_number); //set pin_number of port_name as high value
 650:	8b b3       	in	r24, 0x1b	; 27
 652:	68 2b       	or	r22, r24
 654:	6b bb       	out	0x1b, r22	; 27
        break;
 656:	08 95       	ret
        case 'B':
        case 'b':
            CLR_BIT(DDRB,pin_number); //set pin_number of port_name as input
 658:	27 b3       	in	r18, 0x17	; 23
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	ac 01       	movw	r20, r24
 660:	02 c0       	rjmp	.+4      	; 0x666 <GPIO_pin_pull_up+0x6e>
 662:	44 0f       	add	r20, r20
 664:	55 1f       	adc	r21, r21
 666:	6a 95       	dec	r22
 668:	e2 f7       	brpl	.-8      	; 0x662 <GPIO_pin_pull_up+0x6a>
 66a:	ba 01       	movw	r22, r20
 66c:	84 2f       	mov	r24, r20
 66e:	80 95       	com	r24
 670:	82 23       	and	r24, r18
 672:	87 bb       	out	0x17, r24	; 23
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 674:	80 b7       	in	r24, 0x30	; 48
 676:	8b 7f       	andi	r24, 0xFB	; 251
 678:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTB,pin_number); //set pin_number of port_name as high value
 67a:	88 b3       	in	r24, 0x18	; 24
 67c:	68 2b       	or	r22, r24
 67e:	68 bb       	out	0x18, r22	; 24
        break;
 680:	08 95       	ret
        case 'C':
        case 'c':
            CLR_BIT(DDRC,pin_number); //set pin_number of port_name as input
 682:	24 b3       	in	r18, 0x14	; 20
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	ac 01       	movw	r20, r24
 68a:	02 c0       	rjmp	.+4      	; 0x690 <GPIO_pin_pull_up+0x98>
 68c:	44 0f       	add	r20, r20
 68e:	55 1f       	adc	r21, r21
 690:	6a 95       	dec	r22
 692:	e2 f7       	brpl	.-8      	; 0x68c <GPIO_pin_pull_up+0x94>
 694:	ba 01       	movw	r22, r20
 696:	84 2f       	mov	r24, r20
 698:	80 95       	com	r24
 69a:	82 23       	and	r24, r18
 69c:	84 bb       	out	0x14, r24	; 20
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 69e:	80 b7       	in	r24, 0x30	; 48
 6a0:	8b 7f       	andi	r24, 0xFB	; 251
 6a2:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTC,pin_number); //set pin_number of port_name as high value
 6a4:	85 b3       	in	r24, 0x15	; 21
 6a6:	68 2b       	or	r22, r24
 6a8:	65 bb       	out	0x15, r22	; 21
        break;
 6aa:	08 95       	ret
        case 'D':
        case 'd':
            CLR_BIT(DDRD,pin_number); //set pin_number of port_name as input
 6ac:	21 b3       	in	r18, 0x11	; 17
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	ac 01       	movw	r20, r24
 6b4:	02 c0       	rjmp	.+4      	; 0x6ba <GPIO_pin_pull_up+0xc2>
 6b6:	44 0f       	add	r20, r20
 6b8:	55 1f       	adc	r21, r21
 6ba:	6a 95       	dec	r22
 6bc:	e2 f7       	brpl	.-8      	; 0x6b6 <GPIO_pin_pull_up+0xbe>
 6be:	ba 01       	movw	r22, r20
 6c0:	84 2f       	mov	r24, r20
 6c2:	80 95       	com	r24
 6c4:	82 23       	and	r24, r18
 6c6:	81 bb       	out	0x11, r24	; 17
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 6c8:	80 b7       	in	r24, 0x30	; 48
 6ca:	8b 7f       	andi	r24, 0xFB	; 251
 6cc:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTD,pin_number); //set pin_number of port_name as high value
 6ce:	82 b3       	in	r24, 0x12	; 18
 6d0:	68 2b       	or	r22, r24
 6d2:	62 bb       	out	0x12, r22	; 18
 6d4:	08 95       	ret

000006d6 <GPIO_port_write_high_nibble>:



void GPIO_port_write_high_nibble(char port_name, uint8 high_nibble)
{
    high_nibble <<= 4; //clear low_nibble bits in number
 6d6:	62 95       	swap	r22
 6d8:	60 7f       	andi	r22, 0xF0	; 240
    switch(port_name)
 6da:	84 34       	cpi	r24, 0x44	; 68
 6dc:	51 f1       	breq	.+84     	; 0x732 <GPIO_port_write_high_nibble+0x5c>
 6de:	85 34       	cpi	r24, 0x45	; 69
 6e0:	38 f4       	brcc	.+14     	; 0x6f0 <GPIO_port_write_high_nibble+0x1a>
 6e2:	82 34       	cpi	r24, 0x42	; 66
 6e4:	c1 f0       	breq	.+48     	; 0x716 <GPIO_port_write_high_nibble+0x40>
 6e6:	83 34       	cpi	r24, 0x43	; 67
 6e8:	e8 f4       	brcc	.+58     	; 0x724 <GPIO_port_write_high_nibble+0x4e>
 6ea:	81 34       	cpi	r24, 0x41	; 65
 6ec:	41 f5       	brne	.+80     	; 0x73e <GPIO_port_write_high_nibble+0x68>
 6ee:	0c c0       	rjmp	.+24     	; 0x708 <GPIO_port_write_high_nibble+0x32>
 6f0:	82 36       	cpi	r24, 0x62	; 98
 6f2:	89 f0       	breq	.+34     	; 0x716 <GPIO_port_write_high_nibble+0x40>
 6f4:	83 36       	cpi	r24, 0x63	; 99
 6f6:	18 f4       	brcc	.+6      	; 0x6fe <GPIO_port_write_high_nibble+0x28>
 6f8:	81 36       	cpi	r24, 0x61	; 97
 6fa:	09 f5       	brne	.+66     	; 0x73e <GPIO_port_write_high_nibble+0x68>
 6fc:	05 c0       	rjmp	.+10     	; 0x708 <GPIO_port_write_high_nibble+0x32>
 6fe:	83 36       	cpi	r24, 0x63	; 99
 700:	89 f0       	breq	.+34     	; 0x724 <GPIO_port_write_high_nibble+0x4e>
 702:	84 36       	cpi	r24, 0x64	; 100
 704:	e1 f4       	brne	.+56     	; 0x73e <GPIO_port_write_high_nibble+0x68>
 706:	15 c0       	rjmp	.+42     	; 0x732 <GPIO_port_write_high_nibble+0x5c>
    {
        case 'A':
        case 'a':
            PORTA &= 0x0f;
 708:	8b b3       	in	r24, 0x1b	; 27
 70a:	8f 70       	andi	r24, 0x0F	; 15
 70c:	8b bb       	out	0x1b, r24	; 27
            PORTA |= high_nibble;
 70e:	8b b3       	in	r24, 0x1b	; 27
 710:	68 2b       	or	r22, r24
 712:	6b bb       	out	0x1b, r22	; 27
        break;
 714:	08 95       	ret
        case 'B':
        case 'b':
            PORTB &= 0x0f;
 716:	88 b3       	in	r24, 0x18	; 24
 718:	8f 70       	andi	r24, 0x0F	; 15
 71a:	88 bb       	out	0x18, r24	; 24
            PORTB |= high_nibble;
 71c:	88 b3       	in	r24, 0x18	; 24
 71e:	68 2b       	or	r22, r24
 720:	68 bb       	out	0x18, r22	; 24
        break;
 722:	08 95       	ret
        case 'C':
        case 'c':
            PORTC &= 0x0f;
 724:	85 b3       	in	r24, 0x15	; 21
 726:	8f 70       	andi	r24, 0x0F	; 15
 728:	85 bb       	out	0x15, r24	; 21
            PORTC |= high_nibble;
 72a:	85 b3       	in	r24, 0x15	; 21
 72c:	68 2b       	or	r22, r24
 72e:	65 bb       	out	0x15, r22	; 21
        break;
 730:	08 95       	ret
        case 'D':
        case 'd':
            PORTD &= 0x0f;
 732:	82 b3       	in	r24, 0x12	; 18
 734:	8f 70       	andi	r24, 0x0F	; 15
 736:	82 bb       	out	0x12, r24	; 18
            PORTD |= high_nibble;
 738:	82 b3       	in	r24, 0x12	; 18
 73a:	68 2b       	or	r22, r24
 73c:	62 bb       	out	0x12, r22	; 18
 73e:	08 95       	ret

00000740 <GPIO_port_write_low_nibble>:
    } // end of switch(port_name);
}

void GPIO_port_write_low_nibble(char port_name, uint8 low_nibble)
{
    low_nibble &= 0x0f; //clear high_nibble bits in number
 740:	6f 70       	andi	r22, 0x0F	; 15
    switch(port_name)
 742:	84 34       	cpi	r24, 0x44	; 68
 744:	51 f1       	breq	.+84     	; 0x79a <GPIO_port_write_low_nibble+0x5a>
 746:	85 34       	cpi	r24, 0x45	; 69
 748:	38 f4       	brcc	.+14     	; 0x758 <GPIO_port_write_low_nibble+0x18>
 74a:	82 34       	cpi	r24, 0x42	; 66
 74c:	c1 f0       	breq	.+48     	; 0x77e <GPIO_port_write_low_nibble+0x3e>
 74e:	83 34       	cpi	r24, 0x43	; 67
 750:	e8 f4       	brcc	.+58     	; 0x78c <GPIO_port_write_low_nibble+0x4c>
 752:	81 34       	cpi	r24, 0x41	; 65
 754:	41 f5       	brne	.+80     	; 0x7a6 <GPIO_port_write_low_nibble+0x66>
 756:	0c c0       	rjmp	.+24     	; 0x770 <GPIO_port_write_low_nibble+0x30>
 758:	82 36       	cpi	r24, 0x62	; 98
 75a:	89 f0       	breq	.+34     	; 0x77e <GPIO_port_write_low_nibble+0x3e>
 75c:	83 36       	cpi	r24, 0x63	; 99
 75e:	18 f4       	brcc	.+6      	; 0x766 <GPIO_port_write_low_nibble+0x26>
 760:	81 36       	cpi	r24, 0x61	; 97
 762:	09 f5       	brne	.+66     	; 0x7a6 <GPIO_port_write_low_nibble+0x66>
 764:	05 c0       	rjmp	.+10     	; 0x770 <GPIO_port_write_low_nibble+0x30>
 766:	83 36       	cpi	r24, 0x63	; 99
 768:	89 f0       	breq	.+34     	; 0x78c <GPIO_port_write_low_nibble+0x4c>
 76a:	84 36       	cpi	r24, 0x64	; 100
 76c:	e1 f4       	brne	.+56     	; 0x7a6 <GPIO_port_write_low_nibble+0x66>
 76e:	15 c0       	rjmp	.+42     	; 0x79a <GPIO_port_write_low_nibble+0x5a>
    {
        case 'A':
        case 'a':
            PORTA &= 0xf0;
 770:	8b b3       	in	r24, 0x1b	; 27
 772:	80 7f       	andi	r24, 0xF0	; 240
 774:	8b bb       	out	0x1b, r24	; 27
            PORTA |= low_nibble;
 776:	8b b3       	in	r24, 0x1b	; 27
 778:	68 2b       	or	r22, r24
 77a:	6b bb       	out	0x1b, r22	; 27
        break;
 77c:	08 95       	ret
        case 'B':
        case 'b':
            PORTB &= 0xf0;
 77e:	88 b3       	in	r24, 0x18	; 24
 780:	80 7f       	andi	r24, 0xF0	; 240
 782:	88 bb       	out	0x18, r24	; 24
            PORTB |= low_nibble;
 784:	88 b3       	in	r24, 0x18	; 24
 786:	68 2b       	or	r22, r24
 788:	68 bb       	out	0x18, r22	; 24
        break;
 78a:	08 95       	ret
        case 'C':
        case 'c':
            PORTC &= 0xf0;
 78c:	85 b3       	in	r24, 0x15	; 21
 78e:	80 7f       	andi	r24, 0xF0	; 240
 790:	85 bb       	out	0x15, r24	; 21
            PORTC |= low_nibble;
 792:	85 b3       	in	r24, 0x15	; 21
 794:	68 2b       	or	r22, r24
 796:	65 bb       	out	0x15, r22	; 21
        break;
 798:	08 95       	ret
        case 'D':
        case 'd':
            PORTD &= 0xf0;
 79a:	82 b3       	in	r24, 0x12	; 18
 79c:	80 7f       	andi	r24, 0xF0	; 240
 79e:	82 bb       	out	0x12, r24	; 18
            PORTD |= low_nibble;
 7a0:	82 b3       	in	r24, 0x12	; 18
 7a2:	68 2b       	or	r22, r24
 7a4:	62 bb       	out	0x12, r22	; 18
 7a6:	08 95       	ret

000007a8 <EEPROM_write>:
#include "internalEEPROM.h"

void EEPROM_write(uint16 address, uint8 data)
{
	/*wait until (EEWE) bit in (EECR), becomes ZERO, to start new write operation*/
	while (READ_BIT(EECR,EEWE))
 7a8:	2c b3       	in	r18, 0x1c	; 28
 7aa:	21 fd       	sbrc	r18, 1
 7ac:	fd cf       	rjmp	.-6      	; 0x7a8 <EEPROM_write>
	{
		//do nothing
	}
	/*wait until (SPMEN) bit in (SPMCR) becomes zero*/
	while (READ_BIT(SPMCR,SPMEN))
 7ae:	07 b6       	in	r0, 0x37	; 55
 7b0:	00 fc       	sbrc	r0, 0
 7b2:	fd cf       	rjmp	.-6      	; 0x7ae <EEPROM_write+0x6>
	{
		//do nothing
	}
	/*load address in (EEARL, EEARH)*/
	EEARL = (uint8) address;
 7b4:	8e bb       	out	0x1e, r24	; 30
	EEARH = (uint8) (address>>8);
 7b6:	9f bb       	out	0x1f, r25	; 31
	/*load data to (EEDR)*/
	EEDR = data;
 7b8:	6d bb       	out	0x1d, r22	; 29
	/*write logic '1' to (EEMWE) bit in (EECR)*/
	SET_BIT(EECR,EEMWE);
 7ba:	e2 9a       	sbi	0x1c, 2	; 28
	/*start EEPROM write operation, by setting the (EEWE) bit in (EECR)*/
	SET_BIT(EECR,EEWE);
 7bc:	e1 9a       	sbi	0x1c, 1	; 28
	/*wait for 4 clock cycles, until write operation is done*/
	while (READ_BIT(EECR,EEWE))
 7be:	8c b3       	in	r24, 0x1c	; 28
 7c0:	81 fd       	sbrc	r24, 1
 7c2:	fd cf       	rjmp	.-6      	; 0x7be <EEPROM_write+0x16>
	{
		//wait for 4 clock cycles.
	}
}
 7c4:	08 95       	ret

000007c6 <EEPROM_read>:

uint8 EEPROM_read(uint16 address)
{
	uint8 data = 0;
	/*first make sure that any write operation is finished first*/
	while (READ_BIT(EECR,EEWE))
 7c6:	2c b3       	in	r18, 0x1c	; 28
 7c8:	21 fd       	sbrc	r18, 1
 7ca:	fd cf       	rjmp	.-6      	; 0x7c6 <EEPROM_read>
	{
		//do nothing
	}
	/*load address in (EEARL, EEARH)*/
	EEARL = (uint8) address;
 7cc:	8e bb       	out	0x1e, r24	; 30
	EEARH = (uint8) (address>>8);
 7ce:	9f bb       	out	0x1f, r25	; 31
	/*start EEPROM read operation by setting (EERE) bit in (EECR)*/
	SET_BIT(EECR,EERE);
 7d0:	e0 9a       	sbi	0x1c, 0	; 28
	/*read data from (EEDR) and return it*/
	data = EEDR;
 7d2:	8d b3       	in	r24, 0x1d	; 29
	/*return data*/
	return data;
 7d4:	08 95       	ret

000007d6 <keypad_init>:
#include "keypad.h"


void keypad_init(void)
{
	GPIO_pin_direction(KEYPAD_PORT,0,1);
 7d6:	83 e4       	ldi	r24, 0x43	; 67
 7d8:	60 e0       	ldi	r22, 0x00	; 0
 7da:	41 e0       	ldi	r20, 0x01	; 1
 7dc:	0e 94 ed 00 	call	0x1da	; 0x1da <GPIO_pin_direction>
	GPIO_pin_direction(KEYPAD_PORT,1,1);
 7e0:	83 e4       	ldi	r24, 0x43	; 67
 7e2:	61 e0       	ldi	r22, 0x01	; 1
 7e4:	41 e0       	ldi	r20, 0x01	; 1
 7e6:	0e 94 ed 00 	call	0x1da	; 0x1da <GPIO_pin_direction>
	GPIO_pin_direction(KEYPAD_PORT,2,1);
 7ea:	83 e4       	ldi	r24, 0x43	; 67
 7ec:	62 e0       	ldi	r22, 0x02	; 2
 7ee:	41 e0       	ldi	r20, 0x01	; 1
 7f0:	0e 94 ed 00 	call	0x1da	; 0x1da <GPIO_pin_direction>
	
	GPIO_pin_pull_up(KEYPAD_PORT,3);
 7f4:	83 e4       	ldi	r24, 0x43	; 67
 7f6:	63 e0       	ldi	r22, 0x03	; 3
 7f8:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <GPIO_pin_pull_up>
	GPIO_pin_pull_up(KEYPAD_PORT,4);
 7fc:	83 e4       	ldi	r24, 0x43	; 67
 7fe:	64 e0       	ldi	r22, 0x04	; 4
 800:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <GPIO_pin_pull_up>
	GPIO_pin_pull_up(KEYPAD_PORT,5);
 804:	83 e4       	ldi	r24, 0x43	; 67
 806:	65 e0       	ldi	r22, 0x05	; 5
 808:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <GPIO_pin_pull_up>
	GPIO_pin_pull_up(KEYPAD_PORT,6);
 80c:	83 e4       	ldi	r24, 0x43	; 67
 80e:	66 e0       	ldi	r22, 0x06	; 6
 810:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <GPIO_pin_pull_up>
}
 814:	08 95       	ret

00000816 <keypad_check_press>:

char keypad_check_press(void)
{
 816:	0f 93       	push	r16
 818:	1f 93       	push	r17
 81a:	cf 93       	push	r28
 81c:	df 93       	push	r29
 81e:	cd b7       	in	r28, 0x3d	; 61
 820:	de b7       	in	r29, 0x3e	; 62
 822:	2c 97       	sbiw	r28, 0x0c	; 12
 824:	0f b6       	in	r0, 0x3f	; 63
 826:	f8 94       	cli
 828:	de bf       	out	0x3e, r29	; 62
 82a:	0f be       	out	0x3f, r0	; 63
 82c:	cd bf       	out	0x3d, r28	; 61
	char button[4][3] = { {'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'} };
 82e:	de 01       	movw	r26, r28
 830:	11 96       	adiw	r26, 0x01	; 1
 832:	e5 eb       	ldi	r30, 0xB5	; 181
 834:	f0 e0       	ldi	r31, 0x00	; 0
 836:	8c e0       	ldi	r24, 0x0C	; 12
 838:	01 90       	ld	r0, Z+
 83a:	0d 92       	st	X+, r0
 83c:	81 50       	subi	r24, 0x01	; 1
 83e:	e1 f7       	brne	.-8      	; 0x838 <keypad_check_press+0x22>
	uint8 row = 0, column = 0, pressed = 1;
	char val = NOTPRESSED;
	
	for (column=0; column<3; ++column)
 840:	10 e0       	ldi	r17, 0x00	; 0
	{
		GPIO_pin_write(KEYPAD_PORT,0,1);
 842:	83 e4       	ldi	r24, 0x43	; 67
 844:	60 e0       	ldi	r22, 0x00	; 0
 846:	41 e0       	ldi	r20, 0x01	; 1
 848:	0e 94 7e 01 	call	0x2fc	; 0x2fc <GPIO_pin_write>
		GPIO_pin_write(KEYPAD_PORT,1,1);
 84c:	83 e4       	ldi	r24, 0x43	; 67
 84e:	61 e0       	ldi	r22, 0x01	; 1
 850:	41 e0       	ldi	r20, 0x01	; 1
 852:	0e 94 7e 01 	call	0x2fc	; 0x2fc <GPIO_pin_write>
		GPIO_pin_write(KEYPAD_PORT,2,1);
 856:	83 e4       	ldi	r24, 0x43	; 67
 858:	62 e0       	ldi	r22, 0x02	; 2
 85a:	41 e0       	ldi	r20, 0x01	; 1
 85c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <GPIO_pin_write>
		GPIO_pin_write(KEYPAD_PORT,column,0);
 860:	83 e4       	ldi	r24, 0x43	; 67
 862:	61 2f       	mov	r22, r17
 864:	40 e0       	ldi	r20, 0x00	; 0
 866:	0e 94 7e 01 	call	0x2fc	; 0x2fc <GPIO_pin_write>
		for (row=0; row<4; ++row)
 86a:	00 e0       	ldi	r16, 0x00	; 0
		{
			pressed = GPIO_pin_read(KEYPAD_PORT,(row+3));
 86c:	60 2f       	mov	r22, r16
 86e:	6d 5f       	subi	r22, 0xFD	; 253
 870:	83 e4       	ldi	r24, 0x43	; 67
 872:	0e 94 0f 02 	call	0x41e	; 0x41e <GPIO_pin_read>
			if (0 == pressed)
 876:	88 23       	and	r24, r24
 878:	69 f4       	brne	.+26     	; 0x894 <__stack+0x35>
			{
				val = button[row][column];
 87a:	80 2f       	mov	r24, r16
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	fc 01       	movw	r30, r24
 880:	ee 0f       	add	r30, r30
 882:	ff 1f       	adc	r31, r31
 884:	e8 0f       	add	r30, r24
 886:	f9 1f       	adc	r31, r25
 888:	e1 0f       	add	r30, r17
 88a:	f1 1d       	adc	r31, r1
 88c:	ec 0f       	add	r30, r28
 88e:	fd 1f       	adc	r31, r29
 890:	81 81       	ldd	r24, Z+1	; 0x01
 892:	04 c0       	rjmp	.+8      	; 0x89c <__stack+0x3d>
	{
		GPIO_pin_write(KEYPAD_PORT,0,1);
		GPIO_pin_write(KEYPAD_PORT,1,1);
		GPIO_pin_write(KEYPAD_PORT,2,1);
		GPIO_pin_write(KEYPAD_PORT,column,0);
		for (row=0; row<4; ++row)
 894:	0f 5f       	subi	r16, 0xFF	; 255
 896:	04 30       	cpi	r16, 0x04	; 4
 898:	49 f7       	brne	.-46     	; 0x86c <__stack+0xd>
 89a:	0b c0       	rjmp	.+22     	; 0x8b2 <__stack+0x53>
		{
			break;
		}
	}
	return val;
 89c:	2c 96       	adiw	r28, 0x0c	; 12
 89e:	0f b6       	in	r0, 0x3f	; 63
 8a0:	f8 94       	cli
 8a2:	de bf       	out	0x3e, r29	; 62
 8a4:	0f be       	out	0x3f, r0	; 63
 8a6:	cd bf       	out	0x3d, r28	; 61
 8a8:	df 91       	pop	r29
 8aa:	cf 91       	pop	r28
 8ac:	1f 91       	pop	r17
 8ae:	0f 91       	pop	r16
 8b0:	08 95       	ret
{
	char button[4][3] = { {'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'} };
	uint8 row = 0, column = 0, pressed = 1;
	char val = NOTPRESSED;
	
	for (column=0; column<3; ++column)
 8b2:	1f 5f       	subi	r17, 0xFF	; 255
 8b4:	13 30       	cpi	r17, 0x03	; 3
 8b6:	29 f6       	brne	.-118    	; 0x842 <keypad_check_press+0x2c>
 8b8:	8f ef       	ldi	r24, 0xFF	; 255
 8ba:	f0 cf       	rjmp	.-32     	; 0x89c <__stack+0x3d>

000008bc <LCD_send_pulse>:

#include "LCD.h"

static void LCD_send_pulse(void)
{
	GPIO_pin_write(EN_PORT,EN,1);
 8bc:	82 e4       	ldi	r24, 0x42	; 66
 8be:	60 e0       	ldi	r22, 0x00	; 0
 8c0:	41 e0       	ldi	r20, 0x01	; 1
 8c2:	0e 94 7e 01 	call	0x2fc	; 0x2fc <GPIO_pin_write>
 8c6:	8f e9       	ldi	r24, 0x9F	; 159
 8c8:	9f e0       	ldi	r25, 0x0F	; 15
 8ca:	01 97       	sbiw	r24, 0x01	; 1
 8cc:	f1 f7       	brne	.-4      	; 0x8ca <LCD_send_pulse+0xe>
 8ce:	00 c0       	rjmp	.+0      	; 0x8d0 <LCD_send_pulse+0x14>
 8d0:	00 00       	nop
	_delay_ms(2);
	GPIO_pin_write(EN_PORT,EN,0);
 8d2:	82 e4       	ldi	r24, 0x42	; 66
 8d4:	60 e0       	ldi	r22, 0x00	; 0
 8d6:	40 e0       	ldi	r20, 0x00	; 0
 8d8:	0e 94 7e 01 	call	0x2fc	; 0x2fc <GPIO_pin_write>
 8dc:	8f ec       	ldi	r24, 0xCF	; 207
 8de:	97 e0       	ldi	r25, 0x07	; 7
 8e0:	01 97       	sbiw	r24, 0x01	; 1
 8e2:	f1 f7       	brne	.-4      	; 0x8e0 <LCD_send_pulse+0x24>
 8e4:	00 c0       	rjmp	.+0      	; 0x8e6 <LCD_send_pulse+0x2a>
 8e6:	00 00       	nop
	_delay_ms(1);	
}
 8e8:	08 95       	ret

000008ea <LCD_send_command>:


void LCD_send_command(uint8 command)
{
 8ea:	68 2f       	mov	r22, r24
	GPIO_pin_write(RS_PORT,RS,0); //select command register
	LCD_send_pulse();
	
	#elif defined eight_bits_mode
	
	GPIO_port_write(LCD_PORT,command);
 8ec:	81 e4       	ldi	r24, 0x41	; 65
 8ee:	0e 94 bc 02 	call	0x578	; 0x578 <GPIO_port_write>
	GPIO_pin_write(RS_PORT,RS,0);
 8f2:	82 e4       	ldi	r24, 0x42	; 66
 8f4:	61 e0       	ldi	r22, 0x01	; 1
 8f6:	40 e0       	ldi	r20, 0x00	; 0
 8f8:	0e 94 7e 01 	call	0x2fc	; 0x2fc <GPIO_pin_write>
	LCD_send_pulse();
 8fc:	0e 94 5e 04 	call	0x8bc	; 0x8bc <LCD_send_pulse>
	
	#endif
}
 900:	08 95       	ret

00000902 <LCD_clear_screen>:



void LCD_clear_screen(void)
{
	LCD_send_command(CLEAR_SCREEN);
 902:	81 e0       	ldi	r24, 0x01	; 1
 904:	0e 94 75 04 	call	0x8ea	; 0x8ea <LCD_send_command>
 908:	8f e9       	ldi	r24, 0x9F	; 159
 90a:	9f e0       	ldi	r25, 0x0F	; 15
 90c:	01 97       	sbiw	r24, 0x01	; 1
 90e:	f1 f7       	brne	.-4      	; 0x90c <LCD_clear_screen+0xa>
 910:	00 c0       	rjmp	.+0      	; 0x912 <LCD_clear_screen+0x10>
 912:	00 00       	nop
	_delay_ms(2);
}
 914:	08 95       	ret

00000916 <LCD_return_home>:

void LCD_return_home(void)
{
	LCD_send_command(RETURN_HOME);
 916:	82 e0       	ldi	r24, 0x02	; 2
 918:	0e 94 75 04 	call	0x8ea	; 0x8ea <LCD_send_command>
 91c:	8f e9       	ldi	r24, 0x9F	; 159
 91e:	9f e0       	ldi	r25, 0x0F	; 15
 920:	01 97       	sbiw	r24, 0x01	; 1
 922:	f1 f7       	brne	.-4      	; 0x920 <LCD_return_home+0xa>
 924:	00 c0       	rjmp	.+0      	; 0x926 <LCD_return_home+0x10>
 926:	00 00       	nop
	_delay_ms(2);
}
 928:	08 95       	ret

0000092a <LCD_init>:
 92a:	8f ef       	ldi	r24, 0xFF	; 255
 92c:	99 ef       	ldi	r25, 0xF9	; 249
 92e:	a0 e0       	ldi	r26, 0x00	; 0
 930:	81 50       	subi	r24, 0x01	; 1
 932:	90 40       	sbci	r25, 0x00	; 0
 934:	a0 40       	sbci	r26, 0x00	; 0
 936:	e1 f7       	brne	.-8      	; 0x930 <LCD_init+0x6>
 938:	00 c0       	rjmp	.+0      	; 0x93a <LCD_init+0x10>
 93a:	00 00       	nop
	GPIO_pin_direction(RS_PORT,RS,1);//set RS pin to output pin
	//send command to inti LCD:
	LCD_send_command(FOUR_BITS);
	#elif defined eight_bits_mode
	//set connection pins:
	GPIO_port_direction(LCD_PORT,1);
 93c:	81 e4       	ldi	r24, 0x41	; 65
 93e:	61 e0       	ldi	r22, 0x01	; 1
 940:	0e 94 9d 02 	call	0x53a	; 0x53a <GPIO_port_direction>
	GPIO_pin_direction(EN_PORT,EN,1);//set EN pin to output pin
 944:	82 e4       	ldi	r24, 0x42	; 66
 946:	60 e0       	ldi	r22, 0x00	; 0
 948:	41 e0       	ldi	r20, 0x01	; 1
 94a:	0e 94 ed 00 	call	0x1da	; 0x1da <GPIO_pin_direction>
	GPIO_pin_direction(RS_PORT,RS,1);//set RS pin to output pin
 94e:	82 e4       	ldi	r24, 0x42	; 66
 950:	61 e0       	ldi	r22, 0x01	; 1
 952:	41 e0       	ldi	r20, 0x01	; 1
 954:	0e 94 ed 00 	call	0x1da	; 0x1da <GPIO_pin_direction>
	//send command to init LCD:
	LCD_send_command(EIGHT_BITS);
 958:	88 e3       	ldi	r24, 0x38	; 56
 95a:	0e 94 75 04 	call	0x8ea	; 0x8ea <LCD_send_command>
	#endif
	LCD_return_home();
 95e:	0e 94 8b 04 	call	0x916	; 0x916 <LCD_return_home>
	LCD_send_command(DISPLAY_ON_CURSOR_OFF);
 962:	8c e0       	ldi	r24, 0x0C	; 12
 964:	0e 94 75 04 	call	0x8ea	; 0x8ea <LCD_send_command>
	LCD_clear_screen();
 968:	0e 94 81 04 	call	0x902	; 0x902 <LCD_clear_screen>
	LCD_send_command(ENGLISH_ENTRY);
 96c:	86 e0       	ldi	r24, 0x06	; 6
 96e:	0e 94 75 04 	call	0x8ea	; 0x8ea <LCD_send_command>
}
 972:	08 95       	ret

00000974 <LCD_send_character>:
	LCD_send_command(RETURN_HOME);
	_delay_ms(2);
}

void LCD_send_character(char character)
{
 974:	cf 93       	push	r28
 976:	c8 2f       	mov	r28, r24
	GPIO_port_write_low_nibble(LCD_PORT,character);
	LCD_send_pulse();
	
	#elif defined eight_bits_mode
	
	GPIO_pin_write(RS_PORT,RS,1);
 978:	82 e4       	ldi	r24, 0x42	; 66
 97a:	61 e0       	ldi	r22, 0x01	; 1
 97c:	41 e0       	ldi	r20, 0x01	; 1
 97e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <GPIO_pin_write>
	GPIO_port_write(LCD_PORT,character);
 982:	81 e4       	ldi	r24, 0x41	; 65
 984:	6c 2f       	mov	r22, r28
 986:	0e 94 bc 02 	call	0x578	; 0x578 <GPIO_port_write>
	LCD_send_pulse();
 98a:	0e 94 5e 04 	call	0x8bc	; 0x8bc <LCD_send_pulse>
	
	#endif
	
}
 98e:	cf 91       	pop	r28
 990:	08 95       	ret

00000992 <LCD_send_string>:

void LCD_send_string(char* character)
{
 992:	cf 93       	push	r28
 994:	df 93       	push	r29
 996:	ec 01       	movw	r28, r24
	while ('\0' != *character)
 998:	88 81       	ld	r24, Y
 99a:	88 23       	and	r24, r24
 99c:	31 f0       	breq	.+12     	; 0x9aa <LCD_send_string+0x18>
	
	#endif
	
}

void LCD_send_string(char* character)
 99e:	21 96       	adiw	r28, 0x01	; 1
{
	while ('\0' != *character)
	{
		LCD_send_character(*character);
 9a0:	0e 94 ba 04 	call	0x974	; 0x974 <LCD_send_character>
	
}

void LCD_send_string(char* character)
{
	while ('\0' != *character)
 9a4:	89 91       	ld	r24, Y+
 9a6:	88 23       	and	r24, r24
 9a8:	d9 f7       	brne	.-10     	; 0x9a0 <LCD_send_string+0xe>
	{
		LCD_send_character(*character);
		character += 1;
	}
}
 9aa:	df 91       	pop	r29
 9ac:	cf 91       	pop	r28
 9ae:	08 95       	ret

000009b0 <LCD_move_cursor>:
void LCD_move_cursor(uint8 row, uint8 column)
{
	uint8 r = 0;
	uint8 c = 0;
	
	if( (row>0) && (row<5) && (column>0) && (column<21) )
 9b0:	98 2f       	mov	r25, r24
 9b2:	91 50       	subi	r25, 0x01	; 1
 9b4:	94 30       	cpi	r25, 0x04	; 4
 9b6:	b0 f4       	brcc	.+44     	; 0x9e4 <LCD_move_cursor+0x34>
 9b8:	66 23       	and	r22, r22
 9ba:	b1 f0       	breq	.+44     	; 0x9e8 <LCD_move_cursor+0x38>
 9bc:	65 31       	cpi	r22, 0x15	; 21
 9be:	b0 f4       	brcc	.+44     	; 0x9ec <LCD_move_cursor+0x3c>
	{
		if (1 == row)
 9c0:	81 30       	cpi	r24, 0x01	; 1
 9c2:	19 f4       	brne	.+6      	; 0x9ca <LCD_move_cursor+0x1a>
		{
			c = (0x80 + column - 1);
 9c4:	86 2f       	mov	r24, r22
 9c6:	81 58       	subi	r24, 0x81	; 129
 9c8:	12 c0       	rjmp	.+36     	; 0x9ee <LCD_move_cursor+0x3e>
		}
		else if (2 == row)
 9ca:	82 30       	cpi	r24, 0x02	; 2
 9cc:	19 f4       	brne	.+6      	; 0x9d4 <LCD_move_cursor+0x24>
		{
			c = (0xC0 + column - 1);
 9ce:	86 2f       	mov	r24, r22
 9d0:	81 54       	subi	r24, 0x41	; 65
 9d2:	0d c0       	rjmp	.+26     	; 0x9ee <LCD_move_cursor+0x3e>
		}
		else if (3 == row)
 9d4:	83 30       	cpi	r24, 0x03	; 3
 9d6:	19 f4       	brne	.+6      	; 0x9de <LCD_move_cursor+0x2e>
		{
			c = (0x90 + column - 1);
 9d8:	86 2f       	mov	r24, r22
 9da:	81 57       	subi	r24, 0x71	; 113
 9dc:	08 c0       	rjmp	.+16     	; 0x9ee <LCD_move_cursor+0x3e>
		}
		else
		{
			c = (0xD0 + column - 1);
 9de:	86 2f       	mov	r24, r22
 9e0:	81 53       	subi	r24, 0x31	; 49
 9e2:	05 c0       	rjmp	.+10     	; 0x9ee <LCD_move_cursor+0x3e>
		}
	}
	else
	{
		c = 0x80;
 9e4:	80 e8       	ldi	r24, 0x80	; 128
 9e6:	03 c0       	rjmp	.+6      	; 0x9ee <LCD_move_cursor+0x3e>
 9e8:	80 e8       	ldi	r24, 0x80	; 128
 9ea:	01 c0       	rjmp	.+2      	; 0x9ee <LCD_move_cursor+0x3e>
 9ec:	80 e8       	ldi	r24, 0x80	; 128
	}
	LCD_send_command(c);
 9ee:	0e 94 75 04 	call	0x8ea	; 0x8ea <LCD_send_command>
 9f2:	08 95       	ret

000009f4 <LED_init>:
#include "led.h"

void LED_init(char port_name, uint8 pin_number)
{
    GPIO_pin_direction(port_name, pin_number, 1);
 9f4:	41 e0       	ldi	r20, 0x01	; 1
 9f6:	0e 94 ed 00 	call	0x1da	; 0x1da <GPIO_pin_direction>
}
 9fa:	08 95       	ret

000009fc <LED_turn_on>:


void LED_turn_on(char port_name, uint8 pin_number)
{
    GPIO_pin_write(port_name, pin_number, 1);
 9fc:	41 e0       	ldi	r20, 0x01	; 1
 9fe:	0e 94 7e 01 	call	0x2fc	; 0x2fc <GPIO_pin_write>
}
 a02:	08 95       	ret

00000a04 <LED_turn_off>:


void LED_turn_off(char port_name, uint8 pin_number)
{
    GPIO_pin_write(port_name, pin_number, 0);
 a04:	40 e0       	ldi	r20, 0x00	; 0
 a06:	0e 94 7e 01 	call	0x2fc	; 0x2fc <GPIO_pin_write>
}
 a0a:	08 95       	ret

00000a0c <LED_toggle>:


void LED_toggle(char port_name, uint8 pin_number)
{
    GPIO_pin_toggle(port_name, pin_number);
 a0c:	0e 94 50 02 	call	0x4a0	; 0x4a0 <GPIO_pin_toggle>
}
 a10:	08 95       	ret

00000a12 <LED_status>:


uint8 LED_status(char port_name, uint8 pin_number)
{
    return (GPIO_pin_read(port_name, pin_number));
 a12:	0e 94 0f 02 	call	0x41e	; 0x41e <GPIO_pin_read>
 a16:	08 95       	ret

00000a18 <safe_pass_status>:


uint8 safe_pass_status(uint16 address)
{
	uint8 password_status = 0;
	password_status = EEPROM_read(address);
 a18:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <EEPROM_read>
	return password_status;
}
 a1c:	08 95       	ret

00000a1e <safe_read_pass>:


uint32 safe_read_pass(uint16* address)
{
 a1e:	cf 92       	push	r12
 a20:	df 92       	push	r13
 a22:	ef 92       	push	r14
 a24:	ff 92       	push	r15
 a26:	cf 93       	push	r28
 a28:	df 93       	push	r29
 a2a:	ec 01       	movw	r28, r24
	uint32 pass_value = 0;
	/*read the password from EEPROM*/
	pass_value = (uint8)EEPROM_read(*(address+0));
 a2c:	88 81       	ld	r24, Y
 a2e:	99 81       	ldd	r25, Y+1	; 0x01
 a30:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <EEPROM_read>
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	a0 e0       	ldi	r26, 0x00	; 0
 a38:	b0 e0       	ldi	r27, 0x00	; 0
	pass_value <<= 8;
 a3a:	cc 24       	eor	r12, r12
 a3c:	d8 2e       	mov	r13, r24
 a3e:	e9 2e       	mov	r14, r25
 a40:	fa 2e       	mov	r15, r26
	pass_value |= (uint8)EEPROM_read(*(address+1));
 a42:	8a 81       	ldd	r24, Y+2	; 0x02
 a44:	9b 81       	ldd	r25, Y+3	; 0x03
 a46:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <EEPROM_read>
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	a0 e0       	ldi	r26, 0x00	; 0
 a4e:	b0 e0       	ldi	r27, 0x00	; 0
 a50:	c8 2a       	or	r12, r24
 a52:	d9 2a       	or	r13, r25
 a54:	ea 2a       	or	r14, r26
 a56:	fb 2a       	or	r15, r27
	pass_value <<= 8;
 a58:	fe 2c       	mov	r15, r14
 a5a:	ed 2c       	mov	r14, r13
 a5c:	dc 2c       	mov	r13, r12
 a5e:	cc 24       	eor	r12, r12
	pass_value |= (uint8)EEPROM_read(*(address+2));
 a60:	8c 81       	ldd	r24, Y+4	; 0x04
 a62:	9d 81       	ldd	r25, Y+5	; 0x05
 a64:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <EEPROM_read>
 a68:	90 e0       	ldi	r25, 0x00	; 0
 a6a:	a0 e0       	ldi	r26, 0x00	; 0
 a6c:	b0 e0       	ldi	r27, 0x00	; 0
 a6e:	c8 2a       	or	r12, r24
 a70:	d9 2a       	or	r13, r25
 a72:	ea 2a       	or	r14, r26
 a74:	fb 2a       	or	r15, r27
	pass_value <<= 8;
 a76:	fe 2c       	mov	r15, r14
 a78:	ed 2c       	mov	r14, r13
 a7a:	dc 2c       	mov	r13, r12
 a7c:	cc 24       	eor	r12, r12
	pass_value |= (uint8)EEPROM_read(*(address+3));
 a7e:	8e 81       	ldd	r24, Y+6	; 0x06
 a80:	9f 81       	ldd	r25, Y+7	; 0x07
 a82:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <EEPROM_read>
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	a0 e0       	ldi	r26, 0x00	; 0
 a8a:	b0 e0       	ldi	r27, 0x00	; 0
 a8c:	c8 2a       	or	r12, r24
 a8e:	d9 2a       	or	r13, r25
 a90:	ea 2a       	or	r14, r26
 a92:	fb 2a       	or	r15, r27
	/*now return password*/
	return pass_value;
}
 a94:	6c 2d       	mov	r22, r12
 a96:	7d 2d       	mov	r23, r13
 a98:	8e 2d       	mov	r24, r14
 a9a:	9f 2d       	mov	r25, r15
 a9c:	df 91       	pop	r29
 a9e:	cf 91       	pop	r28
 aa0:	ff 90       	pop	r15
 aa2:	ef 90       	pop	r14
 aa4:	df 90       	pop	r13
 aa6:	cf 90       	pop	r12
 aa8:	08 95       	ret

00000aaa <safe_set_pass>:

void safe_set_pass(uint8* pass, uint16* address, uint16 pass_status)
{
 aaa:	ef 92       	push	r14
 aac:	ff 92       	push	r15
 aae:	0f 93       	push	r16
 ab0:	1f 93       	push	r17
 ab2:	cf 93       	push	r28
 ab4:	df 93       	push	r29
 ab6:	c6 2f       	mov	r28, r22
 ab8:	d7 2f       	mov	r29, r23
 aba:	7a 01       	movw	r14, r20
	uint8 i = 0, digit = 0;
	LCD_clear_screen();
 abc:	0e 94 81 04 	call	0x902	; 0x902 <LCD_clear_screen>
	LCD_send_string("Set 8-b password");
 ac0:	81 ec       	ldi	r24, 0xC1	; 193
 ac2:	90 e0       	ldi	r25, 0x00	; 0
 ac4:	0e 94 c9 04 	call	0x992	; 0x992 <LCD_send_string>
	LCD_move_cursor(2,1);
 ac8:	82 e0       	ldi	r24, 0x02	; 2
 aca:	61 e0       	ldi	r22, 0x01	; 1
 acc:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCD_move_cursor>
 ad0:	0c 2f       	mov	r16, r28
 ad2:	1d 2f       	mov	r17, r29
	for(i=0; i<6; ++i)
 ad4:	d0 e0       	ldi	r29, 0x00	; 0
	{
		do 
		{
			digit = keypad_check_press();
 ad6:	0e 94 0b 04 	call	0x816	; 0x816 <keypad_check_press>
 ada:	c8 2f       	mov	r28, r24
		} while ( digit == NOTPRESSED );
 adc:	8f 3f       	cpi	r24, 0xFF	; 255
 ade:	d9 f3       	breq	.-10     	; 0xad6 <safe_set_pass+0x2c>
		
		LCD_send_character(digit);
 ae0:	0e 94 ba 04 	call	0x974	; 0x974 <LCD_send_character>
 ae4:	8f ef       	ldi	r24, 0xFF	; 255
 ae6:	94 e3       	ldi	r25, 0x34	; 52
 ae8:	ac e0       	ldi	r26, 0x0C	; 12
 aea:	81 50       	subi	r24, 0x01	; 1
 aec:	90 40       	sbci	r25, 0x00	; 0
 aee:	a0 40       	sbci	r26, 0x00	; 0
 af0:	e1 f7       	brne	.-8      	; 0xaea <safe_set_pass+0x40>
 af2:	00 c0       	rjmp	.+0      	; 0xaf4 <safe_set_pass+0x4a>
 af4:	00 00       	nop
		_delay_ms(500);
		LCD_move_cursor(2, 1+i);
 af6:	df 5f       	subi	r29, 0xFF	; 255
 af8:	82 e0       	ldi	r24, 0x02	; 2
 afa:	6d 2f       	mov	r22, r29
 afc:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCD_move_cursor>
		LCD_send_character('*');
 b00:	8a e2       	ldi	r24, 0x2A	; 42
 b02:	0e 94 ba 04 	call	0x974	; 0x974 <LCD_send_character>
		EEPROM_write(address[i], digit-48);
 b06:	6c 2f       	mov	r22, r28
 b08:	60 53       	subi	r22, 0x30	; 48
 b0a:	d8 01       	movw	r26, r16
 b0c:	8d 91       	ld	r24, X+
 b0e:	9d 91       	ld	r25, X+
 b10:	8d 01       	movw	r16, r26
 b12:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <EEPROM_write>
{
	uint8 i = 0, digit = 0;
	LCD_clear_screen();
	LCD_send_string("Set 8-b password");
	LCD_move_cursor(2,1);
	for(i=0; i<6; ++i)
 b16:	d6 30       	cpi	r29, 0x06	; 6
 b18:	f1 f6       	brne	.-68     	; 0xad6 <safe_set_pass+0x2c>
		LCD_move_cursor(2, 1+i);
		LCD_send_character('*');
		EEPROM_write(address[i], digit-48);
	}
	
	EEPROM_write(pass_status, 0x00); //write (0x00) to indicate that password is set
 b1a:	c7 01       	movw	r24, r14
 b1c:	60 e0       	ldi	r22, 0x00	; 0
 b1e:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <EEPROM_write>
	LCD_move_cursor(3, 1);
 b22:	83 e0       	ldi	r24, 0x03	; 3
 b24:	61 e0       	ldi	r22, 0x01	; 1
 b26:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCD_move_cursor>
	LCD_send_string("Password saved");
 b2a:	82 ed       	ldi	r24, 0xD2	; 210
 b2c:	90 e0       	ldi	r25, 0x00	; 0
 b2e:	0e 94 c9 04 	call	0x992	; 0x992 <LCD_send_string>
 b32:	8f ef       	ldi	r24, 0xFF	; 255
 b34:	93 ed       	ldi	r25, 0xD3	; 211
 b36:	a0 e3       	ldi	r26, 0x30	; 48
 b38:	81 50       	subi	r24, 0x01	; 1
 b3a:	90 40       	sbci	r25, 0x00	; 0
 b3c:	a0 40       	sbci	r26, 0x00	; 0
 b3e:	e1 f7       	brne	.-8      	; 0xb38 <safe_set_pass+0x8e>
 b40:	00 c0       	rjmp	.+0      	; 0xb42 <safe_set_pass+0x98>
 b42:	00 00       	nop
	_delay_ms(2000);
}
 b44:	df 91       	pop	r29
 b46:	cf 91       	pop	r28
 b48:	1f 91       	pop	r17
 b4a:	0f 91       	pop	r16
 b4c:	ff 90       	pop	r15
 b4e:	ef 90       	pop	r14
 b50:	08 95       	ret

00000b52 <safe_check_pass>:

uint8 safe_check_pass(uint16* address)
{
 b52:	6f 92       	push	r6
 b54:	7f 92       	push	r7
 b56:	8f 92       	push	r8
 b58:	9f 92       	push	r9
 b5a:	af 92       	push	r10
 b5c:	bf 92       	push	r11
 b5e:	cf 92       	push	r12
 b60:	df 92       	push	r13
 b62:	ef 92       	push	r14
 b64:	ff 92       	push	r15
 b66:	0f 93       	push	r16
 b68:	1f 93       	push	r17
 b6a:	cf 93       	push	r28
 b6c:	df 93       	push	r29
 b6e:	cd b7       	in	r28, 0x3d	; 61
 b70:	de b7       	in	r29, 0x3e	; 62
 b72:	2c 97       	sbiw	r28, 0x0c	; 12
 b74:	0f b6       	in	r0, 0x3f	; 63
 b76:	f8 94       	cli
 b78:	de bf       	out	0x3e, r29	; 62
 b7a:	0f be       	out	0x3f, r0	; 63
 b7c:	cd bf       	out	0x3d, r28	; 61
 b7e:	e8 2e       	mov	r14, r24
 b80:	a9 2e       	mov	r10, r25
	uint8 flag = 0xff, digit = NOTPRESSED;
	uint8 password1[6] = {0}, password2[6] = {0};
 b82:	86 e0       	ldi	r24, 0x06	; 6
 b84:	6e 01       	movw	r12, r28
 b86:	08 94       	sec
 b88:	c1 1c       	adc	r12, r1
 b8a:	d1 1c       	adc	r13, r1
 b8c:	d6 01       	movw	r26, r12
 b8e:	e8 2f       	mov	r30, r24
 b90:	1d 92       	st	X+, r1
 b92:	ea 95       	dec	r30
 b94:	e9 f7       	brne	.-6      	; 0xb90 <safe_check_pass+0x3e>
 b96:	8e 01       	movw	r16, r28
 b98:	09 5f       	subi	r16, 0xF9	; 249
 b9a:	1f 4f       	sbci	r17, 0xFF	; 255
 b9c:	d8 01       	movw	r26, r16
 b9e:	1d 92       	st	X+, r1
 ba0:	8a 95       	dec	r24
 ba2:	e9 f7       	brne	.-6      	; 0xb9e <safe_check_pass+0x4c>
	uint8 i=0;

	LCD_clear_screen();
 ba4:	0e 94 81 04 	call	0x902	; 0x902 <LCD_clear_screen>
	LCD_send_string("Enter password:");
 ba8:	81 ee       	ldi	r24, 0xE1	; 225
 baa:	90 e0       	ldi	r25, 0x00	; 0
 bac:	0e 94 c9 04 	call	0x992	; 0x992 <LCD_send_string>
	LCD_move_cursor(2,1);
 bb0:	82 e0       	ldi	r24, 0x02	; 2
 bb2:	61 e0       	ldi	r22, 0x01	; 1
 bb4:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCD_move_cursor>
 bb8:	8e 2c       	mov	r8, r14
 bba:	9a 2c       	mov	r9, r10
 bbc:	76 01       	movw	r14, r12
 bbe:	38 01       	movw	r6, r16
 bc0:	58 01       	movw	r10, r16
	/* read password from user and EEPROM */
	for(i=0; i<6; ++i)
 bc2:	00 e0       	ldi	r16, 0x00	; 0
	{
		do
		{
			digit = keypad_check_press();
 bc4:	0e 94 0b 04 	call	0x816	; 0x816 <keypad_check_press>
 bc8:	18 2f       	mov	r17, r24
		} while ( digit == NOTPRESSED );
 bca:	8f 3f       	cpi	r24, 0xFF	; 255
 bcc:	d9 f3       	breq	.-10     	; 0xbc4 <safe_check_pass+0x72>
		
		LCD_send_character(digit);
 bce:	0e 94 ba 04 	call	0x974	; 0x974 <LCD_send_character>
 bd2:	8f ef       	ldi	r24, 0xFF	; 255
 bd4:	94 e3       	ldi	r25, 0x34	; 52
 bd6:	ac e0       	ldi	r26, 0x0C	; 12
 bd8:	81 50       	subi	r24, 0x01	; 1
 bda:	90 40       	sbci	r25, 0x00	; 0
 bdc:	a0 40       	sbci	r26, 0x00	; 0
 bde:	e1 f7       	brne	.-8      	; 0xbd8 <safe_check_pass+0x86>
 be0:	00 c0       	rjmp	.+0      	; 0xbe2 <safe_check_pass+0x90>
 be2:	00 00       	nop
		_delay_ms(500);
		LCD_move_cursor(2, 1+i);
 be4:	0f 5f       	subi	r16, 0xFF	; 255
 be6:	82 e0       	ldi	r24, 0x02	; 2
 be8:	60 2f       	mov	r22, r16
 bea:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCD_move_cursor>
		LCD_send_character('*');
 bee:	8a e2       	ldi	r24, 0x2A	; 42
 bf0:	0e 94 ba 04 	call	0x974	; 0x974 <LCD_send_character>
		password1[i] = EEPROM_read(address[i]);
 bf4:	d4 01       	movw	r26, r8
 bf6:	8d 91       	ld	r24, X+
 bf8:	9d 91       	ld	r25, X+
 bfa:	4d 01       	movw	r8, r26
 bfc:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <EEPROM_read>
 c00:	f6 01       	movw	r30, r12
 c02:	81 93       	st	Z+, r24
 c04:	6f 01       	movw	r12, r30
		password2[i] = (digit - 48);
 c06:	10 53       	subi	r17, 0x30	; 48
 c08:	d5 01       	movw	r26, r10
 c0a:	1d 93       	st	X+, r17
 c0c:	5d 01       	movw	r10, r26

	LCD_clear_screen();
	LCD_send_string("Enter password:");
	LCD_move_cursor(2,1);
	/* read password from user and EEPROM */
	for(i=0; i<6; ++i)
 c0e:	06 30       	cpi	r16, 0x06	; 6
 c10:	c9 f6       	brne	.-78     	; 0xbc4 <safe_check_pass+0x72>
	LCD_move_cursor(3, 1);
	LCD_send_string("Password saved");
	_delay_ms(2000);
}

uint8 safe_check_pass(uint16* address)
 c12:	9e 01       	movw	r18, r28
 c14:	29 5f       	subi	r18, 0xF9	; 249
 c16:	3f 4f       	sbci	r19, 0xFF	; 255
		{
			flag = 0x00;
		}
		else
		{
			flag = 0xff;
 c18:	5f ef       	ldi	r21, 0xFF	; 255
	/*check if the password is correct or not:*/
	for (i=0; i<6; ++i)
	{
		if (password1[i] != password2[i])
		{
			flag = 0x00;
 c1a:	40 e0       	ldi	r20, 0x00	; 0
		password2[i] = (digit - 48);
	}
	/*check if the password is correct or not:*/
	for (i=0; i<6; ++i)
	{
		if (password1[i] != password2[i])
 c1c:	f7 01       	movw	r30, r14
 c1e:	91 91       	ld	r25, Z+
 c20:	7f 01       	movw	r14, r30
 c22:	d3 01       	movw	r26, r6
 c24:	8d 91       	ld	r24, X+
 c26:	3d 01       	movw	r6, r26
 c28:	98 17       	cp	r25, r24
 c2a:	11 f0       	breq	.+4      	; 0xc30 <safe_check_pass+0xde>
		{
			flag = 0x00;
 c2c:	84 2f       	mov	r24, r20
 c2e:	01 c0       	rjmp	.+2      	; 0xc32 <safe_check_pass+0xe0>
		}
		else
		{
			flag = 0xff;
 c30:	85 2f       	mov	r24, r21
		LCD_send_character('*');
		password1[i] = EEPROM_read(address[i]);
		password2[i] = (digit - 48);
	}
	/*check if the password is correct or not:*/
	for (i=0; i<6; ++i)
 c32:	e2 16       	cp	r14, r18
 c34:	f3 06       	cpc	r15, r19
 c36:	91 f7       	brne	.-28     	; 0xc1c <safe_check_pass+0xca>
			flag = 0xff;
		}
	}
	
	return flag;
 c38:	2c 96       	adiw	r28, 0x0c	; 12
 c3a:	0f b6       	in	r0, 0x3f	; 63
 c3c:	f8 94       	cli
 c3e:	de bf       	out	0x3e, r29	; 62
 c40:	0f be       	out	0x3f, r0	; 63
 c42:	cd bf       	out	0x3d, r28	; 61
 c44:	df 91       	pop	r29
 c46:	cf 91       	pop	r28
 c48:	1f 91       	pop	r17
 c4a:	0f 91       	pop	r16
 c4c:	ff 90       	pop	r15
 c4e:	ef 90       	pop	r14
 c50:	df 90       	pop	r13
 c52:	cf 90       	pop	r12
 c54:	bf 90       	pop	r11
 c56:	af 90       	pop	r10
 c58:	9f 90       	pop	r9
 c5a:	8f 90       	pop	r8
 c5c:	7f 90       	pop	r7
 c5e:	6f 90       	pop	r6
 c60:	08 95       	ret

00000c62 <_exit>:
 c62:	f8 94       	cli

00000c64 <__stop_program>:
 c64:	ff cf       	rjmp	.-2      	; 0xc64 <__stop_program>
