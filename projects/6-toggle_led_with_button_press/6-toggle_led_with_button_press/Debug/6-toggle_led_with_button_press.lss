
6-toggle_led_with_button_press.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000060e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000060e  00000682  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000684  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00000dd8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000092a  00000000  00000000  00000eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002c5  00000000  00000000  000017e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000538  00000000  00000000  00001aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000160  00000000  00000000  00001fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002cc  00000000  00000000  00002140  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005b4  00000000  00000000  0000240c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e0       	ldi	r30, 0x0E	; 14
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 05 03 	jmp	0x60a	; 0x60a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <util/delay.h>
/*============================ end ==============================*/

int main(void)
{
	Button_init_with_internal_pull_up('A', 1);
  92:	81 e4       	ldi	r24, 0x41	; 65
  94:	61 e0       	ldi	r22, 0x01	; 1
  96:	0e 94 ed 02 	call	0x5da	; 0x5da <Button_init_with_internal_pull_up>
	LED_init('D', 2);
  9a:	84 e4       	ldi	r24, 0x44	; 68
  9c:	62 e0       	ldi	r22, 0x02	; 2
  9e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <LED_init>
	
    while(1)
    {
        if ( !Button_read('A', 1) )
  a2:	81 e4       	ldi	r24, 0x41	; 65
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <Button_read>
  aa:	88 23       	and	r24, r24
  ac:	d1 f7       	brne	.-12     	; 0xa2 <main+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	90 e7       	ldi	r25, 0x70	; 112
  b2:	a2 e0       	ldi	r26, 0x02	; 2
  b4:	81 50       	subi	r24, 0x01	; 1
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	a0 40       	sbci	r26, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x22>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x2c>
  be:	00 00       	nop
        {
	        _delay_ms(100); //software solution for switch bouncing
	        if ( !Button_read('A', 1) )
  c0:	81 e4       	ldi	r24, 0x41	; 65
  c2:	61 e0       	ldi	r22, 0x01	; 1
  c4:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <Button_read>
  c8:	88 23       	and	r24, r24
  ca:	59 f7       	brne	.-42     	; 0xa2 <main+0x10>
	        {
		        LED_toggle('D', 2);
  cc:	84 e4       	ldi	r24, 0x44	; 68
  ce:	62 e0       	ldi	r22, 0x02	; 2
  d0:	0e 94 ff 02 	call	0x5fe	; 0x5fe <LED_toggle>
  d4:	e6 cf       	rjmp	.-52     	; 0xa2 <main+0x10>

000000d6 <GPIO_pin_direction>:
#include "Atmega_GPIO.h"

void GPIO_pin_direction(char PORT, uint8 BIT, uint8 DIR)
{
    switch(PORT)
  d6:	84 34       	cpi	r24, 0x44	; 68
  d8:	09 f4       	brne	.+2      	; 0xdc <GPIO_pin_direction+0x6>
  da:	71 c0       	rjmp	.+226    	; 0x1be <GPIO_pin_direction+0xe8>
  dc:	85 34       	cpi	r24, 0x45	; 69
  de:	48 f4       	brcc	.+18     	; 0xf2 <GPIO_pin_direction+0x1c>
  e0:	82 34       	cpi	r24, 0x42	; 66
  e2:	99 f1       	breq	.+102    	; 0x14a <GPIO_pin_direction+0x74>
  e4:	83 34       	cpi	r24, 0x43	; 67
  e6:	08 f0       	brcs	.+2      	; 0xea <GPIO_pin_direction+0x14>
  e8:	4d c0       	rjmp	.+154    	; 0x184 <GPIO_pin_direction+0xae>
  ea:	81 34       	cpi	r24, 0x41	; 65
  ec:	09 f0       	breq	.+2      	; 0xf0 <GPIO_pin_direction+0x1a>
  ee:	83 c0       	rjmp	.+262    	; 0x1f6 <GPIO_pin_direction+0x120>
  f0:	0f c0       	rjmp	.+30     	; 0x110 <GPIO_pin_direction+0x3a>
  f2:	82 36       	cpi	r24, 0x62	; 98
  f4:	51 f1       	breq	.+84     	; 0x14a <GPIO_pin_direction+0x74>
  f6:	83 36       	cpi	r24, 0x63	; 99
  f8:	20 f4       	brcc	.+8      	; 0x102 <GPIO_pin_direction+0x2c>
  fa:	81 36       	cpi	r24, 0x61	; 97
  fc:	09 f0       	breq	.+2      	; 0x100 <GPIO_pin_direction+0x2a>
  fe:	7b c0       	rjmp	.+246    	; 0x1f6 <GPIO_pin_direction+0x120>
 100:	07 c0       	rjmp	.+14     	; 0x110 <GPIO_pin_direction+0x3a>
 102:	83 36       	cpi	r24, 0x63	; 99
 104:	09 f4       	brne	.+2      	; 0x108 <GPIO_pin_direction+0x32>
 106:	3e c0       	rjmp	.+124    	; 0x184 <GPIO_pin_direction+0xae>
 108:	84 36       	cpi	r24, 0x64	; 100
 10a:	09 f0       	breq	.+2      	; 0x10e <GPIO_pin_direction+0x38>
 10c:	74 c0       	rjmp	.+232    	; 0x1f6 <GPIO_pin_direction+0x120>
 10e:	57 c0       	rjmp	.+174    	; 0x1be <GPIO_pin_direction+0xe8>
    {
        case 'A':
        case 'a':
            if(1 == DIR)
 110:	41 30       	cpi	r20, 0x01	; 1
 112:	69 f4       	brne	.+26     	; 0x12e <GPIO_pin_direction+0x58>
            {
                SET_BIT(DDRA, BIT); //set direction of this pin in port A as output
 114:	2a b3       	in	r18, 0x1a	; 26
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	ac 01       	movw	r20, r24
 11c:	02 c0       	rjmp	.+4      	; 0x122 <GPIO_pin_direction+0x4c>
 11e:	44 0f       	add	r20, r20
 120:	55 1f       	adc	r21, r21
 122:	6a 95       	dec	r22
 124:	e2 f7       	brpl	.-8      	; 0x11e <GPIO_pin_direction+0x48>
 126:	ba 01       	movw	r22, r20
 128:	62 2b       	or	r22, r18
 12a:	6a bb       	out	0x1a, r22	; 26
 12c:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRA, BIT); //set direction of this pin in port A as input
 12e:	2a b3       	in	r18, 0x1a	; 26
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	ac 01       	movw	r20, r24
 136:	02 c0       	rjmp	.+4      	; 0x13c <GPIO_pin_direction+0x66>
 138:	44 0f       	add	r20, r20
 13a:	55 1f       	adc	r21, r21
 13c:	6a 95       	dec	r22
 13e:	e2 f7       	brpl	.-8      	; 0x138 <GPIO_pin_direction+0x62>
 140:	ba 01       	movw	r22, r20
 142:	60 95       	com	r22
 144:	62 23       	and	r22, r18
 146:	6a bb       	out	0x1a, r22	; 26
 148:	08 95       	ret
            }
        break;
        case 'B':
        case 'b':
            if(1 == DIR)
 14a:	41 30       	cpi	r20, 0x01	; 1
 14c:	69 f4       	brne	.+26     	; 0x168 <GPIO_pin_direction+0x92>
            {
                SET_BIT(DDRB, BIT); //set direction of this pin in port B as output
 14e:	27 b3       	in	r18, 0x17	; 23
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	ac 01       	movw	r20, r24
 156:	02 c0       	rjmp	.+4      	; 0x15c <GPIO_pin_direction+0x86>
 158:	44 0f       	add	r20, r20
 15a:	55 1f       	adc	r21, r21
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <GPIO_pin_direction+0x82>
 160:	ba 01       	movw	r22, r20
 162:	62 2b       	or	r22, r18
 164:	67 bb       	out	0x17, r22	; 23
 166:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRB, BIT); //set direction of this pin in port B as input
 168:	27 b3       	in	r18, 0x17	; 23
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	ac 01       	movw	r20, r24
 170:	02 c0       	rjmp	.+4      	; 0x176 <GPIO_pin_direction+0xa0>
 172:	44 0f       	add	r20, r20
 174:	55 1f       	adc	r21, r21
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <GPIO_pin_direction+0x9c>
 17a:	ba 01       	movw	r22, r20
 17c:	60 95       	com	r22
 17e:	62 23       	and	r22, r18
 180:	67 bb       	out	0x17, r22	; 23
 182:	08 95       	ret
            }
        break;
        case 'C':
        case 'c':
            if(1 == DIR)
 184:	41 30       	cpi	r20, 0x01	; 1
 186:	69 f4       	brne	.+26     	; 0x1a2 <GPIO_pin_direction+0xcc>
            {
                SET_BIT(DDRC, BIT); //set direction of this pin in port B as output
 188:	24 b3       	in	r18, 0x14	; 20
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	ac 01       	movw	r20, r24
 190:	02 c0       	rjmp	.+4      	; 0x196 <GPIO_pin_direction+0xc0>
 192:	44 0f       	add	r20, r20
 194:	55 1f       	adc	r21, r21
 196:	6a 95       	dec	r22
 198:	e2 f7       	brpl	.-8      	; 0x192 <GPIO_pin_direction+0xbc>
 19a:	ba 01       	movw	r22, r20
 19c:	62 2b       	or	r22, r18
 19e:	64 bb       	out	0x14, r22	; 20
 1a0:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRC, BIT); //set direction of this pin in port B as input
 1a2:	24 b3       	in	r18, 0x14	; 20
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	ac 01       	movw	r20, r24
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <GPIO_pin_direction+0xda>
 1ac:	44 0f       	add	r20, r20
 1ae:	55 1f       	adc	r21, r21
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <GPIO_pin_direction+0xd6>
 1b4:	ba 01       	movw	r22, r20
 1b6:	60 95       	com	r22
 1b8:	62 23       	and	r22, r18
 1ba:	64 bb       	out	0x14, r22	; 20
 1bc:	08 95       	ret
            }
        break;
        case 'D':
        case 'd':
            if(1 == DIR)
 1be:	41 30       	cpi	r20, 0x01	; 1
 1c0:	69 f4       	brne	.+26     	; 0x1dc <GPIO_pin_direction+0x106>
            {
                SET_BIT(DDRD, BIT); //set direction of this pin in port C as output
 1c2:	21 b3       	in	r18, 0x11	; 17
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	ac 01       	movw	r20, r24
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <GPIO_pin_direction+0xfa>
 1cc:	44 0f       	add	r20, r20
 1ce:	55 1f       	adc	r21, r21
 1d0:	6a 95       	dec	r22
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <GPIO_pin_direction+0xf6>
 1d4:	ba 01       	movw	r22, r20
 1d6:	62 2b       	or	r22, r18
 1d8:	61 bb       	out	0x11, r22	; 17
 1da:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRD, BIT); //set direction of this pin in port C as input
 1dc:	21 b3       	in	r18, 0x11	; 17
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	ac 01       	movw	r20, r24
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <GPIO_pin_direction+0x114>
 1e6:	44 0f       	add	r20, r20
 1e8:	55 1f       	adc	r21, r21
 1ea:	6a 95       	dec	r22
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <GPIO_pin_direction+0x110>
 1ee:	ba 01       	movw	r22, r20
 1f0:	60 95       	com	r22
 1f2:	62 23       	and	r22, r18
 1f4:	61 bb       	out	0x11, r22	; 17
 1f6:	08 95       	ret

000001f8 <GPIO_pin_write>:
} //end of  GPIO_pin_direction();


void GPIO_pin_write(char PORT, uint8 BIT, uint8 DATA)
{
    switch(PORT)
 1f8:	84 34       	cpi	r24, 0x44	; 68
 1fa:	09 f4       	brne	.+2      	; 0x1fe <GPIO_pin_write+0x6>
 1fc:	71 c0       	rjmp	.+226    	; 0x2e0 <GPIO_pin_write+0xe8>
 1fe:	85 34       	cpi	r24, 0x45	; 69
 200:	48 f4       	brcc	.+18     	; 0x214 <GPIO_pin_write+0x1c>
 202:	82 34       	cpi	r24, 0x42	; 66
 204:	99 f1       	breq	.+102    	; 0x26c <GPIO_pin_write+0x74>
 206:	83 34       	cpi	r24, 0x43	; 67
 208:	08 f0       	brcs	.+2      	; 0x20c <GPIO_pin_write+0x14>
 20a:	4d c0       	rjmp	.+154    	; 0x2a6 <GPIO_pin_write+0xae>
 20c:	81 34       	cpi	r24, 0x41	; 65
 20e:	09 f0       	breq	.+2      	; 0x212 <GPIO_pin_write+0x1a>
 210:	83 c0       	rjmp	.+262    	; 0x318 <GPIO_pin_write+0x120>
 212:	0f c0       	rjmp	.+30     	; 0x232 <GPIO_pin_write+0x3a>
 214:	82 36       	cpi	r24, 0x62	; 98
 216:	51 f1       	breq	.+84     	; 0x26c <GPIO_pin_write+0x74>
 218:	83 36       	cpi	r24, 0x63	; 99
 21a:	20 f4       	brcc	.+8      	; 0x224 <GPIO_pin_write+0x2c>
 21c:	81 36       	cpi	r24, 0x61	; 97
 21e:	09 f0       	breq	.+2      	; 0x222 <GPIO_pin_write+0x2a>
 220:	7b c0       	rjmp	.+246    	; 0x318 <GPIO_pin_write+0x120>
 222:	07 c0       	rjmp	.+14     	; 0x232 <GPIO_pin_write+0x3a>
 224:	83 36       	cpi	r24, 0x63	; 99
 226:	09 f4       	brne	.+2      	; 0x22a <GPIO_pin_write+0x32>
 228:	3e c0       	rjmp	.+124    	; 0x2a6 <GPIO_pin_write+0xae>
 22a:	84 36       	cpi	r24, 0x64	; 100
 22c:	09 f0       	breq	.+2      	; 0x230 <GPIO_pin_write+0x38>
 22e:	74 c0       	rjmp	.+232    	; 0x318 <GPIO_pin_write+0x120>
 230:	57 c0       	rjmp	.+174    	; 0x2e0 <GPIO_pin_write+0xe8>
    {
        case 'A':
        case 'a':
            if(1 == DATA)
 232:	41 30       	cpi	r20, 0x01	; 1
 234:	69 f4       	brne	.+26     	; 0x250 <GPIO_pin_write+0x58>
            {
                SET_BIT(PORTA, BIT); //set output value of this pin in port A to 1
 236:	2b b3       	in	r18, 0x1b	; 27
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	ac 01       	movw	r20, r24
 23e:	02 c0       	rjmp	.+4      	; 0x244 <GPIO_pin_write+0x4c>
 240:	44 0f       	add	r20, r20
 242:	55 1f       	adc	r21, r21
 244:	6a 95       	dec	r22
 246:	e2 f7       	brpl	.-8      	; 0x240 <GPIO_pin_write+0x48>
 248:	ba 01       	movw	r22, r20
 24a:	62 2b       	or	r22, r18
 24c:	6b bb       	out	0x1b, r22	; 27
 24e:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTA, BIT); //set output value of this pin in port A to 0
 250:	2b b3       	in	r18, 0x1b	; 27
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	ac 01       	movw	r20, r24
 258:	02 c0       	rjmp	.+4      	; 0x25e <GPIO_pin_write+0x66>
 25a:	44 0f       	add	r20, r20
 25c:	55 1f       	adc	r21, r21
 25e:	6a 95       	dec	r22
 260:	e2 f7       	brpl	.-8      	; 0x25a <GPIO_pin_write+0x62>
 262:	ba 01       	movw	r22, r20
 264:	60 95       	com	r22
 266:	62 23       	and	r22, r18
 268:	6b bb       	out	0x1b, r22	; 27
 26a:	08 95       	ret
            }
        break;
        case 'B':
        case 'b':
            if(1 == DATA)
 26c:	41 30       	cpi	r20, 0x01	; 1
 26e:	69 f4       	brne	.+26     	; 0x28a <GPIO_pin_write+0x92>
            {
                SET_BIT(PORTB, BIT); //set output value of this pin in port B to 1
 270:	28 b3       	in	r18, 0x18	; 24
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	ac 01       	movw	r20, r24
 278:	02 c0       	rjmp	.+4      	; 0x27e <GPIO_pin_write+0x86>
 27a:	44 0f       	add	r20, r20
 27c:	55 1f       	adc	r21, r21
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <GPIO_pin_write+0x82>
 282:	ba 01       	movw	r22, r20
 284:	62 2b       	or	r22, r18
 286:	68 bb       	out	0x18, r22	; 24
 288:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTB, BIT); //set output value of this pin in port B to 0
 28a:	28 b3       	in	r18, 0x18	; 24
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	ac 01       	movw	r20, r24
 292:	02 c0       	rjmp	.+4      	; 0x298 <GPIO_pin_write+0xa0>
 294:	44 0f       	add	r20, r20
 296:	55 1f       	adc	r21, r21
 298:	6a 95       	dec	r22
 29a:	e2 f7       	brpl	.-8      	; 0x294 <GPIO_pin_write+0x9c>
 29c:	ba 01       	movw	r22, r20
 29e:	60 95       	com	r22
 2a0:	62 23       	and	r22, r18
 2a2:	68 bb       	out	0x18, r22	; 24
 2a4:	08 95       	ret
            }
        break;
        case 'C':
        case 'c':
            if(1 == DATA)
 2a6:	41 30       	cpi	r20, 0x01	; 1
 2a8:	69 f4       	brne	.+26     	; 0x2c4 <GPIO_pin_write+0xcc>
            {
                SET_BIT(PORTC, BIT); //set output value of this pin in port C to 1
 2aa:	25 b3       	in	r18, 0x15	; 21
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	ac 01       	movw	r20, r24
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <GPIO_pin_write+0xc0>
 2b4:	44 0f       	add	r20, r20
 2b6:	55 1f       	adc	r21, r21
 2b8:	6a 95       	dec	r22
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <GPIO_pin_write+0xbc>
 2bc:	ba 01       	movw	r22, r20
 2be:	62 2b       	or	r22, r18
 2c0:	65 bb       	out	0x15, r22	; 21
 2c2:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTC, BIT); //set output value of this pin in port C to 0
 2c4:	25 b3       	in	r18, 0x15	; 21
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	ac 01       	movw	r20, r24
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <GPIO_pin_write+0xda>
 2ce:	44 0f       	add	r20, r20
 2d0:	55 1f       	adc	r21, r21
 2d2:	6a 95       	dec	r22
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <GPIO_pin_write+0xd6>
 2d6:	ba 01       	movw	r22, r20
 2d8:	60 95       	com	r22
 2da:	62 23       	and	r22, r18
 2dc:	65 bb       	out	0x15, r22	; 21
 2de:	08 95       	ret
            }
        break;
        case 'D':
        case 'd':
            if(1 == DATA)
 2e0:	41 30       	cpi	r20, 0x01	; 1
 2e2:	69 f4       	brne	.+26     	; 0x2fe <GPIO_pin_write+0x106>
            {
                SET_BIT(PORTD, BIT); //set output value of this pin in port C to 1
 2e4:	22 b3       	in	r18, 0x12	; 18
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	ac 01       	movw	r20, r24
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <GPIO_pin_write+0xfa>
 2ee:	44 0f       	add	r20, r20
 2f0:	55 1f       	adc	r21, r21
 2f2:	6a 95       	dec	r22
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <GPIO_pin_write+0xf6>
 2f6:	ba 01       	movw	r22, r20
 2f8:	62 2b       	or	r22, r18
 2fa:	62 bb       	out	0x12, r22	; 18
 2fc:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTD, BIT); //set output value of this pin in port C to 0
 2fe:	22 b3       	in	r18, 0x12	; 18
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	ac 01       	movw	r20, r24
 306:	02 c0       	rjmp	.+4      	; 0x30c <GPIO_pin_write+0x114>
 308:	44 0f       	add	r20, r20
 30a:	55 1f       	adc	r21, r21
 30c:	6a 95       	dec	r22
 30e:	e2 f7       	brpl	.-8      	; 0x308 <GPIO_pin_write+0x110>
 310:	ba 01       	movw	r22, r20
 312:	60 95       	com	r22
 314:	62 23       	and	r22, r18
 316:	62 bb       	out	0x12, r22	; 18
 318:	08 95       	ret

0000031a <GPIO_pin_read>:


uint8 GPIO_pin_read(char PORT, uint8 BIT)
{
    uint8 read_value = 0;
    switch(PORT)
 31a:	84 34       	cpi	r24, 0x44	; 68
 31c:	99 f1       	breq	.+102    	; 0x384 <GPIO_pin_read+0x6a>
 31e:	85 34       	cpi	r24, 0x45	; 69
 320:	38 f4       	brcc	.+14     	; 0x330 <GPIO_pin_read+0x16>
 322:	82 34       	cpi	r24, 0x42	; 66
 324:	d9 f0       	breq	.+54     	; 0x35c <GPIO_pin_read+0x42>
 326:	83 34       	cpi	r24, 0x43	; 67
 328:	18 f5       	brcc	.+70     	; 0x370 <GPIO_pin_read+0x56>
 32a:	81 34       	cpi	r24, 0x41	; 65
 32c:	a9 f5       	brne	.+106    	; 0x398 <GPIO_pin_read+0x7e>
 32e:	0c c0       	rjmp	.+24     	; 0x348 <GPIO_pin_read+0x2e>
 330:	82 36       	cpi	r24, 0x62	; 98
 332:	a1 f0       	breq	.+40     	; 0x35c <GPIO_pin_read+0x42>
 334:	83 36       	cpi	r24, 0x63	; 99
 336:	18 f4       	brcc	.+6      	; 0x33e <GPIO_pin_read+0x24>
 338:	81 36       	cpi	r24, 0x61	; 97
 33a:	71 f5       	brne	.+92     	; 0x398 <GPIO_pin_read+0x7e>
 33c:	05 c0       	rjmp	.+10     	; 0x348 <GPIO_pin_read+0x2e>
 33e:	83 36       	cpi	r24, 0x63	; 99
 340:	b9 f0       	breq	.+46     	; 0x370 <GPIO_pin_read+0x56>
 342:	84 36       	cpi	r24, 0x64	; 100
 344:	49 f5       	brne	.+82     	; 0x398 <GPIO_pin_read+0x7e>
 346:	1e c0       	rjmp	.+60     	; 0x384 <GPIO_pin_read+0x6a>
    {
        case 'A':
        case 'a':
            read_value = READ_BIT(PINA, BIT); //read value of given pin in port A
 348:	29 b3       	in	r18, 0x19	; 25
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	c9 01       	movw	r24, r18
 34e:	02 c0       	rjmp	.+4      	; 0x354 <GPIO_pin_read+0x3a>
 350:	95 95       	asr	r25
 352:	87 95       	ror	r24
 354:	6a 95       	dec	r22
 356:	e2 f7       	brpl	.-8      	; 0x350 <GPIO_pin_read+0x36>
 358:	81 70       	andi	r24, 0x01	; 1
        break;
 35a:	08 95       	ret
        case 'B':
        case 'b':
            read_value = READ_BIT(PINB, BIT); //read value of given pin in port B
 35c:	26 b3       	in	r18, 0x16	; 22
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	c9 01       	movw	r24, r18
 362:	02 c0       	rjmp	.+4      	; 0x368 <GPIO_pin_read+0x4e>
 364:	95 95       	asr	r25
 366:	87 95       	ror	r24
 368:	6a 95       	dec	r22
 36a:	e2 f7       	brpl	.-8      	; 0x364 <GPIO_pin_read+0x4a>
 36c:	81 70       	andi	r24, 0x01	; 1
        break;
 36e:	08 95       	ret
        case 'C':
        case 'c':
            read_value = READ_BIT(PINC, BIT); //read value of given pin in port C
 370:	23 b3       	in	r18, 0x13	; 19
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	c9 01       	movw	r24, r18
 376:	02 c0       	rjmp	.+4      	; 0x37c <GPIO_pin_read+0x62>
 378:	95 95       	asr	r25
 37a:	87 95       	ror	r24
 37c:	6a 95       	dec	r22
 37e:	e2 f7       	brpl	.-8      	; 0x378 <GPIO_pin_read+0x5e>
 380:	81 70       	andi	r24, 0x01	; 1
        break;
 382:	08 95       	ret
        case 'D':
        case 'd':
            read_value = READ_BIT(PIND, BIT); //read value of given pin in port D
 384:	20 b3       	in	r18, 0x10	; 16
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	c9 01       	movw	r24, r18
 38a:	02 c0       	rjmp	.+4      	; 0x390 <GPIO_pin_read+0x76>
 38c:	95 95       	asr	r25
 38e:	87 95       	ror	r24
 390:	6a 95       	dec	r22
 392:	e2 f7       	brpl	.-8      	; 0x38c <GPIO_pin_read+0x72>
 394:	81 70       	andi	r24, 0x01	; 1
        break;
 396:	08 95       	ret
} // end of GPIO_pin_write();


uint8 GPIO_pin_read(char PORT, uint8 BIT)
{
    uint8 read_value = 0;
 398:	80 e0       	ldi	r24, 0x00	; 0
        break;
        default:
        break;
    } //end of switch(PORT);
    return read_value;
} // end of GPIO_pin_read();
 39a:	08 95       	ret

0000039c <GPIO_pin_toggle>:


void GPIO_pin_toggle(char PORT, uint8 BIT)
{
    switch(PORT)
 39c:	84 34       	cpi	r24, 0x44	; 68
 39e:	09 f4       	brne	.+2      	; 0x3a2 <GPIO_pin_toggle+0x6>
 3a0:	3d c0       	rjmp	.+122    	; 0x41c <GPIO_pin_toggle+0x80>
 3a2:	85 34       	cpi	r24, 0x45	; 69
 3a4:	40 f4       	brcc	.+16     	; 0x3b6 <GPIO_pin_toggle+0x1a>
 3a6:	82 34       	cpi	r24, 0x42	; 66
 3a8:	f9 f0       	breq	.+62     	; 0x3e8 <GPIO_pin_toggle+0x4c>
 3aa:	83 34       	cpi	r24, 0x43	; 67
 3ac:	50 f5       	brcc	.+84     	; 0x402 <GPIO_pin_toggle+0x66>
 3ae:	81 34       	cpi	r24, 0x41	; 65
 3b0:	09 f0       	breq	.+2      	; 0x3b4 <GPIO_pin_toggle+0x18>
 3b2:	40 c0       	rjmp	.+128    	; 0x434 <GPIO_pin_toggle+0x98>
 3b4:	0c c0       	rjmp	.+24     	; 0x3ce <GPIO_pin_toggle+0x32>
 3b6:	82 36       	cpi	r24, 0x62	; 98
 3b8:	b9 f0       	breq	.+46     	; 0x3e8 <GPIO_pin_toggle+0x4c>
 3ba:	83 36       	cpi	r24, 0x63	; 99
 3bc:	18 f4       	brcc	.+6      	; 0x3c4 <GPIO_pin_toggle+0x28>
 3be:	81 36       	cpi	r24, 0x61	; 97
 3c0:	c9 f5       	brne	.+114    	; 0x434 <GPIO_pin_toggle+0x98>
 3c2:	05 c0       	rjmp	.+10     	; 0x3ce <GPIO_pin_toggle+0x32>
 3c4:	83 36       	cpi	r24, 0x63	; 99
 3c6:	e9 f0       	breq	.+58     	; 0x402 <GPIO_pin_toggle+0x66>
 3c8:	84 36       	cpi	r24, 0x64	; 100
 3ca:	a1 f5       	brne	.+104    	; 0x434 <GPIO_pin_toggle+0x98>
 3cc:	27 c0       	rjmp	.+78     	; 0x41c <GPIO_pin_toggle+0x80>
    {
        case 'A':
        case 'a':
            TOG_BIT(PORTA, BIT); //toggle value of given pin in port A
 3ce:	2b b3       	in	r18, 0x1b	; 27
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	ac 01       	movw	r20, r24
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <GPIO_pin_toggle+0x40>
 3d8:	44 0f       	add	r20, r20
 3da:	55 1f       	adc	r21, r21
 3dc:	6a 95       	dec	r22
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <GPIO_pin_toggle+0x3c>
 3e0:	ba 01       	movw	r22, r20
 3e2:	62 27       	eor	r22, r18
 3e4:	6b bb       	out	0x1b, r22	; 27
        break;
 3e6:	08 95       	ret
        case 'B':
        case 'b':
            TOG_BIT(PORTB, BIT); //toggle value of given pin in port B
 3e8:	28 b3       	in	r18, 0x18	; 24
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	ac 01       	movw	r20, r24
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <GPIO_pin_toggle+0x5a>
 3f2:	44 0f       	add	r20, r20
 3f4:	55 1f       	adc	r21, r21
 3f6:	6a 95       	dec	r22
 3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <GPIO_pin_toggle+0x56>
 3fa:	ba 01       	movw	r22, r20
 3fc:	62 27       	eor	r22, r18
 3fe:	68 bb       	out	0x18, r22	; 24
        break;
 400:	08 95       	ret
        case 'C':
        case 'c':
            TOG_BIT(PORTC, BIT); //toggle value of given pin in port C
 402:	25 b3       	in	r18, 0x15	; 21
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	ac 01       	movw	r20, r24
 40a:	02 c0       	rjmp	.+4      	; 0x410 <GPIO_pin_toggle+0x74>
 40c:	44 0f       	add	r20, r20
 40e:	55 1f       	adc	r21, r21
 410:	6a 95       	dec	r22
 412:	e2 f7       	brpl	.-8      	; 0x40c <GPIO_pin_toggle+0x70>
 414:	ba 01       	movw	r22, r20
 416:	62 27       	eor	r22, r18
 418:	65 bb       	out	0x15, r22	; 21
        break;
 41a:	08 95       	ret
        case 'D':
        case 'd':
            TOG_BIT(PORTD, BIT); //toggle value of given pin in port D
 41c:	22 b3       	in	r18, 0x12	; 18
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	ac 01       	movw	r20, r24
 424:	02 c0       	rjmp	.+4      	; 0x42a <GPIO_pin_toggle+0x8e>
 426:	44 0f       	add	r20, r20
 428:	55 1f       	adc	r21, r21
 42a:	6a 95       	dec	r22
 42c:	e2 f7       	brpl	.-8      	; 0x426 <GPIO_pin_toggle+0x8a>
 42e:	ba 01       	movw	r22, r20
 430:	62 27       	eor	r22, r18
 432:	62 bb       	out	0x12, r22	; 18
 434:	08 95       	ret

00000436 <GPIO_port_direction>:
} // end of GPIO_pin_toggle();


void GPIO_port_direction(char PORT, uint8 DIR)
{
    switch(PORT)
 436:	84 34       	cpi	r24, 0x44	; 68
 438:	d9 f0       	breq	.+54     	; 0x470 <GPIO_port_direction+0x3a>
 43a:	85 34       	cpi	r24, 0x45	; 69
 43c:	38 f4       	brcc	.+14     	; 0x44c <GPIO_port_direction+0x16>
 43e:	82 34       	cpi	r24, 0x42	; 66
 440:	99 f0       	breq	.+38     	; 0x468 <GPIO_port_direction+0x32>
 442:	83 34       	cpi	r24, 0x43	; 67
 444:	98 f4       	brcc	.+38     	; 0x46c <GPIO_port_direction+0x36>
 446:	81 34       	cpi	r24, 0x41	; 65
 448:	a1 f4       	brne	.+40     	; 0x472 <GPIO_port_direction+0x3c>
 44a:	0c c0       	rjmp	.+24     	; 0x464 <GPIO_port_direction+0x2e>
 44c:	82 36       	cpi	r24, 0x62	; 98
 44e:	61 f0       	breq	.+24     	; 0x468 <GPIO_port_direction+0x32>
 450:	83 36       	cpi	r24, 0x63	; 99
 452:	18 f4       	brcc	.+6      	; 0x45a <GPIO_port_direction+0x24>
 454:	81 36       	cpi	r24, 0x61	; 97
 456:	69 f4       	brne	.+26     	; 0x472 <GPIO_port_direction+0x3c>
 458:	05 c0       	rjmp	.+10     	; 0x464 <GPIO_port_direction+0x2e>
 45a:	83 36       	cpi	r24, 0x63	; 99
 45c:	39 f0       	breq	.+14     	; 0x46c <GPIO_port_direction+0x36>
 45e:	84 36       	cpi	r24, 0x64	; 100
 460:	41 f4       	brne	.+16     	; 0x472 <GPIO_port_direction+0x3c>
 462:	06 c0       	rjmp	.+12     	; 0x470 <GPIO_port_direction+0x3a>
    {
        case 'A':
        case 'a':
            DDRA = DIR; // set direction of port A to the given DIR
 464:	6a bb       	out	0x1a, r22	; 26
        break;
 466:	08 95       	ret
        case 'B':
        case 'b':
            DDRB = DIR; // set direction of port B to the given DIR
 468:	67 bb       	out	0x17, r22	; 23
        break;
 46a:	08 95       	ret
        case 'C':
        case 'c':
            DDRC = DIR; // set direction of port C to the given DIR
 46c:	64 bb       	out	0x14, r22	; 20
        break;
 46e:	08 95       	ret
        case 'D':
        case 'd':
            DDRD = DIR; // set direction of port D to the given DIR
 470:	61 bb       	out	0x11, r22	; 17
 472:	08 95       	ret

00000474 <GPIO_port_write>:
} // end of GPIO_port_direction();


void GPIO_port_write(char PORT, uint8 DATA)
{
    switch(PORT)
 474:	84 34       	cpi	r24, 0x44	; 68
 476:	d9 f0       	breq	.+54     	; 0x4ae <GPIO_port_write+0x3a>
 478:	85 34       	cpi	r24, 0x45	; 69
 47a:	38 f4       	brcc	.+14     	; 0x48a <GPIO_port_write+0x16>
 47c:	82 34       	cpi	r24, 0x42	; 66
 47e:	99 f0       	breq	.+38     	; 0x4a6 <GPIO_port_write+0x32>
 480:	83 34       	cpi	r24, 0x43	; 67
 482:	98 f4       	brcc	.+38     	; 0x4aa <GPIO_port_write+0x36>
 484:	81 34       	cpi	r24, 0x41	; 65
 486:	a1 f4       	brne	.+40     	; 0x4b0 <GPIO_port_write+0x3c>
 488:	0c c0       	rjmp	.+24     	; 0x4a2 <GPIO_port_write+0x2e>
 48a:	82 36       	cpi	r24, 0x62	; 98
 48c:	61 f0       	breq	.+24     	; 0x4a6 <GPIO_port_write+0x32>
 48e:	83 36       	cpi	r24, 0x63	; 99
 490:	18 f4       	brcc	.+6      	; 0x498 <GPIO_port_write+0x24>
 492:	81 36       	cpi	r24, 0x61	; 97
 494:	69 f4       	brne	.+26     	; 0x4b0 <GPIO_port_write+0x3c>
 496:	05 c0       	rjmp	.+10     	; 0x4a2 <GPIO_port_write+0x2e>
 498:	83 36       	cpi	r24, 0x63	; 99
 49a:	39 f0       	breq	.+14     	; 0x4aa <GPIO_port_write+0x36>
 49c:	84 36       	cpi	r24, 0x64	; 100
 49e:	41 f4       	brne	.+16     	; 0x4b0 <GPIO_port_write+0x3c>
 4a0:	06 c0       	rjmp	.+12     	; 0x4ae <GPIO_port_write+0x3a>
    {
        case 'A':
        case 'a':
            PORTA = DATA; // write these data on port A
 4a2:	6b bb       	out	0x1b, r22	; 27
        break;
 4a4:	08 95       	ret
        case 'B':
        case 'b':
            PORTB = DATA; // write these data on port B
 4a6:	68 bb       	out	0x18, r22	; 24
        break;
 4a8:	08 95       	ret
        case 'C':
        case 'c':
            PORTC = DATA; // write these data on port C
 4aa:	65 bb       	out	0x15, r22	; 21
        break;
 4ac:	08 95       	ret
        case 'D':
        case 'd':
            PORTD = DATA; // write these data on port D
 4ae:	62 bb       	out	0x12, r22	; 18
 4b0:	08 95       	ret

000004b2 <GPIO_port_read>:


uint8 GPIO_port_read(char PORT)
{
    uint8 read_port = 0;
    switch(PORT)
 4b2:	84 34       	cpi	r24, 0x44	; 68
 4b4:	d9 f0       	breq	.+54     	; 0x4ec <GPIO_port_read+0x3a>
 4b6:	85 34       	cpi	r24, 0x45	; 69
 4b8:	38 f4       	brcc	.+14     	; 0x4c8 <GPIO_port_read+0x16>
 4ba:	82 34       	cpi	r24, 0x42	; 66
 4bc:	99 f0       	breq	.+38     	; 0x4e4 <GPIO_port_read+0x32>
 4be:	83 34       	cpi	r24, 0x43	; 67
 4c0:	98 f4       	brcc	.+38     	; 0x4e8 <GPIO_port_read+0x36>
 4c2:	81 34       	cpi	r24, 0x41	; 65
 4c4:	a9 f4       	brne	.+42     	; 0x4f0 <GPIO_port_read+0x3e>
 4c6:	0c c0       	rjmp	.+24     	; 0x4e0 <GPIO_port_read+0x2e>
 4c8:	82 36       	cpi	r24, 0x62	; 98
 4ca:	61 f0       	breq	.+24     	; 0x4e4 <GPIO_port_read+0x32>
 4cc:	83 36       	cpi	r24, 0x63	; 99
 4ce:	18 f4       	brcc	.+6      	; 0x4d6 <GPIO_port_read+0x24>
 4d0:	81 36       	cpi	r24, 0x61	; 97
 4d2:	71 f4       	brne	.+28     	; 0x4f0 <GPIO_port_read+0x3e>
 4d4:	05 c0       	rjmp	.+10     	; 0x4e0 <GPIO_port_read+0x2e>
 4d6:	83 36       	cpi	r24, 0x63	; 99
 4d8:	39 f0       	breq	.+14     	; 0x4e8 <GPIO_port_read+0x36>
 4da:	84 36       	cpi	r24, 0x64	; 100
 4dc:	49 f4       	brne	.+18     	; 0x4f0 <GPIO_port_read+0x3e>
 4de:	06 c0       	rjmp	.+12     	; 0x4ec <GPIO_port_read+0x3a>
    {
        case 'A':
        case 'a':
            read_port = PINA; // read data from port A
 4e0:	89 b3       	in	r24, 0x19	; 25
        break;
 4e2:	08 95       	ret
        case 'B':
        case 'b':
            read_port = PINB; // read data from port B
 4e4:	86 b3       	in	r24, 0x16	; 22
        break;
 4e6:	08 95       	ret
        case 'C':
        case 'c':
            read_port = PINC; // read data from port C
 4e8:	83 b3       	in	r24, 0x13	; 19
        break;
 4ea:	08 95       	ret
        case 'D':
        case 'd':
            read_port = PIND; // read data from port D
 4ec:	80 b3       	in	r24, 0x10	; 16
        break;
 4ee:	08 95       	ret
} // end of GPIO_port_write();


uint8 GPIO_port_read(char PORT)
{
    uint8 read_port = 0;
 4f0:	80 e0       	ldi	r24, 0x00	; 0
        break;
        default:
        break;
    } // end of switch(PORT);
    return read_port;
} // end of GPIO_port_read();
 4f2:	08 95       	ret

000004f4 <GPIO_pin_pull_up>:


void GPIO_pin_pull_up(char port_name, uint8 pin_number)
{
    switch(port_name)
 4f4:	84 34       	cpi	r24, 0x44	; 68
 4f6:	09 f4       	brne	.+2      	; 0x4fa <GPIO_pin_pull_up+0x6>
 4f8:	57 c0       	rjmp	.+174    	; 0x5a8 <GPIO_pin_pull_up+0xb4>
 4fa:	85 34       	cpi	r24, 0x45	; 69
 4fc:	40 f4       	brcc	.+16     	; 0x50e <GPIO_pin_pull_up+0x1a>
 4fe:	82 34       	cpi	r24, 0x42	; 66
 500:	49 f1       	breq	.+82     	; 0x554 <GPIO_pin_pull_up+0x60>
 502:	83 34       	cpi	r24, 0x43	; 67
 504:	e0 f5       	brcc	.+120    	; 0x57e <GPIO_pin_pull_up+0x8a>
 506:	81 34       	cpi	r24, 0x41	; 65
 508:	09 f0       	breq	.+2      	; 0x50c <GPIO_pin_pull_up+0x18>
 50a:	62 c0       	rjmp	.+196    	; 0x5d0 <GPIO_pin_pull_up+0xdc>
 50c:	0e c0       	rjmp	.+28     	; 0x52a <GPIO_pin_pull_up+0x36>
 50e:	82 36       	cpi	r24, 0x62	; 98
 510:	09 f1       	breq	.+66     	; 0x554 <GPIO_pin_pull_up+0x60>
 512:	83 36       	cpi	r24, 0x63	; 99
 514:	20 f4       	brcc	.+8      	; 0x51e <GPIO_pin_pull_up+0x2a>
 516:	81 36       	cpi	r24, 0x61	; 97
 518:	09 f0       	breq	.+2      	; 0x51c <GPIO_pin_pull_up+0x28>
 51a:	5a c0       	rjmp	.+180    	; 0x5d0 <GPIO_pin_pull_up+0xdc>
 51c:	06 c0       	rjmp	.+12     	; 0x52a <GPIO_pin_pull_up+0x36>
 51e:	83 36       	cpi	r24, 0x63	; 99
 520:	71 f1       	breq	.+92     	; 0x57e <GPIO_pin_pull_up+0x8a>
 522:	84 36       	cpi	r24, 0x64	; 100
 524:	09 f0       	breq	.+2      	; 0x528 <GPIO_pin_pull_up+0x34>
 526:	54 c0       	rjmp	.+168    	; 0x5d0 <GPIO_pin_pull_up+0xdc>
 528:	3f c0       	rjmp	.+126    	; 0x5a8 <GPIO_pin_pull_up+0xb4>
    {
        case 'A':
        case 'a':
            CLR_BIT(DDRA,pin_number); //set pin_number of port_name as input
 52a:	2a b3       	in	r18, 0x1a	; 26
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	ac 01       	movw	r20, r24
 532:	02 c0       	rjmp	.+4      	; 0x538 <GPIO_pin_pull_up+0x44>
 534:	44 0f       	add	r20, r20
 536:	55 1f       	adc	r21, r21
 538:	6a 95       	dec	r22
 53a:	e2 f7       	brpl	.-8      	; 0x534 <GPIO_pin_pull_up+0x40>
 53c:	ba 01       	movw	r22, r20
 53e:	84 2f       	mov	r24, r20
 540:	80 95       	com	r24
 542:	82 23       	and	r24, r18
 544:	8a bb       	out	0x1a, r24	; 26
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 546:	80 b7       	in	r24, 0x30	; 48
 548:	8b 7f       	andi	r24, 0xFB	; 251
 54a:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTA,pin_number); //set pin_number of port_name as high value
 54c:	8b b3       	in	r24, 0x1b	; 27
 54e:	68 2b       	or	r22, r24
 550:	6b bb       	out	0x1b, r22	; 27
        break;
 552:	08 95       	ret
        case 'B':
        case 'b':
            CLR_BIT(DDRB,pin_number); //set pin_number of port_name as input
 554:	27 b3       	in	r18, 0x17	; 23
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	ac 01       	movw	r20, r24
 55c:	02 c0       	rjmp	.+4      	; 0x562 <GPIO_pin_pull_up+0x6e>
 55e:	44 0f       	add	r20, r20
 560:	55 1f       	adc	r21, r21
 562:	6a 95       	dec	r22
 564:	e2 f7       	brpl	.-8      	; 0x55e <GPIO_pin_pull_up+0x6a>
 566:	ba 01       	movw	r22, r20
 568:	84 2f       	mov	r24, r20
 56a:	80 95       	com	r24
 56c:	82 23       	and	r24, r18
 56e:	87 bb       	out	0x17, r24	; 23
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 570:	80 b7       	in	r24, 0x30	; 48
 572:	8b 7f       	andi	r24, 0xFB	; 251
 574:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTB,pin_number); //set pin_number of port_name as high value
 576:	88 b3       	in	r24, 0x18	; 24
 578:	68 2b       	or	r22, r24
 57a:	68 bb       	out	0x18, r22	; 24
        break;
 57c:	08 95       	ret
        case 'C':
        case 'c':
            CLR_BIT(DDRC,pin_number); //set pin_number of port_name as input
 57e:	24 b3       	in	r18, 0x14	; 20
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	ac 01       	movw	r20, r24
 586:	02 c0       	rjmp	.+4      	; 0x58c <GPIO_pin_pull_up+0x98>
 588:	44 0f       	add	r20, r20
 58a:	55 1f       	adc	r21, r21
 58c:	6a 95       	dec	r22
 58e:	e2 f7       	brpl	.-8      	; 0x588 <GPIO_pin_pull_up+0x94>
 590:	ba 01       	movw	r22, r20
 592:	84 2f       	mov	r24, r20
 594:	80 95       	com	r24
 596:	82 23       	and	r24, r18
 598:	84 bb       	out	0x14, r24	; 20
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 59a:	80 b7       	in	r24, 0x30	; 48
 59c:	8b 7f       	andi	r24, 0xFB	; 251
 59e:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTC,pin_number); //set pin_number of port_name as high value
 5a0:	85 b3       	in	r24, 0x15	; 21
 5a2:	68 2b       	or	r22, r24
 5a4:	65 bb       	out	0x15, r22	; 21
        break;
 5a6:	08 95       	ret
        case 'D':
        case 'd':
            CLR_BIT(DDRD,pin_number); //set pin_number of port_name as input
 5a8:	21 b3       	in	r18, 0x11	; 17
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	ac 01       	movw	r20, r24
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <GPIO_pin_pull_up+0xc2>
 5b2:	44 0f       	add	r20, r20
 5b4:	55 1f       	adc	r21, r21
 5b6:	6a 95       	dec	r22
 5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <GPIO_pin_pull_up+0xbe>
 5ba:	ba 01       	movw	r22, r20
 5bc:	84 2f       	mov	r24, r20
 5be:	80 95       	com	r24
 5c0:	82 23       	and	r24, r18
 5c2:	81 bb       	out	0x11, r24	; 17
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 5c4:	80 b7       	in	r24, 0x30	; 48
 5c6:	8b 7f       	andi	r24, 0xFB	; 251
 5c8:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTD,pin_number); //set pin_number of port_name as high value
 5ca:	82 b3       	in	r24, 0x12	; 18
 5cc:	68 2b       	or	r22, r24
 5ce:	62 bb       	out	0x12, r22	; 18
 5d0:	08 95       	ret

000005d2 <Button_init>:
#include "button.h"

void Button_init(char port_name, uint8 pin_number)
{
    GPIO_pin_direction(port_name, pin_number, 0);
 5d2:	40 e0       	ldi	r20, 0x00	; 0
 5d4:	0e 94 6b 00 	call	0xd6	; 0xd6 <GPIO_pin_direction>
}
 5d8:	08 95       	ret

000005da <Button_init_with_internal_pull_up>:


void Button_init_with_internal_pull_up(char port_name, uint8 pin_number)
{
    GPIO_pin_pull_up(port_name, pin_number);
 5da:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <GPIO_pin_pull_up>
}
 5de:	08 95       	ret

000005e0 <Button_read>:


uint8 Button_read(char port_name, uint8 pin_number)
{
    uint8 button_status;
    button_status = GPIO_pin_read(port_name, pin_number);
 5e0:	0e 94 8d 01 	call	0x31a	; 0x31a <GPIO_pin_read>
    return button_status;
 5e4:	08 95       	ret

000005e6 <LED_init>:
#include "led.h"

void LED_init(char port_name, uint8 pin_number)
{
    GPIO_pin_direction(port_name, pin_number, 1);
 5e6:	41 e0       	ldi	r20, 0x01	; 1
 5e8:	0e 94 6b 00 	call	0xd6	; 0xd6 <GPIO_pin_direction>
}
 5ec:	08 95       	ret

000005ee <LED_turn_on>:


void LED_turn_on(char port_name, uint8 pin_number)
{
    GPIO_pin_write(port_name, pin_number, 1);
 5ee:	41 e0       	ldi	r20, 0x01	; 1
 5f0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <GPIO_pin_write>
}
 5f4:	08 95       	ret

000005f6 <LED_turn_off>:


void LED_turn_off(char port_name, uint8 pin_number)
{
    GPIO_pin_write(port_name, pin_number, 0);
 5f6:	40 e0       	ldi	r20, 0x00	; 0
 5f8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <GPIO_pin_write>
}
 5fc:	08 95       	ret

000005fe <LED_toggle>:


void LED_toggle(char port_name, uint8 pin_number)
{
    GPIO_pin_toggle(port_name, pin_number);
 5fe:	0e 94 ce 01 	call	0x39c	; 0x39c <GPIO_pin_toggle>
}
 602:	08 95       	ret

00000604 <LED_status>:


uint8 LED_status(char port_name, uint8 pin_number)
{
    return (GPIO_pin_read(port_name, pin_number));
 604:	0e 94 8d 01 	call	0x31a	; 0x31a <GPIO_pin_read>
 608:	08 95       	ret

0000060a <_exit>:
 60a:	f8 94       	cli

0000060c <__stop_program>:
 60c:	ff cf       	rjmp	.-2      	; 0x60c <__stop_program>
