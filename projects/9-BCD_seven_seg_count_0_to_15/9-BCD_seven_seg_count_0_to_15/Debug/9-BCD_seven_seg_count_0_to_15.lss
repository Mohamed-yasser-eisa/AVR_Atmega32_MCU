
9-BCD_seven_seg_count_0_to_15.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  000006d6  0000074a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000774  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  00000ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000860  00000000  00000000  00000f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000285  00000000  00000000  000017e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000052e  00000000  00000000  00001a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000144  00000000  00000000  00001f9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002c6  00000000  00000000  000020e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006c2  00000000  00000000  000023a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ed       	ldi	r30, 0xD6	; 214
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e8       	ldi	r26, 0x8A	; 138
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 38       	cpi	r26, 0x8A	; 138
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
/*============================ end ==============================*/

int main(void)
{
	uint8 counter = 0;
	Seven_seg_BCD_init('c');
  92:	83 e6       	ldi	r24, 0x63	; 99
  94:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Seven_seg_BCD_init>
    while(1)
    {
         for(counter=0; counter<10; ++counter)
  98:	c0 e0       	ldi	r28, 0x00	; 0
  9a:	d0 e0       	ldi	r29, 0x00	; 0
		 {
			 Seven_seg_BCD_write('C', counter);
  9c:	83 e4       	ldi	r24, 0x43	; 67
  9e:	6c 2f       	mov	r22, r28
  a0:	0e 94 02 03 	call	0x604	; 0x604 <Seven_seg_BCD_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	99 e6       	ldi	r25, 0x69	; 105
  a8:	a8 e1       	ldi	r26, 0x18	; 24
  aa:	81 50       	subi	r24, 0x01	; 1
  ac:	90 40       	sbci	r25, 0x00	; 0
  ae:	a0 40       	sbci	r26, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x18>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x22>
  b4:	00 00       	nop
{
	uint8 counter = 0;
	Seven_seg_BCD_init('c');
    while(1)
    {
         for(counter=0; counter<10; ++counter)
  b6:	cf 5f       	subi	r28, 0xFF	; 255
  b8:	ca 30       	cpi	r28, 0x0A	; 10
  ba:	80 f3       	brcs	.-32     	; 0x9c <main+0xa>
  bc:	cd 2f       	mov	r28, r29
  be:	ee cf       	rjmp	.-36     	; 0x9c <main+0xa>

000000c0 <GPIO_pin_direction>:
#include "Atmega_GPIO.h"

void GPIO_pin_direction(char PORT, uint8 BIT, uint8 DIR)
{
    switch(PORT)
  c0:	84 34       	cpi	r24, 0x44	; 68
  c2:	09 f4       	brne	.+2      	; 0xc6 <GPIO_pin_direction+0x6>
  c4:	71 c0       	rjmp	.+226    	; 0x1a8 <GPIO_pin_direction+0xe8>
  c6:	85 34       	cpi	r24, 0x45	; 69
  c8:	48 f4       	brcc	.+18     	; 0xdc <GPIO_pin_direction+0x1c>
  ca:	82 34       	cpi	r24, 0x42	; 66
  cc:	99 f1       	breq	.+102    	; 0x134 <GPIO_pin_direction+0x74>
  ce:	83 34       	cpi	r24, 0x43	; 67
  d0:	08 f0       	brcs	.+2      	; 0xd4 <GPIO_pin_direction+0x14>
  d2:	4d c0       	rjmp	.+154    	; 0x16e <GPIO_pin_direction+0xae>
  d4:	81 34       	cpi	r24, 0x41	; 65
  d6:	09 f0       	breq	.+2      	; 0xda <GPIO_pin_direction+0x1a>
  d8:	83 c0       	rjmp	.+262    	; 0x1e0 <GPIO_pin_direction+0x120>
  da:	0f c0       	rjmp	.+30     	; 0xfa <GPIO_pin_direction+0x3a>
  dc:	82 36       	cpi	r24, 0x62	; 98
  de:	51 f1       	breq	.+84     	; 0x134 <GPIO_pin_direction+0x74>
  e0:	83 36       	cpi	r24, 0x63	; 99
  e2:	20 f4       	brcc	.+8      	; 0xec <GPIO_pin_direction+0x2c>
  e4:	81 36       	cpi	r24, 0x61	; 97
  e6:	09 f0       	breq	.+2      	; 0xea <GPIO_pin_direction+0x2a>
  e8:	7b c0       	rjmp	.+246    	; 0x1e0 <GPIO_pin_direction+0x120>
  ea:	07 c0       	rjmp	.+14     	; 0xfa <GPIO_pin_direction+0x3a>
  ec:	83 36       	cpi	r24, 0x63	; 99
  ee:	09 f4       	brne	.+2      	; 0xf2 <GPIO_pin_direction+0x32>
  f0:	3e c0       	rjmp	.+124    	; 0x16e <GPIO_pin_direction+0xae>
  f2:	84 36       	cpi	r24, 0x64	; 100
  f4:	09 f0       	breq	.+2      	; 0xf8 <GPIO_pin_direction+0x38>
  f6:	74 c0       	rjmp	.+232    	; 0x1e0 <GPIO_pin_direction+0x120>
  f8:	57 c0       	rjmp	.+174    	; 0x1a8 <GPIO_pin_direction+0xe8>
    {
        case 'A':
        case 'a':
            if(1 == DIR)
  fa:	41 30       	cpi	r20, 0x01	; 1
  fc:	69 f4       	brne	.+26     	; 0x118 <GPIO_pin_direction+0x58>
            {
                SET_BIT(DDRA, BIT); //set direction of this pin in port A as output
  fe:	2a b3       	in	r18, 0x1a	; 26
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	ac 01       	movw	r20, r24
 106:	02 c0       	rjmp	.+4      	; 0x10c <GPIO_pin_direction+0x4c>
 108:	44 0f       	add	r20, r20
 10a:	55 1f       	adc	r21, r21
 10c:	6a 95       	dec	r22
 10e:	e2 f7       	brpl	.-8      	; 0x108 <GPIO_pin_direction+0x48>
 110:	ba 01       	movw	r22, r20
 112:	62 2b       	or	r22, r18
 114:	6a bb       	out	0x1a, r22	; 26
 116:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRA, BIT); //set direction of this pin in port A as input
 118:	2a b3       	in	r18, 0x1a	; 26
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	ac 01       	movw	r20, r24
 120:	02 c0       	rjmp	.+4      	; 0x126 <GPIO_pin_direction+0x66>
 122:	44 0f       	add	r20, r20
 124:	55 1f       	adc	r21, r21
 126:	6a 95       	dec	r22
 128:	e2 f7       	brpl	.-8      	; 0x122 <GPIO_pin_direction+0x62>
 12a:	ba 01       	movw	r22, r20
 12c:	60 95       	com	r22
 12e:	62 23       	and	r22, r18
 130:	6a bb       	out	0x1a, r22	; 26
 132:	08 95       	ret
            }
        break;
        case 'B':
        case 'b':
            if(1 == DIR)
 134:	41 30       	cpi	r20, 0x01	; 1
 136:	69 f4       	brne	.+26     	; 0x152 <GPIO_pin_direction+0x92>
            {
                SET_BIT(DDRB, BIT); //set direction of this pin in port B as output
 138:	27 b3       	in	r18, 0x17	; 23
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	ac 01       	movw	r20, r24
 140:	02 c0       	rjmp	.+4      	; 0x146 <GPIO_pin_direction+0x86>
 142:	44 0f       	add	r20, r20
 144:	55 1f       	adc	r21, r21
 146:	6a 95       	dec	r22
 148:	e2 f7       	brpl	.-8      	; 0x142 <GPIO_pin_direction+0x82>
 14a:	ba 01       	movw	r22, r20
 14c:	62 2b       	or	r22, r18
 14e:	67 bb       	out	0x17, r22	; 23
 150:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRB, BIT); //set direction of this pin in port B as input
 152:	27 b3       	in	r18, 0x17	; 23
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	ac 01       	movw	r20, r24
 15a:	02 c0       	rjmp	.+4      	; 0x160 <GPIO_pin_direction+0xa0>
 15c:	44 0f       	add	r20, r20
 15e:	55 1f       	adc	r21, r21
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <GPIO_pin_direction+0x9c>
 164:	ba 01       	movw	r22, r20
 166:	60 95       	com	r22
 168:	62 23       	and	r22, r18
 16a:	67 bb       	out	0x17, r22	; 23
 16c:	08 95       	ret
            }
        break;
        case 'C':
        case 'c':
            if(1 == DIR)
 16e:	41 30       	cpi	r20, 0x01	; 1
 170:	69 f4       	brne	.+26     	; 0x18c <GPIO_pin_direction+0xcc>
            {
                SET_BIT(DDRC, BIT); //set direction of this pin in port B as output
 172:	24 b3       	in	r18, 0x14	; 20
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	ac 01       	movw	r20, r24
 17a:	02 c0       	rjmp	.+4      	; 0x180 <GPIO_pin_direction+0xc0>
 17c:	44 0f       	add	r20, r20
 17e:	55 1f       	adc	r21, r21
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <GPIO_pin_direction+0xbc>
 184:	ba 01       	movw	r22, r20
 186:	62 2b       	or	r22, r18
 188:	64 bb       	out	0x14, r22	; 20
 18a:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRC, BIT); //set direction of this pin in port B as input
 18c:	24 b3       	in	r18, 0x14	; 20
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	ac 01       	movw	r20, r24
 194:	02 c0       	rjmp	.+4      	; 0x19a <GPIO_pin_direction+0xda>
 196:	44 0f       	add	r20, r20
 198:	55 1f       	adc	r21, r21
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <GPIO_pin_direction+0xd6>
 19e:	ba 01       	movw	r22, r20
 1a0:	60 95       	com	r22
 1a2:	62 23       	and	r22, r18
 1a4:	64 bb       	out	0x14, r22	; 20
 1a6:	08 95       	ret
            }
        break;
        case 'D':
        case 'd':
            if(1 == DIR)
 1a8:	41 30       	cpi	r20, 0x01	; 1
 1aa:	69 f4       	brne	.+26     	; 0x1c6 <GPIO_pin_direction+0x106>
            {
                SET_BIT(DDRD, BIT); //set direction of this pin in port C as output
 1ac:	21 b3       	in	r18, 0x11	; 17
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	ac 01       	movw	r20, r24
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <GPIO_pin_direction+0xfa>
 1b6:	44 0f       	add	r20, r20
 1b8:	55 1f       	adc	r21, r21
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <GPIO_pin_direction+0xf6>
 1be:	ba 01       	movw	r22, r20
 1c0:	62 2b       	or	r22, r18
 1c2:	61 bb       	out	0x11, r22	; 17
 1c4:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRD, BIT); //set direction of this pin in port C as input
 1c6:	21 b3       	in	r18, 0x11	; 17
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	ac 01       	movw	r20, r24
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <GPIO_pin_direction+0x114>
 1d0:	44 0f       	add	r20, r20
 1d2:	55 1f       	adc	r21, r21
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <GPIO_pin_direction+0x110>
 1d8:	ba 01       	movw	r22, r20
 1da:	60 95       	com	r22
 1dc:	62 23       	and	r22, r18
 1de:	61 bb       	out	0x11, r22	; 17
 1e0:	08 95       	ret

000001e2 <GPIO_pin_write>:
} //end of  GPIO_pin_direction();


void GPIO_pin_write(char PORT, uint8 BIT, uint8 DATA)
{
    switch(PORT)
 1e2:	84 34       	cpi	r24, 0x44	; 68
 1e4:	09 f4       	brne	.+2      	; 0x1e8 <GPIO_pin_write+0x6>
 1e6:	71 c0       	rjmp	.+226    	; 0x2ca <GPIO_pin_write+0xe8>
 1e8:	85 34       	cpi	r24, 0x45	; 69
 1ea:	48 f4       	brcc	.+18     	; 0x1fe <GPIO_pin_write+0x1c>
 1ec:	82 34       	cpi	r24, 0x42	; 66
 1ee:	99 f1       	breq	.+102    	; 0x256 <GPIO_pin_write+0x74>
 1f0:	83 34       	cpi	r24, 0x43	; 67
 1f2:	08 f0       	brcs	.+2      	; 0x1f6 <GPIO_pin_write+0x14>
 1f4:	4d c0       	rjmp	.+154    	; 0x290 <GPIO_pin_write+0xae>
 1f6:	81 34       	cpi	r24, 0x41	; 65
 1f8:	09 f0       	breq	.+2      	; 0x1fc <GPIO_pin_write+0x1a>
 1fa:	83 c0       	rjmp	.+262    	; 0x302 <GPIO_pin_write+0x120>
 1fc:	0f c0       	rjmp	.+30     	; 0x21c <GPIO_pin_write+0x3a>
 1fe:	82 36       	cpi	r24, 0x62	; 98
 200:	51 f1       	breq	.+84     	; 0x256 <GPIO_pin_write+0x74>
 202:	83 36       	cpi	r24, 0x63	; 99
 204:	20 f4       	brcc	.+8      	; 0x20e <GPIO_pin_write+0x2c>
 206:	81 36       	cpi	r24, 0x61	; 97
 208:	09 f0       	breq	.+2      	; 0x20c <GPIO_pin_write+0x2a>
 20a:	7b c0       	rjmp	.+246    	; 0x302 <GPIO_pin_write+0x120>
 20c:	07 c0       	rjmp	.+14     	; 0x21c <GPIO_pin_write+0x3a>
 20e:	83 36       	cpi	r24, 0x63	; 99
 210:	09 f4       	brne	.+2      	; 0x214 <GPIO_pin_write+0x32>
 212:	3e c0       	rjmp	.+124    	; 0x290 <GPIO_pin_write+0xae>
 214:	84 36       	cpi	r24, 0x64	; 100
 216:	09 f0       	breq	.+2      	; 0x21a <GPIO_pin_write+0x38>
 218:	74 c0       	rjmp	.+232    	; 0x302 <GPIO_pin_write+0x120>
 21a:	57 c0       	rjmp	.+174    	; 0x2ca <GPIO_pin_write+0xe8>
    {
        case 'A':
        case 'a':
            if(1 == DATA)
 21c:	41 30       	cpi	r20, 0x01	; 1
 21e:	69 f4       	brne	.+26     	; 0x23a <GPIO_pin_write+0x58>
            {
                SET_BIT(PORTA, BIT); //set output value of this pin in port A to 1
 220:	2b b3       	in	r18, 0x1b	; 27
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	ac 01       	movw	r20, r24
 228:	02 c0       	rjmp	.+4      	; 0x22e <GPIO_pin_write+0x4c>
 22a:	44 0f       	add	r20, r20
 22c:	55 1f       	adc	r21, r21
 22e:	6a 95       	dec	r22
 230:	e2 f7       	brpl	.-8      	; 0x22a <GPIO_pin_write+0x48>
 232:	ba 01       	movw	r22, r20
 234:	62 2b       	or	r22, r18
 236:	6b bb       	out	0x1b, r22	; 27
 238:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTA, BIT); //set output value of this pin in port A to 0
 23a:	2b b3       	in	r18, 0x1b	; 27
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	ac 01       	movw	r20, r24
 242:	02 c0       	rjmp	.+4      	; 0x248 <GPIO_pin_write+0x66>
 244:	44 0f       	add	r20, r20
 246:	55 1f       	adc	r21, r21
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <GPIO_pin_write+0x62>
 24c:	ba 01       	movw	r22, r20
 24e:	60 95       	com	r22
 250:	62 23       	and	r22, r18
 252:	6b bb       	out	0x1b, r22	; 27
 254:	08 95       	ret
            }
        break;
        case 'B':
        case 'b':
            if(1 == DATA)
 256:	41 30       	cpi	r20, 0x01	; 1
 258:	69 f4       	brne	.+26     	; 0x274 <GPIO_pin_write+0x92>
            {
                SET_BIT(PORTB, BIT); //set output value of this pin in port B to 1
 25a:	28 b3       	in	r18, 0x18	; 24
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	ac 01       	movw	r20, r24
 262:	02 c0       	rjmp	.+4      	; 0x268 <GPIO_pin_write+0x86>
 264:	44 0f       	add	r20, r20
 266:	55 1f       	adc	r21, r21
 268:	6a 95       	dec	r22
 26a:	e2 f7       	brpl	.-8      	; 0x264 <GPIO_pin_write+0x82>
 26c:	ba 01       	movw	r22, r20
 26e:	62 2b       	or	r22, r18
 270:	68 bb       	out	0x18, r22	; 24
 272:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTB, BIT); //set output value of this pin in port B to 0
 274:	28 b3       	in	r18, 0x18	; 24
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	ac 01       	movw	r20, r24
 27c:	02 c0       	rjmp	.+4      	; 0x282 <GPIO_pin_write+0xa0>
 27e:	44 0f       	add	r20, r20
 280:	55 1f       	adc	r21, r21
 282:	6a 95       	dec	r22
 284:	e2 f7       	brpl	.-8      	; 0x27e <GPIO_pin_write+0x9c>
 286:	ba 01       	movw	r22, r20
 288:	60 95       	com	r22
 28a:	62 23       	and	r22, r18
 28c:	68 bb       	out	0x18, r22	; 24
 28e:	08 95       	ret
            }
        break;
        case 'C':
        case 'c':
            if(1 == DATA)
 290:	41 30       	cpi	r20, 0x01	; 1
 292:	69 f4       	brne	.+26     	; 0x2ae <GPIO_pin_write+0xcc>
            {
                SET_BIT(PORTC, BIT); //set output value of this pin in port C to 1
 294:	25 b3       	in	r18, 0x15	; 21
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	ac 01       	movw	r20, r24
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <GPIO_pin_write+0xc0>
 29e:	44 0f       	add	r20, r20
 2a0:	55 1f       	adc	r21, r21
 2a2:	6a 95       	dec	r22
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <GPIO_pin_write+0xbc>
 2a6:	ba 01       	movw	r22, r20
 2a8:	62 2b       	or	r22, r18
 2aa:	65 bb       	out	0x15, r22	; 21
 2ac:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTC, BIT); //set output value of this pin in port C to 0
 2ae:	25 b3       	in	r18, 0x15	; 21
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	ac 01       	movw	r20, r24
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <GPIO_pin_write+0xda>
 2b8:	44 0f       	add	r20, r20
 2ba:	55 1f       	adc	r21, r21
 2bc:	6a 95       	dec	r22
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <GPIO_pin_write+0xd6>
 2c0:	ba 01       	movw	r22, r20
 2c2:	60 95       	com	r22
 2c4:	62 23       	and	r22, r18
 2c6:	65 bb       	out	0x15, r22	; 21
 2c8:	08 95       	ret
            }
        break;
        case 'D':
        case 'd':
            if(1 == DATA)
 2ca:	41 30       	cpi	r20, 0x01	; 1
 2cc:	69 f4       	brne	.+26     	; 0x2e8 <GPIO_pin_write+0x106>
            {
                SET_BIT(PORTD, BIT); //set output value of this pin in port C to 1
 2ce:	22 b3       	in	r18, 0x12	; 18
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	ac 01       	movw	r20, r24
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <GPIO_pin_write+0xfa>
 2d8:	44 0f       	add	r20, r20
 2da:	55 1f       	adc	r21, r21
 2dc:	6a 95       	dec	r22
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <GPIO_pin_write+0xf6>
 2e0:	ba 01       	movw	r22, r20
 2e2:	62 2b       	or	r22, r18
 2e4:	62 bb       	out	0x12, r22	; 18
 2e6:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTD, BIT); //set output value of this pin in port C to 0
 2e8:	22 b3       	in	r18, 0x12	; 18
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	ac 01       	movw	r20, r24
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <GPIO_pin_write+0x114>
 2f2:	44 0f       	add	r20, r20
 2f4:	55 1f       	adc	r21, r21
 2f6:	6a 95       	dec	r22
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <GPIO_pin_write+0x110>
 2fa:	ba 01       	movw	r22, r20
 2fc:	60 95       	com	r22
 2fe:	62 23       	and	r22, r18
 300:	62 bb       	out	0x12, r22	; 18
 302:	08 95       	ret

00000304 <GPIO_pin_read>:


uint8 GPIO_pin_read(char PORT, uint8 BIT)
{
    uint8 read_value = 0;
    switch(PORT)
 304:	84 34       	cpi	r24, 0x44	; 68
 306:	99 f1       	breq	.+102    	; 0x36e <GPIO_pin_read+0x6a>
 308:	85 34       	cpi	r24, 0x45	; 69
 30a:	38 f4       	brcc	.+14     	; 0x31a <GPIO_pin_read+0x16>
 30c:	82 34       	cpi	r24, 0x42	; 66
 30e:	d9 f0       	breq	.+54     	; 0x346 <GPIO_pin_read+0x42>
 310:	83 34       	cpi	r24, 0x43	; 67
 312:	18 f5       	brcc	.+70     	; 0x35a <GPIO_pin_read+0x56>
 314:	81 34       	cpi	r24, 0x41	; 65
 316:	a9 f5       	brne	.+106    	; 0x382 <GPIO_pin_read+0x7e>
 318:	0c c0       	rjmp	.+24     	; 0x332 <GPIO_pin_read+0x2e>
 31a:	82 36       	cpi	r24, 0x62	; 98
 31c:	a1 f0       	breq	.+40     	; 0x346 <GPIO_pin_read+0x42>
 31e:	83 36       	cpi	r24, 0x63	; 99
 320:	18 f4       	brcc	.+6      	; 0x328 <GPIO_pin_read+0x24>
 322:	81 36       	cpi	r24, 0x61	; 97
 324:	71 f5       	brne	.+92     	; 0x382 <GPIO_pin_read+0x7e>
 326:	05 c0       	rjmp	.+10     	; 0x332 <GPIO_pin_read+0x2e>
 328:	83 36       	cpi	r24, 0x63	; 99
 32a:	b9 f0       	breq	.+46     	; 0x35a <GPIO_pin_read+0x56>
 32c:	84 36       	cpi	r24, 0x64	; 100
 32e:	49 f5       	brne	.+82     	; 0x382 <GPIO_pin_read+0x7e>
 330:	1e c0       	rjmp	.+60     	; 0x36e <GPIO_pin_read+0x6a>
    {
        case 'A':
        case 'a':
            read_value = READ_BIT(PINA, BIT); //read value of given pin in port A
 332:	29 b3       	in	r18, 0x19	; 25
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	c9 01       	movw	r24, r18
 338:	02 c0       	rjmp	.+4      	; 0x33e <GPIO_pin_read+0x3a>
 33a:	95 95       	asr	r25
 33c:	87 95       	ror	r24
 33e:	6a 95       	dec	r22
 340:	e2 f7       	brpl	.-8      	; 0x33a <GPIO_pin_read+0x36>
 342:	81 70       	andi	r24, 0x01	; 1
        break;
 344:	08 95       	ret
        case 'B':
        case 'b':
            read_value = READ_BIT(PINB, BIT); //read value of given pin in port B
 346:	26 b3       	in	r18, 0x16	; 22
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	c9 01       	movw	r24, r18
 34c:	02 c0       	rjmp	.+4      	; 0x352 <GPIO_pin_read+0x4e>
 34e:	95 95       	asr	r25
 350:	87 95       	ror	r24
 352:	6a 95       	dec	r22
 354:	e2 f7       	brpl	.-8      	; 0x34e <GPIO_pin_read+0x4a>
 356:	81 70       	andi	r24, 0x01	; 1
        break;
 358:	08 95       	ret
        case 'C':
        case 'c':
            read_value = READ_BIT(PINC, BIT); //read value of given pin in port C
 35a:	23 b3       	in	r18, 0x13	; 19
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	c9 01       	movw	r24, r18
 360:	02 c0       	rjmp	.+4      	; 0x366 <GPIO_pin_read+0x62>
 362:	95 95       	asr	r25
 364:	87 95       	ror	r24
 366:	6a 95       	dec	r22
 368:	e2 f7       	brpl	.-8      	; 0x362 <GPIO_pin_read+0x5e>
 36a:	81 70       	andi	r24, 0x01	; 1
        break;
 36c:	08 95       	ret
        case 'D':
        case 'd':
            read_value = READ_BIT(PIND, BIT); //read value of given pin in port D
 36e:	20 b3       	in	r18, 0x10	; 16
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	c9 01       	movw	r24, r18
 374:	02 c0       	rjmp	.+4      	; 0x37a <GPIO_pin_read+0x76>
 376:	95 95       	asr	r25
 378:	87 95       	ror	r24
 37a:	6a 95       	dec	r22
 37c:	e2 f7       	brpl	.-8      	; 0x376 <GPIO_pin_read+0x72>
 37e:	81 70       	andi	r24, 0x01	; 1
        break;
 380:	08 95       	ret
} // end of GPIO_pin_write();


uint8 GPIO_pin_read(char PORT, uint8 BIT)
{
    uint8 read_value = 0;
 382:	80 e0       	ldi	r24, 0x00	; 0
        break;
        default:
        break;
    } //end of switch(PORT);
    return read_value;
} // end of GPIO_pin_read();
 384:	08 95       	ret

00000386 <GPIO_pin_toggle>:


void GPIO_pin_toggle(char PORT, uint8 BIT)
{
    switch(PORT)
 386:	84 34       	cpi	r24, 0x44	; 68
 388:	09 f4       	brne	.+2      	; 0x38c <GPIO_pin_toggle+0x6>
 38a:	3d c0       	rjmp	.+122    	; 0x406 <GPIO_pin_toggle+0x80>
 38c:	85 34       	cpi	r24, 0x45	; 69
 38e:	40 f4       	brcc	.+16     	; 0x3a0 <GPIO_pin_toggle+0x1a>
 390:	82 34       	cpi	r24, 0x42	; 66
 392:	f9 f0       	breq	.+62     	; 0x3d2 <GPIO_pin_toggle+0x4c>
 394:	83 34       	cpi	r24, 0x43	; 67
 396:	50 f5       	brcc	.+84     	; 0x3ec <GPIO_pin_toggle+0x66>
 398:	81 34       	cpi	r24, 0x41	; 65
 39a:	09 f0       	breq	.+2      	; 0x39e <GPIO_pin_toggle+0x18>
 39c:	40 c0       	rjmp	.+128    	; 0x41e <GPIO_pin_toggle+0x98>
 39e:	0c c0       	rjmp	.+24     	; 0x3b8 <GPIO_pin_toggle+0x32>
 3a0:	82 36       	cpi	r24, 0x62	; 98
 3a2:	b9 f0       	breq	.+46     	; 0x3d2 <GPIO_pin_toggle+0x4c>
 3a4:	83 36       	cpi	r24, 0x63	; 99
 3a6:	18 f4       	brcc	.+6      	; 0x3ae <GPIO_pin_toggle+0x28>
 3a8:	81 36       	cpi	r24, 0x61	; 97
 3aa:	c9 f5       	brne	.+114    	; 0x41e <GPIO_pin_toggle+0x98>
 3ac:	05 c0       	rjmp	.+10     	; 0x3b8 <GPIO_pin_toggle+0x32>
 3ae:	83 36       	cpi	r24, 0x63	; 99
 3b0:	e9 f0       	breq	.+58     	; 0x3ec <GPIO_pin_toggle+0x66>
 3b2:	84 36       	cpi	r24, 0x64	; 100
 3b4:	a1 f5       	brne	.+104    	; 0x41e <GPIO_pin_toggle+0x98>
 3b6:	27 c0       	rjmp	.+78     	; 0x406 <GPIO_pin_toggle+0x80>
    {
        case 'A':
        case 'a':
            TOG_BIT(PORTA, BIT); //toggle value of given pin in port A
 3b8:	2b b3       	in	r18, 0x1b	; 27
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	ac 01       	movw	r20, r24
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <GPIO_pin_toggle+0x40>
 3c2:	44 0f       	add	r20, r20
 3c4:	55 1f       	adc	r21, r21
 3c6:	6a 95       	dec	r22
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <GPIO_pin_toggle+0x3c>
 3ca:	ba 01       	movw	r22, r20
 3cc:	62 27       	eor	r22, r18
 3ce:	6b bb       	out	0x1b, r22	; 27
        break;
 3d0:	08 95       	ret
        case 'B':
        case 'b':
            TOG_BIT(PORTB, BIT); //toggle value of given pin in port B
 3d2:	28 b3       	in	r18, 0x18	; 24
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	ac 01       	movw	r20, r24
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <GPIO_pin_toggle+0x5a>
 3dc:	44 0f       	add	r20, r20
 3de:	55 1f       	adc	r21, r21
 3e0:	6a 95       	dec	r22
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <GPIO_pin_toggle+0x56>
 3e4:	ba 01       	movw	r22, r20
 3e6:	62 27       	eor	r22, r18
 3e8:	68 bb       	out	0x18, r22	; 24
        break;
 3ea:	08 95       	ret
        case 'C':
        case 'c':
            TOG_BIT(PORTC, BIT); //toggle value of given pin in port C
 3ec:	25 b3       	in	r18, 0x15	; 21
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	ac 01       	movw	r20, r24
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <GPIO_pin_toggle+0x74>
 3f6:	44 0f       	add	r20, r20
 3f8:	55 1f       	adc	r21, r21
 3fa:	6a 95       	dec	r22
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <GPIO_pin_toggle+0x70>
 3fe:	ba 01       	movw	r22, r20
 400:	62 27       	eor	r22, r18
 402:	65 bb       	out	0x15, r22	; 21
        break;
 404:	08 95       	ret
        case 'D':
        case 'd':
            TOG_BIT(PORTD, BIT); //toggle value of given pin in port D
 406:	22 b3       	in	r18, 0x12	; 18
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	ac 01       	movw	r20, r24
 40e:	02 c0       	rjmp	.+4      	; 0x414 <GPIO_pin_toggle+0x8e>
 410:	44 0f       	add	r20, r20
 412:	55 1f       	adc	r21, r21
 414:	6a 95       	dec	r22
 416:	e2 f7       	brpl	.-8      	; 0x410 <GPIO_pin_toggle+0x8a>
 418:	ba 01       	movw	r22, r20
 41a:	62 27       	eor	r22, r18
 41c:	62 bb       	out	0x12, r22	; 18
 41e:	08 95       	ret

00000420 <GPIO_port_direction>:
} // end of GPIO_pin_toggle();


void GPIO_port_direction(char PORT, uint8 DIR)
{
    switch(PORT)
 420:	84 34       	cpi	r24, 0x44	; 68
 422:	d9 f0       	breq	.+54     	; 0x45a <GPIO_port_direction+0x3a>
 424:	85 34       	cpi	r24, 0x45	; 69
 426:	38 f4       	brcc	.+14     	; 0x436 <GPIO_port_direction+0x16>
 428:	82 34       	cpi	r24, 0x42	; 66
 42a:	99 f0       	breq	.+38     	; 0x452 <GPIO_port_direction+0x32>
 42c:	83 34       	cpi	r24, 0x43	; 67
 42e:	98 f4       	brcc	.+38     	; 0x456 <GPIO_port_direction+0x36>
 430:	81 34       	cpi	r24, 0x41	; 65
 432:	a1 f4       	brne	.+40     	; 0x45c <GPIO_port_direction+0x3c>
 434:	0c c0       	rjmp	.+24     	; 0x44e <GPIO_port_direction+0x2e>
 436:	82 36       	cpi	r24, 0x62	; 98
 438:	61 f0       	breq	.+24     	; 0x452 <GPIO_port_direction+0x32>
 43a:	83 36       	cpi	r24, 0x63	; 99
 43c:	18 f4       	brcc	.+6      	; 0x444 <GPIO_port_direction+0x24>
 43e:	81 36       	cpi	r24, 0x61	; 97
 440:	69 f4       	brne	.+26     	; 0x45c <GPIO_port_direction+0x3c>
 442:	05 c0       	rjmp	.+10     	; 0x44e <GPIO_port_direction+0x2e>
 444:	83 36       	cpi	r24, 0x63	; 99
 446:	39 f0       	breq	.+14     	; 0x456 <GPIO_port_direction+0x36>
 448:	84 36       	cpi	r24, 0x64	; 100
 44a:	41 f4       	brne	.+16     	; 0x45c <GPIO_port_direction+0x3c>
 44c:	06 c0       	rjmp	.+12     	; 0x45a <GPIO_port_direction+0x3a>
    {
        case 'A':
        case 'a':
            DDRA = DIR; // set direction of port A to the given DIR
 44e:	6a bb       	out	0x1a, r22	; 26
        break;
 450:	08 95       	ret
        case 'B':
        case 'b':
            DDRB = DIR; // set direction of port B to the given DIR
 452:	67 bb       	out	0x17, r22	; 23
        break;
 454:	08 95       	ret
        case 'C':
        case 'c':
            DDRC = DIR; // set direction of port C to the given DIR
 456:	64 bb       	out	0x14, r22	; 20
        break;
 458:	08 95       	ret
        case 'D':
        case 'd':
            DDRD = DIR; // set direction of port D to the given DIR
 45a:	61 bb       	out	0x11, r22	; 17
 45c:	08 95       	ret

0000045e <GPIO_port_write>:
} // end of GPIO_port_direction();


void GPIO_port_write(char PORT, uint8 DATA)
{
    switch(PORT)
 45e:	84 34       	cpi	r24, 0x44	; 68
 460:	d9 f0       	breq	.+54     	; 0x498 <GPIO_port_write+0x3a>
 462:	85 34       	cpi	r24, 0x45	; 69
 464:	38 f4       	brcc	.+14     	; 0x474 <GPIO_port_write+0x16>
 466:	82 34       	cpi	r24, 0x42	; 66
 468:	99 f0       	breq	.+38     	; 0x490 <GPIO_port_write+0x32>
 46a:	83 34       	cpi	r24, 0x43	; 67
 46c:	98 f4       	brcc	.+38     	; 0x494 <GPIO_port_write+0x36>
 46e:	81 34       	cpi	r24, 0x41	; 65
 470:	a1 f4       	brne	.+40     	; 0x49a <GPIO_port_write+0x3c>
 472:	0c c0       	rjmp	.+24     	; 0x48c <GPIO_port_write+0x2e>
 474:	82 36       	cpi	r24, 0x62	; 98
 476:	61 f0       	breq	.+24     	; 0x490 <GPIO_port_write+0x32>
 478:	83 36       	cpi	r24, 0x63	; 99
 47a:	18 f4       	brcc	.+6      	; 0x482 <GPIO_port_write+0x24>
 47c:	81 36       	cpi	r24, 0x61	; 97
 47e:	69 f4       	brne	.+26     	; 0x49a <GPIO_port_write+0x3c>
 480:	05 c0       	rjmp	.+10     	; 0x48c <GPIO_port_write+0x2e>
 482:	83 36       	cpi	r24, 0x63	; 99
 484:	39 f0       	breq	.+14     	; 0x494 <GPIO_port_write+0x36>
 486:	84 36       	cpi	r24, 0x64	; 100
 488:	41 f4       	brne	.+16     	; 0x49a <GPIO_port_write+0x3c>
 48a:	06 c0       	rjmp	.+12     	; 0x498 <GPIO_port_write+0x3a>
    {
        case 'A':
        case 'a':
            PORTA = DATA; // write these data on port A
 48c:	6b bb       	out	0x1b, r22	; 27
        break;
 48e:	08 95       	ret
        case 'B':
        case 'b':
            PORTB = DATA; // write these data on port B
 490:	68 bb       	out	0x18, r22	; 24
        break;
 492:	08 95       	ret
        case 'C':
        case 'c':
            PORTC = DATA; // write these data on port C
 494:	65 bb       	out	0x15, r22	; 21
        break;
 496:	08 95       	ret
        case 'D':
        case 'd':
            PORTD = DATA; // write these data on port D
 498:	62 bb       	out	0x12, r22	; 18
 49a:	08 95       	ret

0000049c <GPIO_port_read>:


uint8 GPIO_port_read(char PORT)
{
    uint8 read_port = 0;
    switch(PORT)
 49c:	84 34       	cpi	r24, 0x44	; 68
 49e:	d9 f0       	breq	.+54     	; 0x4d6 <GPIO_port_read+0x3a>
 4a0:	85 34       	cpi	r24, 0x45	; 69
 4a2:	38 f4       	brcc	.+14     	; 0x4b2 <GPIO_port_read+0x16>
 4a4:	82 34       	cpi	r24, 0x42	; 66
 4a6:	99 f0       	breq	.+38     	; 0x4ce <GPIO_port_read+0x32>
 4a8:	83 34       	cpi	r24, 0x43	; 67
 4aa:	98 f4       	brcc	.+38     	; 0x4d2 <GPIO_port_read+0x36>
 4ac:	81 34       	cpi	r24, 0x41	; 65
 4ae:	a9 f4       	brne	.+42     	; 0x4da <GPIO_port_read+0x3e>
 4b0:	0c c0       	rjmp	.+24     	; 0x4ca <GPIO_port_read+0x2e>
 4b2:	82 36       	cpi	r24, 0x62	; 98
 4b4:	61 f0       	breq	.+24     	; 0x4ce <GPIO_port_read+0x32>
 4b6:	83 36       	cpi	r24, 0x63	; 99
 4b8:	18 f4       	brcc	.+6      	; 0x4c0 <GPIO_port_read+0x24>
 4ba:	81 36       	cpi	r24, 0x61	; 97
 4bc:	71 f4       	brne	.+28     	; 0x4da <GPIO_port_read+0x3e>
 4be:	05 c0       	rjmp	.+10     	; 0x4ca <GPIO_port_read+0x2e>
 4c0:	83 36       	cpi	r24, 0x63	; 99
 4c2:	39 f0       	breq	.+14     	; 0x4d2 <GPIO_port_read+0x36>
 4c4:	84 36       	cpi	r24, 0x64	; 100
 4c6:	49 f4       	brne	.+18     	; 0x4da <GPIO_port_read+0x3e>
 4c8:	06 c0       	rjmp	.+12     	; 0x4d6 <GPIO_port_read+0x3a>
    {
        case 'A':
        case 'a':
            read_port = PINA; // read data from port A
 4ca:	89 b3       	in	r24, 0x19	; 25
        break;
 4cc:	08 95       	ret
        case 'B':
        case 'b':
            read_port = PINB; // read data from port B
 4ce:	86 b3       	in	r24, 0x16	; 22
        break;
 4d0:	08 95       	ret
        case 'C':
        case 'c':
            read_port = PINC; // read data from port C
 4d2:	83 b3       	in	r24, 0x13	; 19
        break;
 4d4:	08 95       	ret
        case 'D':
        case 'd':
            read_port = PIND; // read data from port D
 4d6:	80 b3       	in	r24, 0x10	; 16
        break;
 4d8:	08 95       	ret
} // end of GPIO_port_write();


uint8 GPIO_port_read(char PORT)
{
    uint8 read_port = 0;
 4da:	80 e0       	ldi	r24, 0x00	; 0
        break;
        default:
        break;
    } // end of switch(PORT);
    return read_port;
} // end of GPIO_port_read();
 4dc:	08 95       	ret

000004de <GPIO_pin_pull_up>:


void GPIO_pin_pull_up(char port_name, uint8 pin_number)
{
    switch(port_name)
 4de:	84 34       	cpi	r24, 0x44	; 68
 4e0:	09 f4       	brne	.+2      	; 0x4e4 <GPIO_pin_pull_up+0x6>
 4e2:	57 c0       	rjmp	.+174    	; 0x592 <GPIO_pin_pull_up+0xb4>
 4e4:	85 34       	cpi	r24, 0x45	; 69
 4e6:	40 f4       	brcc	.+16     	; 0x4f8 <GPIO_pin_pull_up+0x1a>
 4e8:	82 34       	cpi	r24, 0x42	; 66
 4ea:	49 f1       	breq	.+82     	; 0x53e <GPIO_pin_pull_up+0x60>
 4ec:	83 34       	cpi	r24, 0x43	; 67
 4ee:	e0 f5       	brcc	.+120    	; 0x568 <GPIO_pin_pull_up+0x8a>
 4f0:	81 34       	cpi	r24, 0x41	; 65
 4f2:	09 f0       	breq	.+2      	; 0x4f6 <GPIO_pin_pull_up+0x18>
 4f4:	62 c0       	rjmp	.+196    	; 0x5ba <GPIO_pin_pull_up+0xdc>
 4f6:	0e c0       	rjmp	.+28     	; 0x514 <GPIO_pin_pull_up+0x36>
 4f8:	82 36       	cpi	r24, 0x62	; 98
 4fa:	09 f1       	breq	.+66     	; 0x53e <GPIO_pin_pull_up+0x60>
 4fc:	83 36       	cpi	r24, 0x63	; 99
 4fe:	20 f4       	brcc	.+8      	; 0x508 <GPIO_pin_pull_up+0x2a>
 500:	81 36       	cpi	r24, 0x61	; 97
 502:	09 f0       	breq	.+2      	; 0x506 <GPIO_pin_pull_up+0x28>
 504:	5a c0       	rjmp	.+180    	; 0x5ba <GPIO_pin_pull_up+0xdc>
 506:	06 c0       	rjmp	.+12     	; 0x514 <GPIO_pin_pull_up+0x36>
 508:	83 36       	cpi	r24, 0x63	; 99
 50a:	71 f1       	breq	.+92     	; 0x568 <GPIO_pin_pull_up+0x8a>
 50c:	84 36       	cpi	r24, 0x64	; 100
 50e:	09 f0       	breq	.+2      	; 0x512 <GPIO_pin_pull_up+0x34>
 510:	54 c0       	rjmp	.+168    	; 0x5ba <GPIO_pin_pull_up+0xdc>
 512:	3f c0       	rjmp	.+126    	; 0x592 <GPIO_pin_pull_up+0xb4>
    {
        case 'A':
        case 'a':
            CLR_BIT(DDRA,pin_number); //set pin_number of port_name as input
 514:	2a b3       	in	r18, 0x1a	; 26
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	ac 01       	movw	r20, r24
 51c:	02 c0       	rjmp	.+4      	; 0x522 <GPIO_pin_pull_up+0x44>
 51e:	44 0f       	add	r20, r20
 520:	55 1f       	adc	r21, r21
 522:	6a 95       	dec	r22
 524:	e2 f7       	brpl	.-8      	; 0x51e <GPIO_pin_pull_up+0x40>
 526:	ba 01       	movw	r22, r20
 528:	84 2f       	mov	r24, r20
 52a:	80 95       	com	r24
 52c:	82 23       	and	r24, r18
 52e:	8a bb       	out	0x1a, r24	; 26
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 530:	80 b7       	in	r24, 0x30	; 48
 532:	8b 7f       	andi	r24, 0xFB	; 251
 534:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTA,pin_number); //set pin_number of port_name as high value
 536:	8b b3       	in	r24, 0x1b	; 27
 538:	68 2b       	or	r22, r24
 53a:	6b bb       	out	0x1b, r22	; 27
        break;
 53c:	08 95       	ret
        case 'B':
        case 'b':
            CLR_BIT(DDRB,pin_number); //set pin_number of port_name as input
 53e:	27 b3       	in	r18, 0x17	; 23
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	ac 01       	movw	r20, r24
 546:	02 c0       	rjmp	.+4      	; 0x54c <GPIO_pin_pull_up+0x6e>
 548:	44 0f       	add	r20, r20
 54a:	55 1f       	adc	r21, r21
 54c:	6a 95       	dec	r22
 54e:	e2 f7       	brpl	.-8      	; 0x548 <GPIO_pin_pull_up+0x6a>
 550:	ba 01       	movw	r22, r20
 552:	84 2f       	mov	r24, r20
 554:	80 95       	com	r24
 556:	82 23       	and	r24, r18
 558:	87 bb       	out	0x17, r24	; 23
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 55a:	80 b7       	in	r24, 0x30	; 48
 55c:	8b 7f       	andi	r24, 0xFB	; 251
 55e:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTB,pin_number); //set pin_number of port_name as high value
 560:	88 b3       	in	r24, 0x18	; 24
 562:	68 2b       	or	r22, r24
 564:	68 bb       	out	0x18, r22	; 24
        break;
 566:	08 95       	ret
        case 'C':
        case 'c':
            CLR_BIT(DDRC,pin_number); //set pin_number of port_name as input
 568:	24 b3       	in	r18, 0x14	; 20
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	ac 01       	movw	r20, r24
 570:	02 c0       	rjmp	.+4      	; 0x576 <GPIO_pin_pull_up+0x98>
 572:	44 0f       	add	r20, r20
 574:	55 1f       	adc	r21, r21
 576:	6a 95       	dec	r22
 578:	e2 f7       	brpl	.-8      	; 0x572 <GPIO_pin_pull_up+0x94>
 57a:	ba 01       	movw	r22, r20
 57c:	84 2f       	mov	r24, r20
 57e:	80 95       	com	r24
 580:	82 23       	and	r24, r18
 582:	84 bb       	out	0x14, r24	; 20
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 584:	80 b7       	in	r24, 0x30	; 48
 586:	8b 7f       	andi	r24, 0xFB	; 251
 588:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTC,pin_number); //set pin_number of port_name as high value
 58a:	85 b3       	in	r24, 0x15	; 21
 58c:	68 2b       	or	r22, r24
 58e:	65 bb       	out	0x15, r22	; 21
        break;
 590:	08 95       	ret
        case 'D':
        case 'd':
            CLR_BIT(DDRD,pin_number); //set pin_number of port_name as input
 592:	21 b3       	in	r18, 0x11	; 17
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	ac 01       	movw	r20, r24
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <GPIO_pin_pull_up+0xc2>
 59c:	44 0f       	add	r20, r20
 59e:	55 1f       	adc	r21, r21
 5a0:	6a 95       	dec	r22
 5a2:	e2 f7       	brpl	.-8      	; 0x59c <GPIO_pin_pull_up+0xbe>
 5a4:	ba 01       	movw	r22, r20
 5a6:	84 2f       	mov	r24, r20
 5a8:	80 95       	com	r24
 5aa:	82 23       	and	r24, r18
 5ac:	81 bb       	out	0x11, r24	; 17
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 5ae:	80 b7       	in	r24, 0x30	; 48
 5b0:	8b 7f       	andi	r24, 0xFB	; 251
 5b2:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTD,pin_number); //set pin_number of port_name as high value
 5b4:	82 b3       	in	r24, 0x12	; 18
 5b6:	68 2b       	or	r22, r24
 5b8:	62 bb       	out	0x12, r22	; 18
 5ba:	08 95       	ret

000005bc <Seven_segment_init>:
#include "seven_segment.h"

void Seven_segment_init(char port_name, uint8 DP_pin)
{
 5bc:	cf 93       	push	r28
 5be:	df 93       	push	r29
 5c0:	d8 2f       	mov	r29, r24
    if(1 == DP_pin)
 5c2:	61 30       	cpi	r22, 0x01	; 1
 5c4:	21 f4       	brne	.+8      	; 0x5ce <Seven_segment_init+0x12>
    {
        GPIO_port_direction(port_name, 0xff); //initialize port_name as output pins with "DP" pin
 5c6:	6f ef       	ldi	r22, 0xFF	; 255
 5c8:	0e 94 10 02 	call	0x420	; 0x420 <GPIO_port_direction>
 5cc:	09 c0       	rjmp	.+18     	; 0x5e0 <Seven_segment_init+0x24>
#include "seven_segment.h"

void Seven_segment_init(char port_name, uint8 DP_pin)
{
    if(1 == DP_pin)
 5ce:	c0 e0       	ldi	r28, 0x00	; 0
    else
    {
        uint8 counter = 0;
        for(counter=0; counter<7; ++counter)
        {
            GPIO_pin_direction(port_name,counter,1);
 5d0:	8d 2f       	mov	r24, r29
 5d2:	6c 2f       	mov	r22, r28
 5d4:	41 e0       	ldi	r20, 0x01	; 1
 5d6:	0e 94 60 00 	call	0xc0	; 0xc0 <GPIO_pin_direction>
        GPIO_port_direction(port_name, 0xff); //initialize port_name as output pins with "DP" pin
    }
    else
    {
        uint8 counter = 0;
        for(counter=0; counter<7; ++counter)
 5da:	cf 5f       	subi	r28, 0xFF	; 255
 5dc:	c7 30       	cpi	r28, 0x07	; 7
 5de:	c1 f7       	brne	.-16     	; 0x5d0 <Seven_segment_init+0x14>
        {
            GPIO_pin_direction(port_name,counter,1);
        }
    }
}
 5e0:	df 91       	pop	r29
 5e2:	cf 91       	pop	r28
 5e4:	08 95       	ret

000005e6 <Seven_seg_BCD_init>:


void Seven_seg_BCD_init(char port_name)
{
 5e6:	cf 93       	push	r28
 5e8:	df 93       	push	r29
 5ea:	d8 2f       	mov	r29, r24
    uint8 counter = 0;
        for(counter=0; counter<4; ++counter)
 5ec:	c0 e0       	ldi	r28, 0x00	; 0
        {
            GPIO_pin_direction(port_name,counter,1);//initialize 4 pins from port_name as output pins
 5ee:	8d 2f       	mov	r24, r29
 5f0:	6c 2f       	mov	r22, r28
 5f2:	41 e0       	ldi	r20, 0x01	; 1
 5f4:	0e 94 60 00 	call	0xc0	; 0xc0 <GPIO_pin_direction>


void Seven_seg_BCD_init(char port_name)
{
    uint8 counter = 0;
        for(counter=0; counter<4; ++counter)
 5f8:	cf 5f       	subi	r28, 0xFF	; 255
 5fa:	c4 30       	cpi	r28, 0x04	; 4
 5fc:	c1 f7       	brne	.-16     	; 0x5ee <Seven_seg_BCD_init+0x8>
        {
            GPIO_pin_direction(port_name,counter,1);//initialize 4 pins from port_name as output pins
        }
}
 5fe:	df 91       	pop	r29
 600:	cf 91       	pop	r28
 602:	08 95       	ret

00000604 <Seven_seg_BCD_write>:


void Seven_seg_BCD_write(char port_name, uint8 number)
{
 604:	cf 93       	push	r28
 606:	df 93       	push	r29
 608:	cd b7       	in	r28, 0x3d	; 61
 60a:	de b7       	in	r29, 0x3e	; 62
 60c:	2a 97       	sbiw	r28, 0x0a	; 10
 60e:	0f b6       	in	r0, 0x3f	; 63
 610:	f8 94       	cli
 612:	de bf       	out	0x3e, r29	; 62
 614:	0f be       	out	0x3f, r0	; 63
 616:	cd bf       	out	0x3d, r28	; 61
    uint8 cAnode_hex[] = {0x00,0x1,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09}; //{0,1,2,3,4,5,6,7,8,9}
 618:	de 01       	movw	r26, r28
 61a:	11 96       	adiw	r26, 0x01	; 1
 61c:	e0 e6       	ldi	r30, 0x60	; 96
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	9a e0       	ldi	r25, 0x0A	; 10
 622:	01 90       	ld	r0, Z+
 624:	0d 92       	st	X+, r0
 626:	91 50       	subi	r25, 0x01	; 1
 628:	e1 f7       	brne	.-8      	; 0x622 <Seven_seg_BCD_write+0x1e>
    GPIO_port_write(port_name, cAnode_hex[number]);
 62a:	fe 01       	movw	r30, r28
 62c:	e6 0f       	add	r30, r22
 62e:	f1 1d       	adc	r31, r1
 630:	61 81       	ldd	r22, Z+1	; 0x01
 632:	0e 94 2f 02 	call	0x45e	; 0x45e <GPIO_port_write>
}
 636:	2a 96       	adiw	r28, 0x0a	; 10
 638:	0f b6       	in	r0, 0x3f	; 63
 63a:	f8 94       	cli
 63c:	de bf       	out	0x3e, r29	; 62
 63e:	0f be       	out	0x3f, r0	; 63
 640:	cd bf       	out	0x3d, r28	; 61
 642:	df 91       	pop	r29
 644:	cf 91       	pop	r28
 646:	08 95       	ret

00000648 <Seven_segment_write>:




void Seven_segment_write(char port_name, uint8 number, uint8 DP_pin, uint8 common_anod)
{
 648:	cf 93       	push	r28
 64a:	df 93       	push	r29
 64c:	cd b7       	in	r28, 0x3d	; 61
 64e:	de b7       	in	r29, 0x3e	; 62
 650:	60 97       	sbiw	r28, 0x10	; 16
 652:	0f b6       	in	r0, 0x3f	; 63
 654:	f8 94       	cli
 656:	de bf       	out	0x3e, r29	; 62
 658:	0f be       	out	0x3f, r0	; 63
 65a:	cd bf       	out	0x3d, r28	; 61
    if(1 == common_anod) //Is the connected display a common anode?
 65c:	21 30       	cpi	r18, 0x01	; 1
 65e:	c9 f4       	brne	.+50     	; 0x692 <Seven_segment_write+0x4a>
    {
        uint8 cAnode_hex[] = {0x40,0x79,0x24,0x30,0x19,0x12,0x02,0x38,0x00,0x10,0x08,0x00,0x46,0x40,0x06,0x0e}; //{0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F}
 660:	de 01       	movw	r26, r28
 662:	11 96       	adiw	r26, 0x01	; 1
 664:	ea e6       	ldi	r30, 0x6A	; 106
 666:	f0 e0       	ldi	r31, 0x00	; 0
 668:	90 e1       	ldi	r25, 0x10	; 16
 66a:	01 90       	ld	r0, Z+
 66c:	0d 92       	st	X+, r0
 66e:	91 50       	subi	r25, 0x01	; 1
 670:	e1 f7       	brne	.-8      	; 0x66a <Seven_segment_write+0x22>
        if(1 == DP_pin) //turn on the digit LED
 672:	41 30       	cpi	r20, 0x01	; 1
 674:	31 f4       	brne	.+12     	; 0x682 <Seven_segment_write+0x3a>
        {
            number = ( (cAnode_hex[number]) & (~(1<<7)) );
 676:	fe 01       	movw	r30, r28
 678:	e6 0f       	add	r30, r22
 67a:	f1 1d       	adc	r31, r1
 67c:	61 81       	ldd	r22, Z+1	; 0x01
 67e:	6f 77       	andi	r22, 0x7F	; 127
 680:	05 c0       	rjmp	.+10     	; 0x68c <Seven_segment_write+0x44>
        }
        else
        {
            number = ( (cAnode_hex[number]) | (1<<7) );
 682:	fe 01       	movw	r30, r28
 684:	e6 0f       	add	r30, r22
 686:	f1 1d       	adc	r31, r1
 688:	61 81       	ldd	r22, Z+1	; 0x01
 68a:	60 68       	ori	r22, 0x80	; 128
        }
        GPIO_port_write(port_name, number);
 68c:	0e 94 2f 02 	call	0x45e	; 0x45e <GPIO_port_write>
 690:	17 c0       	rjmp	.+46     	; 0x6c0 <Seven_segment_write+0x78>
    }
    else
    {
        uint8 cCathode_hex[] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x47,0x7f,0x6f,0x77,0x7f,0x39,0x3f,0x79,0x71}; //{0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F}
 692:	de 01       	movw	r26, r28
 694:	11 96       	adiw	r26, 0x01	; 1
 696:	ea e7       	ldi	r30, 0x7A	; 122
 698:	f0 e0       	ldi	r31, 0x00	; 0
 69a:	90 e1       	ldi	r25, 0x10	; 16
 69c:	01 90       	ld	r0, Z+
 69e:	0d 92       	st	X+, r0
 6a0:	91 50       	subi	r25, 0x01	; 1
 6a2:	e1 f7       	brne	.-8      	; 0x69c <Seven_segment_write+0x54>
        if(1 == DP_pin) //turn on the digit LED
 6a4:	41 30       	cpi	r20, 0x01	; 1
 6a6:	31 f4       	brne	.+12     	; 0x6b4 <Seven_segment_write+0x6c>
        {
            number = ( (cCathode_hex[number]) | (DP_pin<<7) );
 6a8:	fe 01       	movw	r30, r28
 6aa:	e6 0f       	add	r30, r22
 6ac:	f1 1d       	adc	r31, r1
 6ae:	61 81       	ldd	r22, Z+1	; 0x01
 6b0:	60 68       	ori	r22, 0x80	; 128
 6b2:	04 c0       	rjmp	.+8      	; 0x6bc <Seven_segment_write+0x74>
        }
        else
        {
            number = cCathode_hex[number];
 6b4:	fe 01       	movw	r30, r28
 6b6:	e6 0f       	add	r30, r22
 6b8:	f1 1d       	adc	r31, r1
 6ba:	61 81       	ldd	r22, Z+1	; 0x01
        }
        GPIO_port_write(port_name, number);
 6bc:	0e 94 2f 02 	call	0x45e	; 0x45e <GPIO_port_write>
    }
}
 6c0:	60 96       	adiw	r28, 0x10	; 16
 6c2:	0f b6       	in	r0, 0x3f	; 63
 6c4:	f8 94       	cli
 6c6:	de bf       	out	0x3e, r29	; 62
 6c8:	0f be       	out	0x3f, r0	; 63
 6ca:	cd bf       	out	0x3d, r28	; 61
 6cc:	df 91       	pop	r29
 6ce:	cf 91       	pop	r28
 6d0:	08 95       	ret

000006d2 <_exit>:
 6d2:	f8 94       	cli

000006d4 <__stop_program>:
 6d4:	ff cf       	rjmp	.-2      	; 0x6d4 <__stop_program>
