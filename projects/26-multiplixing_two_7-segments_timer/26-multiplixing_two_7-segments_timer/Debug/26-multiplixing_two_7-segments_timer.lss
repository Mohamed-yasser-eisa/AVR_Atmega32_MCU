
26-multiplixing_two_7-segments_timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000856  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00000856  000008ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080008a  0080008a  00000914  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000914  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00001068  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a18  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002ce  00000000  00000000  00001b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000062c  00000000  00000000  00001e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  0000247c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f8  00000000  00000000  00002624  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007d9  00000000  00000000  0000291c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e8       	ldi	r26, 0x8A	; 138
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 38       	cpi	r26, 0x8C	; 140
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 29 04 	jmp	0x852	; 0x852 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:


int main(void)
{
	uint8 number = 0;
	Seven_segment_init('A',0);
  92:	81 e4       	ldi	r24, 0x41	; 65
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <Seven_segment_init>
	timer0_ctc_init();
  9a:	0e 94 07 04 	call	0x80e	; 0x80e <timer0_ctc_init>



int main(void)
{
	uint8 number = 0;
  9e:	c0 e0       	ldi	r28, 0x00	; 0
		}
		else
		{
			CLR_BIT(PORTB,0);
			SET_BIT(PORTB,1);
			Seven_segment_write('A', (number%10),0,1);
  a0:	da e0       	ldi	r29, 0x0A	; 10
	Seven_segment_init('A',0);
	timer0_ctc_init();
	
    while(1)
    {
        if (seconds >= 31)
  a2:	80 91 8b 00 	lds	r24, 0x008B
  a6:	8f 31       	cpi	r24, 0x1F	; 31
  a8:	18 f0       	brcs	.+6      	; 0xb0 <main+0x1e>
        {
			seconds = 0;
  aa:	10 92 8b 00 	sts	0x008B, r1
			number ++;
  ae:	cf 5f       	subi	r28, 0xFF	; 255
        }
		if (100 == number)
  b0:	c4 36       	cpi	r28, 0x64	; 100
  b2:	09 f4       	brne	.+2      	; 0xb6 <main+0x24>
		{
			number = 0;
  b4:	c0 e0       	ldi	r28, 0x00	; 0
		}
		if ( (counter % 2) == 0 )
  b6:	80 91 8a 00 	lds	r24, 0x008A
  ba:	80 fd       	sbrc	r24, 0
  bc:	0d c0       	rjmp	.+26     	; 0xd8 <main+0x46>
		{
			CLR_BIT(PORTB,1);
  be:	c1 98       	cbi	0x18, 1	; 24
			SET_BIT(PORTB,0);
  c0:	c0 9a       	sbi	0x18, 0	; 24
			Seven_segment_write('A', (number/10),0,1);
  c2:	8c 2f       	mov	r24, r28
  c4:	6d 2f       	mov	r22, r29
  c6:	0e 94 1d 04 	call	0x83a	; 0x83a <__udivmodqi4>
  ca:	68 2f       	mov	r22, r24
  cc:	81 e4       	ldi	r24, 0x41	; 65
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	0e 94 c2 03 	call	0x784	; 0x784 <Seven_segment_write>
  d6:	0c c0       	rjmp	.+24     	; 0xf0 <main+0x5e>
		}
		else
		{
			CLR_BIT(PORTB,0);
  d8:	c0 98       	cbi	0x18, 0	; 24
			SET_BIT(PORTB,1);
  da:	c1 9a       	sbi	0x18, 1	; 24
			Seven_segment_write('A', (number%10),0,1);
  dc:	8c 2f       	mov	r24, r28
  de:	6d 2f       	mov	r22, r29
  e0:	0e 94 1d 04 	call	0x83a	; 0x83a <__udivmodqi4>
  e4:	81 e4       	ldi	r24, 0x41	; 65
  e6:	69 2f       	mov	r22, r25
  e8:	40 e0       	ldi	r20, 0x00	; 0
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	0e 94 c2 03 	call	0x784	; 0x784 <Seven_segment_write>
		}
		if (counter >= 100)
  f0:	80 91 8a 00 	lds	r24, 0x008A
  f4:	84 36       	cpi	r24, 0x64	; 100
  f6:	a8 f2       	brcs	.-86     	; 0xa2 <main+0x10>
		{
			counter = 0;
  f8:	10 92 8a 00 	sts	0x008A, r1
  fc:	d2 cf       	rjmp	.-92     	; 0xa2 <main+0x10>

000000fe <__vector_10>:
		}
    }
}

ISR(TIMER0_COMP_vect)
{
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	8f 93       	push	r24
	counter++;
 10a:	80 91 8a 00 	lds	r24, 0x008A
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	80 93 8a 00 	sts	0x008A, r24
	seconds++;
 114:	80 91 8b 00 	lds	r24, 0x008B
 118:	8f 5f       	subi	r24, 0xFF	; 255
 11a:	80 93 8b 00 	sts	0x008B, r24
 11e:	8f 91       	pop	r24
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <GPIO_pin_direction>:
#include "Atmega_GPIO.h"

void GPIO_pin_direction(char PORT, uint8 BIT, uint8 DIR)
{
    switch(PORT)
 12a:	84 34       	cpi	r24, 0x44	; 68
 12c:	09 f4       	brne	.+2      	; 0x130 <GPIO_pin_direction+0x6>
 12e:	71 c0       	rjmp	.+226    	; 0x212 <GPIO_pin_direction+0xe8>
 130:	85 34       	cpi	r24, 0x45	; 69
 132:	48 f4       	brcc	.+18     	; 0x146 <GPIO_pin_direction+0x1c>
 134:	82 34       	cpi	r24, 0x42	; 66
 136:	99 f1       	breq	.+102    	; 0x19e <GPIO_pin_direction+0x74>
 138:	83 34       	cpi	r24, 0x43	; 67
 13a:	08 f0       	brcs	.+2      	; 0x13e <GPIO_pin_direction+0x14>
 13c:	4d c0       	rjmp	.+154    	; 0x1d8 <GPIO_pin_direction+0xae>
 13e:	81 34       	cpi	r24, 0x41	; 65
 140:	09 f0       	breq	.+2      	; 0x144 <GPIO_pin_direction+0x1a>
 142:	83 c0       	rjmp	.+262    	; 0x24a <GPIO_pin_direction+0x120>
 144:	0f c0       	rjmp	.+30     	; 0x164 <GPIO_pin_direction+0x3a>
 146:	82 36       	cpi	r24, 0x62	; 98
 148:	51 f1       	breq	.+84     	; 0x19e <GPIO_pin_direction+0x74>
 14a:	83 36       	cpi	r24, 0x63	; 99
 14c:	20 f4       	brcc	.+8      	; 0x156 <GPIO_pin_direction+0x2c>
 14e:	81 36       	cpi	r24, 0x61	; 97
 150:	09 f0       	breq	.+2      	; 0x154 <GPIO_pin_direction+0x2a>
 152:	7b c0       	rjmp	.+246    	; 0x24a <GPIO_pin_direction+0x120>
 154:	07 c0       	rjmp	.+14     	; 0x164 <GPIO_pin_direction+0x3a>
 156:	83 36       	cpi	r24, 0x63	; 99
 158:	09 f4       	brne	.+2      	; 0x15c <GPIO_pin_direction+0x32>
 15a:	3e c0       	rjmp	.+124    	; 0x1d8 <GPIO_pin_direction+0xae>
 15c:	84 36       	cpi	r24, 0x64	; 100
 15e:	09 f0       	breq	.+2      	; 0x162 <GPIO_pin_direction+0x38>
 160:	74 c0       	rjmp	.+232    	; 0x24a <GPIO_pin_direction+0x120>
 162:	57 c0       	rjmp	.+174    	; 0x212 <GPIO_pin_direction+0xe8>
    {
        case 'A':
        case 'a':
            if(1 == DIR)
 164:	41 30       	cpi	r20, 0x01	; 1
 166:	69 f4       	brne	.+26     	; 0x182 <GPIO_pin_direction+0x58>
            {
                SET_BIT(DDRA, BIT); //set direction of this pin in port A as output
 168:	2a b3       	in	r18, 0x1a	; 26
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	ac 01       	movw	r20, r24
 170:	02 c0       	rjmp	.+4      	; 0x176 <GPIO_pin_direction+0x4c>
 172:	44 0f       	add	r20, r20
 174:	55 1f       	adc	r21, r21
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <GPIO_pin_direction+0x48>
 17a:	ba 01       	movw	r22, r20
 17c:	62 2b       	or	r22, r18
 17e:	6a bb       	out	0x1a, r22	; 26
 180:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRA, BIT); //set direction of this pin in port A as input
 182:	2a b3       	in	r18, 0x1a	; 26
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	ac 01       	movw	r20, r24
 18a:	02 c0       	rjmp	.+4      	; 0x190 <GPIO_pin_direction+0x66>
 18c:	44 0f       	add	r20, r20
 18e:	55 1f       	adc	r21, r21
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <GPIO_pin_direction+0x62>
 194:	ba 01       	movw	r22, r20
 196:	60 95       	com	r22
 198:	62 23       	and	r22, r18
 19a:	6a bb       	out	0x1a, r22	; 26
 19c:	08 95       	ret
            }
        break;
        case 'B':
        case 'b':
            if(1 == DIR)
 19e:	41 30       	cpi	r20, 0x01	; 1
 1a0:	69 f4       	brne	.+26     	; 0x1bc <GPIO_pin_direction+0x92>
            {
                SET_BIT(DDRB, BIT); //set direction of this pin in port B as output
 1a2:	27 b3       	in	r18, 0x17	; 23
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	ac 01       	movw	r20, r24
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <GPIO_pin_direction+0x86>
 1ac:	44 0f       	add	r20, r20
 1ae:	55 1f       	adc	r21, r21
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <GPIO_pin_direction+0x82>
 1b4:	ba 01       	movw	r22, r20
 1b6:	62 2b       	or	r22, r18
 1b8:	67 bb       	out	0x17, r22	; 23
 1ba:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRB, BIT); //set direction of this pin in port B as input
 1bc:	27 b3       	in	r18, 0x17	; 23
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	ac 01       	movw	r20, r24
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <GPIO_pin_direction+0xa0>
 1c6:	44 0f       	add	r20, r20
 1c8:	55 1f       	adc	r21, r21
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <GPIO_pin_direction+0x9c>
 1ce:	ba 01       	movw	r22, r20
 1d0:	60 95       	com	r22
 1d2:	62 23       	and	r22, r18
 1d4:	67 bb       	out	0x17, r22	; 23
 1d6:	08 95       	ret
            }
        break;
        case 'C':
        case 'c':
            if(1 == DIR)
 1d8:	41 30       	cpi	r20, 0x01	; 1
 1da:	69 f4       	brne	.+26     	; 0x1f6 <GPIO_pin_direction+0xcc>
            {
                SET_BIT(DDRC, BIT); //set direction of this pin in port B as output
 1dc:	24 b3       	in	r18, 0x14	; 20
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	ac 01       	movw	r20, r24
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <GPIO_pin_direction+0xc0>
 1e6:	44 0f       	add	r20, r20
 1e8:	55 1f       	adc	r21, r21
 1ea:	6a 95       	dec	r22
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <GPIO_pin_direction+0xbc>
 1ee:	ba 01       	movw	r22, r20
 1f0:	62 2b       	or	r22, r18
 1f2:	64 bb       	out	0x14, r22	; 20
 1f4:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRC, BIT); //set direction of this pin in port B as input
 1f6:	24 b3       	in	r18, 0x14	; 20
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	ac 01       	movw	r20, r24
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <GPIO_pin_direction+0xda>
 200:	44 0f       	add	r20, r20
 202:	55 1f       	adc	r21, r21
 204:	6a 95       	dec	r22
 206:	e2 f7       	brpl	.-8      	; 0x200 <GPIO_pin_direction+0xd6>
 208:	ba 01       	movw	r22, r20
 20a:	60 95       	com	r22
 20c:	62 23       	and	r22, r18
 20e:	64 bb       	out	0x14, r22	; 20
 210:	08 95       	ret
            }
        break;
        case 'D':
        case 'd':
            if(1 == DIR)
 212:	41 30       	cpi	r20, 0x01	; 1
 214:	69 f4       	brne	.+26     	; 0x230 <GPIO_pin_direction+0x106>
            {
                SET_BIT(DDRD, BIT); //set direction of this pin in port C as output
 216:	21 b3       	in	r18, 0x11	; 17
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	ac 01       	movw	r20, r24
 21e:	02 c0       	rjmp	.+4      	; 0x224 <GPIO_pin_direction+0xfa>
 220:	44 0f       	add	r20, r20
 222:	55 1f       	adc	r21, r21
 224:	6a 95       	dec	r22
 226:	e2 f7       	brpl	.-8      	; 0x220 <GPIO_pin_direction+0xf6>
 228:	ba 01       	movw	r22, r20
 22a:	62 2b       	or	r22, r18
 22c:	61 bb       	out	0x11, r22	; 17
 22e:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRD, BIT); //set direction of this pin in port C as input
 230:	21 b3       	in	r18, 0x11	; 17
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	ac 01       	movw	r20, r24
 238:	02 c0       	rjmp	.+4      	; 0x23e <GPIO_pin_direction+0x114>
 23a:	44 0f       	add	r20, r20
 23c:	55 1f       	adc	r21, r21
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <GPIO_pin_direction+0x110>
 242:	ba 01       	movw	r22, r20
 244:	60 95       	com	r22
 246:	62 23       	and	r22, r18
 248:	61 bb       	out	0x11, r22	; 17
 24a:	08 95       	ret

0000024c <GPIO_pin_write>:
} //end of  GPIO_pin_direction();


void GPIO_pin_write(char PORT, uint8 BIT, uint8 DATA)
{
    switch(PORT)
 24c:	84 34       	cpi	r24, 0x44	; 68
 24e:	09 f4       	brne	.+2      	; 0x252 <GPIO_pin_write+0x6>
 250:	71 c0       	rjmp	.+226    	; 0x334 <GPIO_pin_write+0xe8>
 252:	85 34       	cpi	r24, 0x45	; 69
 254:	48 f4       	brcc	.+18     	; 0x268 <GPIO_pin_write+0x1c>
 256:	82 34       	cpi	r24, 0x42	; 66
 258:	99 f1       	breq	.+102    	; 0x2c0 <GPIO_pin_write+0x74>
 25a:	83 34       	cpi	r24, 0x43	; 67
 25c:	08 f0       	brcs	.+2      	; 0x260 <GPIO_pin_write+0x14>
 25e:	4d c0       	rjmp	.+154    	; 0x2fa <GPIO_pin_write+0xae>
 260:	81 34       	cpi	r24, 0x41	; 65
 262:	09 f0       	breq	.+2      	; 0x266 <GPIO_pin_write+0x1a>
 264:	83 c0       	rjmp	.+262    	; 0x36c <GPIO_pin_write+0x120>
 266:	0f c0       	rjmp	.+30     	; 0x286 <GPIO_pin_write+0x3a>
 268:	82 36       	cpi	r24, 0x62	; 98
 26a:	51 f1       	breq	.+84     	; 0x2c0 <GPIO_pin_write+0x74>
 26c:	83 36       	cpi	r24, 0x63	; 99
 26e:	20 f4       	brcc	.+8      	; 0x278 <GPIO_pin_write+0x2c>
 270:	81 36       	cpi	r24, 0x61	; 97
 272:	09 f0       	breq	.+2      	; 0x276 <GPIO_pin_write+0x2a>
 274:	7b c0       	rjmp	.+246    	; 0x36c <GPIO_pin_write+0x120>
 276:	07 c0       	rjmp	.+14     	; 0x286 <GPIO_pin_write+0x3a>
 278:	83 36       	cpi	r24, 0x63	; 99
 27a:	09 f4       	brne	.+2      	; 0x27e <GPIO_pin_write+0x32>
 27c:	3e c0       	rjmp	.+124    	; 0x2fa <GPIO_pin_write+0xae>
 27e:	84 36       	cpi	r24, 0x64	; 100
 280:	09 f0       	breq	.+2      	; 0x284 <GPIO_pin_write+0x38>
 282:	74 c0       	rjmp	.+232    	; 0x36c <GPIO_pin_write+0x120>
 284:	57 c0       	rjmp	.+174    	; 0x334 <GPIO_pin_write+0xe8>
    {
        case 'A':
        case 'a':
            if(1 == DATA)
 286:	41 30       	cpi	r20, 0x01	; 1
 288:	69 f4       	brne	.+26     	; 0x2a4 <GPIO_pin_write+0x58>
            {
                SET_BIT(PORTA, BIT); //set output value of this pin in port A to 1
 28a:	2b b3       	in	r18, 0x1b	; 27
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	ac 01       	movw	r20, r24
 292:	02 c0       	rjmp	.+4      	; 0x298 <GPIO_pin_write+0x4c>
 294:	44 0f       	add	r20, r20
 296:	55 1f       	adc	r21, r21
 298:	6a 95       	dec	r22
 29a:	e2 f7       	brpl	.-8      	; 0x294 <GPIO_pin_write+0x48>
 29c:	ba 01       	movw	r22, r20
 29e:	62 2b       	or	r22, r18
 2a0:	6b bb       	out	0x1b, r22	; 27
 2a2:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTA, BIT); //set output value of this pin in port A to 0
 2a4:	2b b3       	in	r18, 0x1b	; 27
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	ac 01       	movw	r20, r24
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <GPIO_pin_write+0x66>
 2ae:	44 0f       	add	r20, r20
 2b0:	55 1f       	adc	r21, r21
 2b2:	6a 95       	dec	r22
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <GPIO_pin_write+0x62>
 2b6:	ba 01       	movw	r22, r20
 2b8:	60 95       	com	r22
 2ba:	62 23       	and	r22, r18
 2bc:	6b bb       	out	0x1b, r22	; 27
 2be:	08 95       	ret
            }
        break;
        case 'B':
        case 'b':
            if(1 == DATA)
 2c0:	41 30       	cpi	r20, 0x01	; 1
 2c2:	69 f4       	brne	.+26     	; 0x2de <GPIO_pin_write+0x92>
            {
                SET_BIT(PORTB, BIT); //set output value of this pin in port B to 1
 2c4:	28 b3       	in	r18, 0x18	; 24
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	ac 01       	movw	r20, r24
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <GPIO_pin_write+0x86>
 2ce:	44 0f       	add	r20, r20
 2d0:	55 1f       	adc	r21, r21
 2d2:	6a 95       	dec	r22
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <GPIO_pin_write+0x82>
 2d6:	ba 01       	movw	r22, r20
 2d8:	62 2b       	or	r22, r18
 2da:	68 bb       	out	0x18, r22	; 24
 2dc:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTB, BIT); //set output value of this pin in port B to 0
 2de:	28 b3       	in	r18, 0x18	; 24
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	ac 01       	movw	r20, r24
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <GPIO_pin_write+0xa0>
 2e8:	44 0f       	add	r20, r20
 2ea:	55 1f       	adc	r21, r21
 2ec:	6a 95       	dec	r22
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <GPIO_pin_write+0x9c>
 2f0:	ba 01       	movw	r22, r20
 2f2:	60 95       	com	r22
 2f4:	62 23       	and	r22, r18
 2f6:	68 bb       	out	0x18, r22	; 24
 2f8:	08 95       	ret
            }
        break;
        case 'C':
        case 'c':
            if(1 == DATA)
 2fa:	41 30       	cpi	r20, 0x01	; 1
 2fc:	69 f4       	brne	.+26     	; 0x318 <GPIO_pin_write+0xcc>
            {
                SET_BIT(PORTC, BIT); //set output value of this pin in port C to 1
 2fe:	25 b3       	in	r18, 0x15	; 21
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	ac 01       	movw	r20, r24
 306:	02 c0       	rjmp	.+4      	; 0x30c <GPIO_pin_write+0xc0>
 308:	44 0f       	add	r20, r20
 30a:	55 1f       	adc	r21, r21
 30c:	6a 95       	dec	r22
 30e:	e2 f7       	brpl	.-8      	; 0x308 <GPIO_pin_write+0xbc>
 310:	ba 01       	movw	r22, r20
 312:	62 2b       	or	r22, r18
 314:	65 bb       	out	0x15, r22	; 21
 316:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTC, BIT); //set output value of this pin in port C to 0
 318:	25 b3       	in	r18, 0x15	; 21
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	ac 01       	movw	r20, r24
 320:	02 c0       	rjmp	.+4      	; 0x326 <GPIO_pin_write+0xda>
 322:	44 0f       	add	r20, r20
 324:	55 1f       	adc	r21, r21
 326:	6a 95       	dec	r22
 328:	e2 f7       	brpl	.-8      	; 0x322 <GPIO_pin_write+0xd6>
 32a:	ba 01       	movw	r22, r20
 32c:	60 95       	com	r22
 32e:	62 23       	and	r22, r18
 330:	65 bb       	out	0x15, r22	; 21
 332:	08 95       	ret
            }
        break;
        case 'D':
        case 'd':
            if(1 == DATA)
 334:	41 30       	cpi	r20, 0x01	; 1
 336:	69 f4       	brne	.+26     	; 0x352 <GPIO_pin_write+0x106>
            {
                SET_BIT(PORTD, BIT); //set output value of this pin in port C to 1
 338:	22 b3       	in	r18, 0x12	; 18
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	ac 01       	movw	r20, r24
 340:	02 c0       	rjmp	.+4      	; 0x346 <GPIO_pin_write+0xfa>
 342:	44 0f       	add	r20, r20
 344:	55 1f       	adc	r21, r21
 346:	6a 95       	dec	r22
 348:	e2 f7       	brpl	.-8      	; 0x342 <GPIO_pin_write+0xf6>
 34a:	ba 01       	movw	r22, r20
 34c:	62 2b       	or	r22, r18
 34e:	62 bb       	out	0x12, r22	; 18
 350:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTD, BIT); //set output value of this pin in port C to 0
 352:	22 b3       	in	r18, 0x12	; 18
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	ac 01       	movw	r20, r24
 35a:	02 c0       	rjmp	.+4      	; 0x360 <GPIO_pin_write+0x114>
 35c:	44 0f       	add	r20, r20
 35e:	55 1f       	adc	r21, r21
 360:	6a 95       	dec	r22
 362:	e2 f7       	brpl	.-8      	; 0x35c <GPIO_pin_write+0x110>
 364:	ba 01       	movw	r22, r20
 366:	60 95       	com	r22
 368:	62 23       	and	r22, r18
 36a:	62 bb       	out	0x12, r22	; 18
 36c:	08 95       	ret

0000036e <GPIO_pin_read>:


uint8 GPIO_pin_read(char PORT, uint8 BIT)
{
    uint8 read_value = 0;
    switch(PORT)
 36e:	84 34       	cpi	r24, 0x44	; 68
 370:	99 f1       	breq	.+102    	; 0x3d8 <GPIO_pin_read+0x6a>
 372:	85 34       	cpi	r24, 0x45	; 69
 374:	38 f4       	brcc	.+14     	; 0x384 <GPIO_pin_read+0x16>
 376:	82 34       	cpi	r24, 0x42	; 66
 378:	d9 f0       	breq	.+54     	; 0x3b0 <GPIO_pin_read+0x42>
 37a:	83 34       	cpi	r24, 0x43	; 67
 37c:	18 f5       	brcc	.+70     	; 0x3c4 <GPIO_pin_read+0x56>
 37e:	81 34       	cpi	r24, 0x41	; 65
 380:	a9 f5       	brne	.+106    	; 0x3ec <GPIO_pin_read+0x7e>
 382:	0c c0       	rjmp	.+24     	; 0x39c <GPIO_pin_read+0x2e>
 384:	82 36       	cpi	r24, 0x62	; 98
 386:	a1 f0       	breq	.+40     	; 0x3b0 <GPIO_pin_read+0x42>
 388:	83 36       	cpi	r24, 0x63	; 99
 38a:	18 f4       	brcc	.+6      	; 0x392 <GPIO_pin_read+0x24>
 38c:	81 36       	cpi	r24, 0x61	; 97
 38e:	71 f5       	brne	.+92     	; 0x3ec <GPIO_pin_read+0x7e>
 390:	05 c0       	rjmp	.+10     	; 0x39c <GPIO_pin_read+0x2e>
 392:	83 36       	cpi	r24, 0x63	; 99
 394:	b9 f0       	breq	.+46     	; 0x3c4 <GPIO_pin_read+0x56>
 396:	84 36       	cpi	r24, 0x64	; 100
 398:	49 f5       	brne	.+82     	; 0x3ec <GPIO_pin_read+0x7e>
 39a:	1e c0       	rjmp	.+60     	; 0x3d8 <GPIO_pin_read+0x6a>
    {
        case 'A':
        case 'a':
            read_value = READ_BIT(PINA, BIT); //read value of given pin in port A
 39c:	29 b3       	in	r18, 0x19	; 25
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	c9 01       	movw	r24, r18
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <GPIO_pin_read+0x3a>
 3a4:	95 95       	asr	r25
 3a6:	87 95       	ror	r24
 3a8:	6a 95       	dec	r22
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <GPIO_pin_read+0x36>
 3ac:	81 70       	andi	r24, 0x01	; 1
        break;
 3ae:	08 95       	ret
        case 'B':
        case 'b':
            read_value = READ_BIT(PINB, BIT); //read value of given pin in port B
 3b0:	26 b3       	in	r18, 0x16	; 22
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	c9 01       	movw	r24, r18
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <GPIO_pin_read+0x4e>
 3b8:	95 95       	asr	r25
 3ba:	87 95       	ror	r24
 3bc:	6a 95       	dec	r22
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <GPIO_pin_read+0x4a>
 3c0:	81 70       	andi	r24, 0x01	; 1
        break;
 3c2:	08 95       	ret
        case 'C':
        case 'c':
            read_value = READ_BIT(PINC, BIT); //read value of given pin in port C
 3c4:	23 b3       	in	r18, 0x13	; 19
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	c9 01       	movw	r24, r18
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <GPIO_pin_read+0x62>
 3cc:	95 95       	asr	r25
 3ce:	87 95       	ror	r24
 3d0:	6a 95       	dec	r22
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <GPIO_pin_read+0x5e>
 3d4:	81 70       	andi	r24, 0x01	; 1
        break;
 3d6:	08 95       	ret
        case 'D':
        case 'd':
            read_value = READ_BIT(PIND, BIT); //read value of given pin in port D
 3d8:	20 b3       	in	r18, 0x10	; 16
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	c9 01       	movw	r24, r18
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <GPIO_pin_read+0x76>
 3e0:	95 95       	asr	r25
 3e2:	87 95       	ror	r24
 3e4:	6a 95       	dec	r22
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <GPIO_pin_read+0x72>
 3e8:	81 70       	andi	r24, 0x01	; 1
        break;
 3ea:	08 95       	ret
} // end of GPIO_pin_write();


uint8 GPIO_pin_read(char PORT, uint8 BIT)
{
    uint8 read_value = 0;
 3ec:	80 e0       	ldi	r24, 0x00	; 0
        break;
        default:
        break;
    } //end of switch(PORT);
    return read_value;
} // end of GPIO_pin_read();
 3ee:	08 95       	ret

000003f0 <GPIO_pin_toggle>:


void GPIO_pin_toggle(char PORT, uint8 BIT)
{
    switch(PORT)
 3f0:	84 34       	cpi	r24, 0x44	; 68
 3f2:	09 f4       	brne	.+2      	; 0x3f6 <GPIO_pin_toggle+0x6>
 3f4:	3d c0       	rjmp	.+122    	; 0x470 <GPIO_pin_toggle+0x80>
 3f6:	85 34       	cpi	r24, 0x45	; 69
 3f8:	40 f4       	brcc	.+16     	; 0x40a <GPIO_pin_toggle+0x1a>
 3fa:	82 34       	cpi	r24, 0x42	; 66
 3fc:	f9 f0       	breq	.+62     	; 0x43c <GPIO_pin_toggle+0x4c>
 3fe:	83 34       	cpi	r24, 0x43	; 67
 400:	50 f5       	brcc	.+84     	; 0x456 <GPIO_pin_toggle+0x66>
 402:	81 34       	cpi	r24, 0x41	; 65
 404:	09 f0       	breq	.+2      	; 0x408 <GPIO_pin_toggle+0x18>
 406:	40 c0       	rjmp	.+128    	; 0x488 <GPIO_pin_toggle+0x98>
 408:	0c c0       	rjmp	.+24     	; 0x422 <GPIO_pin_toggle+0x32>
 40a:	82 36       	cpi	r24, 0x62	; 98
 40c:	b9 f0       	breq	.+46     	; 0x43c <GPIO_pin_toggle+0x4c>
 40e:	83 36       	cpi	r24, 0x63	; 99
 410:	18 f4       	brcc	.+6      	; 0x418 <GPIO_pin_toggle+0x28>
 412:	81 36       	cpi	r24, 0x61	; 97
 414:	c9 f5       	brne	.+114    	; 0x488 <GPIO_pin_toggle+0x98>
 416:	05 c0       	rjmp	.+10     	; 0x422 <GPIO_pin_toggle+0x32>
 418:	83 36       	cpi	r24, 0x63	; 99
 41a:	e9 f0       	breq	.+58     	; 0x456 <GPIO_pin_toggle+0x66>
 41c:	84 36       	cpi	r24, 0x64	; 100
 41e:	a1 f5       	brne	.+104    	; 0x488 <GPIO_pin_toggle+0x98>
 420:	27 c0       	rjmp	.+78     	; 0x470 <GPIO_pin_toggle+0x80>
    {
        case 'A':
        case 'a':
            TOG_BIT(PORTA, BIT); //toggle value of given pin in port A
 422:	2b b3       	in	r18, 0x1b	; 27
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	ac 01       	movw	r20, r24
 42a:	02 c0       	rjmp	.+4      	; 0x430 <GPIO_pin_toggle+0x40>
 42c:	44 0f       	add	r20, r20
 42e:	55 1f       	adc	r21, r21
 430:	6a 95       	dec	r22
 432:	e2 f7       	brpl	.-8      	; 0x42c <GPIO_pin_toggle+0x3c>
 434:	ba 01       	movw	r22, r20
 436:	62 27       	eor	r22, r18
 438:	6b bb       	out	0x1b, r22	; 27
        break;
 43a:	08 95       	ret
        case 'B':
        case 'b':
            TOG_BIT(PORTB, BIT); //toggle value of given pin in port B
 43c:	28 b3       	in	r18, 0x18	; 24
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	ac 01       	movw	r20, r24
 444:	02 c0       	rjmp	.+4      	; 0x44a <GPIO_pin_toggle+0x5a>
 446:	44 0f       	add	r20, r20
 448:	55 1f       	adc	r21, r21
 44a:	6a 95       	dec	r22
 44c:	e2 f7       	brpl	.-8      	; 0x446 <GPIO_pin_toggle+0x56>
 44e:	ba 01       	movw	r22, r20
 450:	62 27       	eor	r22, r18
 452:	68 bb       	out	0x18, r22	; 24
        break;
 454:	08 95       	ret
        case 'C':
        case 'c':
            TOG_BIT(PORTC, BIT); //toggle value of given pin in port C
 456:	25 b3       	in	r18, 0x15	; 21
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	ac 01       	movw	r20, r24
 45e:	02 c0       	rjmp	.+4      	; 0x464 <GPIO_pin_toggle+0x74>
 460:	44 0f       	add	r20, r20
 462:	55 1f       	adc	r21, r21
 464:	6a 95       	dec	r22
 466:	e2 f7       	brpl	.-8      	; 0x460 <GPIO_pin_toggle+0x70>
 468:	ba 01       	movw	r22, r20
 46a:	62 27       	eor	r22, r18
 46c:	65 bb       	out	0x15, r22	; 21
        break;
 46e:	08 95       	ret
        case 'D':
        case 'd':
            TOG_BIT(PORTD, BIT); //toggle value of given pin in port D
 470:	22 b3       	in	r18, 0x12	; 18
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	ac 01       	movw	r20, r24
 478:	02 c0       	rjmp	.+4      	; 0x47e <GPIO_pin_toggle+0x8e>
 47a:	44 0f       	add	r20, r20
 47c:	55 1f       	adc	r21, r21
 47e:	6a 95       	dec	r22
 480:	e2 f7       	brpl	.-8      	; 0x47a <GPIO_pin_toggle+0x8a>
 482:	ba 01       	movw	r22, r20
 484:	62 27       	eor	r22, r18
 486:	62 bb       	out	0x12, r22	; 18
 488:	08 95       	ret

0000048a <GPIO_port_direction>:
} // end of GPIO_pin_toggle();


void GPIO_port_direction(char PORT, uint8 DIR)
{
    switch(PORT)
 48a:	84 34       	cpi	r24, 0x44	; 68
 48c:	d9 f0       	breq	.+54     	; 0x4c4 <GPIO_port_direction+0x3a>
 48e:	85 34       	cpi	r24, 0x45	; 69
 490:	38 f4       	brcc	.+14     	; 0x4a0 <GPIO_port_direction+0x16>
 492:	82 34       	cpi	r24, 0x42	; 66
 494:	99 f0       	breq	.+38     	; 0x4bc <GPIO_port_direction+0x32>
 496:	83 34       	cpi	r24, 0x43	; 67
 498:	98 f4       	brcc	.+38     	; 0x4c0 <GPIO_port_direction+0x36>
 49a:	81 34       	cpi	r24, 0x41	; 65
 49c:	a1 f4       	brne	.+40     	; 0x4c6 <GPIO_port_direction+0x3c>
 49e:	0c c0       	rjmp	.+24     	; 0x4b8 <GPIO_port_direction+0x2e>
 4a0:	82 36       	cpi	r24, 0x62	; 98
 4a2:	61 f0       	breq	.+24     	; 0x4bc <GPIO_port_direction+0x32>
 4a4:	83 36       	cpi	r24, 0x63	; 99
 4a6:	18 f4       	brcc	.+6      	; 0x4ae <GPIO_port_direction+0x24>
 4a8:	81 36       	cpi	r24, 0x61	; 97
 4aa:	69 f4       	brne	.+26     	; 0x4c6 <GPIO_port_direction+0x3c>
 4ac:	05 c0       	rjmp	.+10     	; 0x4b8 <GPIO_port_direction+0x2e>
 4ae:	83 36       	cpi	r24, 0x63	; 99
 4b0:	39 f0       	breq	.+14     	; 0x4c0 <GPIO_port_direction+0x36>
 4b2:	84 36       	cpi	r24, 0x64	; 100
 4b4:	41 f4       	brne	.+16     	; 0x4c6 <GPIO_port_direction+0x3c>
 4b6:	06 c0       	rjmp	.+12     	; 0x4c4 <GPIO_port_direction+0x3a>
    {
        case 'A':
        case 'a':
            DDRA = DIR; // set direction of port A to the given DIR
 4b8:	6a bb       	out	0x1a, r22	; 26
        break;
 4ba:	08 95       	ret
        case 'B':
        case 'b':
            DDRB = DIR; // set direction of port B to the given DIR
 4bc:	67 bb       	out	0x17, r22	; 23
        break;
 4be:	08 95       	ret
        case 'C':
        case 'c':
            DDRC = DIR; // set direction of port C to the given DIR
 4c0:	64 bb       	out	0x14, r22	; 20
        break;
 4c2:	08 95       	ret
        case 'D':
        case 'd':
            DDRD = DIR; // set direction of port D to the given DIR
 4c4:	61 bb       	out	0x11, r22	; 17
 4c6:	08 95       	ret

000004c8 <GPIO_port_write>:
} // end of GPIO_port_direction();


void GPIO_port_write(char PORT, uint8 DATA)
{
    switch(PORT)
 4c8:	84 34       	cpi	r24, 0x44	; 68
 4ca:	d9 f0       	breq	.+54     	; 0x502 <GPIO_port_write+0x3a>
 4cc:	85 34       	cpi	r24, 0x45	; 69
 4ce:	38 f4       	brcc	.+14     	; 0x4de <GPIO_port_write+0x16>
 4d0:	82 34       	cpi	r24, 0x42	; 66
 4d2:	99 f0       	breq	.+38     	; 0x4fa <GPIO_port_write+0x32>
 4d4:	83 34       	cpi	r24, 0x43	; 67
 4d6:	98 f4       	brcc	.+38     	; 0x4fe <GPIO_port_write+0x36>
 4d8:	81 34       	cpi	r24, 0x41	; 65
 4da:	a1 f4       	brne	.+40     	; 0x504 <GPIO_port_write+0x3c>
 4dc:	0c c0       	rjmp	.+24     	; 0x4f6 <GPIO_port_write+0x2e>
 4de:	82 36       	cpi	r24, 0x62	; 98
 4e0:	61 f0       	breq	.+24     	; 0x4fa <GPIO_port_write+0x32>
 4e2:	83 36       	cpi	r24, 0x63	; 99
 4e4:	18 f4       	brcc	.+6      	; 0x4ec <GPIO_port_write+0x24>
 4e6:	81 36       	cpi	r24, 0x61	; 97
 4e8:	69 f4       	brne	.+26     	; 0x504 <GPIO_port_write+0x3c>
 4ea:	05 c0       	rjmp	.+10     	; 0x4f6 <GPIO_port_write+0x2e>
 4ec:	83 36       	cpi	r24, 0x63	; 99
 4ee:	39 f0       	breq	.+14     	; 0x4fe <GPIO_port_write+0x36>
 4f0:	84 36       	cpi	r24, 0x64	; 100
 4f2:	41 f4       	brne	.+16     	; 0x504 <GPIO_port_write+0x3c>
 4f4:	06 c0       	rjmp	.+12     	; 0x502 <GPIO_port_write+0x3a>
    {
        case 'A':
        case 'a':
            PORTA = DATA; // write these data on port A
 4f6:	6b bb       	out	0x1b, r22	; 27
        break;
 4f8:	08 95       	ret
        case 'B':
        case 'b':
            PORTB = DATA; // write these data on port B
 4fa:	68 bb       	out	0x18, r22	; 24
        break;
 4fc:	08 95       	ret
        case 'C':
        case 'c':
            PORTC = DATA; // write these data on port C
 4fe:	65 bb       	out	0x15, r22	; 21
        break;
 500:	08 95       	ret
        case 'D':
        case 'd':
            PORTD = DATA; // write these data on port D
 502:	62 bb       	out	0x12, r22	; 18
 504:	08 95       	ret

00000506 <GPIO_port_read>:


uint8 GPIO_port_read(char PORT)
{
    uint8 read_port = 0;
    switch(PORT)
 506:	84 34       	cpi	r24, 0x44	; 68
 508:	d9 f0       	breq	.+54     	; 0x540 <GPIO_port_read+0x3a>
 50a:	85 34       	cpi	r24, 0x45	; 69
 50c:	38 f4       	brcc	.+14     	; 0x51c <GPIO_port_read+0x16>
 50e:	82 34       	cpi	r24, 0x42	; 66
 510:	99 f0       	breq	.+38     	; 0x538 <GPIO_port_read+0x32>
 512:	83 34       	cpi	r24, 0x43	; 67
 514:	98 f4       	brcc	.+38     	; 0x53c <GPIO_port_read+0x36>
 516:	81 34       	cpi	r24, 0x41	; 65
 518:	a9 f4       	brne	.+42     	; 0x544 <GPIO_port_read+0x3e>
 51a:	0c c0       	rjmp	.+24     	; 0x534 <GPIO_port_read+0x2e>
 51c:	82 36       	cpi	r24, 0x62	; 98
 51e:	61 f0       	breq	.+24     	; 0x538 <GPIO_port_read+0x32>
 520:	83 36       	cpi	r24, 0x63	; 99
 522:	18 f4       	brcc	.+6      	; 0x52a <GPIO_port_read+0x24>
 524:	81 36       	cpi	r24, 0x61	; 97
 526:	71 f4       	brne	.+28     	; 0x544 <GPIO_port_read+0x3e>
 528:	05 c0       	rjmp	.+10     	; 0x534 <GPIO_port_read+0x2e>
 52a:	83 36       	cpi	r24, 0x63	; 99
 52c:	39 f0       	breq	.+14     	; 0x53c <GPIO_port_read+0x36>
 52e:	84 36       	cpi	r24, 0x64	; 100
 530:	49 f4       	brne	.+18     	; 0x544 <GPIO_port_read+0x3e>
 532:	06 c0       	rjmp	.+12     	; 0x540 <GPIO_port_read+0x3a>
    {
        case 'A':
        case 'a':
            read_port = PINA; // read data from port A
 534:	89 b3       	in	r24, 0x19	; 25
        break;
 536:	08 95       	ret
        case 'B':
        case 'b':
            read_port = PINB; // read data from port B
 538:	86 b3       	in	r24, 0x16	; 22
        break;
 53a:	08 95       	ret
        case 'C':
        case 'c':
            read_port = PINC; // read data from port C
 53c:	83 b3       	in	r24, 0x13	; 19
        break;
 53e:	08 95       	ret
        case 'D':
        case 'd':
            read_port = PIND; // read data from port D
 540:	80 b3       	in	r24, 0x10	; 16
        break;
 542:	08 95       	ret
} // end of GPIO_port_write();


uint8 GPIO_port_read(char PORT)
{
    uint8 read_port = 0;
 544:	80 e0       	ldi	r24, 0x00	; 0
        break;
        default:
        break;
    } // end of switch(PORT);
    return read_port;
} // end of GPIO_port_read();
 546:	08 95       	ret

00000548 <GPIO_pin_pull_up>:


void GPIO_pin_pull_up(char port_name, uint8 pin_number)
{
    switch(port_name)
 548:	84 34       	cpi	r24, 0x44	; 68
 54a:	09 f4       	brne	.+2      	; 0x54e <GPIO_pin_pull_up+0x6>
 54c:	57 c0       	rjmp	.+174    	; 0x5fc <GPIO_pin_pull_up+0xb4>
 54e:	85 34       	cpi	r24, 0x45	; 69
 550:	40 f4       	brcc	.+16     	; 0x562 <GPIO_pin_pull_up+0x1a>
 552:	82 34       	cpi	r24, 0x42	; 66
 554:	49 f1       	breq	.+82     	; 0x5a8 <GPIO_pin_pull_up+0x60>
 556:	83 34       	cpi	r24, 0x43	; 67
 558:	e0 f5       	brcc	.+120    	; 0x5d2 <GPIO_pin_pull_up+0x8a>
 55a:	81 34       	cpi	r24, 0x41	; 65
 55c:	09 f0       	breq	.+2      	; 0x560 <GPIO_pin_pull_up+0x18>
 55e:	62 c0       	rjmp	.+196    	; 0x624 <GPIO_pin_pull_up+0xdc>
 560:	0e c0       	rjmp	.+28     	; 0x57e <GPIO_pin_pull_up+0x36>
 562:	82 36       	cpi	r24, 0x62	; 98
 564:	09 f1       	breq	.+66     	; 0x5a8 <GPIO_pin_pull_up+0x60>
 566:	83 36       	cpi	r24, 0x63	; 99
 568:	20 f4       	brcc	.+8      	; 0x572 <GPIO_pin_pull_up+0x2a>
 56a:	81 36       	cpi	r24, 0x61	; 97
 56c:	09 f0       	breq	.+2      	; 0x570 <GPIO_pin_pull_up+0x28>
 56e:	5a c0       	rjmp	.+180    	; 0x624 <GPIO_pin_pull_up+0xdc>
 570:	06 c0       	rjmp	.+12     	; 0x57e <GPIO_pin_pull_up+0x36>
 572:	83 36       	cpi	r24, 0x63	; 99
 574:	71 f1       	breq	.+92     	; 0x5d2 <GPIO_pin_pull_up+0x8a>
 576:	84 36       	cpi	r24, 0x64	; 100
 578:	09 f0       	breq	.+2      	; 0x57c <GPIO_pin_pull_up+0x34>
 57a:	54 c0       	rjmp	.+168    	; 0x624 <GPIO_pin_pull_up+0xdc>
 57c:	3f c0       	rjmp	.+126    	; 0x5fc <GPIO_pin_pull_up+0xb4>
    {
        case 'A':
        case 'a':
            CLR_BIT(DDRA,pin_number); //set pin_number of port_name as input
 57e:	2a b3       	in	r18, 0x1a	; 26
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	ac 01       	movw	r20, r24
 586:	02 c0       	rjmp	.+4      	; 0x58c <GPIO_pin_pull_up+0x44>
 588:	44 0f       	add	r20, r20
 58a:	55 1f       	adc	r21, r21
 58c:	6a 95       	dec	r22
 58e:	e2 f7       	brpl	.-8      	; 0x588 <GPIO_pin_pull_up+0x40>
 590:	ba 01       	movw	r22, r20
 592:	84 2f       	mov	r24, r20
 594:	80 95       	com	r24
 596:	82 23       	and	r24, r18
 598:	8a bb       	out	0x1a, r24	; 26
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 59a:	80 b7       	in	r24, 0x30	; 48
 59c:	8b 7f       	andi	r24, 0xFB	; 251
 59e:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTA,pin_number); //set pin_number of port_name as high value
 5a0:	8b b3       	in	r24, 0x1b	; 27
 5a2:	68 2b       	or	r22, r24
 5a4:	6b bb       	out	0x1b, r22	; 27
        break;
 5a6:	08 95       	ret
        case 'B':
        case 'b':
            CLR_BIT(DDRB,pin_number); //set pin_number of port_name as input
 5a8:	27 b3       	in	r18, 0x17	; 23
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	ac 01       	movw	r20, r24
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <GPIO_pin_pull_up+0x6e>
 5b2:	44 0f       	add	r20, r20
 5b4:	55 1f       	adc	r21, r21
 5b6:	6a 95       	dec	r22
 5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <GPIO_pin_pull_up+0x6a>
 5ba:	ba 01       	movw	r22, r20
 5bc:	84 2f       	mov	r24, r20
 5be:	80 95       	com	r24
 5c0:	82 23       	and	r24, r18
 5c2:	87 bb       	out	0x17, r24	; 23
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 5c4:	80 b7       	in	r24, 0x30	; 48
 5c6:	8b 7f       	andi	r24, 0xFB	; 251
 5c8:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTB,pin_number); //set pin_number of port_name as high value
 5ca:	88 b3       	in	r24, 0x18	; 24
 5cc:	68 2b       	or	r22, r24
 5ce:	68 bb       	out	0x18, r22	; 24
        break;
 5d0:	08 95       	ret
        case 'C':
        case 'c':
            CLR_BIT(DDRC,pin_number); //set pin_number of port_name as input
 5d2:	24 b3       	in	r18, 0x14	; 20
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	ac 01       	movw	r20, r24
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <GPIO_pin_pull_up+0x98>
 5dc:	44 0f       	add	r20, r20
 5de:	55 1f       	adc	r21, r21
 5e0:	6a 95       	dec	r22
 5e2:	e2 f7       	brpl	.-8      	; 0x5dc <GPIO_pin_pull_up+0x94>
 5e4:	ba 01       	movw	r22, r20
 5e6:	84 2f       	mov	r24, r20
 5e8:	80 95       	com	r24
 5ea:	82 23       	and	r24, r18
 5ec:	84 bb       	out	0x14, r24	; 20
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 5ee:	80 b7       	in	r24, 0x30	; 48
 5f0:	8b 7f       	andi	r24, 0xFB	; 251
 5f2:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTC,pin_number); //set pin_number of port_name as high value
 5f4:	85 b3       	in	r24, 0x15	; 21
 5f6:	68 2b       	or	r22, r24
 5f8:	65 bb       	out	0x15, r22	; 21
        break;
 5fa:	08 95       	ret
        case 'D':
        case 'd':
            CLR_BIT(DDRD,pin_number); //set pin_number of port_name as input
 5fc:	21 b3       	in	r18, 0x11	; 17
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	ac 01       	movw	r20, r24
 604:	02 c0       	rjmp	.+4      	; 0x60a <GPIO_pin_pull_up+0xc2>
 606:	44 0f       	add	r20, r20
 608:	55 1f       	adc	r21, r21
 60a:	6a 95       	dec	r22
 60c:	e2 f7       	brpl	.-8      	; 0x606 <GPIO_pin_pull_up+0xbe>
 60e:	ba 01       	movw	r22, r20
 610:	84 2f       	mov	r24, r20
 612:	80 95       	com	r24
 614:	82 23       	and	r24, r18
 616:	81 bb       	out	0x11, r24	; 17
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 618:	80 b7       	in	r24, 0x30	; 48
 61a:	8b 7f       	andi	r24, 0xFB	; 251
 61c:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTD,pin_number); //set pin_number of port_name as high value
 61e:	82 b3       	in	r24, 0x12	; 18
 620:	68 2b       	or	r22, r24
 622:	62 bb       	out	0x12, r22	; 18
 624:	08 95       	ret

00000626 <GPIO_port_write_high_nibble>:



void GPIO_port_write_high_nibble(char port_name, uint8 high_nibble)
{
    high_nibble <<= 4; //clear low_nibble bits in number
 626:	62 95       	swap	r22
 628:	60 7f       	andi	r22, 0xF0	; 240
    switch(port_name)
 62a:	84 34       	cpi	r24, 0x44	; 68
 62c:	51 f1       	breq	.+84     	; 0x682 <GPIO_port_write_high_nibble+0x5c>
 62e:	85 34       	cpi	r24, 0x45	; 69
 630:	38 f4       	brcc	.+14     	; 0x640 <GPIO_port_write_high_nibble+0x1a>
 632:	82 34       	cpi	r24, 0x42	; 66
 634:	c1 f0       	breq	.+48     	; 0x666 <GPIO_port_write_high_nibble+0x40>
 636:	83 34       	cpi	r24, 0x43	; 67
 638:	e8 f4       	brcc	.+58     	; 0x674 <GPIO_port_write_high_nibble+0x4e>
 63a:	81 34       	cpi	r24, 0x41	; 65
 63c:	41 f5       	brne	.+80     	; 0x68e <GPIO_port_write_high_nibble+0x68>
 63e:	0c c0       	rjmp	.+24     	; 0x658 <GPIO_port_write_high_nibble+0x32>
 640:	82 36       	cpi	r24, 0x62	; 98
 642:	89 f0       	breq	.+34     	; 0x666 <GPIO_port_write_high_nibble+0x40>
 644:	83 36       	cpi	r24, 0x63	; 99
 646:	18 f4       	brcc	.+6      	; 0x64e <GPIO_port_write_high_nibble+0x28>
 648:	81 36       	cpi	r24, 0x61	; 97
 64a:	09 f5       	brne	.+66     	; 0x68e <GPIO_port_write_high_nibble+0x68>
 64c:	05 c0       	rjmp	.+10     	; 0x658 <GPIO_port_write_high_nibble+0x32>
 64e:	83 36       	cpi	r24, 0x63	; 99
 650:	89 f0       	breq	.+34     	; 0x674 <GPIO_port_write_high_nibble+0x4e>
 652:	84 36       	cpi	r24, 0x64	; 100
 654:	e1 f4       	brne	.+56     	; 0x68e <GPIO_port_write_high_nibble+0x68>
 656:	15 c0       	rjmp	.+42     	; 0x682 <GPIO_port_write_high_nibble+0x5c>
    {
        case 'A':
        case 'a':
            PORTA &= 0x0f;
 658:	8b b3       	in	r24, 0x1b	; 27
 65a:	8f 70       	andi	r24, 0x0F	; 15
 65c:	8b bb       	out	0x1b, r24	; 27
            PORTA |= high_nibble;
 65e:	8b b3       	in	r24, 0x1b	; 27
 660:	68 2b       	or	r22, r24
 662:	6b bb       	out	0x1b, r22	; 27
        break;
 664:	08 95       	ret
        case 'B':
        case 'b':
            PORTB &= 0x0f;
 666:	88 b3       	in	r24, 0x18	; 24
 668:	8f 70       	andi	r24, 0x0F	; 15
 66a:	88 bb       	out	0x18, r24	; 24
            PORTB |= high_nibble;
 66c:	88 b3       	in	r24, 0x18	; 24
 66e:	68 2b       	or	r22, r24
 670:	68 bb       	out	0x18, r22	; 24
        break;
 672:	08 95       	ret
        case 'C':
        case 'c':
            PORTC &= 0x0f;
 674:	85 b3       	in	r24, 0x15	; 21
 676:	8f 70       	andi	r24, 0x0F	; 15
 678:	85 bb       	out	0x15, r24	; 21
            PORTC |= high_nibble;
 67a:	85 b3       	in	r24, 0x15	; 21
 67c:	68 2b       	or	r22, r24
 67e:	65 bb       	out	0x15, r22	; 21
        break;
 680:	08 95       	ret
        case 'D':
        case 'd':
            PORTD &= 0x0f;
 682:	82 b3       	in	r24, 0x12	; 18
 684:	8f 70       	andi	r24, 0x0F	; 15
 686:	82 bb       	out	0x12, r24	; 18
            PORTD |= high_nibble;
 688:	82 b3       	in	r24, 0x12	; 18
 68a:	68 2b       	or	r22, r24
 68c:	62 bb       	out	0x12, r22	; 18
 68e:	08 95       	ret

00000690 <GPIO_port_write_low_nibble>:
    } // end of switch(port_name);
}

void GPIO_port_write_low_nibble(char port_name, uint8 low_nibble)
{
    low_nibble &= 0x0f; //clear high_nibble bits in number
 690:	6f 70       	andi	r22, 0x0F	; 15
    switch(port_name)
 692:	84 34       	cpi	r24, 0x44	; 68
 694:	51 f1       	breq	.+84     	; 0x6ea <GPIO_port_write_low_nibble+0x5a>
 696:	85 34       	cpi	r24, 0x45	; 69
 698:	38 f4       	brcc	.+14     	; 0x6a8 <GPIO_port_write_low_nibble+0x18>
 69a:	82 34       	cpi	r24, 0x42	; 66
 69c:	c1 f0       	breq	.+48     	; 0x6ce <GPIO_port_write_low_nibble+0x3e>
 69e:	83 34       	cpi	r24, 0x43	; 67
 6a0:	e8 f4       	brcc	.+58     	; 0x6dc <GPIO_port_write_low_nibble+0x4c>
 6a2:	81 34       	cpi	r24, 0x41	; 65
 6a4:	41 f5       	brne	.+80     	; 0x6f6 <GPIO_port_write_low_nibble+0x66>
 6a6:	0c c0       	rjmp	.+24     	; 0x6c0 <GPIO_port_write_low_nibble+0x30>
 6a8:	82 36       	cpi	r24, 0x62	; 98
 6aa:	89 f0       	breq	.+34     	; 0x6ce <GPIO_port_write_low_nibble+0x3e>
 6ac:	83 36       	cpi	r24, 0x63	; 99
 6ae:	18 f4       	brcc	.+6      	; 0x6b6 <GPIO_port_write_low_nibble+0x26>
 6b0:	81 36       	cpi	r24, 0x61	; 97
 6b2:	09 f5       	brne	.+66     	; 0x6f6 <GPIO_port_write_low_nibble+0x66>
 6b4:	05 c0       	rjmp	.+10     	; 0x6c0 <GPIO_port_write_low_nibble+0x30>
 6b6:	83 36       	cpi	r24, 0x63	; 99
 6b8:	89 f0       	breq	.+34     	; 0x6dc <GPIO_port_write_low_nibble+0x4c>
 6ba:	84 36       	cpi	r24, 0x64	; 100
 6bc:	e1 f4       	brne	.+56     	; 0x6f6 <GPIO_port_write_low_nibble+0x66>
 6be:	15 c0       	rjmp	.+42     	; 0x6ea <GPIO_port_write_low_nibble+0x5a>
    {
        case 'A':
        case 'a':
            PORTA &= 0xf0;
 6c0:	8b b3       	in	r24, 0x1b	; 27
 6c2:	80 7f       	andi	r24, 0xF0	; 240
 6c4:	8b bb       	out	0x1b, r24	; 27
            PORTA |= low_nibble;
 6c6:	8b b3       	in	r24, 0x1b	; 27
 6c8:	68 2b       	or	r22, r24
 6ca:	6b bb       	out	0x1b, r22	; 27
        break;
 6cc:	08 95       	ret
        case 'B':
        case 'b':
            PORTB &= 0xf0;
 6ce:	88 b3       	in	r24, 0x18	; 24
 6d0:	80 7f       	andi	r24, 0xF0	; 240
 6d2:	88 bb       	out	0x18, r24	; 24
            PORTB |= low_nibble;
 6d4:	88 b3       	in	r24, 0x18	; 24
 6d6:	68 2b       	or	r22, r24
 6d8:	68 bb       	out	0x18, r22	; 24
        break;
 6da:	08 95       	ret
        case 'C':
        case 'c':
            PORTC &= 0xf0;
 6dc:	85 b3       	in	r24, 0x15	; 21
 6de:	80 7f       	andi	r24, 0xF0	; 240
 6e0:	85 bb       	out	0x15, r24	; 21
            PORTC |= low_nibble;
 6e2:	85 b3       	in	r24, 0x15	; 21
 6e4:	68 2b       	or	r22, r24
 6e6:	65 bb       	out	0x15, r22	; 21
        break;
 6e8:	08 95       	ret
        case 'D':
        case 'd':
            PORTD &= 0xf0;
 6ea:	82 b3       	in	r24, 0x12	; 18
 6ec:	80 7f       	andi	r24, 0xF0	; 240
 6ee:	82 bb       	out	0x12, r24	; 18
            PORTD |= low_nibble;
 6f0:	82 b3       	in	r24, 0x12	; 18
 6f2:	68 2b       	or	r22, r24
 6f4:	62 bb       	out	0x12, r22	; 18
 6f6:	08 95       	ret

000006f8 <Seven_segment_init>:
#include "seven_segment.h"

void Seven_segment_init(char port_name, uint8 DP_pin)
{
 6f8:	cf 93       	push	r28
 6fa:	df 93       	push	r29
 6fc:	d8 2f       	mov	r29, r24
    if(1 == DP_pin)
 6fe:	61 30       	cpi	r22, 0x01	; 1
 700:	21 f4       	brne	.+8      	; 0x70a <Seven_segment_init+0x12>
    {
        GPIO_port_direction(port_name, 0xff); //initialize port_name as output pins with "DP" pin
 702:	6f ef       	ldi	r22, 0xFF	; 255
 704:	0e 94 45 02 	call	0x48a	; 0x48a <GPIO_port_direction>
 708:	09 c0       	rjmp	.+18     	; 0x71c <Seven_segment_init+0x24>
#include "seven_segment.h"

void Seven_segment_init(char port_name, uint8 DP_pin)
{
    if(1 == DP_pin)
 70a:	c0 e0       	ldi	r28, 0x00	; 0
    else
    {
        uint8 counter = 0;
        for(counter=0; counter<7; ++counter)
        {
            GPIO_pin_direction(port_name,counter,1);
 70c:	8d 2f       	mov	r24, r29
 70e:	6c 2f       	mov	r22, r28
 710:	41 e0       	ldi	r20, 0x01	; 1
 712:	0e 94 95 00 	call	0x12a	; 0x12a <GPIO_pin_direction>
        GPIO_port_direction(port_name, 0xff); //initialize port_name as output pins with "DP" pin
    }
    else
    {
        uint8 counter = 0;
        for(counter=0; counter<7; ++counter)
 716:	cf 5f       	subi	r28, 0xFF	; 255
 718:	c7 30       	cpi	r28, 0x07	; 7
 71a:	c1 f7       	brne	.-16     	; 0x70c <Seven_segment_init+0x14>
        {
            GPIO_pin_direction(port_name,counter,1);
        }
    }
}
 71c:	df 91       	pop	r29
 71e:	cf 91       	pop	r28
 720:	08 95       	ret

00000722 <Seven_seg_BCD_init>:


void Seven_seg_BCD_init(char port_name)
{
 722:	cf 93       	push	r28
 724:	df 93       	push	r29
 726:	d8 2f       	mov	r29, r24
    uint8 counter = 0;
        for(counter=0; counter<4; ++counter)
 728:	c0 e0       	ldi	r28, 0x00	; 0
        {
            GPIO_pin_direction(port_name,counter,1);//initialize 4 pins from port_name as output pins
 72a:	8d 2f       	mov	r24, r29
 72c:	6c 2f       	mov	r22, r28
 72e:	41 e0       	ldi	r20, 0x01	; 1
 730:	0e 94 95 00 	call	0x12a	; 0x12a <GPIO_pin_direction>


void Seven_seg_BCD_init(char port_name)
{
    uint8 counter = 0;
        for(counter=0; counter<4; ++counter)
 734:	cf 5f       	subi	r28, 0xFF	; 255
 736:	c4 30       	cpi	r28, 0x04	; 4
 738:	c1 f7       	brne	.-16     	; 0x72a <Seven_seg_BCD_init+0x8>
        {
            GPIO_pin_direction(port_name,counter,1);//initialize 4 pins from port_name as output pins
        }
}
 73a:	df 91       	pop	r29
 73c:	cf 91       	pop	r28
 73e:	08 95       	ret

00000740 <Seven_seg_BCD_write>:


void Seven_seg_BCD_write(char port_name, uint8 number)
{
 740:	cf 93       	push	r28
 742:	df 93       	push	r29
 744:	cd b7       	in	r28, 0x3d	; 61
 746:	de b7       	in	r29, 0x3e	; 62
 748:	2a 97       	sbiw	r28, 0x0a	; 10
 74a:	0f b6       	in	r0, 0x3f	; 63
 74c:	f8 94       	cli
 74e:	de bf       	out	0x3e, r29	; 62
 750:	0f be       	out	0x3f, r0	; 63
 752:	cd bf       	out	0x3d, r28	; 61
    uint8 cAnode_hex[] = {0x00,0x1,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09}; //{0,1,2,3,4,5,6,7,8,9}
 754:	de 01       	movw	r26, r28
 756:	11 96       	adiw	r26, 0x01	; 1
 758:	e0 e6       	ldi	r30, 0x60	; 96
 75a:	f0 e0       	ldi	r31, 0x00	; 0
 75c:	9a e0       	ldi	r25, 0x0A	; 10
 75e:	01 90       	ld	r0, Z+
 760:	0d 92       	st	X+, r0
 762:	91 50       	subi	r25, 0x01	; 1
 764:	e1 f7       	brne	.-8      	; 0x75e <Seven_seg_BCD_write+0x1e>
    GPIO_port_write(port_name, cAnode_hex[number]);
 766:	fe 01       	movw	r30, r28
 768:	e6 0f       	add	r30, r22
 76a:	f1 1d       	adc	r31, r1
 76c:	61 81       	ldd	r22, Z+1	; 0x01
 76e:	0e 94 64 02 	call	0x4c8	; 0x4c8 <GPIO_port_write>
}
 772:	2a 96       	adiw	r28, 0x0a	; 10
 774:	0f b6       	in	r0, 0x3f	; 63
 776:	f8 94       	cli
 778:	de bf       	out	0x3e, r29	; 62
 77a:	0f be       	out	0x3f, r0	; 63
 77c:	cd bf       	out	0x3d, r28	; 61
 77e:	df 91       	pop	r29
 780:	cf 91       	pop	r28
 782:	08 95       	ret

00000784 <Seven_segment_write>:




void Seven_segment_write(char port_name, uint8 number, uint8 DP_pin, uint8 common_anod)
{
 784:	cf 93       	push	r28
 786:	df 93       	push	r29
 788:	cd b7       	in	r28, 0x3d	; 61
 78a:	de b7       	in	r29, 0x3e	; 62
 78c:	60 97       	sbiw	r28, 0x10	; 16
 78e:	0f b6       	in	r0, 0x3f	; 63
 790:	f8 94       	cli
 792:	de bf       	out	0x3e, r29	; 62
 794:	0f be       	out	0x3f, r0	; 63
 796:	cd bf       	out	0x3d, r28	; 61
    if(1 == common_anod) //Is the connected display a common anode?
 798:	21 30       	cpi	r18, 0x01	; 1
 79a:	c9 f4       	brne	.+50     	; 0x7ce <Seven_segment_write+0x4a>
    {
        uint8 cAnode_hex[] = {0x40,0x79,0x24,0x30,0x19,0x12,0x02,0x38,0x00,0x10,0x08,0x00,0x46,0x40,0x06,0x0e}; //{0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F}
 79c:	de 01       	movw	r26, r28
 79e:	11 96       	adiw	r26, 0x01	; 1
 7a0:	ea e6       	ldi	r30, 0x6A	; 106
 7a2:	f0 e0       	ldi	r31, 0x00	; 0
 7a4:	90 e1       	ldi	r25, 0x10	; 16
 7a6:	01 90       	ld	r0, Z+
 7a8:	0d 92       	st	X+, r0
 7aa:	91 50       	subi	r25, 0x01	; 1
 7ac:	e1 f7       	brne	.-8      	; 0x7a6 <Seven_segment_write+0x22>
        if(1 == DP_pin) //turn on the digit LED
 7ae:	41 30       	cpi	r20, 0x01	; 1
 7b0:	31 f4       	brne	.+12     	; 0x7be <Seven_segment_write+0x3a>
        {
            number = ( (cAnode_hex[number]) & (~(1<<7)) );
 7b2:	fe 01       	movw	r30, r28
 7b4:	e6 0f       	add	r30, r22
 7b6:	f1 1d       	adc	r31, r1
 7b8:	61 81       	ldd	r22, Z+1	; 0x01
 7ba:	6f 77       	andi	r22, 0x7F	; 127
 7bc:	05 c0       	rjmp	.+10     	; 0x7c8 <Seven_segment_write+0x44>
        }
        else
        {
            number = ( (cAnode_hex[number]) | (1<<7) );
 7be:	fe 01       	movw	r30, r28
 7c0:	e6 0f       	add	r30, r22
 7c2:	f1 1d       	adc	r31, r1
 7c4:	61 81       	ldd	r22, Z+1	; 0x01
 7c6:	60 68       	ori	r22, 0x80	; 128
        }
        GPIO_port_write(port_name, number);
 7c8:	0e 94 64 02 	call	0x4c8	; 0x4c8 <GPIO_port_write>
 7cc:	17 c0       	rjmp	.+46     	; 0x7fc <Seven_segment_write+0x78>
    }
    else
    {
        uint8 cCathode_hex[] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x47,0x7f,0x6f,0x77,0x7f,0x39,0x3f,0x79,0x71}; //{0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F}
 7ce:	de 01       	movw	r26, r28
 7d0:	11 96       	adiw	r26, 0x01	; 1
 7d2:	ea e7       	ldi	r30, 0x7A	; 122
 7d4:	f0 e0       	ldi	r31, 0x00	; 0
 7d6:	90 e1       	ldi	r25, 0x10	; 16
 7d8:	01 90       	ld	r0, Z+
 7da:	0d 92       	st	X+, r0
 7dc:	91 50       	subi	r25, 0x01	; 1
 7de:	e1 f7       	brne	.-8      	; 0x7d8 <Seven_segment_write+0x54>
        if(1 == DP_pin) //turn on the digit LED
 7e0:	41 30       	cpi	r20, 0x01	; 1
 7e2:	31 f4       	brne	.+12     	; 0x7f0 <Seven_segment_write+0x6c>
        {
            number = ( (cCathode_hex[number]) | (DP_pin<<7) );
 7e4:	fe 01       	movw	r30, r28
 7e6:	e6 0f       	add	r30, r22
 7e8:	f1 1d       	adc	r31, r1
 7ea:	61 81       	ldd	r22, Z+1	; 0x01
 7ec:	60 68       	ori	r22, 0x80	; 128
 7ee:	04 c0       	rjmp	.+8      	; 0x7f8 <Seven_segment_write+0x74>
        }
        else
        {
            number = cCathode_hex[number];
 7f0:	fe 01       	movw	r30, r28
 7f2:	e6 0f       	add	r30, r22
 7f4:	f1 1d       	adc	r31, r1
 7f6:	61 81       	ldd	r22, Z+1	; 0x01
        }
        GPIO_port_write(port_name, number);
 7f8:	0e 94 64 02 	call	0x4c8	; 0x4c8 <GPIO_port_write>
    }
}
 7fc:	60 96       	adiw	r28, 0x10	; 16
 7fe:	0f b6       	in	r0, 0x3f	; 63
 800:	f8 94       	cli
 802:	de bf       	out	0x3e, r29	; 62
 804:	0f be       	out	0x3f, r0	; 63
 806:	cd bf       	out	0x3d, r28	; 61
 808:	df 91       	pop	r29
 80a:	cf 91       	pop	r28
 80c:	08 95       	ret

0000080e <timer0_ctc_init>:
#include "timer0_CTC_mode.h"

void timer0_ctc_init(void)
{
	/*set timer0 mode to CTC mode*/
	CLR_BIT(TCCR0, WGM00);
 80e:	83 b7       	in	r24, 0x33	; 51
 810:	8f 7b       	andi	r24, 0xBF	; 191
 812:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0, WGM01);
 814:	83 b7       	in	r24, 0x33	; 51
 816:	88 60       	ori	r24, 0x08	; 8
 818:	83 bf       	out	0x33, r24	; 51
	/*set OCR register value to (252) so after this counts for (31) times, one sec will be evaluated*/
	OCR0 = 252;
 81a:	8c ef       	ldi	r24, 0xFC	; 252
 81c:	8c bf       	out	0x3c, r24	; 60
	/*set F_timer0 = F_CPU/1024 = 8000000/1024 = 7812 Hz*/
	/*tick time = (1024/8000000) = 0.128 mSec.*/
	SET_BIT(TCCR0, CS00);
 81e:	83 b7       	in	r24, 0x33	; 51
 820:	81 60       	ori	r24, 0x01	; 1
 822:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS01);
 824:	83 b7       	in	r24, 0x33	; 51
 826:	8d 7f       	andi	r24, 0xFD	; 253
 828:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0, CS02);
 82a:	83 b7       	in	r24, 0x33	; 51
 82c:	84 60       	ori	r24, 0x04	; 4
 82e:	83 bf       	out	0x33, r24	; 51
	/*enable interrupt of CTC mode*/
	sei(); //enable I-bit
 830:	78 94       	sei
	SET_BIT(TIMSK, OCIE0); //enable bit of timer0 CTC interrupt
 832:	89 b7       	in	r24, 0x39	; 57
 834:	82 60       	ori	r24, 0x02	; 2
 836:	89 bf       	out	0x39, r24	; 57
 838:	08 95       	ret

0000083a <__udivmodqi4>:
 83a:	99 1b       	sub	r25, r25
 83c:	79 e0       	ldi	r23, 0x09	; 9
 83e:	04 c0       	rjmp	.+8      	; 0x848 <__udivmodqi4_ep>

00000840 <__udivmodqi4_loop>:
 840:	99 1f       	adc	r25, r25
 842:	96 17       	cp	r25, r22
 844:	08 f0       	brcs	.+2      	; 0x848 <__udivmodqi4_ep>
 846:	96 1b       	sub	r25, r22

00000848 <__udivmodqi4_ep>:
 848:	88 1f       	adc	r24, r24
 84a:	7a 95       	dec	r23
 84c:	c9 f7       	brne	.-14     	; 0x840 <__udivmodqi4_loop>
 84e:	80 95       	com	r24
 850:	08 95       	ret

00000852 <_exit>:
 852:	f8 94       	cli

00000854 <__stop_program>:
 854:	ff cf       	rjmp	.-2      	; 0x854 <__stop_program>
