
17-write_name_arabic_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000872  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  00000872  000008e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000930  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  00001088  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000aa1  00000000  00000000  00001148  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003ce  00000000  00000000  00001be9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000705  00000000  00000000  00001fb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  000026bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e7  00000000  00000000  0000283c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007b3  00000000  00000000  00002b23  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000032d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e7       	ldi	r30, 0x72	; 114
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3a       	cpi	r26, 0xA8	; 168
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 ea       	ldi	r26, 0xA8	; 168
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3a       	cpi	r26, 0xA8	; 168
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 37 04 	jmp	0x86e	; 0x86e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:


int main(void)
{
	uint8 i=0,j=0;
	LCD_init();
  92:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <LCD_init>
	LCD_send_string("Mohamed Yasser");
  96:	80 e6       	ldi	r24, 0x60	; 96
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 06 04 	call	0x80c	; 0x80c <LCD_send_string>
	LCD_send_command(0x40);
  9e:	80 e4       	ldi	r24, 0x40	; 64
  a0:	0e 94 b2 03 	call	0x764	; 0x764 <LCD_send_command>
  a4:	0f 2e       	mov	r0, r31
  a6:	f7 e7       	ldi	r31, 0x77	; 119
  a8:	ef 2e       	mov	r14, r31
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	ff 2e       	mov	r15, r31
  ae:	f0 2d       	mov	r31, r0
				  {0x00,0x00,0x15,0x15,0x1F,0x00,0x00,0x00},
				  {0x00,0x00,0x00,0x04,0x07,0x04,0x18,0x00} }; //M-7-D-Y-A-S-R



int main(void)
  b0:	00 e0       	ldi	r16, 0x00	; 0
  b2:	10 e0       	ldi	r17, 0x00	; 0
  b4:	0f c0       	rjmp	.+30     	; 0xd4 <main+0x42>
	LCD_send_command(0x40);
	for (i=0;i<7;++i)
	{
		for (j=0;j<8;++j)
		{
			LCD_send_character(name[i][j]);
  b6:	89 91       	ld	r24, Y+
  b8:	0e 94 f7 03 	call	0x7ee	; 0x7ee <LCD_send_character>
	LCD_init();
	LCD_send_string("Mohamed Yasser");
	LCD_send_command(0x40);
	for (i=0;i<7;++i)
	{
		for (j=0;j<8;++j)
  bc:	ec 16       	cp	r14, r28
  be:	fd 06       	cpc	r15, r29
  c0:	d1 f7       	brne	.-12     	; 0xb6 <main+0x24>
  c2:	0f 5f       	subi	r16, 0xFF	; 255
  c4:	1f 4f       	sbci	r17, 0xFF	; 255
  c6:	88 e0       	ldi	r24, 0x08	; 8
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	e8 0e       	add	r14, r24
  cc:	f9 1e       	adc	r15, r25
{
	uint8 i=0,j=0;
	LCD_init();
	LCD_send_string("Mohamed Yasser");
	LCD_send_command(0x40);
	for (i=0;i<7;++i)
  ce:	07 30       	cpi	r16, 0x07	; 7
  d0:	11 05       	cpc	r17, r1
  d2:	51 f0       	breq	.+20     	; 0xe8 <main+0x56>
				  {0x00,0x00,0x15,0x15,0x1F,0x00,0x00,0x00},
				  {0x00,0x00,0x00,0x04,0x07,0x04,0x18,0x00} }; //M-7-D-Y-A-S-R



int main(void)
  d4:	e8 01       	movw	r28, r16
  d6:	cc 0f       	add	r28, r28
  d8:	dd 1f       	adc	r29, r29
  da:	cc 0f       	add	r28, r28
  dc:	dd 1f       	adc	r29, r29
  de:	cc 0f       	add	r28, r28
  e0:	dd 1f       	adc	r29, r29
  e2:	c1 59       	subi	r28, 0x91	; 145
  e4:	df 4f       	sbci	r29, 0xFF	; 255
  e6:	e7 cf       	rjmp	.-50     	; 0xb6 <main+0x24>
{
	uint8 i=0,j=0;
	LCD_init();
	LCD_send_string("Mohamed Yasser");
	LCD_send_command(0x40);
	for (i=0;i<7;++i)
  e8:	c0 e0       	ldi	r28, 0x00	; 0
			LCD_send_character(name[i][j]);
		}
	}
	for (i=14,j=0;i>6;--i,j++)
	{
		LCD_move_cursor(2,i);
  ea:	0e e0       	ldi	r16, 0x0E	; 14
  ec:	60 2f       	mov	r22, r16
  ee:	6c 1b       	sub	r22, r28
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	0e 94 15 04 	call	0x82a	; 0x82a <LCD_move_cursor>
		if (2 == j)
  f6:	c2 30       	cpi	r28, 0x02	; 2
  f8:	29 f4       	brne	.+10     	; 0x104 <main+0x72>
		{
			LCD_send_character(0);
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	0e 94 f7 03 	call	0x7ee	; 0x7ee <LCD_send_character>
		for (j=0;j<8;++j)
		{
			LCD_send_character(name[i][j]);
		}
	}
	for (i=14,j=0;i>6;--i,j++)
 100:	cf 5f       	subi	r28, 0xFF	; 255
 102:	f4 cf       	rjmp	.-24     	; 0xec <main+0x5a>
		if (2 == j)
		{
			LCD_send_character(0);
			continue;
		}
		LCD_send_character(j);
 104:	8c 2f       	mov	r24, r28
 106:	0e 94 f7 03 	call	0x7ee	; 0x7ee <LCD_send_character>
		for (j=0;j<8;++j)
		{
			LCD_send_character(name[i][j]);
		}
	}
	for (i=14,j=0;i>6;--i,j++)
 10a:	cf 5f       	subi	r28, 0xFF	; 255
 10c:	c8 30       	cpi	r28, 0x08	; 8
 10e:	71 f7       	brne	.-36     	; 0xec <main+0x5a>
 110:	c0 e0       	ldi	r28, 0x00	; 0
		}
		LCD_send_character(j);
	}
    while(1)
    {
		for (i=0; i<2; ++i)
 112:	00 e0       	ldi	r16, 0x00	; 0
 114:	0d c0       	rjmp	.+26     	; 0x130 <main+0x9e>
		{
			LCD_send_command(ENTIRE_DISPLAY_RIGHT);
 116:	8c e1       	ldi	r24, 0x1C	; 28
 118:	0e 94 b2 03 	call	0x764	; 0x764 <LCD_send_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	8f ef       	ldi	r24, 0xFF	; 255
 11e:	99 e6       	ldi	r25, 0x69	; 105
 120:	a8 e1       	ldi	r26, 0x18	; 24
 122:	81 50       	subi	r24, 0x01	; 1
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	a0 40       	sbci	r26, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <main+0x90>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0x9a>
 12c:	00 00       	nop
		}
		LCD_send_character(j);
	}
    while(1)
    {
		for (i=0; i<2; ++i)
 12e:	cf 5f       	subi	r28, 0xFF	; 255
 130:	c2 30       	cpi	r28, 0x02	; 2
 132:	88 f3       	brcs	.-30     	; 0x116 <main+0x84>
			LCD_send_command(ENTIRE_DISPLAY_RIGHT);
			_delay_ms(1000);
		}
		for (i=0; i<2; ++i)
		{
			LCD_send_command(ENTIRE_DISPLAY_LEFT);
 134:	88 e1       	ldi	r24, 0x18	; 24
 136:	0e 94 b2 03 	call	0x764	; 0x764 <LCD_send_command>
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	99 e6       	ldi	r25, 0x69	; 105
 13e:	a8 e1       	ldi	r26, 0x18	; 24
 140:	81 50       	subi	r24, 0x01	; 1
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	a0 40       	sbci	r26, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0xae>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0xb8>
 14a:	00 00       	nop
 14c:	88 e1       	ldi	r24, 0x18	; 24
 14e:	0e 94 b2 03 	call	0x764	; 0x764 <LCD_send_command>
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	99 e6       	ldi	r25, 0x69	; 105
 156:	a8 e1       	ldi	r26, 0x18	; 24
 158:	81 50       	subi	r24, 0x01	; 1
 15a:	90 40       	sbci	r25, 0x00	; 0
 15c:	a0 40       	sbci	r26, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <main+0xc6>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0xd0>
 162:	00 00       	nop
		}
		LCD_send_character(j);
	}
    while(1)
    {
		for (i=0; i<2; ++i)
 164:	c0 2f       	mov	r28, r16
 166:	e4 cf       	rjmp	.-56     	; 0x130 <main+0x9e>

00000168 <GPIO_pin_direction>:
#include "Atmega_GPIO.h"

void GPIO_pin_direction(char PORT, uint8 BIT, uint8 DIR)
{
    switch(PORT)
 168:	84 34       	cpi	r24, 0x44	; 68
 16a:	09 f4       	brne	.+2      	; 0x16e <GPIO_pin_direction+0x6>
 16c:	71 c0       	rjmp	.+226    	; 0x250 <GPIO_pin_direction+0xe8>
 16e:	85 34       	cpi	r24, 0x45	; 69
 170:	48 f4       	brcc	.+18     	; 0x184 <GPIO_pin_direction+0x1c>
 172:	82 34       	cpi	r24, 0x42	; 66
 174:	99 f1       	breq	.+102    	; 0x1dc <GPIO_pin_direction+0x74>
 176:	83 34       	cpi	r24, 0x43	; 67
 178:	08 f0       	brcs	.+2      	; 0x17c <GPIO_pin_direction+0x14>
 17a:	4d c0       	rjmp	.+154    	; 0x216 <GPIO_pin_direction+0xae>
 17c:	81 34       	cpi	r24, 0x41	; 65
 17e:	09 f0       	breq	.+2      	; 0x182 <GPIO_pin_direction+0x1a>
 180:	83 c0       	rjmp	.+262    	; 0x288 <GPIO_pin_direction+0x120>
 182:	0f c0       	rjmp	.+30     	; 0x1a2 <GPIO_pin_direction+0x3a>
 184:	82 36       	cpi	r24, 0x62	; 98
 186:	51 f1       	breq	.+84     	; 0x1dc <GPIO_pin_direction+0x74>
 188:	83 36       	cpi	r24, 0x63	; 99
 18a:	20 f4       	brcc	.+8      	; 0x194 <GPIO_pin_direction+0x2c>
 18c:	81 36       	cpi	r24, 0x61	; 97
 18e:	09 f0       	breq	.+2      	; 0x192 <GPIO_pin_direction+0x2a>
 190:	7b c0       	rjmp	.+246    	; 0x288 <GPIO_pin_direction+0x120>
 192:	07 c0       	rjmp	.+14     	; 0x1a2 <GPIO_pin_direction+0x3a>
 194:	83 36       	cpi	r24, 0x63	; 99
 196:	09 f4       	brne	.+2      	; 0x19a <GPIO_pin_direction+0x32>
 198:	3e c0       	rjmp	.+124    	; 0x216 <GPIO_pin_direction+0xae>
 19a:	84 36       	cpi	r24, 0x64	; 100
 19c:	09 f0       	breq	.+2      	; 0x1a0 <GPIO_pin_direction+0x38>
 19e:	74 c0       	rjmp	.+232    	; 0x288 <GPIO_pin_direction+0x120>
 1a0:	57 c0       	rjmp	.+174    	; 0x250 <GPIO_pin_direction+0xe8>
    {
        case 'A':
        case 'a':
            if(1 == DIR)
 1a2:	41 30       	cpi	r20, 0x01	; 1
 1a4:	69 f4       	brne	.+26     	; 0x1c0 <GPIO_pin_direction+0x58>
            {
                SET_BIT(DDRA, BIT); //set direction of this pin in port A as output
 1a6:	2a b3       	in	r18, 0x1a	; 26
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	ac 01       	movw	r20, r24
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <GPIO_pin_direction+0x4c>
 1b0:	44 0f       	add	r20, r20
 1b2:	55 1f       	adc	r21, r21
 1b4:	6a 95       	dec	r22
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <GPIO_pin_direction+0x48>
 1b8:	ba 01       	movw	r22, r20
 1ba:	62 2b       	or	r22, r18
 1bc:	6a bb       	out	0x1a, r22	; 26
 1be:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRA, BIT); //set direction of this pin in port A as input
 1c0:	2a b3       	in	r18, 0x1a	; 26
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	ac 01       	movw	r20, r24
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <GPIO_pin_direction+0x66>
 1ca:	44 0f       	add	r20, r20
 1cc:	55 1f       	adc	r21, r21
 1ce:	6a 95       	dec	r22
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <GPIO_pin_direction+0x62>
 1d2:	ba 01       	movw	r22, r20
 1d4:	60 95       	com	r22
 1d6:	62 23       	and	r22, r18
 1d8:	6a bb       	out	0x1a, r22	; 26
 1da:	08 95       	ret
            }
        break;
        case 'B':
        case 'b':
            if(1 == DIR)
 1dc:	41 30       	cpi	r20, 0x01	; 1
 1de:	69 f4       	brne	.+26     	; 0x1fa <GPIO_pin_direction+0x92>
            {
                SET_BIT(DDRB, BIT); //set direction of this pin in port B as output
 1e0:	27 b3       	in	r18, 0x17	; 23
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	ac 01       	movw	r20, r24
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <GPIO_pin_direction+0x86>
 1ea:	44 0f       	add	r20, r20
 1ec:	55 1f       	adc	r21, r21
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <GPIO_pin_direction+0x82>
 1f2:	ba 01       	movw	r22, r20
 1f4:	62 2b       	or	r22, r18
 1f6:	67 bb       	out	0x17, r22	; 23
 1f8:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRB, BIT); //set direction of this pin in port B as input
 1fa:	27 b3       	in	r18, 0x17	; 23
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	ac 01       	movw	r20, r24
 202:	02 c0       	rjmp	.+4      	; 0x208 <GPIO_pin_direction+0xa0>
 204:	44 0f       	add	r20, r20
 206:	55 1f       	adc	r21, r21
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <GPIO_pin_direction+0x9c>
 20c:	ba 01       	movw	r22, r20
 20e:	60 95       	com	r22
 210:	62 23       	and	r22, r18
 212:	67 bb       	out	0x17, r22	; 23
 214:	08 95       	ret
            }
        break;
        case 'C':
        case 'c':
            if(1 == DIR)
 216:	41 30       	cpi	r20, 0x01	; 1
 218:	69 f4       	brne	.+26     	; 0x234 <GPIO_pin_direction+0xcc>
            {
                SET_BIT(DDRC, BIT); //set direction of this pin in port B as output
 21a:	24 b3       	in	r18, 0x14	; 20
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	ac 01       	movw	r20, r24
 222:	02 c0       	rjmp	.+4      	; 0x228 <GPIO_pin_direction+0xc0>
 224:	44 0f       	add	r20, r20
 226:	55 1f       	adc	r21, r21
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <GPIO_pin_direction+0xbc>
 22c:	ba 01       	movw	r22, r20
 22e:	62 2b       	or	r22, r18
 230:	64 bb       	out	0x14, r22	; 20
 232:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRC, BIT); //set direction of this pin in port B as input
 234:	24 b3       	in	r18, 0x14	; 20
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	ac 01       	movw	r20, r24
 23c:	02 c0       	rjmp	.+4      	; 0x242 <GPIO_pin_direction+0xda>
 23e:	44 0f       	add	r20, r20
 240:	55 1f       	adc	r21, r21
 242:	6a 95       	dec	r22
 244:	e2 f7       	brpl	.-8      	; 0x23e <GPIO_pin_direction+0xd6>
 246:	ba 01       	movw	r22, r20
 248:	60 95       	com	r22
 24a:	62 23       	and	r22, r18
 24c:	64 bb       	out	0x14, r22	; 20
 24e:	08 95       	ret
            }
        break;
        case 'D':
        case 'd':
            if(1 == DIR)
 250:	41 30       	cpi	r20, 0x01	; 1
 252:	69 f4       	brne	.+26     	; 0x26e <GPIO_pin_direction+0x106>
            {
                SET_BIT(DDRD, BIT); //set direction of this pin in port C as output
 254:	21 b3       	in	r18, 0x11	; 17
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	ac 01       	movw	r20, r24
 25c:	02 c0       	rjmp	.+4      	; 0x262 <GPIO_pin_direction+0xfa>
 25e:	44 0f       	add	r20, r20
 260:	55 1f       	adc	r21, r21
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <GPIO_pin_direction+0xf6>
 266:	ba 01       	movw	r22, r20
 268:	62 2b       	or	r22, r18
 26a:	61 bb       	out	0x11, r22	; 17
 26c:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRD, BIT); //set direction of this pin in port C as input
 26e:	21 b3       	in	r18, 0x11	; 17
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	ac 01       	movw	r20, r24
 276:	02 c0       	rjmp	.+4      	; 0x27c <GPIO_pin_direction+0x114>
 278:	44 0f       	add	r20, r20
 27a:	55 1f       	adc	r21, r21
 27c:	6a 95       	dec	r22
 27e:	e2 f7       	brpl	.-8      	; 0x278 <GPIO_pin_direction+0x110>
 280:	ba 01       	movw	r22, r20
 282:	60 95       	com	r22
 284:	62 23       	and	r22, r18
 286:	61 bb       	out	0x11, r22	; 17
 288:	08 95       	ret

0000028a <GPIO_pin_write>:
} //end of  GPIO_pin_direction();


void GPIO_pin_write(char PORT, uint8 BIT, uint8 DATA)
{
    switch(PORT)
 28a:	84 34       	cpi	r24, 0x44	; 68
 28c:	09 f4       	brne	.+2      	; 0x290 <GPIO_pin_write+0x6>
 28e:	71 c0       	rjmp	.+226    	; 0x372 <GPIO_pin_write+0xe8>
 290:	85 34       	cpi	r24, 0x45	; 69
 292:	48 f4       	brcc	.+18     	; 0x2a6 <GPIO_pin_write+0x1c>
 294:	82 34       	cpi	r24, 0x42	; 66
 296:	99 f1       	breq	.+102    	; 0x2fe <GPIO_pin_write+0x74>
 298:	83 34       	cpi	r24, 0x43	; 67
 29a:	08 f0       	brcs	.+2      	; 0x29e <GPIO_pin_write+0x14>
 29c:	4d c0       	rjmp	.+154    	; 0x338 <GPIO_pin_write+0xae>
 29e:	81 34       	cpi	r24, 0x41	; 65
 2a0:	09 f0       	breq	.+2      	; 0x2a4 <GPIO_pin_write+0x1a>
 2a2:	83 c0       	rjmp	.+262    	; 0x3aa <GPIO_pin_write+0x120>
 2a4:	0f c0       	rjmp	.+30     	; 0x2c4 <GPIO_pin_write+0x3a>
 2a6:	82 36       	cpi	r24, 0x62	; 98
 2a8:	51 f1       	breq	.+84     	; 0x2fe <GPIO_pin_write+0x74>
 2aa:	83 36       	cpi	r24, 0x63	; 99
 2ac:	20 f4       	brcc	.+8      	; 0x2b6 <GPIO_pin_write+0x2c>
 2ae:	81 36       	cpi	r24, 0x61	; 97
 2b0:	09 f0       	breq	.+2      	; 0x2b4 <GPIO_pin_write+0x2a>
 2b2:	7b c0       	rjmp	.+246    	; 0x3aa <GPIO_pin_write+0x120>
 2b4:	07 c0       	rjmp	.+14     	; 0x2c4 <GPIO_pin_write+0x3a>
 2b6:	83 36       	cpi	r24, 0x63	; 99
 2b8:	09 f4       	brne	.+2      	; 0x2bc <GPIO_pin_write+0x32>
 2ba:	3e c0       	rjmp	.+124    	; 0x338 <GPIO_pin_write+0xae>
 2bc:	84 36       	cpi	r24, 0x64	; 100
 2be:	09 f0       	breq	.+2      	; 0x2c2 <GPIO_pin_write+0x38>
 2c0:	74 c0       	rjmp	.+232    	; 0x3aa <GPIO_pin_write+0x120>
 2c2:	57 c0       	rjmp	.+174    	; 0x372 <GPIO_pin_write+0xe8>
    {
        case 'A':
        case 'a':
            if(1 == DATA)
 2c4:	41 30       	cpi	r20, 0x01	; 1
 2c6:	69 f4       	brne	.+26     	; 0x2e2 <GPIO_pin_write+0x58>
            {
                SET_BIT(PORTA, BIT); //set output value of this pin in port A to 1
 2c8:	2b b3       	in	r18, 0x1b	; 27
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	ac 01       	movw	r20, r24
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <GPIO_pin_write+0x4c>
 2d2:	44 0f       	add	r20, r20
 2d4:	55 1f       	adc	r21, r21
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <GPIO_pin_write+0x48>
 2da:	ba 01       	movw	r22, r20
 2dc:	62 2b       	or	r22, r18
 2de:	6b bb       	out	0x1b, r22	; 27
 2e0:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTA, BIT); //set output value of this pin in port A to 0
 2e2:	2b b3       	in	r18, 0x1b	; 27
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	ac 01       	movw	r20, r24
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <GPIO_pin_write+0x66>
 2ec:	44 0f       	add	r20, r20
 2ee:	55 1f       	adc	r21, r21
 2f0:	6a 95       	dec	r22
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <GPIO_pin_write+0x62>
 2f4:	ba 01       	movw	r22, r20
 2f6:	60 95       	com	r22
 2f8:	62 23       	and	r22, r18
 2fa:	6b bb       	out	0x1b, r22	; 27
 2fc:	08 95       	ret
            }
        break;
        case 'B':
        case 'b':
            if(1 == DATA)
 2fe:	41 30       	cpi	r20, 0x01	; 1
 300:	69 f4       	brne	.+26     	; 0x31c <GPIO_pin_write+0x92>
            {
                SET_BIT(PORTB, BIT); //set output value of this pin in port B to 1
 302:	28 b3       	in	r18, 0x18	; 24
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	ac 01       	movw	r20, r24
 30a:	02 c0       	rjmp	.+4      	; 0x310 <GPIO_pin_write+0x86>
 30c:	44 0f       	add	r20, r20
 30e:	55 1f       	adc	r21, r21
 310:	6a 95       	dec	r22
 312:	e2 f7       	brpl	.-8      	; 0x30c <GPIO_pin_write+0x82>
 314:	ba 01       	movw	r22, r20
 316:	62 2b       	or	r22, r18
 318:	68 bb       	out	0x18, r22	; 24
 31a:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTB, BIT); //set output value of this pin in port B to 0
 31c:	28 b3       	in	r18, 0x18	; 24
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	ac 01       	movw	r20, r24
 324:	02 c0       	rjmp	.+4      	; 0x32a <GPIO_pin_write+0xa0>
 326:	44 0f       	add	r20, r20
 328:	55 1f       	adc	r21, r21
 32a:	6a 95       	dec	r22
 32c:	e2 f7       	brpl	.-8      	; 0x326 <GPIO_pin_write+0x9c>
 32e:	ba 01       	movw	r22, r20
 330:	60 95       	com	r22
 332:	62 23       	and	r22, r18
 334:	68 bb       	out	0x18, r22	; 24
 336:	08 95       	ret
            }
        break;
        case 'C':
        case 'c':
            if(1 == DATA)
 338:	41 30       	cpi	r20, 0x01	; 1
 33a:	69 f4       	brne	.+26     	; 0x356 <GPIO_pin_write+0xcc>
            {
                SET_BIT(PORTC, BIT); //set output value of this pin in port C to 1
 33c:	25 b3       	in	r18, 0x15	; 21
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	ac 01       	movw	r20, r24
 344:	02 c0       	rjmp	.+4      	; 0x34a <GPIO_pin_write+0xc0>
 346:	44 0f       	add	r20, r20
 348:	55 1f       	adc	r21, r21
 34a:	6a 95       	dec	r22
 34c:	e2 f7       	brpl	.-8      	; 0x346 <GPIO_pin_write+0xbc>
 34e:	ba 01       	movw	r22, r20
 350:	62 2b       	or	r22, r18
 352:	65 bb       	out	0x15, r22	; 21
 354:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTC, BIT); //set output value of this pin in port C to 0
 356:	25 b3       	in	r18, 0x15	; 21
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	ac 01       	movw	r20, r24
 35e:	02 c0       	rjmp	.+4      	; 0x364 <GPIO_pin_write+0xda>
 360:	44 0f       	add	r20, r20
 362:	55 1f       	adc	r21, r21
 364:	6a 95       	dec	r22
 366:	e2 f7       	brpl	.-8      	; 0x360 <GPIO_pin_write+0xd6>
 368:	ba 01       	movw	r22, r20
 36a:	60 95       	com	r22
 36c:	62 23       	and	r22, r18
 36e:	65 bb       	out	0x15, r22	; 21
 370:	08 95       	ret
            }
        break;
        case 'D':
        case 'd':
            if(1 == DATA)
 372:	41 30       	cpi	r20, 0x01	; 1
 374:	69 f4       	brne	.+26     	; 0x390 <GPIO_pin_write+0x106>
            {
                SET_BIT(PORTD, BIT); //set output value of this pin in port C to 1
 376:	22 b3       	in	r18, 0x12	; 18
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	ac 01       	movw	r20, r24
 37e:	02 c0       	rjmp	.+4      	; 0x384 <GPIO_pin_write+0xfa>
 380:	44 0f       	add	r20, r20
 382:	55 1f       	adc	r21, r21
 384:	6a 95       	dec	r22
 386:	e2 f7       	brpl	.-8      	; 0x380 <GPIO_pin_write+0xf6>
 388:	ba 01       	movw	r22, r20
 38a:	62 2b       	or	r22, r18
 38c:	62 bb       	out	0x12, r22	; 18
 38e:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTD, BIT); //set output value of this pin in port C to 0
 390:	22 b3       	in	r18, 0x12	; 18
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	ac 01       	movw	r20, r24
 398:	02 c0       	rjmp	.+4      	; 0x39e <GPIO_pin_write+0x114>
 39a:	44 0f       	add	r20, r20
 39c:	55 1f       	adc	r21, r21
 39e:	6a 95       	dec	r22
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <GPIO_pin_write+0x110>
 3a2:	ba 01       	movw	r22, r20
 3a4:	60 95       	com	r22
 3a6:	62 23       	and	r22, r18
 3a8:	62 bb       	out	0x12, r22	; 18
 3aa:	08 95       	ret

000003ac <GPIO_pin_read>:


uint8 GPIO_pin_read(char PORT, uint8 BIT)
{
    uint8 read_value = 0;
    switch(PORT)
 3ac:	84 34       	cpi	r24, 0x44	; 68
 3ae:	99 f1       	breq	.+102    	; 0x416 <GPIO_pin_read+0x6a>
 3b0:	85 34       	cpi	r24, 0x45	; 69
 3b2:	38 f4       	brcc	.+14     	; 0x3c2 <GPIO_pin_read+0x16>
 3b4:	82 34       	cpi	r24, 0x42	; 66
 3b6:	d9 f0       	breq	.+54     	; 0x3ee <GPIO_pin_read+0x42>
 3b8:	83 34       	cpi	r24, 0x43	; 67
 3ba:	18 f5       	brcc	.+70     	; 0x402 <GPIO_pin_read+0x56>
 3bc:	81 34       	cpi	r24, 0x41	; 65
 3be:	a9 f5       	brne	.+106    	; 0x42a <GPIO_pin_read+0x7e>
 3c0:	0c c0       	rjmp	.+24     	; 0x3da <GPIO_pin_read+0x2e>
 3c2:	82 36       	cpi	r24, 0x62	; 98
 3c4:	a1 f0       	breq	.+40     	; 0x3ee <GPIO_pin_read+0x42>
 3c6:	83 36       	cpi	r24, 0x63	; 99
 3c8:	18 f4       	brcc	.+6      	; 0x3d0 <GPIO_pin_read+0x24>
 3ca:	81 36       	cpi	r24, 0x61	; 97
 3cc:	71 f5       	brne	.+92     	; 0x42a <GPIO_pin_read+0x7e>
 3ce:	05 c0       	rjmp	.+10     	; 0x3da <GPIO_pin_read+0x2e>
 3d0:	83 36       	cpi	r24, 0x63	; 99
 3d2:	b9 f0       	breq	.+46     	; 0x402 <GPIO_pin_read+0x56>
 3d4:	84 36       	cpi	r24, 0x64	; 100
 3d6:	49 f5       	brne	.+82     	; 0x42a <GPIO_pin_read+0x7e>
 3d8:	1e c0       	rjmp	.+60     	; 0x416 <GPIO_pin_read+0x6a>
    {
        case 'A':
        case 'a':
            read_value = READ_BIT(PINA, BIT); //read value of given pin in port A
 3da:	29 b3       	in	r18, 0x19	; 25
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	c9 01       	movw	r24, r18
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <GPIO_pin_read+0x3a>
 3e2:	95 95       	asr	r25
 3e4:	87 95       	ror	r24
 3e6:	6a 95       	dec	r22
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <GPIO_pin_read+0x36>
 3ea:	81 70       	andi	r24, 0x01	; 1
        break;
 3ec:	08 95       	ret
        case 'B':
        case 'b':
            read_value = READ_BIT(PINB, BIT); //read value of given pin in port B
 3ee:	26 b3       	in	r18, 0x16	; 22
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	c9 01       	movw	r24, r18
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <GPIO_pin_read+0x4e>
 3f6:	95 95       	asr	r25
 3f8:	87 95       	ror	r24
 3fa:	6a 95       	dec	r22
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <GPIO_pin_read+0x4a>
 3fe:	81 70       	andi	r24, 0x01	; 1
        break;
 400:	08 95       	ret
        case 'C':
        case 'c':
            read_value = READ_BIT(PINC, BIT); //read value of given pin in port C
 402:	23 b3       	in	r18, 0x13	; 19
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	c9 01       	movw	r24, r18
 408:	02 c0       	rjmp	.+4      	; 0x40e <GPIO_pin_read+0x62>
 40a:	95 95       	asr	r25
 40c:	87 95       	ror	r24
 40e:	6a 95       	dec	r22
 410:	e2 f7       	brpl	.-8      	; 0x40a <GPIO_pin_read+0x5e>
 412:	81 70       	andi	r24, 0x01	; 1
        break;
 414:	08 95       	ret
        case 'D':
        case 'd':
            read_value = READ_BIT(PIND, BIT); //read value of given pin in port D
 416:	20 b3       	in	r18, 0x10	; 16
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	c9 01       	movw	r24, r18
 41c:	02 c0       	rjmp	.+4      	; 0x422 <GPIO_pin_read+0x76>
 41e:	95 95       	asr	r25
 420:	87 95       	ror	r24
 422:	6a 95       	dec	r22
 424:	e2 f7       	brpl	.-8      	; 0x41e <GPIO_pin_read+0x72>
 426:	81 70       	andi	r24, 0x01	; 1
        break;
 428:	08 95       	ret
} // end of GPIO_pin_write();


uint8 GPIO_pin_read(char PORT, uint8 BIT)
{
    uint8 read_value = 0;
 42a:	80 e0       	ldi	r24, 0x00	; 0
        break;
        default:
        break;
    } //end of switch(PORT);
    return read_value;
} // end of GPIO_pin_read();
 42c:	08 95       	ret

0000042e <GPIO_pin_toggle>:


void GPIO_pin_toggle(char PORT, uint8 BIT)
{
    switch(PORT)
 42e:	84 34       	cpi	r24, 0x44	; 68
 430:	09 f4       	brne	.+2      	; 0x434 <GPIO_pin_toggle+0x6>
 432:	3d c0       	rjmp	.+122    	; 0x4ae <GPIO_pin_toggle+0x80>
 434:	85 34       	cpi	r24, 0x45	; 69
 436:	40 f4       	brcc	.+16     	; 0x448 <GPIO_pin_toggle+0x1a>
 438:	82 34       	cpi	r24, 0x42	; 66
 43a:	f9 f0       	breq	.+62     	; 0x47a <GPIO_pin_toggle+0x4c>
 43c:	83 34       	cpi	r24, 0x43	; 67
 43e:	50 f5       	brcc	.+84     	; 0x494 <GPIO_pin_toggle+0x66>
 440:	81 34       	cpi	r24, 0x41	; 65
 442:	09 f0       	breq	.+2      	; 0x446 <GPIO_pin_toggle+0x18>
 444:	40 c0       	rjmp	.+128    	; 0x4c6 <GPIO_pin_toggle+0x98>
 446:	0c c0       	rjmp	.+24     	; 0x460 <GPIO_pin_toggle+0x32>
 448:	82 36       	cpi	r24, 0x62	; 98
 44a:	b9 f0       	breq	.+46     	; 0x47a <GPIO_pin_toggle+0x4c>
 44c:	83 36       	cpi	r24, 0x63	; 99
 44e:	18 f4       	brcc	.+6      	; 0x456 <GPIO_pin_toggle+0x28>
 450:	81 36       	cpi	r24, 0x61	; 97
 452:	c9 f5       	brne	.+114    	; 0x4c6 <GPIO_pin_toggle+0x98>
 454:	05 c0       	rjmp	.+10     	; 0x460 <GPIO_pin_toggle+0x32>
 456:	83 36       	cpi	r24, 0x63	; 99
 458:	e9 f0       	breq	.+58     	; 0x494 <GPIO_pin_toggle+0x66>
 45a:	84 36       	cpi	r24, 0x64	; 100
 45c:	a1 f5       	brne	.+104    	; 0x4c6 <GPIO_pin_toggle+0x98>
 45e:	27 c0       	rjmp	.+78     	; 0x4ae <GPIO_pin_toggle+0x80>
    {
        case 'A':
        case 'a':
            TOG_BIT(PORTA, BIT); //toggle value of given pin in port A
 460:	2b b3       	in	r18, 0x1b	; 27
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	ac 01       	movw	r20, r24
 468:	02 c0       	rjmp	.+4      	; 0x46e <GPIO_pin_toggle+0x40>
 46a:	44 0f       	add	r20, r20
 46c:	55 1f       	adc	r21, r21
 46e:	6a 95       	dec	r22
 470:	e2 f7       	brpl	.-8      	; 0x46a <GPIO_pin_toggle+0x3c>
 472:	ba 01       	movw	r22, r20
 474:	62 27       	eor	r22, r18
 476:	6b bb       	out	0x1b, r22	; 27
        break;
 478:	08 95       	ret
        case 'B':
        case 'b':
            TOG_BIT(PORTB, BIT); //toggle value of given pin in port B
 47a:	28 b3       	in	r18, 0x18	; 24
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	ac 01       	movw	r20, r24
 482:	02 c0       	rjmp	.+4      	; 0x488 <GPIO_pin_toggle+0x5a>
 484:	44 0f       	add	r20, r20
 486:	55 1f       	adc	r21, r21
 488:	6a 95       	dec	r22
 48a:	e2 f7       	brpl	.-8      	; 0x484 <GPIO_pin_toggle+0x56>
 48c:	ba 01       	movw	r22, r20
 48e:	62 27       	eor	r22, r18
 490:	68 bb       	out	0x18, r22	; 24
        break;
 492:	08 95       	ret
        case 'C':
        case 'c':
            TOG_BIT(PORTC, BIT); //toggle value of given pin in port C
 494:	25 b3       	in	r18, 0x15	; 21
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	ac 01       	movw	r20, r24
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <GPIO_pin_toggle+0x74>
 49e:	44 0f       	add	r20, r20
 4a0:	55 1f       	adc	r21, r21
 4a2:	6a 95       	dec	r22
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <GPIO_pin_toggle+0x70>
 4a6:	ba 01       	movw	r22, r20
 4a8:	62 27       	eor	r22, r18
 4aa:	65 bb       	out	0x15, r22	; 21
        break;
 4ac:	08 95       	ret
        case 'D':
        case 'd':
            TOG_BIT(PORTD, BIT); //toggle value of given pin in port D
 4ae:	22 b3       	in	r18, 0x12	; 18
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	ac 01       	movw	r20, r24
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <GPIO_pin_toggle+0x8e>
 4b8:	44 0f       	add	r20, r20
 4ba:	55 1f       	adc	r21, r21
 4bc:	6a 95       	dec	r22
 4be:	e2 f7       	brpl	.-8      	; 0x4b8 <GPIO_pin_toggle+0x8a>
 4c0:	ba 01       	movw	r22, r20
 4c2:	62 27       	eor	r22, r18
 4c4:	62 bb       	out	0x12, r22	; 18
 4c6:	08 95       	ret

000004c8 <GPIO_port_direction>:
} // end of GPIO_pin_toggle();


void GPIO_port_direction(char PORT, uint8 DIR)
{
    switch(PORT)
 4c8:	84 34       	cpi	r24, 0x44	; 68
 4ca:	d9 f0       	breq	.+54     	; 0x502 <GPIO_port_direction+0x3a>
 4cc:	85 34       	cpi	r24, 0x45	; 69
 4ce:	38 f4       	brcc	.+14     	; 0x4de <GPIO_port_direction+0x16>
 4d0:	82 34       	cpi	r24, 0x42	; 66
 4d2:	99 f0       	breq	.+38     	; 0x4fa <GPIO_port_direction+0x32>
 4d4:	83 34       	cpi	r24, 0x43	; 67
 4d6:	98 f4       	brcc	.+38     	; 0x4fe <GPIO_port_direction+0x36>
 4d8:	81 34       	cpi	r24, 0x41	; 65
 4da:	a1 f4       	brne	.+40     	; 0x504 <GPIO_port_direction+0x3c>
 4dc:	0c c0       	rjmp	.+24     	; 0x4f6 <GPIO_port_direction+0x2e>
 4de:	82 36       	cpi	r24, 0x62	; 98
 4e0:	61 f0       	breq	.+24     	; 0x4fa <GPIO_port_direction+0x32>
 4e2:	83 36       	cpi	r24, 0x63	; 99
 4e4:	18 f4       	brcc	.+6      	; 0x4ec <GPIO_port_direction+0x24>
 4e6:	81 36       	cpi	r24, 0x61	; 97
 4e8:	69 f4       	brne	.+26     	; 0x504 <GPIO_port_direction+0x3c>
 4ea:	05 c0       	rjmp	.+10     	; 0x4f6 <GPIO_port_direction+0x2e>
 4ec:	83 36       	cpi	r24, 0x63	; 99
 4ee:	39 f0       	breq	.+14     	; 0x4fe <GPIO_port_direction+0x36>
 4f0:	84 36       	cpi	r24, 0x64	; 100
 4f2:	41 f4       	brne	.+16     	; 0x504 <GPIO_port_direction+0x3c>
 4f4:	06 c0       	rjmp	.+12     	; 0x502 <GPIO_port_direction+0x3a>
    {
        case 'A':
        case 'a':
            DDRA = DIR; // set direction of port A to the given DIR
 4f6:	6a bb       	out	0x1a, r22	; 26
        break;
 4f8:	08 95       	ret
        case 'B':
        case 'b':
            DDRB = DIR; // set direction of port B to the given DIR
 4fa:	67 bb       	out	0x17, r22	; 23
        break;
 4fc:	08 95       	ret
        case 'C':
        case 'c':
            DDRC = DIR; // set direction of port C to the given DIR
 4fe:	64 bb       	out	0x14, r22	; 20
        break;
 500:	08 95       	ret
        case 'D':
        case 'd':
            DDRD = DIR; // set direction of port D to the given DIR
 502:	61 bb       	out	0x11, r22	; 17
 504:	08 95       	ret

00000506 <GPIO_port_write>:
} // end of GPIO_port_direction();


void GPIO_port_write(char PORT, uint8 DATA)
{
    switch(PORT)
 506:	84 34       	cpi	r24, 0x44	; 68
 508:	d9 f0       	breq	.+54     	; 0x540 <GPIO_port_write+0x3a>
 50a:	85 34       	cpi	r24, 0x45	; 69
 50c:	38 f4       	brcc	.+14     	; 0x51c <GPIO_port_write+0x16>
 50e:	82 34       	cpi	r24, 0x42	; 66
 510:	99 f0       	breq	.+38     	; 0x538 <GPIO_port_write+0x32>
 512:	83 34       	cpi	r24, 0x43	; 67
 514:	98 f4       	brcc	.+38     	; 0x53c <GPIO_port_write+0x36>
 516:	81 34       	cpi	r24, 0x41	; 65
 518:	a1 f4       	brne	.+40     	; 0x542 <GPIO_port_write+0x3c>
 51a:	0c c0       	rjmp	.+24     	; 0x534 <GPIO_port_write+0x2e>
 51c:	82 36       	cpi	r24, 0x62	; 98
 51e:	61 f0       	breq	.+24     	; 0x538 <GPIO_port_write+0x32>
 520:	83 36       	cpi	r24, 0x63	; 99
 522:	18 f4       	brcc	.+6      	; 0x52a <GPIO_port_write+0x24>
 524:	81 36       	cpi	r24, 0x61	; 97
 526:	69 f4       	brne	.+26     	; 0x542 <GPIO_port_write+0x3c>
 528:	05 c0       	rjmp	.+10     	; 0x534 <GPIO_port_write+0x2e>
 52a:	83 36       	cpi	r24, 0x63	; 99
 52c:	39 f0       	breq	.+14     	; 0x53c <GPIO_port_write+0x36>
 52e:	84 36       	cpi	r24, 0x64	; 100
 530:	41 f4       	brne	.+16     	; 0x542 <GPIO_port_write+0x3c>
 532:	06 c0       	rjmp	.+12     	; 0x540 <GPIO_port_write+0x3a>
    {
        case 'A':
        case 'a':
            PORTA = DATA; // write these data on port A
 534:	6b bb       	out	0x1b, r22	; 27
        break;
 536:	08 95       	ret
        case 'B':
        case 'b':
            PORTB = DATA; // write these data on port B
 538:	68 bb       	out	0x18, r22	; 24
        break;
 53a:	08 95       	ret
        case 'C':
        case 'c':
            PORTC = DATA; // write these data on port C
 53c:	65 bb       	out	0x15, r22	; 21
        break;
 53e:	08 95       	ret
        case 'D':
        case 'd':
            PORTD = DATA; // write these data on port D
 540:	62 bb       	out	0x12, r22	; 18
 542:	08 95       	ret

00000544 <GPIO_port_read>:


uint8 GPIO_port_read(char PORT)
{
    uint8 read_port = 0;
    switch(PORT)
 544:	84 34       	cpi	r24, 0x44	; 68
 546:	d9 f0       	breq	.+54     	; 0x57e <GPIO_port_read+0x3a>
 548:	85 34       	cpi	r24, 0x45	; 69
 54a:	38 f4       	brcc	.+14     	; 0x55a <GPIO_port_read+0x16>
 54c:	82 34       	cpi	r24, 0x42	; 66
 54e:	99 f0       	breq	.+38     	; 0x576 <GPIO_port_read+0x32>
 550:	83 34       	cpi	r24, 0x43	; 67
 552:	98 f4       	brcc	.+38     	; 0x57a <GPIO_port_read+0x36>
 554:	81 34       	cpi	r24, 0x41	; 65
 556:	a9 f4       	brne	.+42     	; 0x582 <GPIO_port_read+0x3e>
 558:	0c c0       	rjmp	.+24     	; 0x572 <GPIO_port_read+0x2e>
 55a:	82 36       	cpi	r24, 0x62	; 98
 55c:	61 f0       	breq	.+24     	; 0x576 <GPIO_port_read+0x32>
 55e:	83 36       	cpi	r24, 0x63	; 99
 560:	18 f4       	brcc	.+6      	; 0x568 <GPIO_port_read+0x24>
 562:	81 36       	cpi	r24, 0x61	; 97
 564:	71 f4       	brne	.+28     	; 0x582 <GPIO_port_read+0x3e>
 566:	05 c0       	rjmp	.+10     	; 0x572 <GPIO_port_read+0x2e>
 568:	83 36       	cpi	r24, 0x63	; 99
 56a:	39 f0       	breq	.+14     	; 0x57a <GPIO_port_read+0x36>
 56c:	84 36       	cpi	r24, 0x64	; 100
 56e:	49 f4       	brne	.+18     	; 0x582 <GPIO_port_read+0x3e>
 570:	06 c0       	rjmp	.+12     	; 0x57e <GPIO_port_read+0x3a>
    {
        case 'A':
        case 'a':
            read_port = PINA; // read data from port A
 572:	89 b3       	in	r24, 0x19	; 25
        break;
 574:	08 95       	ret
        case 'B':
        case 'b':
            read_port = PINB; // read data from port B
 576:	86 b3       	in	r24, 0x16	; 22
        break;
 578:	08 95       	ret
        case 'C':
        case 'c':
            read_port = PINC; // read data from port C
 57a:	83 b3       	in	r24, 0x13	; 19
        break;
 57c:	08 95       	ret
        case 'D':
        case 'd':
            read_port = PIND; // read data from port D
 57e:	80 b3       	in	r24, 0x10	; 16
        break;
 580:	08 95       	ret
} // end of GPIO_port_write();


uint8 GPIO_port_read(char PORT)
{
    uint8 read_port = 0;
 582:	80 e0       	ldi	r24, 0x00	; 0
        break;
        default:
        break;
    } // end of switch(PORT);
    return read_port;
} // end of GPIO_port_read();
 584:	08 95       	ret

00000586 <GPIO_pin_pull_up>:


void GPIO_pin_pull_up(char port_name, uint8 pin_number)
{
    switch(port_name)
 586:	84 34       	cpi	r24, 0x44	; 68
 588:	09 f4       	brne	.+2      	; 0x58c <GPIO_pin_pull_up+0x6>
 58a:	57 c0       	rjmp	.+174    	; 0x63a <GPIO_pin_pull_up+0xb4>
 58c:	85 34       	cpi	r24, 0x45	; 69
 58e:	40 f4       	brcc	.+16     	; 0x5a0 <GPIO_pin_pull_up+0x1a>
 590:	82 34       	cpi	r24, 0x42	; 66
 592:	49 f1       	breq	.+82     	; 0x5e6 <GPIO_pin_pull_up+0x60>
 594:	83 34       	cpi	r24, 0x43	; 67
 596:	e0 f5       	brcc	.+120    	; 0x610 <GPIO_pin_pull_up+0x8a>
 598:	81 34       	cpi	r24, 0x41	; 65
 59a:	09 f0       	breq	.+2      	; 0x59e <GPIO_pin_pull_up+0x18>
 59c:	62 c0       	rjmp	.+196    	; 0x662 <GPIO_pin_pull_up+0xdc>
 59e:	0e c0       	rjmp	.+28     	; 0x5bc <GPIO_pin_pull_up+0x36>
 5a0:	82 36       	cpi	r24, 0x62	; 98
 5a2:	09 f1       	breq	.+66     	; 0x5e6 <GPIO_pin_pull_up+0x60>
 5a4:	83 36       	cpi	r24, 0x63	; 99
 5a6:	20 f4       	brcc	.+8      	; 0x5b0 <GPIO_pin_pull_up+0x2a>
 5a8:	81 36       	cpi	r24, 0x61	; 97
 5aa:	09 f0       	breq	.+2      	; 0x5ae <GPIO_pin_pull_up+0x28>
 5ac:	5a c0       	rjmp	.+180    	; 0x662 <GPIO_pin_pull_up+0xdc>
 5ae:	06 c0       	rjmp	.+12     	; 0x5bc <GPIO_pin_pull_up+0x36>
 5b0:	83 36       	cpi	r24, 0x63	; 99
 5b2:	71 f1       	breq	.+92     	; 0x610 <GPIO_pin_pull_up+0x8a>
 5b4:	84 36       	cpi	r24, 0x64	; 100
 5b6:	09 f0       	breq	.+2      	; 0x5ba <GPIO_pin_pull_up+0x34>
 5b8:	54 c0       	rjmp	.+168    	; 0x662 <GPIO_pin_pull_up+0xdc>
 5ba:	3f c0       	rjmp	.+126    	; 0x63a <GPIO_pin_pull_up+0xb4>
    {
        case 'A':
        case 'a':
            CLR_BIT(DDRA,pin_number); //set pin_number of port_name as input
 5bc:	2a b3       	in	r18, 0x1a	; 26
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	ac 01       	movw	r20, r24
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <GPIO_pin_pull_up+0x44>
 5c6:	44 0f       	add	r20, r20
 5c8:	55 1f       	adc	r21, r21
 5ca:	6a 95       	dec	r22
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <GPIO_pin_pull_up+0x40>
 5ce:	ba 01       	movw	r22, r20
 5d0:	84 2f       	mov	r24, r20
 5d2:	80 95       	com	r24
 5d4:	82 23       	and	r24, r18
 5d6:	8a bb       	out	0x1a, r24	; 26
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 5d8:	80 b7       	in	r24, 0x30	; 48
 5da:	8b 7f       	andi	r24, 0xFB	; 251
 5dc:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTA,pin_number); //set pin_number of port_name as high value
 5de:	8b b3       	in	r24, 0x1b	; 27
 5e0:	68 2b       	or	r22, r24
 5e2:	6b bb       	out	0x1b, r22	; 27
        break;
 5e4:	08 95       	ret
        case 'B':
        case 'b':
            CLR_BIT(DDRB,pin_number); //set pin_number of port_name as input
 5e6:	27 b3       	in	r18, 0x17	; 23
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	ac 01       	movw	r20, r24
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <GPIO_pin_pull_up+0x6e>
 5f0:	44 0f       	add	r20, r20
 5f2:	55 1f       	adc	r21, r21
 5f4:	6a 95       	dec	r22
 5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <GPIO_pin_pull_up+0x6a>
 5f8:	ba 01       	movw	r22, r20
 5fa:	84 2f       	mov	r24, r20
 5fc:	80 95       	com	r24
 5fe:	82 23       	and	r24, r18
 600:	87 bb       	out	0x17, r24	; 23
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 602:	80 b7       	in	r24, 0x30	; 48
 604:	8b 7f       	andi	r24, 0xFB	; 251
 606:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTB,pin_number); //set pin_number of port_name as high value
 608:	88 b3       	in	r24, 0x18	; 24
 60a:	68 2b       	or	r22, r24
 60c:	68 bb       	out	0x18, r22	; 24
        break;
 60e:	08 95       	ret
        case 'C':
        case 'c':
            CLR_BIT(DDRC,pin_number); //set pin_number of port_name as input
 610:	24 b3       	in	r18, 0x14	; 20
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	ac 01       	movw	r20, r24
 618:	02 c0       	rjmp	.+4      	; 0x61e <GPIO_pin_pull_up+0x98>
 61a:	44 0f       	add	r20, r20
 61c:	55 1f       	adc	r21, r21
 61e:	6a 95       	dec	r22
 620:	e2 f7       	brpl	.-8      	; 0x61a <GPIO_pin_pull_up+0x94>
 622:	ba 01       	movw	r22, r20
 624:	84 2f       	mov	r24, r20
 626:	80 95       	com	r24
 628:	82 23       	and	r24, r18
 62a:	84 bb       	out	0x14, r24	; 20
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 62c:	80 b7       	in	r24, 0x30	; 48
 62e:	8b 7f       	andi	r24, 0xFB	; 251
 630:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTC,pin_number); //set pin_number of port_name as high value
 632:	85 b3       	in	r24, 0x15	; 21
 634:	68 2b       	or	r22, r24
 636:	65 bb       	out	0x15, r22	; 21
        break;
 638:	08 95       	ret
        case 'D':
        case 'd':
            CLR_BIT(DDRD,pin_number); //set pin_number of port_name as input
 63a:	21 b3       	in	r18, 0x11	; 17
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	ac 01       	movw	r20, r24
 642:	02 c0       	rjmp	.+4      	; 0x648 <GPIO_pin_pull_up+0xc2>
 644:	44 0f       	add	r20, r20
 646:	55 1f       	adc	r21, r21
 648:	6a 95       	dec	r22
 64a:	e2 f7       	brpl	.-8      	; 0x644 <GPIO_pin_pull_up+0xbe>
 64c:	ba 01       	movw	r22, r20
 64e:	84 2f       	mov	r24, r20
 650:	80 95       	com	r24
 652:	82 23       	and	r24, r18
 654:	81 bb       	out	0x11, r24	; 17
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 656:	80 b7       	in	r24, 0x30	; 48
 658:	8b 7f       	andi	r24, 0xFB	; 251
 65a:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTD,pin_number); //set pin_number of port_name as high value
 65c:	82 b3       	in	r24, 0x12	; 18
 65e:	68 2b       	or	r22, r24
 660:	62 bb       	out	0x12, r22	; 18
 662:	08 95       	ret

00000664 <GPIO_port_write_high_nibble>:



void GPIO_port_write_high_nibble(char port_name, uint8 high_nibble)
{
    high_nibble <<= 4; //clear low_nibble bits in number
 664:	62 95       	swap	r22
 666:	60 7f       	andi	r22, 0xF0	; 240
    switch(port_name)
 668:	84 34       	cpi	r24, 0x44	; 68
 66a:	51 f1       	breq	.+84     	; 0x6c0 <GPIO_port_write_high_nibble+0x5c>
 66c:	85 34       	cpi	r24, 0x45	; 69
 66e:	38 f4       	brcc	.+14     	; 0x67e <GPIO_port_write_high_nibble+0x1a>
 670:	82 34       	cpi	r24, 0x42	; 66
 672:	c1 f0       	breq	.+48     	; 0x6a4 <GPIO_port_write_high_nibble+0x40>
 674:	83 34       	cpi	r24, 0x43	; 67
 676:	e8 f4       	brcc	.+58     	; 0x6b2 <GPIO_port_write_high_nibble+0x4e>
 678:	81 34       	cpi	r24, 0x41	; 65
 67a:	41 f5       	brne	.+80     	; 0x6cc <GPIO_port_write_high_nibble+0x68>
 67c:	0c c0       	rjmp	.+24     	; 0x696 <GPIO_port_write_high_nibble+0x32>
 67e:	82 36       	cpi	r24, 0x62	; 98
 680:	89 f0       	breq	.+34     	; 0x6a4 <GPIO_port_write_high_nibble+0x40>
 682:	83 36       	cpi	r24, 0x63	; 99
 684:	18 f4       	brcc	.+6      	; 0x68c <GPIO_port_write_high_nibble+0x28>
 686:	81 36       	cpi	r24, 0x61	; 97
 688:	09 f5       	brne	.+66     	; 0x6cc <GPIO_port_write_high_nibble+0x68>
 68a:	05 c0       	rjmp	.+10     	; 0x696 <GPIO_port_write_high_nibble+0x32>
 68c:	83 36       	cpi	r24, 0x63	; 99
 68e:	89 f0       	breq	.+34     	; 0x6b2 <GPIO_port_write_high_nibble+0x4e>
 690:	84 36       	cpi	r24, 0x64	; 100
 692:	e1 f4       	brne	.+56     	; 0x6cc <GPIO_port_write_high_nibble+0x68>
 694:	15 c0       	rjmp	.+42     	; 0x6c0 <GPIO_port_write_high_nibble+0x5c>
    {
        case 'A':
        case 'a':
            PORTA &= 0x0f;
 696:	8b b3       	in	r24, 0x1b	; 27
 698:	8f 70       	andi	r24, 0x0F	; 15
 69a:	8b bb       	out	0x1b, r24	; 27
            PORTA |= high_nibble;
 69c:	8b b3       	in	r24, 0x1b	; 27
 69e:	68 2b       	or	r22, r24
 6a0:	6b bb       	out	0x1b, r22	; 27
        break;
 6a2:	08 95       	ret
        case 'B':
        case 'b':
            PORTB &= 0x0f;
 6a4:	88 b3       	in	r24, 0x18	; 24
 6a6:	8f 70       	andi	r24, 0x0F	; 15
 6a8:	88 bb       	out	0x18, r24	; 24
            PORTB |= high_nibble;
 6aa:	88 b3       	in	r24, 0x18	; 24
 6ac:	68 2b       	or	r22, r24
 6ae:	68 bb       	out	0x18, r22	; 24
        break;
 6b0:	08 95       	ret
        case 'C':
        case 'c':
            PORTC &= 0x0f;
 6b2:	85 b3       	in	r24, 0x15	; 21
 6b4:	8f 70       	andi	r24, 0x0F	; 15
 6b6:	85 bb       	out	0x15, r24	; 21
            PORTC |= high_nibble;
 6b8:	85 b3       	in	r24, 0x15	; 21
 6ba:	68 2b       	or	r22, r24
 6bc:	65 bb       	out	0x15, r22	; 21
        break;
 6be:	08 95       	ret
        case 'D':
        case 'd':
            PORTD &= 0x0f;
 6c0:	82 b3       	in	r24, 0x12	; 18
 6c2:	8f 70       	andi	r24, 0x0F	; 15
 6c4:	82 bb       	out	0x12, r24	; 18
            PORTD |= high_nibble;
 6c6:	82 b3       	in	r24, 0x12	; 18
 6c8:	68 2b       	or	r22, r24
 6ca:	62 bb       	out	0x12, r22	; 18
 6cc:	08 95       	ret

000006ce <GPIO_port_write_low_nibble>:
    } // end of switch(port_name);
}

void GPIO_port_write_low_nibble(char port_name, uint8 low_nibble)
{
    low_nibble &= 0x0f; //clear high_nibble bits in number
 6ce:	6f 70       	andi	r22, 0x0F	; 15
    switch(port_name)
 6d0:	84 34       	cpi	r24, 0x44	; 68
 6d2:	51 f1       	breq	.+84     	; 0x728 <GPIO_port_write_low_nibble+0x5a>
 6d4:	85 34       	cpi	r24, 0x45	; 69
 6d6:	38 f4       	brcc	.+14     	; 0x6e6 <GPIO_port_write_low_nibble+0x18>
 6d8:	82 34       	cpi	r24, 0x42	; 66
 6da:	c1 f0       	breq	.+48     	; 0x70c <GPIO_port_write_low_nibble+0x3e>
 6dc:	83 34       	cpi	r24, 0x43	; 67
 6de:	e8 f4       	brcc	.+58     	; 0x71a <GPIO_port_write_low_nibble+0x4c>
 6e0:	81 34       	cpi	r24, 0x41	; 65
 6e2:	41 f5       	brne	.+80     	; 0x734 <GPIO_port_write_low_nibble+0x66>
 6e4:	0c c0       	rjmp	.+24     	; 0x6fe <GPIO_port_write_low_nibble+0x30>
 6e6:	82 36       	cpi	r24, 0x62	; 98
 6e8:	89 f0       	breq	.+34     	; 0x70c <GPIO_port_write_low_nibble+0x3e>
 6ea:	83 36       	cpi	r24, 0x63	; 99
 6ec:	18 f4       	brcc	.+6      	; 0x6f4 <GPIO_port_write_low_nibble+0x26>
 6ee:	81 36       	cpi	r24, 0x61	; 97
 6f0:	09 f5       	brne	.+66     	; 0x734 <GPIO_port_write_low_nibble+0x66>
 6f2:	05 c0       	rjmp	.+10     	; 0x6fe <GPIO_port_write_low_nibble+0x30>
 6f4:	83 36       	cpi	r24, 0x63	; 99
 6f6:	89 f0       	breq	.+34     	; 0x71a <GPIO_port_write_low_nibble+0x4c>
 6f8:	84 36       	cpi	r24, 0x64	; 100
 6fa:	e1 f4       	brne	.+56     	; 0x734 <GPIO_port_write_low_nibble+0x66>
 6fc:	15 c0       	rjmp	.+42     	; 0x728 <GPIO_port_write_low_nibble+0x5a>
    {
        case 'A':
        case 'a':
            PORTA &= 0xf0;
 6fe:	8b b3       	in	r24, 0x1b	; 27
 700:	80 7f       	andi	r24, 0xF0	; 240
 702:	8b bb       	out	0x1b, r24	; 27
            PORTA |= low_nibble;
 704:	8b b3       	in	r24, 0x1b	; 27
 706:	68 2b       	or	r22, r24
 708:	6b bb       	out	0x1b, r22	; 27
        break;
 70a:	08 95       	ret
        case 'B':
        case 'b':
            PORTB &= 0xf0;
 70c:	88 b3       	in	r24, 0x18	; 24
 70e:	80 7f       	andi	r24, 0xF0	; 240
 710:	88 bb       	out	0x18, r24	; 24
            PORTB |= low_nibble;
 712:	88 b3       	in	r24, 0x18	; 24
 714:	68 2b       	or	r22, r24
 716:	68 bb       	out	0x18, r22	; 24
        break;
 718:	08 95       	ret
        case 'C':
        case 'c':
            PORTC &= 0xf0;
 71a:	85 b3       	in	r24, 0x15	; 21
 71c:	80 7f       	andi	r24, 0xF0	; 240
 71e:	85 bb       	out	0x15, r24	; 21
            PORTC |= low_nibble;
 720:	85 b3       	in	r24, 0x15	; 21
 722:	68 2b       	or	r22, r24
 724:	65 bb       	out	0x15, r22	; 21
        break;
 726:	08 95       	ret
        case 'D':
        case 'd':
            PORTD &= 0xf0;
 728:	82 b3       	in	r24, 0x12	; 18
 72a:	80 7f       	andi	r24, 0xF0	; 240
 72c:	82 bb       	out	0x12, r24	; 18
            PORTD |= low_nibble;
 72e:	82 b3       	in	r24, 0x12	; 18
 730:	68 2b       	or	r22, r24
 732:	62 bb       	out	0x12, r22	; 18
 734:	08 95       	ret

00000736 <LCD_send_pulse>:

#include "LCD.h"

static void LCD_send_pulse(void)
{
	GPIO_pin_write(EN_PORT,EN,1);
 736:	82 e4       	ldi	r24, 0x42	; 66
 738:	60 e0       	ldi	r22, 0x00	; 0
 73a:	41 e0       	ldi	r20, 0x01	; 1
 73c:	0e 94 45 01 	call	0x28a	; 0x28a <GPIO_pin_write>
 740:	8f e9       	ldi	r24, 0x9F	; 159
 742:	9f e0       	ldi	r25, 0x0F	; 15
 744:	01 97       	sbiw	r24, 0x01	; 1
 746:	f1 f7       	brne	.-4      	; 0x744 <LCD_send_pulse+0xe>
 748:	00 c0       	rjmp	.+0      	; 0x74a <LCD_send_pulse+0x14>
 74a:	00 00       	nop
	_delay_ms(2);
	GPIO_pin_write(EN_PORT,EN,0);
 74c:	82 e4       	ldi	r24, 0x42	; 66
 74e:	60 e0       	ldi	r22, 0x00	; 0
 750:	40 e0       	ldi	r20, 0x00	; 0
 752:	0e 94 45 01 	call	0x28a	; 0x28a <GPIO_pin_write>
 756:	8f ec       	ldi	r24, 0xCF	; 207
 758:	97 e0       	ldi	r25, 0x07	; 7
 75a:	01 97       	sbiw	r24, 0x01	; 1
 75c:	f1 f7       	brne	.-4      	; 0x75a <LCD_send_pulse+0x24>
 75e:	00 c0       	rjmp	.+0      	; 0x760 <LCD_send_pulse+0x2a>
 760:	00 00       	nop
	_delay_ms(1);	
}
 762:	08 95       	ret

00000764 <LCD_send_command>:


void LCD_send_command(uint8 command)
{
 764:	68 2f       	mov	r22, r24
	GPIO_pin_write(RS_PORT,RS,0); //select command register
	LCD_send_pulse();
	
	#elif defined eight_bits_mode
	
	GPIO_port_write(LCD_PORT,command);
 766:	81 e4       	ldi	r24, 0x41	; 65
 768:	0e 94 83 02 	call	0x506	; 0x506 <GPIO_port_write>
	GPIO_pin_write(RS_PORT,RS,0);
 76c:	82 e4       	ldi	r24, 0x42	; 66
 76e:	61 e0       	ldi	r22, 0x01	; 1
 770:	40 e0       	ldi	r20, 0x00	; 0
 772:	0e 94 45 01 	call	0x28a	; 0x28a <GPIO_pin_write>
	LCD_send_pulse();
 776:	0e 94 9b 03 	call	0x736	; 0x736 <LCD_send_pulse>
	
	#endif
}
 77a:	08 95       	ret

0000077c <LCD_clear_screen>:



void LCD_clear_screen(void)
{
	LCD_send_command(CLEAR_SCREEN);
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	0e 94 b2 03 	call	0x764	; 0x764 <LCD_send_command>
 782:	8f e9       	ldi	r24, 0x9F	; 159
 784:	9f e0       	ldi	r25, 0x0F	; 15
 786:	01 97       	sbiw	r24, 0x01	; 1
 788:	f1 f7       	brne	.-4      	; 0x786 <LCD_clear_screen+0xa>
 78a:	00 c0       	rjmp	.+0      	; 0x78c <LCD_clear_screen+0x10>
 78c:	00 00       	nop
	_delay_ms(2);
}
 78e:	08 95       	ret

00000790 <LCD_return_home>:

void LCD_return_home(void)
{
	LCD_send_command(RETURN_HOME);
 790:	82 e0       	ldi	r24, 0x02	; 2
 792:	0e 94 b2 03 	call	0x764	; 0x764 <LCD_send_command>
 796:	8f e9       	ldi	r24, 0x9F	; 159
 798:	9f e0       	ldi	r25, 0x0F	; 15
 79a:	01 97       	sbiw	r24, 0x01	; 1
 79c:	f1 f7       	brne	.-4      	; 0x79a <LCD_return_home+0xa>
 79e:	00 c0       	rjmp	.+0      	; 0x7a0 <LCD_return_home+0x10>
 7a0:	00 00       	nop
	_delay_ms(2);
}
 7a2:	08 95       	ret

000007a4 <LCD_init>:
 7a4:	8f ef       	ldi	r24, 0xFF	; 255
 7a6:	99 ef       	ldi	r25, 0xF9	; 249
 7a8:	a0 e0       	ldi	r26, 0x00	; 0
 7aa:	81 50       	subi	r24, 0x01	; 1
 7ac:	90 40       	sbci	r25, 0x00	; 0
 7ae:	a0 40       	sbci	r26, 0x00	; 0
 7b0:	e1 f7       	brne	.-8      	; 0x7aa <LCD_init+0x6>
 7b2:	00 c0       	rjmp	.+0      	; 0x7b4 <LCD_init+0x10>
 7b4:	00 00       	nop
	GPIO_pin_direction(RS_PORT,RS,1);//set RS pin to output pin
	//send command to inti LCD:
	LCD_send_command(FOUR_BITS);
	#elif defined eight_bits_mode
	//set connection pins:
	GPIO_port_direction(LCD_PORT,1);
 7b6:	81 e4       	ldi	r24, 0x41	; 65
 7b8:	61 e0       	ldi	r22, 0x01	; 1
 7ba:	0e 94 64 02 	call	0x4c8	; 0x4c8 <GPIO_port_direction>
	GPIO_pin_direction(EN_PORT,EN,1);//set EN pin to output pin
 7be:	82 e4       	ldi	r24, 0x42	; 66
 7c0:	60 e0       	ldi	r22, 0x00	; 0
 7c2:	41 e0       	ldi	r20, 0x01	; 1
 7c4:	0e 94 b4 00 	call	0x168	; 0x168 <GPIO_pin_direction>
	GPIO_pin_direction(RS_PORT,RS,1);//set RS pin to output pin
 7c8:	82 e4       	ldi	r24, 0x42	; 66
 7ca:	61 e0       	ldi	r22, 0x01	; 1
 7cc:	41 e0       	ldi	r20, 0x01	; 1
 7ce:	0e 94 b4 00 	call	0x168	; 0x168 <GPIO_pin_direction>
	//send command to init LCD:
	LCD_send_command(EIGHT_BITS);
 7d2:	88 e3       	ldi	r24, 0x38	; 56
 7d4:	0e 94 b2 03 	call	0x764	; 0x764 <LCD_send_command>
	#endif
	LCD_return_home();
 7d8:	0e 94 c8 03 	call	0x790	; 0x790 <LCD_return_home>
	LCD_send_command(DISPLAY_ON_CURSOR_OFF);
 7dc:	8c e0       	ldi	r24, 0x0C	; 12
 7de:	0e 94 b2 03 	call	0x764	; 0x764 <LCD_send_command>
	LCD_clear_screen();
 7e2:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_clear_screen>
	LCD_send_command(ENGLISH_ENTRY);
 7e6:	86 e0       	ldi	r24, 0x06	; 6
 7e8:	0e 94 b2 03 	call	0x764	; 0x764 <LCD_send_command>
}
 7ec:	08 95       	ret

000007ee <LCD_send_character>:
	LCD_send_command(RETURN_HOME);
	_delay_ms(2);
}

void LCD_send_character(char character)
{
 7ee:	cf 93       	push	r28
 7f0:	c8 2f       	mov	r28, r24
	GPIO_port_write_low_nibble(LCD_PORT,character);
	LCD_send_pulse();
	
	#elif defined eight_bits_mode
	
	GPIO_pin_write(RS_PORT,RS,1);
 7f2:	82 e4       	ldi	r24, 0x42	; 66
 7f4:	61 e0       	ldi	r22, 0x01	; 1
 7f6:	41 e0       	ldi	r20, 0x01	; 1
 7f8:	0e 94 45 01 	call	0x28a	; 0x28a <GPIO_pin_write>
	GPIO_port_write(LCD_PORT,character);
 7fc:	81 e4       	ldi	r24, 0x41	; 65
 7fe:	6c 2f       	mov	r22, r28
 800:	0e 94 83 02 	call	0x506	; 0x506 <GPIO_port_write>
	LCD_send_pulse();
 804:	0e 94 9b 03 	call	0x736	; 0x736 <LCD_send_pulse>
	
	#endif
	
}
 808:	cf 91       	pop	r28
 80a:	08 95       	ret

0000080c <LCD_send_string>:

void LCD_send_string(char* character)
{
 80c:	cf 93       	push	r28
 80e:	df 93       	push	r29
 810:	ec 01       	movw	r28, r24
	while ('\0' != *character)
 812:	88 81       	ld	r24, Y
 814:	88 23       	and	r24, r24
 816:	31 f0       	breq	.+12     	; 0x824 <LCD_send_string+0x18>
	
	#endif
	
}

void LCD_send_string(char* character)
 818:	21 96       	adiw	r28, 0x01	; 1
{
	while ('\0' != *character)
	{
		LCD_send_character(*character);
 81a:	0e 94 f7 03 	call	0x7ee	; 0x7ee <LCD_send_character>
	
}

void LCD_send_string(char* character)
{
	while ('\0' != *character)
 81e:	89 91       	ld	r24, Y+
 820:	88 23       	and	r24, r24
 822:	d9 f7       	brne	.-10     	; 0x81a <LCD_send_string+0xe>
	{
		LCD_send_character(*character);
		character += 1;
	}
}
 824:	df 91       	pop	r29
 826:	cf 91       	pop	r28
 828:	08 95       	ret

0000082a <LCD_move_cursor>:
void LCD_move_cursor(uint8 row, uint8 column)
{
	uint8 r = 0;
	uint8 c = 0;
	
	if( (row>0) && (row<5) && (column>0) && (column<21) )
 82a:	98 2f       	mov	r25, r24
 82c:	91 50       	subi	r25, 0x01	; 1
 82e:	94 30       	cpi	r25, 0x04	; 4
 830:	b0 f4       	brcc	.+44     	; 0x85e <LCD_move_cursor+0x34>
 832:	66 23       	and	r22, r22
 834:	b1 f0       	breq	.+44     	; 0x862 <__stack+0x3>
 836:	65 31       	cpi	r22, 0x15	; 21
 838:	b0 f4       	brcc	.+44     	; 0x866 <__stack+0x7>
	{
		if (1 == row)
 83a:	81 30       	cpi	r24, 0x01	; 1
 83c:	19 f4       	brne	.+6      	; 0x844 <LCD_move_cursor+0x1a>
		{
			c = (0x80 + column - 1);
 83e:	86 2f       	mov	r24, r22
 840:	81 58       	subi	r24, 0x81	; 129
 842:	12 c0       	rjmp	.+36     	; 0x868 <__stack+0x9>
		}
		else if (2 == row)
 844:	82 30       	cpi	r24, 0x02	; 2
 846:	19 f4       	brne	.+6      	; 0x84e <LCD_move_cursor+0x24>
		{
			c = (0xC0 + column - 1);
 848:	86 2f       	mov	r24, r22
 84a:	81 54       	subi	r24, 0x41	; 65
 84c:	0d c0       	rjmp	.+26     	; 0x868 <__stack+0x9>
		}
		else if (3 == row)
 84e:	83 30       	cpi	r24, 0x03	; 3
 850:	19 f4       	brne	.+6      	; 0x858 <LCD_move_cursor+0x2e>
		{
			c = (0x90 + column - 1);
 852:	86 2f       	mov	r24, r22
 854:	81 57       	subi	r24, 0x71	; 113
 856:	08 c0       	rjmp	.+16     	; 0x868 <__stack+0x9>
		}
		else
		{
			c = (0xD0 + column - 1);
 858:	86 2f       	mov	r24, r22
 85a:	81 53       	subi	r24, 0x31	; 49
 85c:	05 c0       	rjmp	.+10     	; 0x868 <__stack+0x9>
		}
	}
	else
	{
		c = 0x80;
 85e:	80 e8       	ldi	r24, 0x80	; 128
 860:	03 c0       	rjmp	.+6      	; 0x868 <__stack+0x9>
 862:	80 e8       	ldi	r24, 0x80	; 128
 864:	01 c0       	rjmp	.+2      	; 0x868 <__stack+0x9>
 866:	80 e8       	ldi	r24, 0x80	; 128
	}
	LCD_send_command(c);
 868:	0e 94 b2 03 	call	0x764	; 0x764 <LCD_send_command>
 86c:	08 95       	ret

0000086e <_exit>:
 86e:	f8 94       	cli

00000870 <__stop_program>:
 870:	ff cf       	rjmp	.-2      	; 0x870 <__stop_program>
