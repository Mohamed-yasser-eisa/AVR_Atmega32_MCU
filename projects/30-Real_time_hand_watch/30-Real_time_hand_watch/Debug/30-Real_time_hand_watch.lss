
30-Real_time_hand_watch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000eb4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00000eb4  00000f48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080008c  0080008c  00000f74  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000f74  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001640  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000016c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001079  00000000  00000000  00001828  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000445  00000000  00000000  000028a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008a9  00000000  00000000  00002ce6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a4  00000000  00000000  00003590  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000486  00000000  00000000  00003934  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ae2  00000000  00000000  00003dba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 36 02 	jmp	0x46c	; 0x46c <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 90 02 	jmp	0x520	; 0x520 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 46 02 	jmp	0x48c	; 0x48c <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 eb       	ldi	r30, 0xB4	; 180
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 38       	cpi	r26, 0x8C	; 140
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e8       	ldi	r26, 0x8C	; 140
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 39       	cpi	r26, 0x98	; 152
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 02 01 	call	0x204	; 0x204 <main>
  8a:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <inc_hours>:



void inc_hours(void)
{
	if ( 0 == Button_read('B',7) )
  92:	82 e4       	ldi	r24, 0x42	; 66
  94:	67 e0       	ldi	r22, 0x07	; 7
  96:	0e 94 8f 05 	call	0xb1e	; 0xb1e <Button_read>
  9a:	88 23       	and	r24, r24
  9c:	b9 f4       	brne	.+46     	; 0xcc <inc_hours+0x3a>
	{
		if ( (0 == Button_read('B',7)) && (pressed >= 6) )
  9e:	82 e4       	ldi	r24, 0x42	; 66
  a0:	67 e0       	ldi	r22, 0x07	; 7
  a2:	0e 94 8f 05 	call	0xb1e	; 0xb1e <Button_read>
  a6:	88 23       	and	r24, r24
  a8:	89 f4       	brne	.+34     	; 0xcc <inc_hours+0x3a>
  aa:	80 91 94 00 	lds	r24, 0x0094
  ae:	86 30       	cpi	r24, 0x06	; 6
  b0:	68 f0       	brcs	.+26     	; 0xcc <inc_hours+0x3a>
		{
			if (12 == hours)
  b2:	80 91 60 00 	lds	r24, 0x0060
  b6:	8c 30       	cpi	r24, 0x0C	; 12
  b8:	11 f4       	brne	.+4      	; 0xbe <inc_hours+0x2c>
			{
				hours = 0;
  ba:	10 92 60 00 	sts	0x0060, r1
			}
			hours++;
  be:	80 91 60 00 	lds	r24, 0x0060
  c2:	8f 5f       	subi	r24, 0xFF	; 255
  c4:	80 93 60 00 	sts	0x0060, r24
			pressed = 0;
  c8:	10 92 94 00 	sts	0x0094, r1
  cc:	08 95       	ret

000000ce <dec_hours>:
	}
}

void dec_hours(void)
{
	if ( 0 == Button_read('B',6) )
  ce:	82 e4       	ldi	r24, 0x42	; 66
  d0:	66 e0       	ldi	r22, 0x06	; 6
  d2:	0e 94 8f 05 	call	0xb1e	; 0xb1e <Button_read>
  d6:	88 23       	and	r24, r24
  d8:	c1 f4       	brne	.+48     	; 0x10a <dec_hours+0x3c>
	{
		if ( (0 == Button_read('B',6)) && (pressed >= 6) )
  da:	82 e4       	ldi	r24, 0x42	; 66
  dc:	66 e0       	ldi	r22, 0x06	; 6
  de:	0e 94 8f 05 	call	0xb1e	; 0xb1e <Button_read>
  e2:	88 23       	and	r24, r24
  e4:	91 f4       	brne	.+36     	; 0x10a <dec_hours+0x3c>
  e6:	80 91 94 00 	lds	r24, 0x0094
  ea:	86 30       	cpi	r24, 0x06	; 6
  ec:	70 f0       	brcs	.+28     	; 0x10a <dec_hours+0x3c>
		{
			if (1 == hours)
  ee:	80 91 60 00 	lds	r24, 0x0060
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	19 f4       	brne	.+6      	; 0xfc <dec_hours+0x2e>
			{
				hours = 13;
  f6:	8d e0       	ldi	r24, 0x0D	; 13
  f8:	80 93 60 00 	sts	0x0060, r24
			}
			hours--;
  fc:	80 91 60 00 	lds	r24, 0x0060
 100:	81 50       	subi	r24, 0x01	; 1
 102:	80 93 60 00 	sts	0x0060, r24
			pressed = 0;
 106:	10 92 94 00 	sts	0x0094, r1
 10a:	08 95       	ret

0000010c <inc_minutes>:
	}
}	

void inc_minutes(void)
{
	if ( 0 == Button_read('B',7) )
 10c:	82 e4       	ldi	r24, 0x42	; 66
 10e:	67 e0       	ldi	r22, 0x07	; 7
 110:	0e 94 8f 05 	call	0xb1e	; 0xb1e <Button_read>
 114:	88 23       	and	r24, r24
 116:	c1 f4       	brne	.+48     	; 0x148 <inc_minutes+0x3c>
	{
		if ( (0 == Button_read('B',7)) && (pressed >= 6) )
 118:	82 e4       	ldi	r24, 0x42	; 66
 11a:	67 e0       	ldi	r22, 0x07	; 7
 11c:	0e 94 8f 05 	call	0xb1e	; 0xb1e <Button_read>
 120:	88 23       	and	r24, r24
 122:	91 f4       	brne	.+36     	; 0x148 <inc_minutes+0x3c>
 124:	80 91 94 00 	lds	r24, 0x0094
 128:	86 30       	cpi	r24, 0x06	; 6
 12a:	70 f0       	brcs	.+28     	; 0x148 <inc_minutes+0x3c>
		{
			if (59 == minutes)
 12c:	80 91 8c 00 	lds	r24, 0x008C
 130:	8b 33       	cpi	r24, 0x3B	; 59
 132:	19 f4       	brne	.+6      	; 0x13a <inc_minutes+0x2e>
			{
				minutes = 255;
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	80 93 8c 00 	sts	0x008C, r24
			}
			minutes++;
 13a:	80 91 8c 00 	lds	r24, 0x008C
 13e:	8f 5f       	subi	r24, 0xFF	; 255
 140:	80 93 8c 00 	sts	0x008C, r24
			pressed = 0;
 144:	10 92 94 00 	sts	0x0094, r1
 148:	08 95       	ret

0000014a <dec_minutes>:
	}
}

void dec_minutes(void)
{
	if ( 0 == Button_read('B',6) )
 14a:	82 e4       	ldi	r24, 0x42	; 66
 14c:	66 e0       	ldi	r22, 0x06	; 6
 14e:	0e 94 8f 05 	call	0xb1e	; 0xb1e <Button_read>
 152:	88 23       	and	r24, r24
 154:	c1 f4       	brne	.+48     	; 0x186 <dec_minutes+0x3c>
	{
		if ( (0 == Button_read('B',6)) && (pressed >= 6) )
 156:	82 e4       	ldi	r24, 0x42	; 66
 158:	66 e0       	ldi	r22, 0x06	; 6
 15a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <Button_read>
 15e:	88 23       	and	r24, r24
 160:	91 f4       	brne	.+36     	; 0x186 <dec_minutes+0x3c>
 162:	80 91 94 00 	lds	r24, 0x0094
 166:	86 30       	cpi	r24, 0x06	; 6
 168:	70 f0       	brcs	.+28     	; 0x186 <dec_minutes+0x3c>
		{
			if (0 == minutes)
 16a:	80 91 8c 00 	lds	r24, 0x008C
 16e:	88 23       	and	r24, r24
 170:	19 f4       	brne	.+6      	; 0x178 <dec_minutes+0x2e>
			{
				minutes = 60;
 172:	8c e3       	ldi	r24, 0x3C	; 60
 174:	80 93 8c 00 	sts	0x008C, r24
			}
			minutes--;
 178:	80 91 8c 00 	lds	r24, 0x008C
 17c:	81 50       	subi	r24, 0x01	; 1
 17e:	80 93 8c 00 	sts	0x008C, r24
			pressed = 0;
 182:	10 92 94 00 	sts	0x0094, r1
 186:	08 95       	ret

00000188 <inc_seconds>:
}


void inc_seconds(void)
{
	if ( 0 == Button_read('B',7) )
 188:	82 e4       	ldi	r24, 0x42	; 66
 18a:	67 e0       	ldi	r22, 0x07	; 7
 18c:	0e 94 8f 05 	call	0xb1e	; 0xb1e <Button_read>
 190:	88 23       	and	r24, r24
 192:	c1 f4       	brne	.+48     	; 0x1c4 <inc_seconds+0x3c>
	{
		if ( (0 == Button_read('B',7)) && (pressed >= 6) )
 194:	82 e4       	ldi	r24, 0x42	; 66
 196:	67 e0       	ldi	r22, 0x07	; 7
 198:	0e 94 8f 05 	call	0xb1e	; 0xb1e <Button_read>
 19c:	88 23       	and	r24, r24
 19e:	91 f4       	brne	.+36     	; 0x1c4 <inc_seconds+0x3c>
 1a0:	80 91 94 00 	lds	r24, 0x0094
 1a4:	86 30       	cpi	r24, 0x06	; 6
 1a6:	70 f0       	brcs	.+28     	; 0x1c4 <inc_seconds+0x3c>
		{
			if (59 == sec)
 1a8:	80 91 96 00 	lds	r24, 0x0096
 1ac:	8b 33       	cpi	r24, 0x3B	; 59
 1ae:	19 f4       	brne	.+6      	; 0x1b6 <inc_seconds+0x2e>
			{
				sec = 255;
 1b0:	8f ef       	ldi	r24, 0xFF	; 255
 1b2:	80 93 96 00 	sts	0x0096, r24
			}
			sec++;
 1b6:	80 91 96 00 	lds	r24, 0x0096
 1ba:	8f 5f       	subi	r24, 0xFF	; 255
 1bc:	80 93 96 00 	sts	0x0096, r24
			pressed = 0;
 1c0:	10 92 94 00 	sts	0x0094, r1
 1c4:	08 95       	ret

000001c6 <dec_seconds>:
	}
}

void dec_seconds(void)
{
	if ( 0 == Button_read('B',6) )
 1c6:	82 e4       	ldi	r24, 0x42	; 66
 1c8:	66 e0       	ldi	r22, 0x06	; 6
 1ca:	0e 94 8f 05 	call	0xb1e	; 0xb1e <Button_read>
 1ce:	88 23       	and	r24, r24
 1d0:	c1 f4       	brne	.+48     	; 0x202 <dec_seconds+0x3c>
	{
		if ( (0 == Button_read('B',6)) && (pressed >= 6) )
 1d2:	82 e4       	ldi	r24, 0x42	; 66
 1d4:	66 e0       	ldi	r22, 0x06	; 6
 1d6:	0e 94 8f 05 	call	0xb1e	; 0xb1e <Button_read>
 1da:	88 23       	and	r24, r24
 1dc:	91 f4       	brne	.+36     	; 0x202 <dec_seconds+0x3c>
 1de:	80 91 94 00 	lds	r24, 0x0094
 1e2:	86 30       	cpi	r24, 0x06	; 6
 1e4:	70 f0       	brcs	.+28     	; 0x202 <dec_seconds+0x3c>
		{
			if (0 == sec)
 1e6:	80 91 96 00 	lds	r24, 0x0096
 1ea:	88 23       	and	r24, r24
 1ec:	19 f4       	brne	.+6      	; 0x1f4 <dec_seconds+0x2e>
			{
				sec = 60;
 1ee:	8c e3       	ldi	r24, 0x3C	; 60
 1f0:	80 93 96 00 	sts	0x0096, r24
			}
			sec--;
 1f4:	80 91 96 00 	lds	r24, 0x0096
 1f8:	81 50       	subi	r24, 0x01	; 1
 1fa:	80 93 96 00 	sts	0x0096, r24
			pressed = 0;
 1fe:	10 92 94 00 	sts	0x0094, r1
 202:	08 95       	ret

00000204 <main>:



int main(void)
{
	Seven_segment_init('A',0);
 204:	81 e4       	ldi	r24, 0x41	; 65
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	0e 94 a4 05 	call	0xb48	; 0xb48 <Seven_segment_init>
	LED_init('B',0);
 20c:	82 e4       	ldi	r24, 0x42	; 66
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	0e 94 92 05 	call	0xb24	; 0xb24 <LED_init>
	LED_init('B',1);
 214:	82 e4       	ldi	r24, 0x42	; 66
 216:	61 e0       	ldi	r22, 0x01	; 1
 218:	0e 94 92 05 	call	0xb24	; 0xb24 <LED_init>
	LED_init('B',2);
 21c:	82 e4       	ldi	r24, 0x42	; 66
 21e:	62 e0       	ldi	r22, 0x02	; 2
 220:	0e 94 92 05 	call	0xb24	; 0xb24 <LED_init>
	LED_init('B',3);
 224:	82 e4       	ldi	r24, 0x42	; 66
 226:	63 e0       	ldi	r22, 0x03	; 3
 228:	0e 94 92 05 	call	0xb24	; 0xb24 <LED_init>
	LED_init('B',4);
 22c:	82 e4       	ldi	r24, 0x42	; 66
 22e:	64 e0       	ldi	r22, 0x04	; 4
 230:	0e 94 92 05 	call	0xb24	; 0xb24 <LED_init>
	LED_init('B',5);
 234:	82 e4       	ldi	r24, 0x42	; 66
 236:	65 e0       	ldi	r22, 0x05	; 5
 238:	0e 94 92 05 	call	0xb24	; 0xb24 <LED_init>
	Button_init_with_internal_pull_up('B',6); //decrement button
 23c:	82 e4       	ldi	r24, 0x42	; 66
 23e:	66 e0       	ldi	r22, 0x06	; 6
 240:	0e 94 8c 05 	call	0xb18	; 0xb18 <Button_init_with_internal_pull_up>
	Button_init_with_internal_pull_up('B',7); //increment button
 244:	82 e4       	ldi	r24, 0x42	; 66
 246:	67 e0       	ldi	r22, 0x07	; 7
 248:	0e 94 8c 05 	call	0xb18	; 0xb18 <Button_init_with_internal_pull_up>
	Button_init_with_internal_pull_up('D',2); //select mode button
 24c:	84 e4       	ldi	r24, 0x44	; 68
 24e:	62 e0       	ldi	r22, 0x02	; 2
 250:	0e 94 8c 05 	call	0xb18	; 0xb18 <Button_init_with_internal_pull_up>
	
	timer2_overflow_init();
 254:	0e 94 35 07 	call	0xe6a	; 0xe6a <timer2_overflow_init>
	timer0_ctc_init();
 258:	0e 94 1f 07 	call	0xe3e	; 0xe3e <timer0_ctc_init>
	SET_BIT(MCUCR,ISC01); //set interrupt mode to falling edge.
 25c:	85 b7       	in	r24, 0x35	; 53
 25e:	82 60       	ori	r24, 0x02	; 2
 260:	85 bf       	out	0x35, r24	; 53
	SET_BIT(GICR,INT0); //enable interrupt on pin INT0
 262:	8b b7       	in	r24, 0x3b	; 59
 264:	80 64       	ori	r24, 0x40	; 64
 266:	8b bf       	out	0x3b, r24	; 59
			minutes = 0;
			hours++;
		}
		if (hours > 12)
		{
			hours = 1;
 268:	d1 e0       	ldi	r29, 0x01	; 1
		{
			Seven_seg5_write(seconds/10);
		}
		else
		{
			Seven_seg6_write(seconds%10);
 26a:	ca e0       	ldi	r28, 0x0A	; 10
	SET_BIT(GICR,INT0); //enable interrupt on pin INT0
	
    while(1)
    {
		/* set hours, minutes, and seconds */
        if (seconds >= 60)
 26c:	80 91 95 00 	lds	r24, 0x0095
 270:	8c 33       	cpi	r24, 0x3C	; 60
 272:	38 f0       	brcs	.+14     	; 0x282 <main+0x7e>
        {
			seconds = 0;
 274:	10 92 95 00 	sts	0x0095, r1
			minutes++;
 278:	80 91 8c 00 	lds	r24, 0x008C
 27c:	8f 5f       	subi	r24, 0xFF	; 255
 27e:	80 93 8c 00 	sts	0x008C, r24
        }
		if (minutes >= 60)
 282:	80 91 8c 00 	lds	r24, 0x008C
 286:	8c 33       	cpi	r24, 0x3C	; 60
 288:	38 f0       	brcs	.+14     	; 0x298 <main+0x94>
		{
			minutes = 0;
 28a:	10 92 8c 00 	sts	0x008C, r1
			hours++;
 28e:	80 91 60 00 	lds	r24, 0x0060
 292:	8f 5f       	subi	r24, 0xFF	; 255
 294:	80 93 60 00 	sts	0x0060, r24
		}
		if (hours > 12)
 298:	80 91 60 00 	lds	r24, 0x0060
 29c:	8d 30       	cpi	r24, 0x0D	; 13
 29e:	10 f0       	brcs	.+4      	; 0x2a4 <main+0xa0>
		{
			hours = 1;
 2a0:	d0 93 60 00 	sts	0x0060, r29
		}
		/*write numbers on 7-segments*/
		if ( flag1 )
 2a4:	80 91 92 00 	lds	r24, 0x0092
 2a8:	88 23       	and	r24, r24
 2aa:	41 f0       	breq	.+16     	; 0x2bc <main+0xb8>
		{
			Seven_seg1_write(hours/10);
 2ac:	80 91 60 00 	lds	r24, 0x0060
 2b0:	6c 2f       	mov	r22, r28
 2b2:	0e 94 4c 07 	call	0xe98	; 0xe98 <__udivmodqi4>
 2b6:	0e 94 2f 06 	call	0xc5e	; 0xc5e <Seven_seg1_write>
 2ba:	3a c0       	rjmp	.+116    	; 0x330 <main+0x12c>
		}
		else if ( flag2)
 2bc:	80 91 90 00 	lds	r24, 0x0090
 2c0:	88 23       	and	r24, r24
 2c2:	49 f0       	breq	.+18     	; 0x2d6 <main+0xd2>
		{
			Seven_seg2_write(hours%10);
 2c4:	80 91 60 00 	lds	r24, 0x0060
 2c8:	6c 2f       	mov	r22, r28
 2ca:	0e 94 4c 07 	call	0xe98	; 0xe98 <__udivmodqi4>
 2ce:	89 2f       	mov	r24, r25
 2d0:	0e 94 57 06 	call	0xcae	; 0xcae <Seven_seg2_write>
 2d4:	2d c0       	rjmp	.+90     	; 0x330 <main+0x12c>
		}
		else if ( flag3)
 2d6:	80 91 97 00 	lds	r24, 0x0097
 2da:	88 23       	and	r24, r24
 2dc:	41 f0       	breq	.+16     	; 0x2ee <main+0xea>
		{
			Seven_seg3_write(minutes/10);
 2de:	80 91 8c 00 	lds	r24, 0x008C
 2e2:	6c 2f       	mov	r22, r28
 2e4:	0e 94 4c 07 	call	0xe98	; 0xe98 <__udivmodqi4>
 2e8:	0e 94 7f 06 	call	0xcfe	; 0xcfe <Seven_seg3_write>
 2ec:	21 c0       	rjmp	.+66     	; 0x330 <main+0x12c>
		}
		else if ( flag4 )
 2ee:	80 91 91 00 	lds	r24, 0x0091
 2f2:	88 23       	and	r24, r24
 2f4:	49 f0       	breq	.+18     	; 0x308 <main+0x104>
		{
			Seven_seg4_write(minutes%10);
 2f6:	80 91 8c 00 	lds	r24, 0x008C
 2fa:	6c 2f       	mov	r22, r28
 2fc:	0e 94 4c 07 	call	0xe98	; 0xe98 <__udivmodqi4>
 300:	89 2f       	mov	r24, r25
 302:	0e 94 a7 06 	call	0xd4e	; 0xd4e <Seven_seg4_write>
 306:	14 c0       	rjmp	.+40     	; 0x330 <main+0x12c>
		}
		else if ( flag5)
 308:	80 91 8f 00 	lds	r24, 0x008F
 30c:	88 23       	and	r24, r24
 30e:	41 f0       	breq	.+16     	; 0x320 <main+0x11c>
		{
			Seven_seg5_write(seconds/10);
 310:	80 91 95 00 	lds	r24, 0x0095
 314:	6c 2f       	mov	r22, r28
 316:	0e 94 4c 07 	call	0xe98	; 0xe98 <__udivmodqi4>
 31a:	0e 94 cf 06 	call	0xd9e	; 0xd9e <Seven_seg5_write>
 31e:	08 c0       	rjmp	.+16     	; 0x330 <main+0x12c>
		}
		else
		{
			Seven_seg6_write(seconds%10);
 320:	80 91 95 00 	lds	r24, 0x0095
 324:	6c 2f       	mov	r22, r28
 326:	0e 94 4c 07 	call	0xe98	; 0xe98 <__udivmodqi4>
 32a:	89 2f       	mov	r24, r25
 32c:	0e 94 f7 06 	call	0xdee	; 0xdee <Seven_seg6_write>
		}
		
		
		/*if button is pressed set time*/
		if ( mode_select )
 330:	80 91 8e 00 	lds	r24, 0x008E
 334:	88 23       	and	r24, r24
 336:	09 f4       	brne	.+2      	; 0x33a <main+0x136>
 338:	96 c0       	rjmp	.+300    	; 0x466 <main+0x262>
		{
				mode_select = 0;
 33a:	10 92 8e 00 	sts	0x008E, r1
				//pressed = 0;
				mode = 1;
 33e:	d0 93 8d 00 	sts	0x008D, r29
				sec = seconds;
 342:	80 91 95 00 	lds	r24, 0x0095
 346:	80 93 96 00 	sts	0x0096, r24
				while(mode < 4)
 34a:	83 c0       	rjmp	.+262    	; 0x452 <main+0x24e>
				{
					switch(mode)
 34c:	80 91 8d 00 	lds	r24, 0x008D
 350:	82 30       	cpi	r24, 0x02	; 2
 352:	49 f0       	breq	.+18     	; 0x366 <main+0x162>
 354:	83 30       	cpi	r24, 0x03	; 3
 356:	61 f0       	breq	.+24     	; 0x370 <main+0x16c>
 358:	81 30       	cpi	r24, 0x01	; 1
 35a:	79 f4       	brne	.+30     	; 0x37a <main+0x176>
					{
						case 1:
							inc_hours();
 35c:	0e 94 49 00 	call	0x92	; 0x92 <inc_hours>
							dec_hours();
 360:	0e 94 67 00 	call	0xce	; 0xce <dec_hours>
							break;
 364:	0c c0       	rjmp	.+24     	; 0x37e <main+0x17a>
						case 2:
							inc_minutes();
 366:	0e 94 86 00 	call	0x10c	; 0x10c <inc_minutes>
							dec_minutes();
 36a:	0e 94 a5 00 	call	0x14a	; 0x14a <dec_minutes>
							break;
 36e:	07 c0       	rjmp	.+14     	; 0x37e <main+0x17a>
						case 3:
							inc_seconds();
 370:	0e 94 c4 00 	call	0x188	; 0x188 <inc_seconds>
							dec_seconds();
 374:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <dec_seconds>
							break;
 378:	02 c0       	rjmp	.+4      	; 0x37e <main+0x17a>
						default:
							pressed = 0;
 37a:	10 92 94 00 	sts	0x0094, r1
					}//end of switch
		
					if ( mode_select )
 37e:	80 91 8e 00 	lds	r24, 0x008E
 382:	88 23       	and	r24, r24
 384:	41 f0       	breq	.+16     	; 0x396 <main+0x192>
					{
						mode++;
 386:	80 91 8d 00 	lds	r24, 0x008D
 38a:	8f 5f       	subi	r24, 0xFF	; 255
 38c:	80 93 8d 00 	sts	0x008D, r24
						mode_select = 0;
 390:	10 92 8e 00 	sts	0x008E, r1
 394:	5e c0       	rjmp	.+188    	; 0x452 <main+0x24e>
					}										
					else
					{
						/*write numbers on 7-segments*/
						if ( flag1 && (mode==1) )
 396:	80 91 92 00 	lds	r24, 0x0092
 39a:	88 23       	and	r24, r24
 39c:	61 f0       	breq	.+24     	; 0x3b6 <main+0x1b2>
 39e:	80 91 8d 00 	lds	r24, 0x008D
 3a2:	81 30       	cpi	r24, 0x01	; 1
 3a4:	41 f4       	brne	.+16     	; 0x3b6 <main+0x1b2>
						{
							Seven_seg1_write(hours/10);
 3a6:	80 91 60 00 	lds	r24, 0x0060
 3aa:	6c 2f       	mov	r22, r28
 3ac:	0e 94 4c 07 	call	0xe98	; 0xe98 <__udivmodqi4>
 3b0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <Seven_seg1_write>
 3b4:	4e c0       	rjmp	.+156    	; 0x452 <main+0x24e>
						}
						else if ( flag2 && (mode==1))
 3b6:	80 91 90 00 	lds	r24, 0x0090
 3ba:	88 23       	and	r24, r24
 3bc:	69 f0       	breq	.+26     	; 0x3d8 <main+0x1d4>
 3be:	80 91 8d 00 	lds	r24, 0x008D
 3c2:	81 30       	cpi	r24, 0x01	; 1
 3c4:	49 f4       	brne	.+18     	; 0x3d8 <main+0x1d4>
						{
							Seven_seg2_write(hours%10);
 3c6:	80 91 60 00 	lds	r24, 0x0060
 3ca:	6c 2f       	mov	r22, r28
 3cc:	0e 94 4c 07 	call	0xe98	; 0xe98 <__udivmodqi4>
 3d0:	89 2f       	mov	r24, r25
 3d2:	0e 94 57 06 	call	0xcae	; 0xcae <Seven_seg2_write>
 3d6:	3d c0       	rjmp	.+122    	; 0x452 <main+0x24e>
						}
						else if ( flag3 && (mode==2))
 3d8:	80 91 97 00 	lds	r24, 0x0097
 3dc:	88 23       	and	r24, r24
 3de:	61 f0       	breq	.+24     	; 0x3f8 <main+0x1f4>
 3e0:	80 91 8d 00 	lds	r24, 0x008D
 3e4:	82 30       	cpi	r24, 0x02	; 2
 3e6:	41 f4       	brne	.+16     	; 0x3f8 <main+0x1f4>
						{
							Seven_seg3_write(minutes/10);
 3e8:	80 91 8c 00 	lds	r24, 0x008C
 3ec:	6c 2f       	mov	r22, r28
 3ee:	0e 94 4c 07 	call	0xe98	; 0xe98 <__udivmodqi4>
 3f2:	0e 94 7f 06 	call	0xcfe	; 0xcfe <Seven_seg3_write>
 3f6:	2d c0       	rjmp	.+90     	; 0x452 <main+0x24e>
						}
						else if ( flag4 && (mode==2))
 3f8:	80 91 91 00 	lds	r24, 0x0091
 3fc:	88 23       	and	r24, r24
 3fe:	69 f0       	breq	.+26     	; 0x41a <main+0x216>
 400:	80 91 8d 00 	lds	r24, 0x008D
 404:	82 30       	cpi	r24, 0x02	; 2
 406:	49 f4       	brne	.+18     	; 0x41a <main+0x216>
						{
							Seven_seg4_write(minutes%10);
 408:	80 91 8c 00 	lds	r24, 0x008C
 40c:	6c 2f       	mov	r22, r28
 40e:	0e 94 4c 07 	call	0xe98	; 0xe98 <__udivmodqi4>
 412:	89 2f       	mov	r24, r25
 414:	0e 94 a7 06 	call	0xd4e	; 0xd4e <Seven_seg4_write>
 418:	1c c0       	rjmp	.+56     	; 0x452 <main+0x24e>
						}
						else if ( flag5 && (mode==3))
 41a:	80 91 8f 00 	lds	r24, 0x008F
 41e:	88 23       	and	r24, r24
 420:	61 f0       	breq	.+24     	; 0x43a <main+0x236>
 422:	80 91 8d 00 	lds	r24, 0x008D
 426:	83 30       	cpi	r24, 0x03	; 3
 428:	41 f4       	brne	.+16     	; 0x43a <main+0x236>
						{
							Seven_seg5_write(sec/10);
 42a:	80 91 96 00 	lds	r24, 0x0096
 42e:	6c 2f       	mov	r22, r28
 430:	0e 94 4c 07 	call	0xe98	; 0xe98 <__udivmodqi4>
 434:	0e 94 cf 06 	call	0xd9e	; 0xd9e <Seven_seg5_write>
 438:	0c c0       	rjmp	.+24     	; 0x452 <main+0x24e>
						}
						else if (mode==3)
 43a:	80 91 8d 00 	lds	r24, 0x008D
 43e:	83 30       	cpi	r24, 0x03	; 3
 440:	41 f4       	brne	.+16     	; 0x452 <main+0x24e>
						{
							Seven_seg6_write(sec%10);
 442:	80 91 96 00 	lds	r24, 0x0096
 446:	6c 2f       	mov	r22, r28
 448:	0e 94 4c 07 	call	0xe98	; 0xe98 <__udivmodqi4>
 44c:	89 2f       	mov	r24, r25
 44e:	0e 94 f7 06 	call	0xdee	; 0xdee <Seven_seg6_write>
		{
				mode_select = 0;
				//pressed = 0;
				mode = 1;
				sec = seconds;
				while(mode < 4)
 452:	80 91 8d 00 	lds	r24, 0x008D
 456:	84 30       	cpi	r24, 0x04	; 4
 458:	08 f4       	brcc	.+2      	; 0x45c <main+0x258>
 45a:	78 cf       	rjmp	.-272    	; 0x34c <main+0x148>
							Seven_seg6_write(sec%10);
						}
					}
	
				} // end of while
				seconds = sec;
 45c:	80 91 96 00 	lds	r24, 0x0096
 460:	80 93 95 00 	sts	0x0095, r24
 464:	03 cf       	rjmp	.-506    	; 0x26c <main+0x68>
		}
		else
		{
			pressed = 0;
 466:	10 92 94 00 	sts	0x0094, r1
 46a:	00 cf       	rjmp	.-512    	; 0x26c <main+0x68>

0000046c <__vector_1>:
}



ISR(INT0_vect)
{
 46c:	1f 92       	push	r1
 46e:	0f 92       	push	r0
 470:	0f b6       	in	r0, 0x3f	; 63
 472:	0f 92       	push	r0
 474:	11 24       	eor	r1, r1
 476:	8f 93       	push	r24
	sei();
 478:	78 94       	sei
	mode_select = 1;
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	80 93 8e 00 	sts	0x008E, r24
}
 480:	8f 91       	pop	r24
 482:	0f 90       	pop	r0
 484:	0f be       	out	0x3f, r0	; 63
 486:	0f 90       	pop	r0
 488:	1f 90       	pop	r1
 48a:	18 95       	reti

0000048c <__vector_10>:


ISR(TIMER0_COMP_vect)
{
 48c:	1f 92       	push	r1
 48e:	0f 92       	push	r0
 490:	0f b6       	in	r0, 0x3f	; 63
 492:	0f 92       	push	r0
 494:	11 24       	eor	r1, r1
 496:	8f 93       	push	r24
	sei();
 498:	78 94       	sei
	/*timer 0 overflow every 8 mSec*/
	counter++;
 49a:	80 91 93 00 	lds	r24, 0x0093
 49e:	8f 5f       	subi	r24, 0xFF	; 255
 4a0:	80 93 93 00 	sts	0x0093, r24
	switch(counter)
 4a4:	80 91 93 00 	lds	r24, 0x0093
 4a8:	83 30       	cpi	r24, 0x03	; 3
 4aa:	c1 f0       	breq	.+48     	; 0x4dc <__vector_10+0x50>
 4ac:	84 30       	cpi	r24, 0x04	; 4
 4ae:	28 f4       	brcc	.+10     	; 0x4ba <__vector_10+0x2e>
 4b0:	81 30       	cpi	r24, 0x01	; 1
 4b2:	51 f0       	breq	.+20     	; 0x4c8 <__vector_10+0x3c>
 4b4:	82 30       	cpi	r24, 0x02	; 2
 4b6:	39 f5       	brne	.+78     	; 0x506 <__vector_10+0x7a>
 4b8:	0b c0       	rjmp	.+22     	; 0x4d0 <__vector_10+0x44>
 4ba:	85 30       	cpi	r24, 0x05	; 5
 4bc:	d9 f0       	breq	.+54     	; 0x4f4 <__vector_10+0x68>
 4be:	85 30       	cpi	r24, 0x05	; 5
 4c0:	98 f0       	brcs	.+38     	; 0x4e8 <__vector_10+0x5c>
 4c2:	86 30       	cpi	r24, 0x06	; 6
 4c4:	01 f5       	brne	.+64     	; 0x506 <__vector_10+0x7a>
 4c6:	1c c0       	rjmp	.+56     	; 0x500 <__vector_10+0x74>
	{
		case 1:
			flag1 = 1;
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	80 93 92 00 	sts	0x0092, r24
			break;
 4ce:	22 c0       	rjmp	.+68     	; 0x514 <__vector_10+0x88>
		case 2:
			flag2 = 1;
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	80 93 90 00 	sts	0x0090, r24
			flag1 = 0;
 4d6:	10 92 92 00 	sts	0x0092, r1
			break;
 4da:	1c c0       	rjmp	.+56     	; 0x514 <__vector_10+0x88>
		case 3:
			flag3 = 1;
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	80 93 97 00 	sts	0x0097, r24
			flag2 = 0;
 4e2:	10 92 90 00 	sts	0x0090, r1
		break;
 4e6:	16 c0       	rjmp	.+44     	; 0x514 <__vector_10+0x88>
		case 4:
			flag4 = 1;
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	80 93 91 00 	sts	0x0091, r24
			flag3 = 0;
 4ee:	10 92 97 00 	sts	0x0097, r1
		break;
 4f2:	10 c0       	rjmp	.+32     	; 0x514 <__vector_10+0x88>
		case 5:
			flag5 = 1;
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	80 93 8f 00 	sts	0x008F, r24
			flag4 = 0;
 4fa:	10 92 91 00 	sts	0x0091, r1
		break;
 4fe:	0a c0       	rjmp	.+20     	; 0x514 <__vector_10+0x88>
		case 6:
			flag5 = 0;
 500:	10 92 8f 00 	sts	0x008F, r1
		break;
 504:	07 c0       	rjmp	.+14     	; 0x514 <__vector_10+0x88>
		default:
		counter = 0;
 506:	10 92 93 00 	sts	0x0093, r1
		pressed++; // increment every 56 mSec
 50a:	80 91 94 00 	lds	r24, 0x0094
 50e:	8f 5f       	subi	r24, 0xFF	; 255
 510:	80 93 94 00 	sts	0x0094, r24
	}
}
 514:	8f 91       	pop	r24
 516:	0f 90       	pop	r0
 518:	0f be       	out	0x3f, r0	; 63
 51a:	0f 90       	pop	r0
 51c:	1f 90       	pop	r1
 51e:	18 95       	reti

00000520 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
 520:	1f 92       	push	r1
 522:	0f 92       	push	r0
 524:	0f b6       	in	r0, 0x3f	; 63
 526:	0f 92       	push	r0
 528:	11 24       	eor	r1, r1
 52a:	8f 93       	push	r24
	/*timer 2 overflow every 1 Sec*/
	seconds++;
 52c:	80 91 95 00 	lds	r24, 0x0095
 530:	8f 5f       	subi	r24, 0xFF	; 255
 532:	80 93 95 00 	sts	0x0095, r24
 536:	8f 91       	pop	r24
 538:	0f 90       	pop	r0
 53a:	0f be       	out	0x3f, r0	; 63
 53c:	0f 90       	pop	r0
 53e:	1f 90       	pop	r1
 540:	18 95       	reti

00000542 <GPIO_pin_direction>:
#include "Atmega_GPIO.h"

void GPIO_pin_direction(char PORT, uint8 BIT, uint8 DIR)
{
    switch(PORT)
 542:	84 34       	cpi	r24, 0x44	; 68
 544:	09 f4       	brne	.+2      	; 0x548 <GPIO_pin_direction+0x6>
 546:	71 c0       	rjmp	.+226    	; 0x62a <GPIO_pin_direction+0xe8>
 548:	85 34       	cpi	r24, 0x45	; 69
 54a:	48 f4       	brcc	.+18     	; 0x55e <GPIO_pin_direction+0x1c>
 54c:	82 34       	cpi	r24, 0x42	; 66
 54e:	99 f1       	breq	.+102    	; 0x5b6 <GPIO_pin_direction+0x74>
 550:	83 34       	cpi	r24, 0x43	; 67
 552:	08 f0       	brcs	.+2      	; 0x556 <GPIO_pin_direction+0x14>
 554:	4d c0       	rjmp	.+154    	; 0x5f0 <GPIO_pin_direction+0xae>
 556:	81 34       	cpi	r24, 0x41	; 65
 558:	09 f0       	breq	.+2      	; 0x55c <GPIO_pin_direction+0x1a>
 55a:	83 c0       	rjmp	.+262    	; 0x662 <GPIO_pin_direction+0x120>
 55c:	0f c0       	rjmp	.+30     	; 0x57c <GPIO_pin_direction+0x3a>
 55e:	82 36       	cpi	r24, 0x62	; 98
 560:	51 f1       	breq	.+84     	; 0x5b6 <GPIO_pin_direction+0x74>
 562:	83 36       	cpi	r24, 0x63	; 99
 564:	20 f4       	brcc	.+8      	; 0x56e <GPIO_pin_direction+0x2c>
 566:	81 36       	cpi	r24, 0x61	; 97
 568:	09 f0       	breq	.+2      	; 0x56c <GPIO_pin_direction+0x2a>
 56a:	7b c0       	rjmp	.+246    	; 0x662 <GPIO_pin_direction+0x120>
 56c:	07 c0       	rjmp	.+14     	; 0x57c <GPIO_pin_direction+0x3a>
 56e:	83 36       	cpi	r24, 0x63	; 99
 570:	09 f4       	brne	.+2      	; 0x574 <GPIO_pin_direction+0x32>
 572:	3e c0       	rjmp	.+124    	; 0x5f0 <GPIO_pin_direction+0xae>
 574:	84 36       	cpi	r24, 0x64	; 100
 576:	09 f0       	breq	.+2      	; 0x57a <GPIO_pin_direction+0x38>
 578:	74 c0       	rjmp	.+232    	; 0x662 <GPIO_pin_direction+0x120>
 57a:	57 c0       	rjmp	.+174    	; 0x62a <GPIO_pin_direction+0xe8>
    {
        case 'A':
        case 'a':
            if(1 == DIR)
 57c:	41 30       	cpi	r20, 0x01	; 1
 57e:	69 f4       	brne	.+26     	; 0x59a <GPIO_pin_direction+0x58>
            {
                SET_BIT(DDRA, BIT); //set direction of this pin in port A as output
 580:	2a b3       	in	r18, 0x1a	; 26
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	ac 01       	movw	r20, r24
 588:	02 c0       	rjmp	.+4      	; 0x58e <GPIO_pin_direction+0x4c>
 58a:	44 0f       	add	r20, r20
 58c:	55 1f       	adc	r21, r21
 58e:	6a 95       	dec	r22
 590:	e2 f7       	brpl	.-8      	; 0x58a <GPIO_pin_direction+0x48>
 592:	ba 01       	movw	r22, r20
 594:	62 2b       	or	r22, r18
 596:	6a bb       	out	0x1a, r22	; 26
 598:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRA, BIT); //set direction of this pin in port A as input
 59a:	2a b3       	in	r18, 0x1a	; 26
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	ac 01       	movw	r20, r24
 5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <GPIO_pin_direction+0x66>
 5a4:	44 0f       	add	r20, r20
 5a6:	55 1f       	adc	r21, r21
 5a8:	6a 95       	dec	r22
 5aa:	e2 f7       	brpl	.-8      	; 0x5a4 <GPIO_pin_direction+0x62>
 5ac:	ba 01       	movw	r22, r20
 5ae:	60 95       	com	r22
 5b0:	62 23       	and	r22, r18
 5b2:	6a bb       	out	0x1a, r22	; 26
 5b4:	08 95       	ret
            }
        break;
        case 'B':
        case 'b':
            if(1 == DIR)
 5b6:	41 30       	cpi	r20, 0x01	; 1
 5b8:	69 f4       	brne	.+26     	; 0x5d4 <GPIO_pin_direction+0x92>
            {
                SET_BIT(DDRB, BIT); //set direction of this pin in port B as output
 5ba:	27 b3       	in	r18, 0x17	; 23
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	ac 01       	movw	r20, r24
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <GPIO_pin_direction+0x86>
 5c4:	44 0f       	add	r20, r20
 5c6:	55 1f       	adc	r21, r21
 5c8:	6a 95       	dec	r22
 5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <GPIO_pin_direction+0x82>
 5cc:	ba 01       	movw	r22, r20
 5ce:	62 2b       	or	r22, r18
 5d0:	67 bb       	out	0x17, r22	; 23
 5d2:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRB, BIT); //set direction of this pin in port B as input
 5d4:	27 b3       	in	r18, 0x17	; 23
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	ac 01       	movw	r20, r24
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <GPIO_pin_direction+0xa0>
 5de:	44 0f       	add	r20, r20
 5e0:	55 1f       	adc	r21, r21
 5e2:	6a 95       	dec	r22
 5e4:	e2 f7       	brpl	.-8      	; 0x5de <GPIO_pin_direction+0x9c>
 5e6:	ba 01       	movw	r22, r20
 5e8:	60 95       	com	r22
 5ea:	62 23       	and	r22, r18
 5ec:	67 bb       	out	0x17, r22	; 23
 5ee:	08 95       	ret
            }
        break;
        case 'C':
        case 'c':
            if(1 == DIR)
 5f0:	41 30       	cpi	r20, 0x01	; 1
 5f2:	69 f4       	brne	.+26     	; 0x60e <GPIO_pin_direction+0xcc>
            {
                SET_BIT(DDRC, BIT); //set direction of this pin in port B as output
 5f4:	24 b3       	in	r18, 0x14	; 20
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	ac 01       	movw	r20, r24
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <GPIO_pin_direction+0xc0>
 5fe:	44 0f       	add	r20, r20
 600:	55 1f       	adc	r21, r21
 602:	6a 95       	dec	r22
 604:	e2 f7       	brpl	.-8      	; 0x5fe <GPIO_pin_direction+0xbc>
 606:	ba 01       	movw	r22, r20
 608:	62 2b       	or	r22, r18
 60a:	64 bb       	out	0x14, r22	; 20
 60c:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRC, BIT); //set direction of this pin in port B as input
 60e:	24 b3       	in	r18, 0x14	; 20
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	ac 01       	movw	r20, r24
 616:	02 c0       	rjmp	.+4      	; 0x61c <GPIO_pin_direction+0xda>
 618:	44 0f       	add	r20, r20
 61a:	55 1f       	adc	r21, r21
 61c:	6a 95       	dec	r22
 61e:	e2 f7       	brpl	.-8      	; 0x618 <GPIO_pin_direction+0xd6>
 620:	ba 01       	movw	r22, r20
 622:	60 95       	com	r22
 624:	62 23       	and	r22, r18
 626:	64 bb       	out	0x14, r22	; 20
 628:	08 95       	ret
            }
        break;
        case 'D':
        case 'd':
            if(1 == DIR)
 62a:	41 30       	cpi	r20, 0x01	; 1
 62c:	69 f4       	brne	.+26     	; 0x648 <GPIO_pin_direction+0x106>
            {
                SET_BIT(DDRD, BIT); //set direction of this pin in port C as output
 62e:	21 b3       	in	r18, 0x11	; 17
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	ac 01       	movw	r20, r24
 636:	02 c0       	rjmp	.+4      	; 0x63c <GPIO_pin_direction+0xfa>
 638:	44 0f       	add	r20, r20
 63a:	55 1f       	adc	r21, r21
 63c:	6a 95       	dec	r22
 63e:	e2 f7       	brpl	.-8      	; 0x638 <GPIO_pin_direction+0xf6>
 640:	ba 01       	movw	r22, r20
 642:	62 2b       	or	r22, r18
 644:	61 bb       	out	0x11, r22	; 17
 646:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRD, BIT); //set direction of this pin in port C as input
 648:	21 b3       	in	r18, 0x11	; 17
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	ac 01       	movw	r20, r24
 650:	02 c0       	rjmp	.+4      	; 0x656 <GPIO_pin_direction+0x114>
 652:	44 0f       	add	r20, r20
 654:	55 1f       	adc	r21, r21
 656:	6a 95       	dec	r22
 658:	e2 f7       	brpl	.-8      	; 0x652 <GPIO_pin_direction+0x110>
 65a:	ba 01       	movw	r22, r20
 65c:	60 95       	com	r22
 65e:	62 23       	and	r22, r18
 660:	61 bb       	out	0x11, r22	; 17
 662:	08 95       	ret

00000664 <GPIO_pin_write>:
} //end of  GPIO_pin_direction();


void GPIO_pin_write(char PORT, uint8 BIT, uint8 DATA)
{
    switch(PORT)
 664:	84 34       	cpi	r24, 0x44	; 68
 666:	09 f4       	brne	.+2      	; 0x66a <GPIO_pin_write+0x6>
 668:	71 c0       	rjmp	.+226    	; 0x74c <GPIO_pin_write+0xe8>
 66a:	85 34       	cpi	r24, 0x45	; 69
 66c:	48 f4       	brcc	.+18     	; 0x680 <GPIO_pin_write+0x1c>
 66e:	82 34       	cpi	r24, 0x42	; 66
 670:	99 f1       	breq	.+102    	; 0x6d8 <GPIO_pin_write+0x74>
 672:	83 34       	cpi	r24, 0x43	; 67
 674:	08 f0       	brcs	.+2      	; 0x678 <GPIO_pin_write+0x14>
 676:	4d c0       	rjmp	.+154    	; 0x712 <GPIO_pin_write+0xae>
 678:	81 34       	cpi	r24, 0x41	; 65
 67a:	09 f0       	breq	.+2      	; 0x67e <GPIO_pin_write+0x1a>
 67c:	83 c0       	rjmp	.+262    	; 0x784 <GPIO_pin_write+0x120>
 67e:	0f c0       	rjmp	.+30     	; 0x69e <GPIO_pin_write+0x3a>
 680:	82 36       	cpi	r24, 0x62	; 98
 682:	51 f1       	breq	.+84     	; 0x6d8 <GPIO_pin_write+0x74>
 684:	83 36       	cpi	r24, 0x63	; 99
 686:	20 f4       	brcc	.+8      	; 0x690 <GPIO_pin_write+0x2c>
 688:	81 36       	cpi	r24, 0x61	; 97
 68a:	09 f0       	breq	.+2      	; 0x68e <GPIO_pin_write+0x2a>
 68c:	7b c0       	rjmp	.+246    	; 0x784 <GPIO_pin_write+0x120>
 68e:	07 c0       	rjmp	.+14     	; 0x69e <GPIO_pin_write+0x3a>
 690:	83 36       	cpi	r24, 0x63	; 99
 692:	09 f4       	brne	.+2      	; 0x696 <GPIO_pin_write+0x32>
 694:	3e c0       	rjmp	.+124    	; 0x712 <GPIO_pin_write+0xae>
 696:	84 36       	cpi	r24, 0x64	; 100
 698:	09 f0       	breq	.+2      	; 0x69c <GPIO_pin_write+0x38>
 69a:	74 c0       	rjmp	.+232    	; 0x784 <GPIO_pin_write+0x120>
 69c:	57 c0       	rjmp	.+174    	; 0x74c <GPIO_pin_write+0xe8>
    {
        case 'A':
        case 'a':
            if(1 == DATA)
 69e:	41 30       	cpi	r20, 0x01	; 1
 6a0:	69 f4       	brne	.+26     	; 0x6bc <GPIO_pin_write+0x58>
            {
                SET_BIT(PORTA, BIT); //set output value of this pin in port A to 1
 6a2:	2b b3       	in	r18, 0x1b	; 27
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	ac 01       	movw	r20, r24
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <GPIO_pin_write+0x4c>
 6ac:	44 0f       	add	r20, r20
 6ae:	55 1f       	adc	r21, r21
 6b0:	6a 95       	dec	r22
 6b2:	e2 f7       	brpl	.-8      	; 0x6ac <GPIO_pin_write+0x48>
 6b4:	ba 01       	movw	r22, r20
 6b6:	62 2b       	or	r22, r18
 6b8:	6b bb       	out	0x1b, r22	; 27
 6ba:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTA, BIT); //set output value of this pin in port A to 0
 6bc:	2b b3       	in	r18, 0x1b	; 27
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	ac 01       	movw	r20, r24
 6c4:	02 c0       	rjmp	.+4      	; 0x6ca <GPIO_pin_write+0x66>
 6c6:	44 0f       	add	r20, r20
 6c8:	55 1f       	adc	r21, r21
 6ca:	6a 95       	dec	r22
 6cc:	e2 f7       	brpl	.-8      	; 0x6c6 <GPIO_pin_write+0x62>
 6ce:	ba 01       	movw	r22, r20
 6d0:	60 95       	com	r22
 6d2:	62 23       	and	r22, r18
 6d4:	6b bb       	out	0x1b, r22	; 27
 6d6:	08 95       	ret
            }
        break;
        case 'B':
        case 'b':
            if(1 == DATA)
 6d8:	41 30       	cpi	r20, 0x01	; 1
 6da:	69 f4       	brne	.+26     	; 0x6f6 <GPIO_pin_write+0x92>
            {
                SET_BIT(PORTB, BIT); //set output value of this pin in port B to 1
 6dc:	28 b3       	in	r18, 0x18	; 24
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	ac 01       	movw	r20, r24
 6e4:	02 c0       	rjmp	.+4      	; 0x6ea <GPIO_pin_write+0x86>
 6e6:	44 0f       	add	r20, r20
 6e8:	55 1f       	adc	r21, r21
 6ea:	6a 95       	dec	r22
 6ec:	e2 f7       	brpl	.-8      	; 0x6e6 <GPIO_pin_write+0x82>
 6ee:	ba 01       	movw	r22, r20
 6f0:	62 2b       	or	r22, r18
 6f2:	68 bb       	out	0x18, r22	; 24
 6f4:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTB, BIT); //set output value of this pin in port B to 0
 6f6:	28 b3       	in	r18, 0x18	; 24
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	ac 01       	movw	r20, r24
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <GPIO_pin_write+0xa0>
 700:	44 0f       	add	r20, r20
 702:	55 1f       	adc	r21, r21
 704:	6a 95       	dec	r22
 706:	e2 f7       	brpl	.-8      	; 0x700 <GPIO_pin_write+0x9c>
 708:	ba 01       	movw	r22, r20
 70a:	60 95       	com	r22
 70c:	62 23       	and	r22, r18
 70e:	68 bb       	out	0x18, r22	; 24
 710:	08 95       	ret
            }
        break;
        case 'C':
        case 'c':
            if(1 == DATA)
 712:	41 30       	cpi	r20, 0x01	; 1
 714:	69 f4       	brne	.+26     	; 0x730 <GPIO_pin_write+0xcc>
            {
                SET_BIT(PORTC, BIT); //set output value of this pin in port C to 1
 716:	25 b3       	in	r18, 0x15	; 21
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	ac 01       	movw	r20, r24
 71e:	02 c0       	rjmp	.+4      	; 0x724 <GPIO_pin_write+0xc0>
 720:	44 0f       	add	r20, r20
 722:	55 1f       	adc	r21, r21
 724:	6a 95       	dec	r22
 726:	e2 f7       	brpl	.-8      	; 0x720 <GPIO_pin_write+0xbc>
 728:	ba 01       	movw	r22, r20
 72a:	62 2b       	or	r22, r18
 72c:	65 bb       	out	0x15, r22	; 21
 72e:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTC, BIT); //set output value of this pin in port C to 0
 730:	25 b3       	in	r18, 0x15	; 21
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	ac 01       	movw	r20, r24
 738:	02 c0       	rjmp	.+4      	; 0x73e <GPIO_pin_write+0xda>
 73a:	44 0f       	add	r20, r20
 73c:	55 1f       	adc	r21, r21
 73e:	6a 95       	dec	r22
 740:	e2 f7       	brpl	.-8      	; 0x73a <GPIO_pin_write+0xd6>
 742:	ba 01       	movw	r22, r20
 744:	60 95       	com	r22
 746:	62 23       	and	r22, r18
 748:	65 bb       	out	0x15, r22	; 21
 74a:	08 95       	ret
            }
        break;
        case 'D':
        case 'd':
            if(1 == DATA)
 74c:	41 30       	cpi	r20, 0x01	; 1
 74e:	69 f4       	brne	.+26     	; 0x76a <GPIO_pin_write+0x106>
            {
                SET_BIT(PORTD, BIT); //set output value of this pin in port C to 1
 750:	22 b3       	in	r18, 0x12	; 18
 752:	81 e0       	ldi	r24, 0x01	; 1
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	ac 01       	movw	r20, r24
 758:	02 c0       	rjmp	.+4      	; 0x75e <GPIO_pin_write+0xfa>
 75a:	44 0f       	add	r20, r20
 75c:	55 1f       	adc	r21, r21
 75e:	6a 95       	dec	r22
 760:	e2 f7       	brpl	.-8      	; 0x75a <GPIO_pin_write+0xf6>
 762:	ba 01       	movw	r22, r20
 764:	62 2b       	or	r22, r18
 766:	62 bb       	out	0x12, r22	; 18
 768:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTD, BIT); //set output value of this pin in port C to 0
 76a:	22 b3       	in	r18, 0x12	; 18
 76c:	81 e0       	ldi	r24, 0x01	; 1
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	ac 01       	movw	r20, r24
 772:	02 c0       	rjmp	.+4      	; 0x778 <GPIO_pin_write+0x114>
 774:	44 0f       	add	r20, r20
 776:	55 1f       	adc	r21, r21
 778:	6a 95       	dec	r22
 77a:	e2 f7       	brpl	.-8      	; 0x774 <GPIO_pin_write+0x110>
 77c:	ba 01       	movw	r22, r20
 77e:	60 95       	com	r22
 780:	62 23       	and	r22, r18
 782:	62 bb       	out	0x12, r22	; 18
 784:	08 95       	ret

00000786 <GPIO_pin_read>:


uint8 GPIO_pin_read(char PORT, uint8 BIT)
{
    uint8 read_value = 0;
    switch(PORT)
 786:	84 34       	cpi	r24, 0x44	; 68
 788:	99 f1       	breq	.+102    	; 0x7f0 <GPIO_pin_read+0x6a>
 78a:	85 34       	cpi	r24, 0x45	; 69
 78c:	38 f4       	brcc	.+14     	; 0x79c <GPIO_pin_read+0x16>
 78e:	82 34       	cpi	r24, 0x42	; 66
 790:	d9 f0       	breq	.+54     	; 0x7c8 <GPIO_pin_read+0x42>
 792:	83 34       	cpi	r24, 0x43	; 67
 794:	18 f5       	brcc	.+70     	; 0x7dc <GPIO_pin_read+0x56>
 796:	81 34       	cpi	r24, 0x41	; 65
 798:	a9 f5       	brne	.+106    	; 0x804 <GPIO_pin_read+0x7e>
 79a:	0c c0       	rjmp	.+24     	; 0x7b4 <GPIO_pin_read+0x2e>
 79c:	82 36       	cpi	r24, 0x62	; 98
 79e:	a1 f0       	breq	.+40     	; 0x7c8 <GPIO_pin_read+0x42>
 7a0:	83 36       	cpi	r24, 0x63	; 99
 7a2:	18 f4       	brcc	.+6      	; 0x7aa <GPIO_pin_read+0x24>
 7a4:	81 36       	cpi	r24, 0x61	; 97
 7a6:	71 f5       	brne	.+92     	; 0x804 <GPIO_pin_read+0x7e>
 7a8:	05 c0       	rjmp	.+10     	; 0x7b4 <GPIO_pin_read+0x2e>
 7aa:	83 36       	cpi	r24, 0x63	; 99
 7ac:	b9 f0       	breq	.+46     	; 0x7dc <GPIO_pin_read+0x56>
 7ae:	84 36       	cpi	r24, 0x64	; 100
 7b0:	49 f5       	brne	.+82     	; 0x804 <GPIO_pin_read+0x7e>
 7b2:	1e c0       	rjmp	.+60     	; 0x7f0 <GPIO_pin_read+0x6a>
    {
        case 'A':
        case 'a':
            read_value = READ_BIT(PINA, BIT); //read value of given pin in port A
 7b4:	29 b3       	in	r18, 0x19	; 25
 7b6:	30 e0       	ldi	r19, 0x00	; 0
 7b8:	c9 01       	movw	r24, r18
 7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <GPIO_pin_read+0x3a>
 7bc:	95 95       	asr	r25
 7be:	87 95       	ror	r24
 7c0:	6a 95       	dec	r22
 7c2:	e2 f7       	brpl	.-8      	; 0x7bc <GPIO_pin_read+0x36>
 7c4:	81 70       	andi	r24, 0x01	; 1
        break;
 7c6:	08 95       	ret
        case 'B':
        case 'b':
            read_value = READ_BIT(PINB, BIT); //read value of given pin in port B
 7c8:	26 b3       	in	r18, 0x16	; 22
 7ca:	30 e0       	ldi	r19, 0x00	; 0
 7cc:	c9 01       	movw	r24, r18
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <GPIO_pin_read+0x4e>
 7d0:	95 95       	asr	r25
 7d2:	87 95       	ror	r24
 7d4:	6a 95       	dec	r22
 7d6:	e2 f7       	brpl	.-8      	; 0x7d0 <GPIO_pin_read+0x4a>
 7d8:	81 70       	andi	r24, 0x01	; 1
        break;
 7da:	08 95       	ret
        case 'C':
        case 'c':
            read_value = READ_BIT(PINC, BIT); //read value of given pin in port C
 7dc:	23 b3       	in	r18, 0x13	; 19
 7de:	30 e0       	ldi	r19, 0x00	; 0
 7e0:	c9 01       	movw	r24, r18
 7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <GPIO_pin_read+0x62>
 7e4:	95 95       	asr	r25
 7e6:	87 95       	ror	r24
 7e8:	6a 95       	dec	r22
 7ea:	e2 f7       	brpl	.-8      	; 0x7e4 <GPIO_pin_read+0x5e>
 7ec:	81 70       	andi	r24, 0x01	; 1
        break;
 7ee:	08 95       	ret
        case 'D':
        case 'd':
            read_value = READ_BIT(PIND, BIT); //read value of given pin in port D
 7f0:	20 b3       	in	r18, 0x10	; 16
 7f2:	30 e0       	ldi	r19, 0x00	; 0
 7f4:	c9 01       	movw	r24, r18
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <GPIO_pin_read+0x76>
 7f8:	95 95       	asr	r25
 7fa:	87 95       	ror	r24
 7fc:	6a 95       	dec	r22
 7fe:	e2 f7       	brpl	.-8      	; 0x7f8 <GPIO_pin_read+0x72>
 800:	81 70       	andi	r24, 0x01	; 1
        break;
 802:	08 95       	ret
} // end of GPIO_pin_write();


uint8 GPIO_pin_read(char PORT, uint8 BIT)
{
    uint8 read_value = 0;
 804:	80 e0       	ldi	r24, 0x00	; 0
        break;
        default:
        break;
    } //end of switch(PORT);
    return read_value;
} // end of GPIO_pin_read();
 806:	08 95       	ret

00000808 <GPIO_pin_toggle>:


void GPIO_pin_toggle(char PORT, uint8 BIT)
{
    switch(PORT)
 808:	84 34       	cpi	r24, 0x44	; 68
 80a:	09 f4       	brne	.+2      	; 0x80e <GPIO_pin_toggle+0x6>
 80c:	3d c0       	rjmp	.+122    	; 0x888 <__stack+0x29>
 80e:	85 34       	cpi	r24, 0x45	; 69
 810:	40 f4       	brcc	.+16     	; 0x822 <GPIO_pin_toggle+0x1a>
 812:	82 34       	cpi	r24, 0x42	; 66
 814:	f9 f0       	breq	.+62     	; 0x854 <GPIO_pin_toggle+0x4c>
 816:	83 34       	cpi	r24, 0x43	; 67
 818:	50 f5       	brcc	.+84     	; 0x86e <__stack+0xf>
 81a:	81 34       	cpi	r24, 0x41	; 65
 81c:	09 f0       	breq	.+2      	; 0x820 <GPIO_pin_toggle+0x18>
 81e:	40 c0       	rjmp	.+128    	; 0x8a0 <__stack+0x41>
 820:	0c c0       	rjmp	.+24     	; 0x83a <GPIO_pin_toggle+0x32>
 822:	82 36       	cpi	r24, 0x62	; 98
 824:	b9 f0       	breq	.+46     	; 0x854 <GPIO_pin_toggle+0x4c>
 826:	83 36       	cpi	r24, 0x63	; 99
 828:	18 f4       	brcc	.+6      	; 0x830 <GPIO_pin_toggle+0x28>
 82a:	81 36       	cpi	r24, 0x61	; 97
 82c:	c9 f5       	brne	.+114    	; 0x8a0 <__stack+0x41>
 82e:	05 c0       	rjmp	.+10     	; 0x83a <GPIO_pin_toggle+0x32>
 830:	83 36       	cpi	r24, 0x63	; 99
 832:	e9 f0       	breq	.+58     	; 0x86e <__stack+0xf>
 834:	84 36       	cpi	r24, 0x64	; 100
 836:	a1 f5       	brne	.+104    	; 0x8a0 <__stack+0x41>
 838:	27 c0       	rjmp	.+78     	; 0x888 <__stack+0x29>
    {
        case 'A':
        case 'a':
            TOG_BIT(PORTA, BIT); //toggle value of given pin in port A
 83a:	2b b3       	in	r18, 0x1b	; 27
 83c:	81 e0       	ldi	r24, 0x01	; 1
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	ac 01       	movw	r20, r24
 842:	02 c0       	rjmp	.+4      	; 0x848 <GPIO_pin_toggle+0x40>
 844:	44 0f       	add	r20, r20
 846:	55 1f       	adc	r21, r21
 848:	6a 95       	dec	r22
 84a:	e2 f7       	brpl	.-8      	; 0x844 <GPIO_pin_toggle+0x3c>
 84c:	ba 01       	movw	r22, r20
 84e:	62 27       	eor	r22, r18
 850:	6b bb       	out	0x1b, r22	; 27
        break;
 852:	08 95       	ret
        case 'B':
        case 'b':
            TOG_BIT(PORTB, BIT); //toggle value of given pin in port B
 854:	28 b3       	in	r18, 0x18	; 24
 856:	81 e0       	ldi	r24, 0x01	; 1
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	ac 01       	movw	r20, r24
 85c:	02 c0       	rjmp	.+4      	; 0x862 <__stack+0x3>
 85e:	44 0f       	add	r20, r20
 860:	55 1f       	adc	r21, r21
 862:	6a 95       	dec	r22
 864:	e2 f7       	brpl	.-8      	; 0x85e <GPIO_pin_toggle+0x56>
 866:	ba 01       	movw	r22, r20
 868:	62 27       	eor	r22, r18
 86a:	68 bb       	out	0x18, r22	; 24
        break;
 86c:	08 95       	ret
        case 'C':
        case 'c':
            TOG_BIT(PORTC, BIT); //toggle value of given pin in port C
 86e:	25 b3       	in	r18, 0x15	; 21
 870:	81 e0       	ldi	r24, 0x01	; 1
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	ac 01       	movw	r20, r24
 876:	02 c0       	rjmp	.+4      	; 0x87c <__stack+0x1d>
 878:	44 0f       	add	r20, r20
 87a:	55 1f       	adc	r21, r21
 87c:	6a 95       	dec	r22
 87e:	e2 f7       	brpl	.-8      	; 0x878 <__stack+0x19>
 880:	ba 01       	movw	r22, r20
 882:	62 27       	eor	r22, r18
 884:	65 bb       	out	0x15, r22	; 21
        break;
 886:	08 95       	ret
        case 'D':
        case 'd':
            TOG_BIT(PORTD, BIT); //toggle value of given pin in port D
 888:	22 b3       	in	r18, 0x12	; 18
 88a:	81 e0       	ldi	r24, 0x01	; 1
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	ac 01       	movw	r20, r24
 890:	02 c0       	rjmp	.+4      	; 0x896 <__stack+0x37>
 892:	44 0f       	add	r20, r20
 894:	55 1f       	adc	r21, r21
 896:	6a 95       	dec	r22
 898:	e2 f7       	brpl	.-8      	; 0x892 <__stack+0x33>
 89a:	ba 01       	movw	r22, r20
 89c:	62 27       	eor	r22, r18
 89e:	62 bb       	out	0x12, r22	; 18
 8a0:	08 95       	ret

000008a2 <GPIO_port_direction>:
} // end of GPIO_pin_toggle();


void GPIO_port_direction(char PORT, uint8 DIR)
{
    switch(PORT)
 8a2:	84 34       	cpi	r24, 0x44	; 68
 8a4:	d9 f0       	breq	.+54     	; 0x8dc <GPIO_port_direction+0x3a>
 8a6:	85 34       	cpi	r24, 0x45	; 69
 8a8:	38 f4       	brcc	.+14     	; 0x8b8 <GPIO_port_direction+0x16>
 8aa:	82 34       	cpi	r24, 0x42	; 66
 8ac:	99 f0       	breq	.+38     	; 0x8d4 <GPIO_port_direction+0x32>
 8ae:	83 34       	cpi	r24, 0x43	; 67
 8b0:	98 f4       	brcc	.+38     	; 0x8d8 <GPIO_port_direction+0x36>
 8b2:	81 34       	cpi	r24, 0x41	; 65
 8b4:	a1 f4       	brne	.+40     	; 0x8de <GPIO_port_direction+0x3c>
 8b6:	0c c0       	rjmp	.+24     	; 0x8d0 <GPIO_port_direction+0x2e>
 8b8:	82 36       	cpi	r24, 0x62	; 98
 8ba:	61 f0       	breq	.+24     	; 0x8d4 <GPIO_port_direction+0x32>
 8bc:	83 36       	cpi	r24, 0x63	; 99
 8be:	18 f4       	brcc	.+6      	; 0x8c6 <GPIO_port_direction+0x24>
 8c0:	81 36       	cpi	r24, 0x61	; 97
 8c2:	69 f4       	brne	.+26     	; 0x8de <GPIO_port_direction+0x3c>
 8c4:	05 c0       	rjmp	.+10     	; 0x8d0 <GPIO_port_direction+0x2e>
 8c6:	83 36       	cpi	r24, 0x63	; 99
 8c8:	39 f0       	breq	.+14     	; 0x8d8 <GPIO_port_direction+0x36>
 8ca:	84 36       	cpi	r24, 0x64	; 100
 8cc:	41 f4       	brne	.+16     	; 0x8de <GPIO_port_direction+0x3c>
 8ce:	06 c0       	rjmp	.+12     	; 0x8dc <GPIO_port_direction+0x3a>
    {
        case 'A':
        case 'a':
            DDRA = DIR; // set direction of port A to the given DIR
 8d0:	6a bb       	out	0x1a, r22	; 26
        break;
 8d2:	08 95       	ret
        case 'B':
        case 'b':
            DDRB = DIR; // set direction of port B to the given DIR
 8d4:	67 bb       	out	0x17, r22	; 23
        break;
 8d6:	08 95       	ret
        case 'C':
        case 'c':
            DDRC = DIR; // set direction of port C to the given DIR
 8d8:	64 bb       	out	0x14, r22	; 20
        break;
 8da:	08 95       	ret
        case 'D':
        case 'd':
            DDRD = DIR; // set direction of port D to the given DIR
 8dc:	61 bb       	out	0x11, r22	; 17
 8de:	08 95       	ret

000008e0 <GPIO_port_write>:
} // end of GPIO_port_direction();


void GPIO_port_write(char PORT, uint8 DATA)
{
    switch(PORT)
 8e0:	84 34       	cpi	r24, 0x44	; 68
 8e2:	d9 f0       	breq	.+54     	; 0x91a <GPIO_port_write+0x3a>
 8e4:	85 34       	cpi	r24, 0x45	; 69
 8e6:	38 f4       	brcc	.+14     	; 0x8f6 <GPIO_port_write+0x16>
 8e8:	82 34       	cpi	r24, 0x42	; 66
 8ea:	99 f0       	breq	.+38     	; 0x912 <GPIO_port_write+0x32>
 8ec:	83 34       	cpi	r24, 0x43	; 67
 8ee:	98 f4       	brcc	.+38     	; 0x916 <GPIO_port_write+0x36>
 8f0:	81 34       	cpi	r24, 0x41	; 65
 8f2:	a1 f4       	brne	.+40     	; 0x91c <GPIO_port_write+0x3c>
 8f4:	0c c0       	rjmp	.+24     	; 0x90e <GPIO_port_write+0x2e>
 8f6:	82 36       	cpi	r24, 0x62	; 98
 8f8:	61 f0       	breq	.+24     	; 0x912 <GPIO_port_write+0x32>
 8fa:	83 36       	cpi	r24, 0x63	; 99
 8fc:	18 f4       	brcc	.+6      	; 0x904 <GPIO_port_write+0x24>
 8fe:	81 36       	cpi	r24, 0x61	; 97
 900:	69 f4       	brne	.+26     	; 0x91c <GPIO_port_write+0x3c>
 902:	05 c0       	rjmp	.+10     	; 0x90e <GPIO_port_write+0x2e>
 904:	83 36       	cpi	r24, 0x63	; 99
 906:	39 f0       	breq	.+14     	; 0x916 <GPIO_port_write+0x36>
 908:	84 36       	cpi	r24, 0x64	; 100
 90a:	41 f4       	brne	.+16     	; 0x91c <GPIO_port_write+0x3c>
 90c:	06 c0       	rjmp	.+12     	; 0x91a <GPIO_port_write+0x3a>
    {
        case 'A':
        case 'a':
            PORTA = DATA; // write these data on port A
 90e:	6b bb       	out	0x1b, r22	; 27
        break;
 910:	08 95       	ret
        case 'B':
        case 'b':
            PORTB = DATA; // write these data on port B
 912:	68 bb       	out	0x18, r22	; 24
        break;
 914:	08 95       	ret
        case 'C':
        case 'c':
            PORTC = DATA; // write these data on port C
 916:	65 bb       	out	0x15, r22	; 21
        break;
 918:	08 95       	ret
        case 'D':
        case 'd':
            PORTD = DATA; // write these data on port D
 91a:	62 bb       	out	0x12, r22	; 18
 91c:	08 95       	ret

0000091e <GPIO_port_read>:


uint8 GPIO_port_read(char PORT)
{
    uint8 read_port = 0;
    switch(PORT)
 91e:	84 34       	cpi	r24, 0x44	; 68
 920:	d9 f0       	breq	.+54     	; 0x958 <GPIO_port_read+0x3a>
 922:	85 34       	cpi	r24, 0x45	; 69
 924:	38 f4       	brcc	.+14     	; 0x934 <GPIO_port_read+0x16>
 926:	82 34       	cpi	r24, 0x42	; 66
 928:	99 f0       	breq	.+38     	; 0x950 <GPIO_port_read+0x32>
 92a:	83 34       	cpi	r24, 0x43	; 67
 92c:	98 f4       	brcc	.+38     	; 0x954 <GPIO_port_read+0x36>
 92e:	81 34       	cpi	r24, 0x41	; 65
 930:	a9 f4       	brne	.+42     	; 0x95c <GPIO_port_read+0x3e>
 932:	0c c0       	rjmp	.+24     	; 0x94c <GPIO_port_read+0x2e>
 934:	82 36       	cpi	r24, 0x62	; 98
 936:	61 f0       	breq	.+24     	; 0x950 <GPIO_port_read+0x32>
 938:	83 36       	cpi	r24, 0x63	; 99
 93a:	18 f4       	brcc	.+6      	; 0x942 <GPIO_port_read+0x24>
 93c:	81 36       	cpi	r24, 0x61	; 97
 93e:	71 f4       	brne	.+28     	; 0x95c <GPIO_port_read+0x3e>
 940:	05 c0       	rjmp	.+10     	; 0x94c <GPIO_port_read+0x2e>
 942:	83 36       	cpi	r24, 0x63	; 99
 944:	39 f0       	breq	.+14     	; 0x954 <GPIO_port_read+0x36>
 946:	84 36       	cpi	r24, 0x64	; 100
 948:	49 f4       	brne	.+18     	; 0x95c <GPIO_port_read+0x3e>
 94a:	06 c0       	rjmp	.+12     	; 0x958 <GPIO_port_read+0x3a>
    {
        case 'A':
        case 'a':
            read_port = PINA; // read data from port A
 94c:	89 b3       	in	r24, 0x19	; 25
        break;
 94e:	08 95       	ret
        case 'B':
        case 'b':
            read_port = PINB; // read data from port B
 950:	86 b3       	in	r24, 0x16	; 22
        break;
 952:	08 95       	ret
        case 'C':
        case 'c':
            read_port = PINC; // read data from port C
 954:	83 b3       	in	r24, 0x13	; 19
        break;
 956:	08 95       	ret
        case 'D':
        case 'd':
            read_port = PIND; // read data from port D
 958:	80 b3       	in	r24, 0x10	; 16
        break;
 95a:	08 95       	ret
} // end of GPIO_port_write();


uint8 GPIO_port_read(char PORT)
{
    uint8 read_port = 0;
 95c:	80 e0       	ldi	r24, 0x00	; 0
        break;
        default:
        break;
    } // end of switch(PORT);
    return read_port;
} // end of GPIO_port_read();
 95e:	08 95       	ret

00000960 <GPIO_pin_pull_up>:


void GPIO_pin_pull_up(char port_name, uint8 pin_number)
{
    switch(port_name)
 960:	84 34       	cpi	r24, 0x44	; 68
 962:	09 f4       	brne	.+2      	; 0x966 <GPIO_pin_pull_up+0x6>
 964:	57 c0       	rjmp	.+174    	; 0xa14 <GPIO_pin_pull_up+0xb4>
 966:	85 34       	cpi	r24, 0x45	; 69
 968:	40 f4       	brcc	.+16     	; 0x97a <GPIO_pin_pull_up+0x1a>
 96a:	82 34       	cpi	r24, 0x42	; 66
 96c:	49 f1       	breq	.+82     	; 0x9c0 <GPIO_pin_pull_up+0x60>
 96e:	83 34       	cpi	r24, 0x43	; 67
 970:	e0 f5       	brcc	.+120    	; 0x9ea <GPIO_pin_pull_up+0x8a>
 972:	81 34       	cpi	r24, 0x41	; 65
 974:	09 f0       	breq	.+2      	; 0x978 <GPIO_pin_pull_up+0x18>
 976:	62 c0       	rjmp	.+196    	; 0xa3c <GPIO_pin_pull_up+0xdc>
 978:	0e c0       	rjmp	.+28     	; 0x996 <GPIO_pin_pull_up+0x36>
 97a:	82 36       	cpi	r24, 0x62	; 98
 97c:	09 f1       	breq	.+66     	; 0x9c0 <GPIO_pin_pull_up+0x60>
 97e:	83 36       	cpi	r24, 0x63	; 99
 980:	20 f4       	brcc	.+8      	; 0x98a <GPIO_pin_pull_up+0x2a>
 982:	81 36       	cpi	r24, 0x61	; 97
 984:	09 f0       	breq	.+2      	; 0x988 <GPIO_pin_pull_up+0x28>
 986:	5a c0       	rjmp	.+180    	; 0xa3c <GPIO_pin_pull_up+0xdc>
 988:	06 c0       	rjmp	.+12     	; 0x996 <GPIO_pin_pull_up+0x36>
 98a:	83 36       	cpi	r24, 0x63	; 99
 98c:	71 f1       	breq	.+92     	; 0x9ea <GPIO_pin_pull_up+0x8a>
 98e:	84 36       	cpi	r24, 0x64	; 100
 990:	09 f0       	breq	.+2      	; 0x994 <GPIO_pin_pull_up+0x34>
 992:	54 c0       	rjmp	.+168    	; 0xa3c <GPIO_pin_pull_up+0xdc>
 994:	3f c0       	rjmp	.+126    	; 0xa14 <GPIO_pin_pull_up+0xb4>
    {
        case 'A':
        case 'a':
            CLR_BIT(DDRA,pin_number); //set pin_number of port_name as input
 996:	2a b3       	in	r18, 0x1a	; 26
 998:	81 e0       	ldi	r24, 0x01	; 1
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	ac 01       	movw	r20, r24
 99e:	02 c0       	rjmp	.+4      	; 0x9a4 <GPIO_pin_pull_up+0x44>
 9a0:	44 0f       	add	r20, r20
 9a2:	55 1f       	adc	r21, r21
 9a4:	6a 95       	dec	r22
 9a6:	e2 f7       	brpl	.-8      	; 0x9a0 <GPIO_pin_pull_up+0x40>
 9a8:	ba 01       	movw	r22, r20
 9aa:	84 2f       	mov	r24, r20
 9ac:	80 95       	com	r24
 9ae:	82 23       	and	r24, r18
 9b0:	8a bb       	out	0x1a, r24	; 26
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 9b2:	80 b7       	in	r24, 0x30	; 48
 9b4:	8b 7f       	andi	r24, 0xFB	; 251
 9b6:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTA,pin_number); //set pin_number of port_name as high value
 9b8:	8b b3       	in	r24, 0x1b	; 27
 9ba:	68 2b       	or	r22, r24
 9bc:	6b bb       	out	0x1b, r22	; 27
        break;
 9be:	08 95       	ret
        case 'B':
        case 'b':
            CLR_BIT(DDRB,pin_number); //set pin_number of port_name as input
 9c0:	27 b3       	in	r18, 0x17	; 23
 9c2:	81 e0       	ldi	r24, 0x01	; 1
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	ac 01       	movw	r20, r24
 9c8:	02 c0       	rjmp	.+4      	; 0x9ce <GPIO_pin_pull_up+0x6e>
 9ca:	44 0f       	add	r20, r20
 9cc:	55 1f       	adc	r21, r21
 9ce:	6a 95       	dec	r22
 9d0:	e2 f7       	brpl	.-8      	; 0x9ca <GPIO_pin_pull_up+0x6a>
 9d2:	ba 01       	movw	r22, r20
 9d4:	84 2f       	mov	r24, r20
 9d6:	80 95       	com	r24
 9d8:	82 23       	and	r24, r18
 9da:	87 bb       	out	0x17, r24	; 23
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 9dc:	80 b7       	in	r24, 0x30	; 48
 9de:	8b 7f       	andi	r24, 0xFB	; 251
 9e0:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTB,pin_number); //set pin_number of port_name as high value
 9e2:	88 b3       	in	r24, 0x18	; 24
 9e4:	68 2b       	or	r22, r24
 9e6:	68 bb       	out	0x18, r22	; 24
        break;
 9e8:	08 95       	ret
        case 'C':
        case 'c':
            CLR_BIT(DDRC,pin_number); //set pin_number of port_name as input
 9ea:	24 b3       	in	r18, 0x14	; 20
 9ec:	81 e0       	ldi	r24, 0x01	; 1
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	ac 01       	movw	r20, r24
 9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <GPIO_pin_pull_up+0x98>
 9f4:	44 0f       	add	r20, r20
 9f6:	55 1f       	adc	r21, r21
 9f8:	6a 95       	dec	r22
 9fa:	e2 f7       	brpl	.-8      	; 0x9f4 <GPIO_pin_pull_up+0x94>
 9fc:	ba 01       	movw	r22, r20
 9fe:	84 2f       	mov	r24, r20
 a00:	80 95       	com	r24
 a02:	82 23       	and	r24, r18
 a04:	84 bb       	out	0x14, r24	; 20
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 a06:	80 b7       	in	r24, 0x30	; 48
 a08:	8b 7f       	andi	r24, 0xFB	; 251
 a0a:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTC,pin_number); //set pin_number of port_name as high value
 a0c:	85 b3       	in	r24, 0x15	; 21
 a0e:	68 2b       	or	r22, r24
 a10:	65 bb       	out	0x15, r22	; 21
        break;
 a12:	08 95       	ret
        case 'D':
        case 'd':
            CLR_BIT(DDRD,pin_number); //set pin_number of port_name as input
 a14:	21 b3       	in	r18, 0x11	; 17
 a16:	81 e0       	ldi	r24, 0x01	; 1
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	ac 01       	movw	r20, r24
 a1c:	02 c0       	rjmp	.+4      	; 0xa22 <GPIO_pin_pull_up+0xc2>
 a1e:	44 0f       	add	r20, r20
 a20:	55 1f       	adc	r21, r21
 a22:	6a 95       	dec	r22
 a24:	e2 f7       	brpl	.-8      	; 0xa1e <GPIO_pin_pull_up+0xbe>
 a26:	ba 01       	movw	r22, r20
 a28:	84 2f       	mov	r24, r20
 a2a:	80 95       	com	r24
 a2c:	82 23       	and	r24, r18
 a2e:	81 bb       	out	0x11, r24	; 17
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 a30:	80 b7       	in	r24, 0x30	; 48
 a32:	8b 7f       	andi	r24, 0xFB	; 251
 a34:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTD,pin_number); //set pin_number of port_name as high value
 a36:	82 b3       	in	r24, 0x12	; 18
 a38:	68 2b       	or	r22, r24
 a3a:	62 bb       	out	0x12, r22	; 18
 a3c:	08 95       	ret

00000a3e <GPIO_port_write_high_nibble>:



void GPIO_port_write_high_nibble(char port_name, uint8 high_nibble)
{
    high_nibble <<= 4; //clear low_nibble bits in number
 a3e:	62 95       	swap	r22
 a40:	60 7f       	andi	r22, 0xF0	; 240
    switch(port_name)
 a42:	84 34       	cpi	r24, 0x44	; 68
 a44:	51 f1       	breq	.+84     	; 0xa9a <GPIO_port_write_high_nibble+0x5c>
 a46:	85 34       	cpi	r24, 0x45	; 69
 a48:	38 f4       	brcc	.+14     	; 0xa58 <GPIO_port_write_high_nibble+0x1a>
 a4a:	82 34       	cpi	r24, 0x42	; 66
 a4c:	c1 f0       	breq	.+48     	; 0xa7e <GPIO_port_write_high_nibble+0x40>
 a4e:	83 34       	cpi	r24, 0x43	; 67
 a50:	e8 f4       	brcc	.+58     	; 0xa8c <GPIO_port_write_high_nibble+0x4e>
 a52:	81 34       	cpi	r24, 0x41	; 65
 a54:	41 f5       	brne	.+80     	; 0xaa6 <GPIO_port_write_high_nibble+0x68>
 a56:	0c c0       	rjmp	.+24     	; 0xa70 <GPIO_port_write_high_nibble+0x32>
 a58:	82 36       	cpi	r24, 0x62	; 98
 a5a:	89 f0       	breq	.+34     	; 0xa7e <GPIO_port_write_high_nibble+0x40>
 a5c:	83 36       	cpi	r24, 0x63	; 99
 a5e:	18 f4       	brcc	.+6      	; 0xa66 <GPIO_port_write_high_nibble+0x28>
 a60:	81 36       	cpi	r24, 0x61	; 97
 a62:	09 f5       	brne	.+66     	; 0xaa6 <GPIO_port_write_high_nibble+0x68>
 a64:	05 c0       	rjmp	.+10     	; 0xa70 <GPIO_port_write_high_nibble+0x32>
 a66:	83 36       	cpi	r24, 0x63	; 99
 a68:	89 f0       	breq	.+34     	; 0xa8c <GPIO_port_write_high_nibble+0x4e>
 a6a:	84 36       	cpi	r24, 0x64	; 100
 a6c:	e1 f4       	brne	.+56     	; 0xaa6 <GPIO_port_write_high_nibble+0x68>
 a6e:	15 c0       	rjmp	.+42     	; 0xa9a <GPIO_port_write_high_nibble+0x5c>
    {
        case 'A':
        case 'a':
            PORTA &= 0x0f;
 a70:	8b b3       	in	r24, 0x1b	; 27
 a72:	8f 70       	andi	r24, 0x0F	; 15
 a74:	8b bb       	out	0x1b, r24	; 27
            PORTA |= high_nibble;
 a76:	8b b3       	in	r24, 0x1b	; 27
 a78:	68 2b       	or	r22, r24
 a7a:	6b bb       	out	0x1b, r22	; 27
        break;
 a7c:	08 95       	ret
        case 'B':
        case 'b':
            PORTB &= 0x0f;
 a7e:	88 b3       	in	r24, 0x18	; 24
 a80:	8f 70       	andi	r24, 0x0F	; 15
 a82:	88 bb       	out	0x18, r24	; 24
            PORTB |= high_nibble;
 a84:	88 b3       	in	r24, 0x18	; 24
 a86:	68 2b       	or	r22, r24
 a88:	68 bb       	out	0x18, r22	; 24
        break;
 a8a:	08 95       	ret
        case 'C':
        case 'c':
            PORTC &= 0x0f;
 a8c:	85 b3       	in	r24, 0x15	; 21
 a8e:	8f 70       	andi	r24, 0x0F	; 15
 a90:	85 bb       	out	0x15, r24	; 21
            PORTC |= high_nibble;
 a92:	85 b3       	in	r24, 0x15	; 21
 a94:	68 2b       	or	r22, r24
 a96:	65 bb       	out	0x15, r22	; 21
        break;
 a98:	08 95       	ret
        case 'D':
        case 'd':
            PORTD &= 0x0f;
 a9a:	82 b3       	in	r24, 0x12	; 18
 a9c:	8f 70       	andi	r24, 0x0F	; 15
 a9e:	82 bb       	out	0x12, r24	; 18
            PORTD |= high_nibble;
 aa0:	82 b3       	in	r24, 0x12	; 18
 aa2:	68 2b       	or	r22, r24
 aa4:	62 bb       	out	0x12, r22	; 18
 aa6:	08 95       	ret

00000aa8 <GPIO_port_write_low_nibble>:
    } // end of switch(port_name);
}

void GPIO_port_write_low_nibble(char port_name, uint8 low_nibble)
{
    low_nibble &= 0x0f; //clear high_nibble bits in number
 aa8:	6f 70       	andi	r22, 0x0F	; 15
    switch(port_name)
 aaa:	84 34       	cpi	r24, 0x44	; 68
 aac:	51 f1       	breq	.+84     	; 0xb02 <GPIO_port_write_low_nibble+0x5a>
 aae:	85 34       	cpi	r24, 0x45	; 69
 ab0:	38 f4       	brcc	.+14     	; 0xac0 <GPIO_port_write_low_nibble+0x18>
 ab2:	82 34       	cpi	r24, 0x42	; 66
 ab4:	c1 f0       	breq	.+48     	; 0xae6 <GPIO_port_write_low_nibble+0x3e>
 ab6:	83 34       	cpi	r24, 0x43	; 67
 ab8:	e8 f4       	brcc	.+58     	; 0xaf4 <GPIO_port_write_low_nibble+0x4c>
 aba:	81 34       	cpi	r24, 0x41	; 65
 abc:	41 f5       	brne	.+80     	; 0xb0e <GPIO_port_write_low_nibble+0x66>
 abe:	0c c0       	rjmp	.+24     	; 0xad8 <GPIO_port_write_low_nibble+0x30>
 ac0:	82 36       	cpi	r24, 0x62	; 98
 ac2:	89 f0       	breq	.+34     	; 0xae6 <GPIO_port_write_low_nibble+0x3e>
 ac4:	83 36       	cpi	r24, 0x63	; 99
 ac6:	18 f4       	brcc	.+6      	; 0xace <GPIO_port_write_low_nibble+0x26>
 ac8:	81 36       	cpi	r24, 0x61	; 97
 aca:	09 f5       	brne	.+66     	; 0xb0e <GPIO_port_write_low_nibble+0x66>
 acc:	05 c0       	rjmp	.+10     	; 0xad8 <GPIO_port_write_low_nibble+0x30>
 ace:	83 36       	cpi	r24, 0x63	; 99
 ad0:	89 f0       	breq	.+34     	; 0xaf4 <GPIO_port_write_low_nibble+0x4c>
 ad2:	84 36       	cpi	r24, 0x64	; 100
 ad4:	e1 f4       	brne	.+56     	; 0xb0e <GPIO_port_write_low_nibble+0x66>
 ad6:	15 c0       	rjmp	.+42     	; 0xb02 <GPIO_port_write_low_nibble+0x5a>
    {
        case 'A':
        case 'a':
            PORTA &= 0xf0;
 ad8:	8b b3       	in	r24, 0x1b	; 27
 ada:	80 7f       	andi	r24, 0xF0	; 240
 adc:	8b bb       	out	0x1b, r24	; 27
            PORTA |= low_nibble;
 ade:	8b b3       	in	r24, 0x1b	; 27
 ae0:	68 2b       	or	r22, r24
 ae2:	6b bb       	out	0x1b, r22	; 27
        break;
 ae4:	08 95       	ret
        case 'B':
        case 'b':
            PORTB &= 0xf0;
 ae6:	88 b3       	in	r24, 0x18	; 24
 ae8:	80 7f       	andi	r24, 0xF0	; 240
 aea:	88 bb       	out	0x18, r24	; 24
            PORTB |= low_nibble;
 aec:	88 b3       	in	r24, 0x18	; 24
 aee:	68 2b       	or	r22, r24
 af0:	68 bb       	out	0x18, r22	; 24
        break;
 af2:	08 95       	ret
        case 'C':
        case 'c':
            PORTC &= 0xf0;
 af4:	85 b3       	in	r24, 0x15	; 21
 af6:	80 7f       	andi	r24, 0xF0	; 240
 af8:	85 bb       	out	0x15, r24	; 21
            PORTC |= low_nibble;
 afa:	85 b3       	in	r24, 0x15	; 21
 afc:	68 2b       	or	r22, r24
 afe:	65 bb       	out	0x15, r22	; 21
        break;
 b00:	08 95       	ret
        case 'D':
        case 'd':
            PORTD &= 0xf0;
 b02:	82 b3       	in	r24, 0x12	; 18
 b04:	80 7f       	andi	r24, 0xF0	; 240
 b06:	82 bb       	out	0x12, r24	; 18
            PORTD |= low_nibble;
 b08:	82 b3       	in	r24, 0x12	; 18
 b0a:	68 2b       	or	r22, r24
 b0c:	62 bb       	out	0x12, r22	; 18
 b0e:	08 95       	ret

00000b10 <Button_init>:
#include "button.h"

void Button_init(char port_name, uint8 pin_number)
{
    GPIO_pin_direction(port_name, pin_number, 0);
 b10:	40 e0       	ldi	r20, 0x00	; 0
 b12:	0e 94 a1 02 	call	0x542	; 0x542 <GPIO_pin_direction>
}
 b16:	08 95       	ret

00000b18 <Button_init_with_internal_pull_up>:


void Button_init_with_internal_pull_up(char port_name, uint8 pin_number)
{
    GPIO_pin_pull_up(port_name, pin_number);
 b18:	0e 94 b0 04 	call	0x960	; 0x960 <GPIO_pin_pull_up>
}
 b1c:	08 95       	ret

00000b1e <Button_read>:


uint8 Button_read(char port_name, uint8 pin_number)
{
    uint8 button_status;
    button_status = GPIO_pin_read(port_name, pin_number);
 b1e:	0e 94 c3 03 	call	0x786	; 0x786 <GPIO_pin_read>
    return button_status;
 b22:	08 95       	ret

00000b24 <LED_init>:
#include "led.h"

void LED_init(char port_name, uint8 pin_number)
{
    GPIO_pin_direction(port_name, pin_number, 1);
 b24:	41 e0       	ldi	r20, 0x01	; 1
 b26:	0e 94 a1 02 	call	0x542	; 0x542 <GPIO_pin_direction>
}
 b2a:	08 95       	ret

00000b2c <LED_turn_on>:


void LED_turn_on(char port_name, uint8 pin_number)
{
    GPIO_pin_write(port_name, pin_number, 1);
 b2c:	41 e0       	ldi	r20, 0x01	; 1
 b2e:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
}
 b32:	08 95       	ret

00000b34 <LED_turn_off>:


void LED_turn_off(char port_name, uint8 pin_number)
{
    GPIO_pin_write(port_name, pin_number, 0);
 b34:	40 e0       	ldi	r20, 0x00	; 0
 b36:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
}
 b3a:	08 95       	ret

00000b3c <LED_toggle>:


void LED_toggle(char port_name, uint8 pin_number)
{
    GPIO_pin_toggle(port_name, pin_number);
 b3c:	0e 94 04 04 	call	0x808	; 0x808 <GPIO_pin_toggle>
}
 b40:	08 95       	ret

00000b42 <LED_status>:


uint8 LED_status(char port_name, uint8 pin_number)
{
    return (GPIO_pin_read(port_name, pin_number));
 b42:	0e 94 c3 03 	call	0x786	; 0x786 <GPIO_pin_read>
 b46:	08 95       	ret

00000b48 <Seven_segment_init>:
#include "seven_segment.h"

void Seven_segment_init(char port_name, uint8 DP_pin)
{
 b48:	cf 93       	push	r28
 b4a:	df 93       	push	r29
 b4c:	d8 2f       	mov	r29, r24
    if(1 == DP_pin)
 b4e:	61 30       	cpi	r22, 0x01	; 1
 b50:	21 f4       	brne	.+8      	; 0xb5a <Seven_segment_init+0x12>
    {
        GPIO_port_direction(port_name, 0xff); //initialize port_name as output pins with "DP" pin
 b52:	6f ef       	ldi	r22, 0xFF	; 255
 b54:	0e 94 51 04 	call	0x8a2	; 0x8a2 <GPIO_port_direction>
 b58:	09 c0       	rjmp	.+18     	; 0xb6c <Seven_segment_init+0x24>
#include "seven_segment.h"

void Seven_segment_init(char port_name, uint8 DP_pin)
{
    if(1 == DP_pin)
 b5a:	c0 e0       	ldi	r28, 0x00	; 0
    else
    {
        uint8 counter = 0;
        for(counter=0; counter<7; ++counter)
        {
            GPIO_pin_direction(port_name,counter,1);
 b5c:	8d 2f       	mov	r24, r29
 b5e:	6c 2f       	mov	r22, r28
 b60:	41 e0       	ldi	r20, 0x01	; 1
 b62:	0e 94 a1 02 	call	0x542	; 0x542 <GPIO_pin_direction>
        GPIO_port_direction(port_name, 0xff); //initialize port_name as output pins with "DP" pin
    }
    else
    {
        uint8 counter = 0;
        for(counter=0; counter<7; ++counter)
 b66:	cf 5f       	subi	r28, 0xFF	; 255
 b68:	c7 30       	cpi	r28, 0x07	; 7
 b6a:	c1 f7       	brne	.-16     	; 0xb5c <Seven_segment_init+0x14>
        {
            GPIO_pin_direction(port_name,counter,1);
        }
    }
}
 b6c:	df 91       	pop	r29
 b6e:	cf 91       	pop	r28
 b70:	08 95       	ret

00000b72 <Seven_seg_BCD_init>:


void Seven_seg_BCD_init(char port_name)
{
 b72:	cf 93       	push	r28
 b74:	df 93       	push	r29
 b76:	d8 2f       	mov	r29, r24
    uint8 counter = 0;
        for(counter=0; counter<4; ++counter)
 b78:	c0 e0       	ldi	r28, 0x00	; 0
        {
            GPIO_pin_direction(port_name,counter,1);//initialize 4 pins from port_name as output pins
 b7a:	8d 2f       	mov	r24, r29
 b7c:	6c 2f       	mov	r22, r28
 b7e:	41 e0       	ldi	r20, 0x01	; 1
 b80:	0e 94 a1 02 	call	0x542	; 0x542 <GPIO_pin_direction>


void Seven_seg_BCD_init(char port_name)
{
    uint8 counter = 0;
        for(counter=0; counter<4; ++counter)
 b84:	cf 5f       	subi	r28, 0xFF	; 255
 b86:	c4 30       	cpi	r28, 0x04	; 4
 b88:	c1 f7       	brne	.-16     	; 0xb7a <Seven_seg_BCD_init+0x8>
        {
            GPIO_pin_direction(port_name,counter,1);//initialize 4 pins from port_name as output pins
        }
}
 b8a:	df 91       	pop	r29
 b8c:	cf 91       	pop	r28
 b8e:	08 95       	ret

00000b90 <Seven_seg_BCD_write>:


void Seven_seg_BCD_write(char port_name, uint8 number)
{
 b90:	cf 93       	push	r28
 b92:	df 93       	push	r29
 b94:	cd b7       	in	r28, 0x3d	; 61
 b96:	de b7       	in	r29, 0x3e	; 62
 b98:	2a 97       	sbiw	r28, 0x0a	; 10
 b9a:	0f b6       	in	r0, 0x3f	; 63
 b9c:	f8 94       	cli
 b9e:	de bf       	out	0x3e, r29	; 62
 ba0:	0f be       	out	0x3f, r0	; 63
 ba2:	cd bf       	out	0x3d, r28	; 61
    uint8 cAnode_hex[] = {0x00,0x1,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09}; //{0,1,2,3,4,5,6,7,8,9}
 ba4:	de 01       	movw	r26, r28
 ba6:	11 96       	adiw	r26, 0x01	; 1
 ba8:	e1 e6       	ldi	r30, 0x61	; 97
 baa:	f0 e0       	ldi	r31, 0x00	; 0
 bac:	9a e0       	ldi	r25, 0x0A	; 10
 bae:	01 90       	ld	r0, Z+
 bb0:	0d 92       	st	X+, r0
 bb2:	91 50       	subi	r25, 0x01	; 1
 bb4:	e1 f7       	brne	.-8      	; 0xbae <Seven_seg_BCD_write+0x1e>
    GPIO_port_write(port_name, cAnode_hex[number]);
 bb6:	fe 01       	movw	r30, r28
 bb8:	e6 0f       	add	r30, r22
 bba:	f1 1d       	adc	r31, r1
 bbc:	61 81       	ldd	r22, Z+1	; 0x01
 bbe:	0e 94 70 04 	call	0x8e0	; 0x8e0 <GPIO_port_write>
}
 bc2:	2a 96       	adiw	r28, 0x0a	; 10
 bc4:	0f b6       	in	r0, 0x3f	; 63
 bc6:	f8 94       	cli
 bc8:	de bf       	out	0x3e, r29	; 62
 bca:	0f be       	out	0x3f, r0	; 63
 bcc:	cd bf       	out	0x3d, r28	; 61
 bce:	df 91       	pop	r29
 bd0:	cf 91       	pop	r28
 bd2:	08 95       	ret

00000bd4 <Seven_segment_write>:




void Seven_segment_write(char port_name, uint8 number, uint8 DP_pin, uint8 common_anod)
{
 bd4:	cf 93       	push	r28
 bd6:	df 93       	push	r29
 bd8:	cd b7       	in	r28, 0x3d	; 61
 bda:	de b7       	in	r29, 0x3e	; 62
 bdc:	60 97       	sbiw	r28, 0x10	; 16
 bde:	0f b6       	in	r0, 0x3f	; 63
 be0:	f8 94       	cli
 be2:	de bf       	out	0x3e, r29	; 62
 be4:	0f be       	out	0x3f, r0	; 63
 be6:	cd bf       	out	0x3d, r28	; 61
    if(1 == common_anod) //Is the connected display a common anode?
 be8:	21 30       	cpi	r18, 0x01	; 1
 bea:	c9 f4       	brne	.+50     	; 0xc1e <Seven_segment_write+0x4a>
    {
        uint8 cAnode_hex[] = {0x40,0x79,0x24,0x30,0x19,0x12,0x02,0x38,0x00,0x10,0x08,0x00,0x46,0x40,0x06,0x0e}; //{0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F}
 bec:	de 01       	movw	r26, r28
 bee:	11 96       	adiw	r26, 0x01	; 1
 bf0:	eb e6       	ldi	r30, 0x6B	; 107
 bf2:	f0 e0       	ldi	r31, 0x00	; 0
 bf4:	90 e1       	ldi	r25, 0x10	; 16
 bf6:	01 90       	ld	r0, Z+
 bf8:	0d 92       	st	X+, r0
 bfa:	91 50       	subi	r25, 0x01	; 1
 bfc:	e1 f7       	brne	.-8      	; 0xbf6 <Seven_segment_write+0x22>
        if(1 == DP_pin) //turn on the digit LED
 bfe:	41 30       	cpi	r20, 0x01	; 1
 c00:	31 f4       	brne	.+12     	; 0xc0e <Seven_segment_write+0x3a>
        {
            number = ( (cAnode_hex[number]) & (~(1<<7)) );
 c02:	fe 01       	movw	r30, r28
 c04:	e6 0f       	add	r30, r22
 c06:	f1 1d       	adc	r31, r1
 c08:	61 81       	ldd	r22, Z+1	; 0x01
 c0a:	6f 77       	andi	r22, 0x7F	; 127
 c0c:	05 c0       	rjmp	.+10     	; 0xc18 <Seven_segment_write+0x44>
        }
        else
        {
            number = ( (cAnode_hex[number]) | (1<<7) );
 c0e:	fe 01       	movw	r30, r28
 c10:	e6 0f       	add	r30, r22
 c12:	f1 1d       	adc	r31, r1
 c14:	61 81       	ldd	r22, Z+1	; 0x01
 c16:	60 68       	ori	r22, 0x80	; 128
        }
        GPIO_port_write(port_name, number);
 c18:	0e 94 70 04 	call	0x8e0	; 0x8e0 <GPIO_port_write>
 c1c:	17 c0       	rjmp	.+46     	; 0xc4c <Seven_segment_write+0x78>
    }
    else
    {
        uint8 cCathode_hex[] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x47,0x7f,0x6f,0x77,0x7f,0x39,0x3f,0x79,0x71}; //{0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F}
 c1e:	de 01       	movw	r26, r28
 c20:	11 96       	adiw	r26, 0x01	; 1
 c22:	eb e7       	ldi	r30, 0x7B	; 123
 c24:	f0 e0       	ldi	r31, 0x00	; 0
 c26:	90 e1       	ldi	r25, 0x10	; 16
 c28:	01 90       	ld	r0, Z+
 c2a:	0d 92       	st	X+, r0
 c2c:	91 50       	subi	r25, 0x01	; 1
 c2e:	e1 f7       	brne	.-8      	; 0xc28 <Seven_segment_write+0x54>
        if(1 == DP_pin) //turn on the digit LED
 c30:	41 30       	cpi	r20, 0x01	; 1
 c32:	31 f4       	brne	.+12     	; 0xc40 <Seven_segment_write+0x6c>
        {
            number = ( (cCathode_hex[number]) | (DP_pin<<7) );
 c34:	fe 01       	movw	r30, r28
 c36:	e6 0f       	add	r30, r22
 c38:	f1 1d       	adc	r31, r1
 c3a:	61 81       	ldd	r22, Z+1	; 0x01
 c3c:	60 68       	ori	r22, 0x80	; 128
 c3e:	04 c0       	rjmp	.+8      	; 0xc48 <Seven_segment_write+0x74>
        }
        else
        {
            number = cCathode_hex[number];
 c40:	fe 01       	movw	r30, r28
 c42:	e6 0f       	add	r30, r22
 c44:	f1 1d       	adc	r31, r1
 c46:	61 81       	ldd	r22, Z+1	; 0x01
        }
        GPIO_port_write(port_name, number);
 c48:	0e 94 70 04 	call	0x8e0	; 0x8e0 <GPIO_port_write>
    }
}
 c4c:	60 96       	adiw	r28, 0x10	; 16
 c4e:	0f b6       	in	r0, 0x3f	; 63
 c50:	f8 94       	cli
 c52:	de bf       	out	0x3e, r29	; 62
 c54:	0f be       	out	0x3f, r0	; 63
 c56:	cd bf       	out	0x3d, r28	; 61
 c58:	df 91       	pop	r29
 c5a:	cf 91       	pop	r28
 c5c:	08 95       	ret

00000c5e <Seven_seg1_write>:

void Seven_seg1_write(uint8 number)
{
 c5e:	cf 93       	push	r28
 c60:	c8 2f       	mov	r28, r24
	GPIO_pin_write('B',0,0);
 c62:	82 e4       	ldi	r24, 0x42	; 66
 c64:	60 e0       	ldi	r22, 0x00	; 0
 c66:	40 e0       	ldi	r20, 0x00	; 0
 c68:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
	GPIO_pin_write('B',1,1);
 c6c:	82 e4       	ldi	r24, 0x42	; 66
 c6e:	61 e0       	ldi	r22, 0x01	; 1
 c70:	41 e0       	ldi	r20, 0x01	; 1
 c72:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
	GPIO_pin_write('B',2,1);
 c76:	82 e4       	ldi	r24, 0x42	; 66
 c78:	62 e0       	ldi	r22, 0x02	; 2
 c7a:	41 e0       	ldi	r20, 0x01	; 1
 c7c:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
	GPIO_pin_write('B',3,1);
 c80:	82 e4       	ldi	r24, 0x42	; 66
 c82:	63 e0       	ldi	r22, 0x03	; 3
 c84:	41 e0       	ldi	r20, 0x01	; 1
 c86:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
	GPIO_pin_write('B',4,1);
 c8a:	82 e4       	ldi	r24, 0x42	; 66
 c8c:	64 e0       	ldi	r22, 0x04	; 4
 c8e:	41 e0       	ldi	r20, 0x01	; 1
 c90:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
	GPIO_pin_write('B',5,1);
 c94:	82 e4       	ldi	r24, 0x42	; 66
 c96:	65 e0       	ldi	r22, 0x05	; 5
 c98:	41 e0       	ldi	r20, 0x01	; 1
 c9a:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
	Seven_segment_write('A', number,0,0);
 c9e:	81 e4       	ldi	r24, 0x41	; 65
 ca0:	6c 2f       	mov	r22, r28
 ca2:	40 e0       	ldi	r20, 0x00	; 0
 ca4:	20 e0       	ldi	r18, 0x00	; 0
 ca6:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <Seven_segment_write>
}
 caa:	cf 91       	pop	r28
 cac:	08 95       	ret

00000cae <Seven_seg2_write>:

void Seven_seg2_write(uint8 number)
{
 cae:	cf 93       	push	r28
 cb0:	c8 2f       	mov	r28, r24
	GPIO_pin_write('B',1,0);
 cb2:	82 e4       	ldi	r24, 0x42	; 66
 cb4:	61 e0       	ldi	r22, 0x01	; 1
 cb6:	40 e0       	ldi	r20, 0x00	; 0
 cb8:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
	GPIO_pin_write('B',0,1);
 cbc:	82 e4       	ldi	r24, 0x42	; 66
 cbe:	60 e0       	ldi	r22, 0x00	; 0
 cc0:	41 e0       	ldi	r20, 0x01	; 1
 cc2:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
	GPIO_pin_write('B',2,1);
 cc6:	82 e4       	ldi	r24, 0x42	; 66
 cc8:	62 e0       	ldi	r22, 0x02	; 2
 cca:	41 e0       	ldi	r20, 0x01	; 1
 ccc:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
	GPIO_pin_write('B',3,1);
 cd0:	82 e4       	ldi	r24, 0x42	; 66
 cd2:	63 e0       	ldi	r22, 0x03	; 3
 cd4:	41 e0       	ldi	r20, 0x01	; 1
 cd6:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
	GPIO_pin_write('B',4,1);
 cda:	82 e4       	ldi	r24, 0x42	; 66
 cdc:	64 e0       	ldi	r22, 0x04	; 4
 cde:	41 e0       	ldi	r20, 0x01	; 1
 ce0:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
	GPIO_pin_write('B',5,1);
 ce4:	82 e4       	ldi	r24, 0x42	; 66
 ce6:	65 e0       	ldi	r22, 0x05	; 5
 ce8:	41 e0       	ldi	r20, 0x01	; 1
 cea:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
	Seven_segment_write('A', number,0,0);
 cee:	81 e4       	ldi	r24, 0x41	; 65
 cf0:	6c 2f       	mov	r22, r28
 cf2:	40 e0       	ldi	r20, 0x00	; 0
 cf4:	20 e0       	ldi	r18, 0x00	; 0
 cf6:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <Seven_segment_write>
}
 cfa:	cf 91       	pop	r28
 cfc:	08 95       	ret

00000cfe <Seven_seg3_write>:

void Seven_seg3_write(uint8 number)
{
 cfe:	cf 93       	push	r28
 d00:	c8 2f       	mov	r28, r24
	GPIO_pin_write('B',2,0);
 d02:	82 e4       	ldi	r24, 0x42	; 66
 d04:	62 e0       	ldi	r22, 0x02	; 2
 d06:	40 e0       	ldi	r20, 0x00	; 0
 d08:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
	GPIO_pin_write('B',0,1);
 d0c:	82 e4       	ldi	r24, 0x42	; 66
 d0e:	60 e0       	ldi	r22, 0x00	; 0
 d10:	41 e0       	ldi	r20, 0x01	; 1
 d12:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
	GPIO_pin_write('B',1,1);
 d16:	82 e4       	ldi	r24, 0x42	; 66
 d18:	61 e0       	ldi	r22, 0x01	; 1
 d1a:	41 e0       	ldi	r20, 0x01	; 1
 d1c:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
	GPIO_pin_write('B',3,1);
 d20:	82 e4       	ldi	r24, 0x42	; 66
 d22:	63 e0       	ldi	r22, 0x03	; 3
 d24:	41 e0       	ldi	r20, 0x01	; 1
 d26:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
	GPIO_pin_write('B',4,1);
 d2a:	82 e4       	ldi	r24, 0x42	; 66
 d2c:	64 e0       	ldi	r22, 0x04	; 4
 d2e:	41 e0       	ldi	r20, 0x01	; 1
 d30:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
	GPIO_pin_write('B',5,1);
 d34:	82 e4       	ldi	r24, 0x42	; 66
 d36:	65 e0       	ldi	r22, 0x05	; 5
 d38:	41 e0       	ldi	r20, 0x01	; 1
 d3a:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
	Seven_segment_write('A', number,0,0);
 d3e:	81 e4       	ldi	r24, 0x41	; 65
 d40:	6c 2f       	mov	r22, r28
 d42:	40 e0       	ldi	r20, 0x00	; 0
 d44:	20 e0       	ldi	r18, 0x00	; 0
 d46:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <Seven_segment_write>
}
 d4a:	cf 91       	pop	r28
 d4c:	08 95       	ret

00000d4e <Seven_seg4_write>:

void Seven_seg4_write(uint8 number)
{
 d4e:	cf 93       	push	r28
 d50:	c8 2f       	mov	r28, r24
	GPIO_pin_write('B',3,0);
 d52:	82 e4       	ldi	r24, 0x42	; 66
 d54:	63 e0       	ldi	r22, 0x03	; 3
 d56:	40 e0       	ldi	r20, 0x00	; 0
 d58:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
	GPIO_pin_write('B',0,1);
 d5c:	82 e4       	ldi	r24, 0x42	; 66
 d5e:	60 e0       	ldi	r22, 0x00	; 0
 d60:	41 e0       	ldi	r20, 0x01	; 1
 d62:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
	GPIO_pin_write('B',1,1);
 d66:	82 e4       	ldi	r24, 0x42	; 66
 d68:	61 e0       	ldi	r22, 0x01	; 1
 d6a:	41 e0       	ldi	r20, 0x01	; 1
 d6c:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
	GPIO_pin_write('B',2,1);
 d70:	82 e4       	ldi	r24, 0x42	; 66
 d72:	62 e0       	ldi	r22, 0x02	; 2
 d74:	41 e0       	ldi	r20, 0x01	; 1
 d76:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
	GPIO_pin_write('B',4,1);
 d7a:	82 e4       	ldi	r24, 0x42	; 66
 d7c:	64 e0       	ldi	r22, 0x04	; 4
 d7e:	41 e0       	ldi	r20, 0x01	; 1
 d80:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
	GPIO_pin_write('B',5,1);
 d84:	82 e4       	ldi	r24, 0x42	; 66
 d86:	65 e0       	ldi	r22, 0x05	; 5
 d88:	41 e0       	ldi	r20, 0x01	; 1
 d8a:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
	Seven_segment_write('A', number,0,0);
 d8e:	81 e4       	ldi	r24, 0x41	; 65
 d90:	6c 2f       	mov	r22, r28
 d92:	40 e0       	ldi	r20, 0x00	; 0
 d94:	20 e0       	ldi	r18, 0x00	; 0
 d96:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <Seven_segment_write>
}
 d9a:	cf 91       	pop	r28
 d9c:	08 95       	ret

00000d9e <Seven_seg5_write>:

void Seven_seg5_write(uint8 number)
{
 d9e:	cf 93       	push	r28
 da0:	c8 2f       	mov	r28, r24
	GPIO_pin_write('B',4,0);
 da2:	82 e4       	ldi	r24, 0x42	; 66
 da4:	64 e0       	ldi	r22, 0x04	; 4
 da6:	40 e0       	ldi	r20, 0x00	; 0
 da8:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
	GPIO_pin_write('B',0,1);
 dac:	82 e4       	ldi	r24, 0x42	; 66
 dae:	60 e0       	ldi	r22, 0x00	; 0
 db0:	41 e0       	ldi	r20, 0x01	; 1
 db2:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
	GPIO_pin_write('B',1,1);
 db6:	82 e4       	ldi	r24, 0x42	; 66
 db8:	61 e0       	ldi	r22, 0x01	; 1
 dba:	41 e0       	ldi	r20, 0x01	; 1
 dbc:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
	GPIO_pin_write('B',2,1);
 dc0:	82 e4       	ldi	r24, 0x42	; 66
 dc2:	62 e0       	ldi	r22, 0x02	; 2
 dc4:	41 e0       	ldi	r20, 0x01	; 1
 dc6:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
	GPIO_pin_write('B',3,1);
 dca:	82 e4       	ldi	r24, 0x42	; 66
 dcc:	63 e0       	ldi	r22, 0x03	; 3
 dce:	41 e0       	ldi	r20, 0x01	; 1
 dd0:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
	GPIO_pin_write('B',5,1);
 dd4:	82 e4       	ldi	r24, 0x42	; 66
 dd6:	65 e0       	ldi	r22, 0x05	; 5
 dd8:	41 e0       	ldi	r20, 0x01	; 1
 dda:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
	Seven_segment_write('A', number,0,0);
 dde:	81 e4       	ldi	r24, 0x41	; 65
 de0:	6c 2f       	mov	r22, r28
 de2:	40 e0       	ldi	r20, 0x00	; 0
 de4:	20 e0       	ldi	r18, 0x00	; 0
 de6:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <Seven_segment_write>
}
 dea:	cf 91       	pop	r28
 dec:	08 95       	ret

00000dee <Seven_seg6_write>:

void Seven_seg6_write(uint8 number)
{
 dee:	cf 93       	push	r28
 df0:	c8 2f       	mov	r28, r24
	GPIO_pin_write('B',5,0);
 df2:	82 e4       	ldi	r24, 0x42	; 66
 df4:	65 e0       	ldi	r22, 0x05	; 5
 df6:	40 e0       	ldi	r20, 0x00	; 0
 df8:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
	GPIO_pin_write('B',0,1);
 dfc:	82 e4       	ldi	r24, 0x42	; 66
 dfe:	60 e0       	ldi	r22, 0x00	; 0
 e00:	41 e0       	ldi	r20, 0x01	; 1
 e02:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
	GPIO_pin_write('B',1,1);
 e06:	82 e4       	ldi	r24, 0x42	; 66
 e08:	61 e0       	ldi	r22, 0x01	; 1
 e0a:	41 e0       	ldi	r20, 0x01	; 1
 e0c:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
	GPIO_pin_write('B',2,1);
 e10:	82 e4       	ldi	r24, 0x42	; 66
 e12:	62 e0       	ldi	r22, 0x02	; 2
 e14:	41 e0       	ldi	r20, 0x01	; 1
 e16:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
	GPIO_pin_write('B',3,1);
 e1a:	82 e4       	ldi	r24, 0x42	; 66
 e1c:	63 e0       	ldi	r22, 0x03	; 3
 e1e:	41 e0       	ldi	r20, 0x01	; 1
 e20:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
	GPIO_pin_write('B',4,1);
 e24:	82 e4       	ldi	r24, 0x42	; 66
 e26:	64 e0       	ldi	r22, 0x04	; 4
 e28:	41 e0       	ldi	r20, 0x01	; 1
 e2a:	0e 94 32 03 	call	0x664	; 0x664 <GPIO_pin_write>
	Seven_segment_write('A', number,0,0);
 e2e:	81 e4       	ldi	r24, 0x41	; 65
 e30:	6c 2f       	mov	r22, r28
 e32:	40 e0       	ldi	r20, 0x00	; 0
 e34:	20 e0       	ldi	r18, 0x00	; 0
 e36:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <Seven_segment_write>
}
 e3a:	cf 91       	pop	r28
 e3c:	08 95       	ret

00000e3e <timer0_ctc_init>:
#include "timer0_CTC_mode.h"

void timer0_ctc_init(void)
{
	/*set timer0 mode to CTC mode*/
	CLR_BIT(TCCR0, WGM00);
 e3e:	83 b7       	in	r24, 0x33	; 51
 e40:	8f 7b       	andi	r24, 0xBF	; 191
 e42:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0, WGM01);
 e44:	83 b7       	in	r24, 0x33	; 51
 e46:	88 60       	ori	r24, 0x08	; 8
 e48:	83 bf       	out	0x33, r24	; 51
	/*set OCR register value to (252) so after this counts for (31) times, one sec will be evaluated*/
	OCR0 = 252;
 e4a:	8c ef       	ldi	r24, 0xFC	; 252
 e4c:	8c bf       	out	0x3c, r24	; 60
	/*set F_timer0 = F_CPU/256 = 8000000/256 = 31250 Hz*/
	/*tick time = (256/8000000) = 0.032 mSec.*/
	CLR_BIT(TCCR0, CS00);
 e4e:	83 b7       	in	r24, 0x33	; 51
 e50:	8e 7f       	andi	r24, 0xFE	; 254
 e52:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS01);
 e54:	83 b7       	in	r24, 0x33	; 51
 e56:	8d 7f       	andi	r24, 0xFD	; 253
 e58:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0, CS02);
 e5a:	83 b7       	in	r24, 0x33	; 51
 e5c:	84 60       	ori	r24, 0x04	; 4
 e5e:	83 bf       	out	0x33, r24	; 51
	/*enable interrupt of CTC mode*/
	sei(); //enable I-bit
 e60:	78 94       	sei
	SET_BIT(TIMSK, OCIE0); //enable bit of timer0 CTC interrupt
 e62:	89 b7       	in	r24, 0x39	; 57
 e64:	82 60       	ori	r24, 0x02	; 2
 e66:	89 bf       	out	0x39, r24	; 57
 e68:	08 95       	ret

00000e6a <timer2_overflow_init>:

void timer2_overflow_init(void)
{
	/*set timer2 mode to overflow mode*/ 
	/*it is the default mode*/
	CLR_BIT(TCCR2, WGM20);
 e6a:	85 b5       	in	r24, 0x25	; 37
 e6c:	8f 7b       	andi	r24, 0xBF	; 191
 e6e:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR2, WGM21);
 e70:	85 b5       	in	r24, 0x25	; 37
 e72:	87 7f       	andi	r24, 0xF7	; 247
 e74:	85 bd       	out	0x25, r24	; 37
	/*set pre-scaler to 128*/
	SET_BIT(TCCR2, CS20);
 e76:	85 b5       	in	r24, 0x25	; 37
 e78:	81 60       	ori	r24, 0x01	; 1
 e7a:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR2, CS21);
 e7c:	85 b5       	in	r24, 0x25	; 37
 e7e:	8d 7f       	andi	r24, 0xFD	; 253
 e80:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2, CS22);
 e82:	85 b5       	in	r24, 0x25	; 37
 e84:	84 60       	ori	r24, 0x04	; 4
 e86:	85 bd       	out	0x25, r24	; 37
	/*select clock source to external clock on (TOSC1) */
	SET_BIT(ASSR, AS2);
 e88:	82 b5       	in	r24, 0x22	; 34
 e8a:	88 60       	ori	r24, 0x08	; 8
 e8c:	82 bd       	out	0x22, r24	; 34
	/*enable overflow interrupt for timer2*/
	sei();
 e8e:	78 94       	sei
	SET_BIT(TIMSK, TOIE2);
 e90:	89 b7       	in	r24, 0x39	; 57
 e92:	80 64       	ori	r24, 0x40	; 64
 e94:	89 bf       	out	0x39, r24	; 57
 e96:	08 95       	ret

00000e98 <__udivmodqi4>:
 e98:	99 1b       	sub	r25, r25
 e9a:	79 e0       	ldi	r23, 0x09	; 9
 e9c:	04 c0       	rjmp	.+8      	; 0xea6 <__udivmodqi4_ep>

00000e9e <__udivmodqi4_loop>:
 e9e:	99 1f       	adc	r25, r25
 ea0:	96 17       	cp	r25, r22
 ea2:	08 f0       	brcs	.+2      	; 0xea6 <__udivmodqi4_ep>
 ea4:	96 1b       	sub	r25, r22

00000ea6 <__udivmodqi4_ep>:
 ea6:	88 1f       	adc	r24, r24
 ea8:	7a 95       	dec	r23
 eaa:	c9 f7       	brne	.-14     	; 0xe9e <__udivmodqi4_loop>
 eac:	80 95       	com	r24
 eae:	08 95       	ret

00000eb0 <_exit>:
 eb0:	f8 94       	cli

00000eb2 <__stop_program>:
 eb2:	ff cf       	rjmp	.-2      	; 0xeb2 <__stop_program>
