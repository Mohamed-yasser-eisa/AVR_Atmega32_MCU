
15-Internal_EEPROM_with_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000073e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000073e  000007b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000007b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00000f08  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009a5  00000000  00000000  00000fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000320  00000000  00000000  0000198d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000629  00000000  00000000  00001cad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c8  00000000  00000000  000022d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000305  00000000  00000000  000024a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000072c  00000000  00000000  000027a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_17>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e3       	ldi	r30, 0x3E	; 62
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 9d 03 	jmp	0x73a	; 0x73a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

int main(void)
{
	uint8 data = 0;
	/*initialize the LED*/
	LED_init('C',5);
  92:	83 e4       	ldi	r24, 0x43	; 67
  94:	65 e0       	ldi	r22, 0x05	; 5
  96:	0e 94 8b 03 	call	0x716	; 0x716 <LED_init>
	/*initialize interrupt*/
	sei(); // set I-bit.
  9a:	78 94       	sei
	SET_BIT(EECR,EERIE); //set interrupt enable bit for EEPROM write.
  9c:	e3 9a       	sbi	0x1c, 3	; 28
	/*write data to EEPROM*/
	EEPROM_write(0x80,0x95);
  9e:	80 e8       	ldi	r24, 0x80	; 128
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	65 e9       	ldi	r22, 0x95	; 149
  a4:	0e 94 74 03 	call	0x6e8	; 0x6e8 <EEPROM_write>
	data = EEPROM_read(0x80);
  a8:	80 e8       	ldi	r24, 0x80	; 128
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 83 03 	call	0x706	; 0x706 <EEPROM_read>
    while(1)
    {
        LED_turn_off('C',5);
  b0:	83 e4       	ldi	r24, 0x43	; 67
  b2:	65 e0       	ldi	r22, 0x05	; 5
  b4:	0e 94 93 03 	call	0x726	; 0x726 <LED_turn_off>
  b8:	fb cf       	rjmp	.-10     	; 0xb0 <main+0x1e>

000000ba <__vector_17>:
    }
}

ISR(EE_RDY_vect)
{
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	2f 93       	push	r18
  c6:	3f 93       	push	r19
  c8:	4f 93       	push	r20
  ca:	5f 93       	push	r21
  cc:	6f 93       	push	r22
  ce:	7f 93       	push	r23
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
  d4:	af 93       	push	r26
  d6:	bf 93       	push	r27
  d8:	ef 93       	push	r30
  da:	ff 93       	push	r31
	LED_turn_on('C',5);
  dc:	83 e4       	ldi	r24, 0x43	; 67
  de:	65 e0       	ldi	r22, 0x05	; 5
  e0:	0e 94 8f 03 	call	0x71e	; 0x71e <LED_turn_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	93 ed       	ldi	r25, 0xD3	; 211
  e8:	a0 e3       	ldi	r26, 0x30	; 48
  ea:	81 50       	subi	r24, 0x01	; 1
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	a0 40       	sbci	r26, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <__vector_17+0x30>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <__vector_17+0x3a>
  f4:	00 00       	nop
	_delay_ms(2000);
	CLR_BIT(EECR,EERIE); //clear the interrupt enable bit of EEPROM, because it will continuously generate interrupt.
  f6:	e3 98       	cbi	0x1c, 3	; 28
  f8:	ff 91       	pop	r31
  fa:	ef 91       	pop	r30
  fc:	bf 91       	pop	r27
  fe:	af 91       	pop	r26
 100:	9f 91       	pop	r25
 102:	8f 91       	pop	r24
 104:	7f 91       	pop	r23
 106:	6f 91       	pop	r22
 108:	5f 91       	pop	r21
 10a:	4f 91       	pop	r20
 10c:	3f 91       	pop	r19
 10e:	2f 91       	pop	r18
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <GPIO_pin_direction>:
#include "Atmega_GPIO.h"

void GPIO_pin_direction(char PORT, uint8 BIT, uint8 DIR)
{
    switch(PORT)
 11a:	84 34       	cpi	r24, 0x44	; 68
 11c:	09 f4       	brne	.+2      	; 0x120 <GPIO_pin_direction+0x6>
 11e:	71 c0       	rjmp	.+226    	; 0x202 <GPIO_pin_direction+0xe8>
 120:	85 34       	cpi	r24, 0x45	; 69
 122:	48 f4       	brcc	.+18     	; 0x136 <GPIO_pin_direction+0x1c>
 124:	82 34       	cpi	r24, 0x42	; 66
 126:	99 f1       	breq	.+102    	; 0x18e <GPIO_pin_direction+0x74>
 128:	83 34       	cpi	r24, 0x43	; 67
 12a:	08 f0       	brcs	.+2      	; 0x12e <GPIO_pin_direction+0x14>
 12c:	4d c0       	rjmp	.+154    	; 0x1c8 <GPIO_pin_direction+0xae>
 12e:	81 34       	cpi	r24, 0x41	; 65
 130:	09 f0       	breq	.+2      	; 0x134 <GPIO_pin_direction+0x1a>
 132:	83 c0       	rjmp	.+262    	; 0x23a <GPIO_pin_direction+0x120>
 134:	0f c0       	rjmp	.+30     	; 0x154 <GPIO_pin_direction+0x3a>
 136:	82 36       	cpi	r24, 0x62	; 98
 138:	51 f1       	breq	.+84     	; 0x18e <GPIO_pin_direction+0x74>
 13a:	83 36       	cpi	r24, 0x63	; 99
 13c:	20 f4       	brcc	.+8      	; 0x146 <GPIO_pin_direction+0x2c>
 13e:	81 36       	cpi	r24, 0x61	; 97
 140:	09 f0       	breq	.+2      	; 0x144 <GPIO_pin_direction+0x2a>
 142:	7b c0       	rjmp	.+246    	; 0x23a <GPIO_pin_direction+0x120>
 144:	07 c0       	rjmp	.+14     	; 0x154 <GPIO_pin_direction+0x3a>
 146:	83 36       	cpi	r24, 0x63	; 99
 148:	09 f4       	brne	.+2      	; 0x14c <GPIO_pin_direction+0x32>
 14a:	3e c0       	rjmp	.+124    	; 0x1c8 <GPIO_pin_direction+0xae>
 14c:	84 36       	cpi	r24, 0x64	; 100
 14e:	09 f0       	breq	.+2      	; 0x152 <GPIO_pin_direction+0x38>
 150:	74 c0       	rjmp	.+232    	; 0x23a <GPIO_pin_direction+0x120>
 152:	57 c0       	rjmp	.+174    	; 0x202 <GPIO_pin_direction+0xe8>
    {
        case 'A':
        case 'a':
            if(1 == DIR)
 154:	41 30       	cpi	r20, 0x01	; 1
 156:	69 f4       	brne	.+26     	; 0x172 <GPIO_pin_direction+0x58>
            {
                SET_BIT(DDRA, BIT); //set direction of this pin in port A as output
 158:	2a b3       	in	r18, 0x1a	; 26
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	ac 01       	movw	r20, r24
 160:	02 c0       	rjmp	.+4      	; 0x166 <GPIO_pin_direction+0x4c>
 162:	44 0f       	add	r20, r20
 164:	55 1f       	adc	r21, r21
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <GPIO_pin_direction+0x48>
 16a:	ba 01       	movw	r22, r20
 16c:	62 2b       	or	r22, r18
 16e:	6a bb       	out	0x1a, r22	; 26
 170:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRA, BIT); //set direction of this pin in port A as input
 172:	2a b3       	in	r18, 0x1a	; 26
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	ac 01       	movw	r20, r24
 17a:	02 c0       	rjmp	.+4      	; 0x180 <GPIO_pin_direction+0x66>
 17c:	44 0f       	add	r20, r20
 17e:	55 1f       	adc	r21, r21
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <GPIO_pin_direction+0x62>
 184:	ba 01       	movw	r22, r20
 186:	60 95       	com	r22
 188:	62 23       	and	r22, r18
 18a:	6a bb       	out	0x1a, r22	; 26
 18c:	08 95       	ret
            }
        break;
        case 'B':
        case 'b':
            if(1 == DIR)
 18e:	41 30       	cpi	r20, 0x01	; 1
 190:	69 f4       	brne	.+26     	; 0x1ac <GPIO_pin_direction+0x92>
            {
                SET_BIT(DDRB, BIT); //set direction of this pin in port B as output
 192:	27 b3       	in	r18, 0x17	; 23
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	ac 01       	movw	r20, r24
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <GPIO_pin_direction+0x86>
 19c:	44 0f       	add	r20, r20
 19e:	55 1f       	adc	r21, r21
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <GPIO_pin_direction+0x82>
 1a4:	ba 01       	movw	r22, r20
 1a6:	62 2b       	or	r22, r18
 1a8:	67 bb       	out	0x17, r22	; 23
 1aa:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRB, BIT); //set direction of this pin in port B as input
 1ac:	27 b3       	in	r18, 0x17	; 23
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	ac 01       	movw	r20, r24
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <GPIO_pin_direction+0xa0>
 1b6:	44 0f       	add	r20, r20
 1b8:	55 1f       	adc	r21, r21
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <GPIO_pin_direction+0x9c>
 1be:	ba 01       	movw	r22, r20
 1c0:	60 95       	com	r22
 1c2:	62 23       	and	r22, r18
 1c4:	67 bb       	out	0x17, r22	; 23
 1c6:	08 95       	ret
            }
        break;
        case 'C':
        case 'c':
            if(1 == DIR)
 1c8:	41 30       	cpi	r20, 0x01	; 1
 1ca:	69 f4       	brne	.+26     	; 0x1e6 <GPIO_pin_direction+0xcc>
            {
                SET_BIT(DDRC, BIT); //set direction of this pin in port B as output
 1cc:	24 b3       	in	r18, 0x14	; 20
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	ac 01       	movw	r20, r24
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <GPIO_pin_direction+0xc0>
 1d6:	44 0f       	add	r20, r20
 1d8:	55 1f       	adc	r21, r21
 1da:	6a 95       	dec	r22
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <GPIO_pin_direction+0xbc>
 1de:	ba 01       	movw	r22, r20
 1e0:	62 2b       	or	r22, r18
 1e2:	64 bb       	out	0x14, r22	; 20
 1e4:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRC, BIT); //set direction of this pin in port B as input
 1e6:	24 b3       	in	r18, 0x14	; 20
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	ac 01       	movw	r20, r24
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <GPIO_pin_direction+0xda>
 1f0:	44 0f       	add	r20, r20
 1f2:	55 1f       	adc	r21, r21
 1f4:	6a 95       	dec	r22
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <GPIO_pin_direction+0xd6>
 1f8:	ba 01       	movw	r22, r20
 1fa:	60 95       	com	r22
 1fc:	62 23       	and	r22, r18
 1fe:	64 bb       	out	0x14, r22	; 20
 200:	08 95       	ret
            }
        break;
        case 'D':
        case 'd':
            if(1 == DIR)
 202:	41 30       	cpi	r20, 0x01	; 1
 204:	69 f4       	brne	.+26     	; 0x220 <GPIO_pin_direction+0x106>
            {
                SET_BIT(DDRD, BIT); //set direction of this pin in port C as output
 206:	21 b3       	in	r18, 0x11	; 17
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	ac 01       	movw	r20, r24
 20e:	02 c0       	rjmp	.+4      	; 0x214 <GPIO_pin_direction+0xfa>
 210:	44 0f       	add	r20, r20
 212:	55 1f       	adc	r21, r21
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <GPIO_pin_direction+0xf6>
 218:	ba 01       	movw	r22, r20
 21a:	62 2b       	or	r22, r18
 21c:	61 bb       	out	0x11, r22	; 17
 21e:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRD, BIT); //set direction of this pin in port C as input
 220:	21 b3       	in	r18, 0x11	; 17
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	ac 01       	movw	r20, r24
 228:	02 c0       	rjmp	.+4      	; 0x22e <GPIO_pin_direction+0x114>
 22a:	44 0f       	add	r20, r20
 22c:	55 1f       	adc	r21, r21
 22e:	6a 95       	dec	r22
 230:	e2 f7       	brpl	.-8      	; 0x22a <GPIO_pin_direction+0x110>
 232:	ba 01       	movw	r22, r20
 234:	60 95       	com	r22
 236:	62 23       	and	r22, r18
 238:	61 bb       	out	0x11, r22	; 17
 23a:	08 95       	ret

0000023c <GPIO_pin_write>:
} //end of  GPIO_pin_direction();


void GPIO_pin_write(char PORT, uint8 BIT, uint8 DATA)
{
    switch(PORT)
 23c:	84 34       	cpi	r24, 0x44	; 68
 23e:	09 f4       	brne	.+2      	; 0x242 <GPIO_pin_write+0x6>
 240:	71 c0       	rjmp	.+226    	; 0x324 <GPIO_pin_write+0xe8>
 242:	85 34       	cpi	r24, 0x45	; 69
 244:	48 f4       	brcc	.+18     	; 0x258 <GPIO_pin_write+0x1c>
 246:	82 34       	cpi	r24, 0x42	; 66
 248:	99 f1       	breq	.+102    	; 0x2b0 <GPIO_pin_write+0x74>
 24a:	83 34       	cpi	r24, 0x43	; 67
 24c:	08 f0       	brcs	.+2      	; 0x250 <GPIO_pin_write+0x14>
 24e:	4d c0       	rjmp	.+154    	; 0x2ea <GPIO_pin_write+0xae>
 250:	81 34       	cpi	r24, 0x41	; 65
 252:	09 f0       	breq	.+2      	; 0x256 <GPIO_pin_write+0x1a>
 254:	83 c0       	rjmp	.+262    	; 0x35c <GPIO_pin_write+0x120>
 256:	0f c0       	rjmp	.+30     	; 0x276 <GPIO_pin_write+0x3a>
 258:	82 36       	cpi	r24, 0x62	; 98
 25a:	51 f1       	breq	.+84     	; 0x2b0 <GPIO_pin_write+0x74>
 25c:	83 36       	cpi	r24, 0x63	; 99
 25e:	20 f4       	brcc	.+8      	; 0x268 <GPIO_pin_write+0x2c>
 260:	81 36       	cpi	r24, 0x61	; 97
 262:	09 f0       	breq	.+2      	; 0x266 <GPIO_pin_write+0x2a>
 264:	7b c0       	rjmp	.+246    	; 0x35c <GPIO_pin_write+0x120>
 266:	07 c0       	rjmp	.+14     	; 0x276 <GPIO_pin_write+0x3a>
 268:	83 36       	cpi	r24, 0x63	; 99
 26a:	09 f4       	brne	.+2      	; 0x26e <GPIO_pin_write+0x32>
 26c:	3e c0       	rjmp	.+124    	; 0x2ea <GPIO_pin_write+0xae>
 26e:	84 36       	cpi	r24, 0x64	; 100
 270:	09 f0       	breq	.+2      	; 0x274 <GPIO_pin_write+0x38>
 272:	74 c0       	rjmp	.+232    	; 0x35c <GPIO_pin_write+0x120>
 274:	57 c0       	rjmp	.+174    	; 0x324 <GPIO_pin_write+0xe8>
    {
        case 'A':
        case 'a':
            if(1 == DATA)
 276:	41 30       	cpi	r20, 0x01	; 1
 278:	69 f4       	brne	.+26     	; 0x294 <GPIO_pin_write+0x58>
            {
                SET_BIT(PORTA, BIT); //set output value of this pin in port A to 1
 27a:	2b b3       	in	r18, 0x1b	; 27
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	ac 01       	movw	r20, r24
 282:	02 c0       	rjmp	.+4      	; 0x288 <GPIO_pin_write+0x4c>
 284:	44 0f       	add	r20, r20
 286:	55 1f       	adc	r21, r21
 288:	6a 95       	dec	r22
 28a:	e2 f7       	brpl	.-8      	; 0x284 <GPIO_pin_write+0x48>
 28c:	ba 01       	movw	r22, r20
 28e:	62 2b       	or	r22, r18
 290:	6b bb       	out	0x1b, r22	; 27
 292:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTA, BIT); //set output value of this pin in port A to 0
 294:	2b b3       	in	r18, 0x1b	; 27
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	ac 01       	movw	r20, r24
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <GPIO_pin_write+0x66>
 29e:	44 0f       	add	r20, r20
 2a0:	55 1f       	adc	r21, r21
 2a2:	6a 95       	dec	r22
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <GPIO_pin_write+0x62>
 2a6:	ba 01       	movw	r22, r20
 2a8:	60 95       	com	r22
 2aa:	62 23       	and	r22, r18
 2ac:	6b bb       	out	0x1b, r22	; 27
 2ae:	08 95       	ret
            }
        break;
        case 'B':
        case 'b':
            if(1 == DATA)
 2b0:	41 30       	cpi	r20, 0x01	; 1
 2b2:	69 f4       	brne	.+26     	; 0x2ce <GPIO_pin_write+0x92>
            {
                SET_BIT(PORTB, BIT); //set output value of this pin in port B to 1
 2b4:	28 b3       	in	r18, 0x18	; 24
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	ac 01       	movw	r20, r24
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <GPIO_pin_write+0x86>
 2be:	44 0f       	add	r20, r20
 2c0:	55 1f       	adc	r21, r21
 2c2:	6a 95       	dec	r22
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <GPIO_pin_write+0x82>
 2c6:	ba 01       	movw	r22, r20
 2c8:	62 2b       	or	r22, r18
 2ca:	68 bb       	out	0x18, r22	; 24
 2cc:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTB, BIT); //set output value of this pin in port B to 0
 2ce:	28 b3       	in	r18, 0x18	; 24
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	ac 01       	movw	r20, r24
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <GPIO_pin_write+0xa0>
 2d8:	44 0f       	add	r20, r20
 2da:	55 1f       	adc	r21, r21
 2dc:	6a 95       	dec	r22
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <GPIO_pin_write+0x9c>
 2e0:	ba 01       	movw	r22, r20
 2e2:	60 95       	com	r22
 2e4:	62 23       	and	r22, r18
 2e6:	68 bb       	out	0x18, r22	; 24
 2e8:	08 95       	ret
            }
        break;
        case 'C':
        case 'c':
            if(1 == DATA)
 2ea:	41 30       	cpi	r20, 0x01	; 1
 2ec:	69 f4       	brne	.+26     	; 0x308 <GPIO_pin_write+0xcc>
            {
                SET_BIT(PORTC, BIT); //set output value of this pin in port C to 1
 2ee:	25 b3       	in	r18, 0x15	; 21
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	ac 01       	movw	r20, r24
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <GPIO_pin_write+0xc0>
 2f8:	44 0f       	add	r20, r20
 2fa:	55 1f       	adc	r21, r21
 2fc:	6a 95       	dec	r22
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <GPIO_pin_write+0xbc>
 300:	ba 01       	movw	r22, r20
 302:	62 2b       	or	r22, r18
 304:	65 bb       	out	0x15, r22	; 21
 306:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTC, BIT); //set output value of this pin in port C to 0
 308:	25 b3       	in	r18, 0x15	; 21
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	ac 01       	movw	r20, r24
 310:	02 c0       	rjmp	.+4      	; 0x316 <GPIO_pin_write+0xda>
 312:	44 0f       	add	r20, r20
 314:	55 1f       	adc	r21, r21
 316:	6a 95       	dec	r22
 318:	e2 f7       	brpl	.-8      	; 0x312 <GPIO_pin_write+0xd6>
 31a:	ba 01       	movw	r22, r20
 31c:	60 95       	com	r22
 31e:	62 23       	and	r22, r18
 320:	65 bb       	out	0x15, r22	; 21
 322:	08 95       	ret
            }
        break;
        case 'D':
        case 'd':
            if(1 == DATA)
 324:	41 30       	cpi	r20, 0x01	; 1
 326:	69 f4       	brne	.+26     	; 0x342 <GPIO_pin_write+0x106>
            {
                SET_BIT(PORTD, BIT); //set output value of this pin in port C to 1
 328:	22 b3       	in	r18, 0x12	; 18
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	ac 01       	movw	r20, r24
 330:	02 c0       	rjmp	.+4      	; 0x336 <GPIO_pin_write+0xfa>
 332:	44 0f       	add	r20, r20
 334:	55 1f       	adc	r21, r21
 336:	6a 95       	dec	r22
 338:	e2 f7       	brpl	.-8      	; 0x332 <GPIO_pin_write+0xf6>
 33a:	ba 01       	movw	r22, r20
 33c:	62 2b       	or	r22, r18
 33e:	62 bb       	out	0x12, r22	; 18
 340:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTD, BIT); //set output value of this pin in port C to 0
 342:	22 b3       	in	r18, 0x12	; 18
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	ac 01       	movw	r20, r24
 34a:	02 c0       	rjmp	.+4      	; 0x350 <GPIO_pin_write+0x114>
 34c:	44 0f       	add	r20, r20
 34e:	55 1f       	adc	r21, r21
 350:	6a 95       	dec	r22
 352:	e2 f7       	brpl	.-8      	; 0x34c <GPIO_pin_write+0x110>
 354:	ba 01       	movw	r22, r20
 356:	60 95       	com	r22
 358:	62 23       	and	r22, r18
 35a:	62 bb       	out	0x12, r22	; 18
 35c:	08 95       	ret

0000035e <GPIO_pin_read>:


uint8 GPIO_pin_read(char PORT, uint8 BIT)
{
    uint8 read_value = 0;
    switch(PORT)
 35e:	84 34       	cpi	r24, 0x44	; 68
 360:	99 f1       	breq	.+102    	; 0x3c8 <GPIO_pin_read+0x6a>
 362:	85 34       	cpi	r24, 0x45	; 69
 364:	38 f4       	brcc	.+14     	; 0x374 <GPIO_pin_read+0x16>
 366:	82 34       	cpi	r24, 0x42	; 66
 368:	d9 f0       	breq	.+54     	; 0x3a0 <GPIO_pin_read+0x42>
 36a:	83 34       	cpi	r24, 0x43	; 67
 36c:	18 f5       	brcc	.+70     	; 0x3b4 <GPIO_pin_read+0x56>
 36e:	81 34       	cpi	r24, 0x41	; 65
 370:	a9 f5       	brne	.+106    	; 0x3dc <GPIO_pin_read+0x7e>
 372:	0c c0       	rjmp	.+24     	; 0x38c <GPIO_pin_read+0x2e>
 374:	82 36       	cpi	r24, 0x62	; 98
 376:	a1 f0       	breq	.+40     	; 0x3a0 <GPIO_pin_read+0x42>
 378:	83 36       	cpi	r24, 0x63	; 99
 37a:	18 f4       	brcc	.+6      	; 0x382 <GPIO_pin_read+0x24>
 37c:	81 36       	cpi	r24, 0x61	; 97
 37e:	71 f5       	brne	.+92     	; 0x3dc <GPIO_pin_read+0x7e>
 380:	05 c0       	rjmp	.+10     	; 0x38c <GPIO_pin_read+0x2e>
 382:	83 36       	cpi	r24, 0x63	; 99
 384:	b9 f0       	breq	.+46     	; 0x3b4 <GPIO_pin_read+0x56>
 386:	84 36       	cpi	r24, 0x64	; 100
 388:	49 f5       	brne	.+82     	; 0x3dc <GPIO_pin_read+0x7e>
 38a:	1e c0       	rjmp	.+60     	; 0x3c8 <GPIO_pin_read+0x6a>
    {
        case 'A':
        case 'a':
            read_value = READ_BIT(PINA, BIT); //read value of given pin in port A
 38c:	29 b3       	in	r18, 0x19	; 25
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	c9 01       	movw	r24, r18
 392:	02 c0       	rjmp	.+4      	; 0x398 <GPIO_pin_read+0x3a>
 394:	95 95       	asr	r25
 396:	87 95       	ror	r24
 398:	6a 95       	dec	r22
 39a:	e2 f7       	brpl	.-8      	; 0x394 <GPIO_pin_read+0x36>
 39c:	81 70       	andi	r24, 0x01	; 1
        break;
 39e:	08 95       	ret
        case 'B':
        case 'b':
            read_value = READ_BIT(PINB, BIT); //read value of given pin in port B
 3a0:	26 b3       	in	r18, 0x16	; 22
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	c9 01       	movw	r24, r18
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <GPIO_pin_read+0x4e>
 3a8:	95 95       	asr	r25
 3aa:	87 95       	ror	r24
 3ac:	6a 95       	dec	r22
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <GPIO_pin_read+0x4a>
 3b0:	81 70       	andi	r24, 0x01	; 1
        break;
 3b2:	08 95       	ret
        case 'C':
        case 'c':
            read_value = READ_BIT(PINC, BIT); //read value of given pin in port C
 3b4:	23 b3       	in	r18, 0x13	; 19
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	c9 01       	movw	r24, r18
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <GPIO_pin_read+0x62>
 3bc:	95 95       	asr	r25
 3be:	87 95       	ror	r24
 3c0:	6a 95       	dec	r22
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <GPIO_pin_read+0x5e>
 3c4:	81 70       	andi	r24, 0x01	; 1
        break;
 3c6:	08 95       	ret
        case 'D':
        case 'd':
            read_value = READ_BIT(PIND, BIT); //read value of given pin in port D
 3c8:	20 b3       	in	r18, 0x10	; 16
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	c9 01       	movw	r24, r18
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <GPIO_pin_read+0x76>
 3d0:	95 95       	asr	r25
 3d2:	87 95       	ror	r24
 3d4:	6a 95       	dec	r22
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <GPIO_pin_read+0x72>
 3d8:	81 70       	andi	r24, 0x01	; 1
        break;
 3da:	08 95       	ret
} // end of GPIO_pin_write();


uint8 GPIO_pin_read(char PORT, uint8 BIT)
{
    uint8 read_value = 0;
 3dc:	80 e0       	ldi	r24, 0x00	; 0
        break;
        default:
        break;
    } //end of switch(PORT);
    return read_value;
} // end of GPIO_pin_read();
 3de:	08 95       	ret

000003e0 <GPIO_pin_toggle>:


void GPIO_pin_toggle(char PORT, uint8 BIT)
{
    switch(PORT)
 3e0:	84 34       	cpi	r24, 0x44	; 68
 3e2:	09 f4       	brne	.+2      	; 0x3e6 <GPIO_pin_toggle+0x6>
 3e4:	3d c0       	rjmp	.+122    	; 0x460 <GPIO_pin_toggle+0x80>
 3e6:	85 34       	cpi	r24, 0x45	; 69
 3e8:	40 f4       	brcc	.+16     	; 0x3fa <GPIO_pin_toggle+0x1a>
 3ea:	82 34       	cpi	r24, 0x42	; 66
 3ec:	f9 f0       	breq	.+62     	; 0x42c <GPIO_pin_toggle+0x4c>
 3ee:	83 34       	cpi	r24, 0x43	; 67
 3f0:	50 f5       	brcc	.+84     	; 0x446 <GPIO_pin_toggle+0x66>
 3f2:	81 34       	cpi	r24, 0x41	; 65
 3f4:	09 f0       	breq	.+2      	; 0x3f8 <GPIO_pin_toggle+0x18>
 3f6:	40 c0       	rjmp	.+128    	; 0x478 <GPIO_pin_toggle+0x98>
 3f8:	0c c0       	rjmp	.+24     	; 0x412 <GPIO_pin_toggle+0x32>
 3fa:	82 36       	cpi	r24, 0x62	; 98
 3fc:	b9 f0       	breq	.+46     	; 0x42c <GPIO_pin_toggle+0x4c>
 3fe:	83 36       	cpi	r24, 0x63	; 99
 400:	18 f4       	brcc	.+6      	; 0x408 <GPIO_pin_toggle+0x28>
 402:	81 36       	cpi	r24, 0x61	; 97
 404:	c9 f5       	brne	.+114    	; 0x478 <GPIO_pin_toggle+0x98>
 406:	05 c0       	rjmp	.+10     	; 0x412 <GPIO_pin_toggle+0x32>
 408:	83 36       	cpi	r24, 0x63	; 99
 40a:	e9 f0       	breq	.+58     	; 0x446 <GPIO_pin_toggle+0x66>
 40c:	84 36       	cpi	r24, 0x64	; 100
 40e:	a1 f5       	brne	.+104    	; 0x478 <GPIO_pin_toggle+0x98>
 410:	27 c0       	rjmp	.+78     	; 0x460 <GPIO_pin_toggle+0x80>
    {
        case 'A':
        case 'a':
            TOG_BIT(PORTA, BIT); //toggle value of given pin in port A
 412:	2b b3       	in	r18, 0x1b	; 27
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	ac 01       	movw	r20, r24
 41a:	02 c0       	rjmp	.+4      	; 0x420 <GPIO_pin_toggle+0x40>
 41c:	44 0f       	add	r20, r20
 41e:	55 1f       	adc	r21, r21
 420:	6a 95       	dec	r22
 422:	e2 f7       	brpl	.-8      	; 0x41c <GPIO_pin_toggle+0x3c>
 424:	ba 01       	movw	r22, r20
 426:	62 27       	eor	r22, r18
 428:	6b bb       	out	0x1b, r22	; 27
        break;
 42a:	08 95       	ret
        case 'B':
        case 'b':
            TOG_BIT(PORTB, BIT); //toggle value of given pin in port B
 42c:	28 b3       	in	r18, 0x18	; 24
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	ac 01       	movw	r20, r24
 434:	02 c0       	rjmp	.+4      	; 0x43a <GPIO_pin_toggle+0x5a>
 436:	44 0f       	add	r20, r20
 438:	55 1f       	adc	r21, r21
 43a:	6a 95       	dec	r22
 43c:	e2 f7       	brpl	.-8      	; 0x436 <GPIO_pin_toggle+0x56>
 43e:	ba 01       	movw	r22, r20
 440:	62 27       	eor	r22, r18
 442:	68 bb       	out	0x18, r22	; 24
        break;
 444:	08 95       	ret
        case 'C':
        case 'c':
            TOG_BIT(PORTC, BIT); //toggle value of given pin in port C
 446:	25 b3       	in	r18, 0x15	; 21
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	ac 01       	movw	r20, r24
 44e:	02 c0       	rjmp	.+4      	; 0x454 <GPIO_pin_toggle+0x74>
 450:	44 0f       	add	r20, r20
 452:	55 1f       	adc	r21, r21
 454:	6a 95       	dec	r22
 456:	e2 f7       	brpl	.-8      	; 0x450 <GPIO_pin_toggle+0x70>
 458:	ba 01       	movw	r22, r20
 45a:	62 27       	eor	r22, r18
 45c:	65 bb       	out	0x15, r22	; 21
        break;
 45e:	08 95       	ret
        case 'D':
        case 'd':
            TOG_BIT(PORTD, BIT); //toggle value of given pin in port D
 460:	22 b3       	in	r18, 0x12	; 18
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	ac 01       	movw	r20, r24
 468:	02 c0       	rjmp	.+4      	; 0x46e <GPIO_pin_toggle+0x8e>
 46a:	44 0f       	add	r20, r20
 46c:	55 1f       	adc	r21, r21
 46e:	6a 95       	dec	r22
 470:	e2 f7       	brpl	.-8      	; 0x46a <GPIO_pin_toggle+0x8a>
 472:	ba 01       	movw	r22, r20
 474:	62 27       	eor	r22, r18
 476:	62 bb       	out	0x12, r22	; 18
 478:	08 95       	ret

0000047a <GPIO_port_direction>:
} // end of GPIO_pin_toggle();


void GPIO_port_direction(char PORT, uint8 DIR)
{
    switch(PORT)
 47a:	84 34       	cpi	r24, 0x44	; 68
 47c:	d9 f0       	breq	.+54     	; 0x4b4 <GPIO_port_direction+0x3a>
 47e:	85 34       	cpi	r24, 0x45	; 69
 480:	38 f4       	brcc	.+14     	; 0x490 <GPIO_port_direction+0x16>
 482:	82 34       	cpi	r24, 0x42	; 66
 484:	99 f0       	breq	.+38     	; 0x4ac <GPIO_port_direction+0x32>
 486:	83 34       	cpi	r24, 0x43	; 67
 488:	98 f4       	brcc	.+38     	; 0x4b0 <GPIO_port_direction+0x36>
 48a:	81 34       	cpi	r24, 0x41	; 65
 48c:	a1 f4       	brne	.+40     	; 0x4b6 <GPIO_port_direction+0x3c>
 48e:	0c c0       	rjmp	.+24     	; 0x4a8 <GPIO_port_direction+0x2e>
 490:	82 36       	cpi	r24, 0x62	; 98
 492:	61 f0       	breq	.+24     	; 0x4ac <GPIO_port_direction+0x32>
 494:	83 36       	cpi	r24, 0x63	; 99
 496:	18 f4       	brcc	.+6      	; 0x49e <GPIO_port_direction+0x24>
 498:	81 36       	cpi	r24, 0x61	; 97
 49a:	69 f4       	brne	.+26     	; 0x4b6 <GPIO_port_direction+0x3c>
 49c:	05 c0       	rjmp	.+10     	; 0x4a8 <GPIO_port_direction+0x2e>
 49e:	83 36       	cpi	r24, 0x63	; 99
 4a0:	39 f0       	breq	.+14     	; 0x4b0 <GPIO_port_direction+0x36>
 4a2:	84 36       	cpi	r24, 0x64	; 100
 4a4:	41 f4       	brne	.+16     	; 0x4b6 <GPIO_port_direction+0x3c>
 4a6:	06 c0       	rjmp	.+12     	; 0x4b4 <GPIO_port_direction+0x3a>
    {
        case 'A':
        case 'a':
            DDRA = DIR; // set direction of port A to the given DIR
 4a8:	6a bb       	out	0x1a, r22	; 26
        break;
 4aa:	08 95       	ret
        case 'B':
        case 'b':
            DDRB = DIR; // set direction of port B to the given DIR
 4ac:	67 bb       	out	0x17, r22	; 23
        break;
 4ae:	08 95       	ret
        case 'C':
        case 'c':
            DDRC = DIR; // set direction of port C to the given DIR
 4b0:	64 bb       	out	0x14, r22	; 20
        break;
 4b2:	08 95       	ret
        case 'D':
        case 'd':
            DDRD = DIR; // set direction of port D to the given DIR
 4b4:	61 bb       	out	0x11, r22	; 17
 4b6:	08 95       	ret

000004b8 <GPIO_port_write>:
} // end of GPIO_port_direction();


void GPIO_port_write(char PORT, uint8 DATA)
{
    switch(PORT)
 4b8:	84 34       	cpi	r24, 0x44	; 68
 4ba:	d9 f0       	breq	.+54     	; 0x4f2 <GPIO_port_write+0x3a>
 4bc:	85 34       	cpi	r24, 0x45	; 69
 4be:	38 f4       	brcc	.+14     	; 0x4ce <GPIO_port_write+0x16>
 4c0:	82 34       	cpi	r24, 0x42	; 66
 4c2:	99 f0       	breq	.+38     	; 0x4ea <GPIO_port_write+0x32>
 4c4:	83 34       	cpi	r24, 0x43	; 67
 4c6:	98 f4       	brcc	.+38     	; 0x4ee <GPIO_port_write+0x36>
 4c8:	81 34       	cpi	r24, 0x41	; 65
 4ca:	a1 f4       	brne	.+40     	; 0x4f4 <GPIO_port_write+0x3c>
 4cc:	0c c0       	rjmp	.+24     	; 0x4e6 <GPIO_port_write+0x2e>
 4ce:	82 36       	cpi	r24, 0x62	; 98
 4d0:	61 f0       	breq	.+24     	; 0x4ea <GPIO_port_write+0x32>
 4d2:	83 36       	cpi	r24, 0x63	; 99
 4d4:	18 f4       	brcc	.+6      	; 0x4dc <GPIO_port_write+0x24>
 4d6:	81 36       	cpi	r24, 0x61	; 97
 4d8:	69 f4       	brne	.+26     	; 0x4f4 <GPIO_port_write+0x3c>
 4da:	05 c0       	rjmp	.+10     	; 0x4e6 <GPIO_port_write+0x2e>
 4dc:	83 36       	cpi	r24, 0x63	; 99
 4de:	39 f0       	breq	.+14     	; 0x4ee <GPIO_port_write+0x36>
 4e0:	84 36       	cpi	r24, 0x64	; 100
 4e2:	41 f4       	brne	.+16     	; 0x4f4 <GPIO_port_write+0x3c>
 4e4:	06 c0       	rjmp	.+12     	; 0x4f2 <GPIO_port_write+0x3a>
    {
        case 'A':
        case 'a':
            PORTA = DATA; // write these data on port A
 4e6:	6b bb       	out	0x1b, r22	; 27
        break;
 4e8:	08 95       	ret
        case 'B':
        case 'b':
            PORTB = DATA; // write these data on port B
 4ea:	68 bb       	out	0x18, r22	; 24
        break;
 4ec:	08 95       	ret
        case 'C':
        case 'c':
            PORTC = DATA; // write these data on port C
 4ee:	65 bb       	out	0x15, r22	; 21
        break;
 4f0:	08 95       	ret
        case 'D':
        case 'd':
            PORTD = DATA; // write these data on port D
 4f2:	62 bb       	out	0x12, r22	; 18
 4f4:	08 95       	ret

000004f6 <GPIO_port_read>:


uint8 GPIO_port_read(char PORT)
{
    uint8 read_port = 0;
    switch(PORT)
 4f6:	84 34       	cpi	r24, 0x44	; 68
 4f8:	d9 f0       	breq	.+54     	; 0x530 <GPIO_port_read+0x3a>
 4fa:	85 34       	cpi	r24, 0x45	; 69
 4fc:	38 f4       	brcc	.+14     	; 0x50c <GPIO_port_read+0x16>
 4fe:	82 34       	cpi	r24, 0x42	; 66
 500:	99 f0       	breq	.+38     	; 0x528 <GPIO_port_read+0x32>
 502:	83 34       	cpi	r24, 0x43	; 67
 504:	98 f4       	brcc	.+38     	; 0x52c <GPIO_port_read+0x36>
 506:	81 34       	cpi	r24, 0x41	; 65
 508:	a9 f4       	brne	.+42     	; 0x534 <GPIO_port_read+0x3e>
 50a:	0c c0       	rjmp	.+24     	; 0x524 <GPIO_port_read+0x2e>
 50c:	82 36       	cpi	r24, 0x62	; 98
 50e:	61 f0       	breq	.+24     	; 0x528 <GPIO_port_read+0x32>
 510:	83 36       	cpi	r24, 0x63	; 99
 512:	18 f4       	brcc	.+6      	; 0x51a <GPIO_port_read+0x24>
 514:	81 36       	cpi	r24, 0x61	; 97
 516:	71 f4       	brne	.+28     	; 0x534 <GPIO_port_read+0x3e>
 518:	05 c0       	rjmp	.+10     	; 0x524 <GPIO_port_read+0x2e>
 51a:	83 36       	cpi	r24, 0x63	; 99
 51c:	39 f0       	breq	.+14     	; 0x52c <GPIO_port_read+0x36>
 51e:	84 36       	cpi	r24, 0x64	; 100
 520:	49 f4       	brne	.+18     	; 0x534 <GPIO_port_read+0x3e>
 522:	06 c0       	rjmp	.+12     	; 0x530 <GPIO_port_read+0x3a>
    {
        case 'A':
        case 'a':
            read_port = PINA; // read data from port A
 524:	89 b3       	in	r24, 0x19	; 25
        break;
 526:	08 95       	ret
        case 'B':
        case 'b':
            read_port = PINB; // read data from port B
 528:	86 b3       	in	r24, 0x16	; 22
        break;
 52a:	08 95       	ret
        case 'C':
        case 'c':
            read_port = PINC; // read data from port C
 52c:	83 b3       	in	r24, 0x13	; 19
        break;
 52e:	08 95       	ret
        case 'D':
        case 'd':
            read_port = PIND; // read data from port D
 530:	80 b3       	in	r24, 0x10	; 16
        break;
 532:	08 95       	ret
} // end of GPIO_port_write();


uint8 GPIO_port_read(char PORT)
{
    uint8 read_port = 0;
 534:	80 e0       	ldi	r24, 0x00	; 0
        break;
        default:
        break;
    } // end of switch(PORT);
    return read_port;
} // end of GPIO_port_read();
 536:	08 95       	ret

00000538 <GPIO_pin_pull_up>:


void GPIO_pin_pull_up(char port_name, uint8 pin_number)
{
    switch(port_name)
 538:	84 34       	cpi	r24, 0x44	; 68
 53a:	09 f4       	brne	.+2      	; 0x53e <GPIO_pin_pull_up+0x6>
 53c:	57 c0       	rjmp	.+174    	; 0x5ec <GPIO_pin_pull_up+0xb4>
 53e:	85 34       	cpi	r24, 0x45	; 69
 540:	40 f4       	brcc	.+16     	; 0x552 <GPIO_pin_pull_up+0x1a>
 542:	82 34       	cpi	r24, 0x42	; 66
 544:	49 f1       	breq	.+82     	; 0x598 <GPIO_pin_pull_up+0x60>
 546:	83 34       	cpi	r24, 0x43	; 67
 548:	e0 f5       	brcc	.+120    	; 0x5c2 <GPIO_pin_pull_up+0x8a>
 54a:	81 34       	cpi	r24, 0x41	; 65
 54c:	09 f0       	breq	.+2      	; 0x550 <GPIO_pin_pull_up+0x18>
 54e:	62 c0       	rjmp	.+196    	; 0x614 <GPIO_pin_pull_up+0xdc>
 550:	0e c0       	rjmp	.+28     	; 0x56e <GPIO_pin_pull_up+0x36>
 552:	82 36       	cpi	r24, 0x62	; 98
 554:	09 f1       	breq	.+66     	; 0x598 <GPIO_pin_pull_up+0x60>
 556:	83 36       	cpi	r24, 0x63	; 99
 558:	20 f4       	brcc	.+8      	; 0x562 <GPIO_pin_pull_up+0x2a>
 55a:	81 36       	cpi	r24, 0x61	; 97
 55c:	09 f0       	breq	.+2      	; 0x560 <GPIO_pin_pull_up+0x28>
 55e:	5a c0       	rjmp	.+180    	; 0x614 <GPIO_pin_pull_up+0xdc>
 560:	06 c0       	rjmp	.+12     	; 0x56e <GPIO_pin_pull_up+0x36>
 562:	83 36       	cpi	r24, 0x63	; 99
 564:	71 f1       	breq	.+92     	; 0x5c2 <GPIO_pin_pull_up+0x8a>
 566:	84 36       	cpi	r24, 0x64	; 100
 568:	09 f0       	breq	.+2      	; 0x56c <GPIO_pin_pull_up+0x34>
 56a:	54 c0       	rjmp	.+168    	; 0x614 <GPIO_pin_pull_up+0xdc>
 56c:	3f c0       	rjmp	.+126    	; 0x5ec <GPIO_pin_pull_up+0xb4>
    {
        case 'A':
        case 'a':
            CLR_BIT(DDRA,pin_number); //set pin_number of port_name as input
 56e:	2a b3       	in	r18, 0x1a	; 26
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	ac 01       	movw	r20, r24
 576:	02 c0       	rjmp	.+4      	; 0x57c <GPIO_pin_pull_up+0x44>
 578:	44 0f       	add	r20, r20
 57a:	55 1f       	adc	r21, r21
 57c:	6a 95       	dec	r22
 57e:	e2 f7       	brpl	.-8      	; 0x578 <GPIO_pin_pull_up+0x40>
 580:	ba 01       	movw	r22, r20
 582:	84 2f       	mov	r24, r20
 584:	80 95       	com	r24
 586:	82 23       	and	r24, r18
 588:	8a bb       	out	0x1a, r24	; 26
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 58a:	80 b7       	in	r24, 0x30	; 48
 58c:	8b 7f       	andi	r24, 0xFB	; 251
 58e:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTA,pin_number); //set pin_number of port_name as high value
 590:	8b b3       	in	r24, 0x1b	; 27
 592:	68 2b       	or	r22, r24
 594:	6b bb       	out	0x1b, r22	; 27
        break;
 596:	08 95       	ret
        case 'B':
        case 'b':
            CLR_BIT(DDRB,pin_number); //set pin_number of port_name as input
 598:	27 b3       	in	r18, 0x17	; 23
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	ac 01       	movw	r20, r24
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <GPIO_pin_pull_up+0x6e>
 5a2:	44 0f       	add	r20, r20
 5a4:	55 1f       	adc	r21, r21
 5a6:	6a 95       	dec	r22
 5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <GPIO_pin_pull_up+0x6a>
 5aa:	ba 01       	movw	r22, r20
 5ac:	84 2f       	mov	r24, r20
 5ae:	80 95       	com	r24
 5b0:	82 23       	and	r24, r18
 5b2:	87 bb       	out	0x17, r24	; 23
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 5b4:	80 b7       	in	r24, 0x30	; 48
 5b6:	8b 7f       	andi	r24, 0xFB	; 251
 5b8:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTB,pin_number); //set pin_number of port_name as high value
 5ba:	88 b3       	in	r24, 0x18	; 24
 5bc:	68 2b       	or	r22, r24
 5be:	68 bb       	out	0x18, r22	; 24
        break;
 5c0:	08 95       	ret
        case 'C':
        case 'c':
            CLR_BIT(DDRC,pin_number); //set pin_number of port_name as input
 5c2:	24 b3       	in	r18, 0x14	; 20
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	ac 01       	movw	r20, r24
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <GPIO_pin_pull_up+0x98>
 5cc:	44 0f       	add	r20, r20
 5ce:	55 1f       	adc	r21, r21
 5d0:	6a 95       	dec	r22
 5d2:	e2 f7       	brpl	.-8      	; 0x5cc <GPIO_pin_pull_up+0x94>
 5d4:	ba 01       	movw	r22, r20
 5d6:	84 2f       	mov	r24, r20
 5d8:	80 95       	com	r24
 5da:	82 23       	and	r24, r18
 5dc:	84 bb       	out	0x14, r24	; 20
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 5de:	80 b7       	in	r24, 0x30	; 48
 5e0:	8b 7f       	andi	r24, 0xFB	; 251
 5e2:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTC,pin_number); //set pin_number of port_name as high value
 5e4:	85 b3       	in	r24, 0x15	; 21
 5e6:	68 2b       	or	r22, r24
 5e8:	65 bb       	out	0x15, r22	; 21
        break;
 5ea:	08 95       	ret
        case 'D':
        case 'd':
            CLR_BIT(DDRD,pin_number); //set pin_number of port_name as input
 5ec:	21 b3       	in	r18, 0x11	; 17
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	ac 01       	movw	r20, r24
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <GPIO_pin_pull_up+0xc2>
 5f6:	44 0f       	add	r20, r20
 5f8:	55 1f       	adc	r21, r21
 5fa:	6a 95       	dec	r22
 5fc:	e2 f7       	brpl	.-8      	; 0x5f6 <GPIO_pin_pull_up+0xbe>
 5fe:	ba 01       	movw	r22, r20
 600:	84 2f       	mov	r24, r20
 602:	80 95       	com	r24
 604:	82 23       	and	r24, r18
 606:	81 bb       	out	0x11, r24	; 17
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 608:	80 b7       	in	r24, 0x30	; 48
 60a:	8b 7f       	andi	r24, 0xFB	; 251
 60c:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTD,pin_number); //set pin_number of port_name as high value
 60e:	82 b3       	in	r24, 0x12	; 18
 610:	68 2b       	or	r22, r24
 612:	62 bb       	out	0x12, r22	; 18
 614:	08 95       	ret

00000616 <GPIO_port_write_high_nibble>:



void GPIO_port_write_high_nibble(char port_name, uint8 high_nibble)
{
    high_nibble <<= 4; //clear low_nibble bits in number
 616:	62 95       	swap	r22
 618:	60 7f       	andi	r22, 0xF0	; 240
    switch(port_name)
 61a:	84 34       	cpi	r24, 0x44	; 68
 61c:	51 f1       	breq	.+84     	; 0x672 <GPIO_port_write_high_nibble+0x5c>
 61e:	85 34       	cpi	r24, 0x45	; 69
 620:	38 f4       	brcc	.+14     	; 0x630 <GPIO_port_write_high_nibble+0x1a>
 622:	82 34       	cpi	r24, 0x42	; 66
 624:	c1 f0       	breq	.+48     	; 0x656 <GPIO_port_write_high_nibble+0x40>
 626:	83 34       	cpi	r24, 0x43	; 67
 628:	e8 f4       	brcc	.+58     	; 0x664 <GPIO_port_write_high_nibble+0x4e>
 62a:	81 34       	cpi	r24, 0x41	; 65
 62c:	41 f5       	brne	.+80     	; 0x67e <GPIO_port_write_high_nibble+0x68>
 62e:	0c c0       	rjmp	.+24     	; 0x648 <GPIO_port_write_high_nibble+0x32>
 630:	82 36       	cpi	r24, 0x62	; 98
 632:	89 f0       	breq	.+34     	; 0x656 <GPIO_port_write_high_nibble+0x40>
 634:	83 36       	cpi	r24, 0x63	; 99
 636:	18 f4       	brcc	.+6      	; 0x63e <GPIO_port_write_high_nibble+0x28>
 638:	81 36       	cpi	r24, 0x61	; 97
 63a:	09 f5       	brne	.+66     	; 0x67e <GPIO_port_write_high_nibble+0x68>
 63c:	05 c0       	rjmp	.+10     	; 0x648 <GPIO_port_write_high_nibble+0x32>
 63e:	83 36       	cpi	r24, 0x63	; 99
 640:	89 f0       	breq	.+34     	; 0x664 <GPIO_port_write_high_nibble+0x4e>
 642:	84 36       	cpi	r24, 0x64	; 100
 644:	e1 f4       	brne	.+56     	; 0x67e <GPIO_port_write_high_nibble+0x68>
 646:	15 c0       	rjmp	.+42     	; 0x672 <GPIO_port_write_high_nibble+0x5c>
    {
        case 'A':
        case 'a':
            PORTA &= 0x0f;
 648:	8b b3       	in	r24, 0x1b	; 27
 64a:	8f 70       	andi	r24, 0x0F	; 15
 64c:	8b bb       	out	0x1b, r24	; 27
            PORTA |= high_nibble;
 64e:	8b b3       	in	r24, 0x1b	; 27
 650:	68 2b       	or	r22, r24
 652:	6b bb       	out	0x1b, r22	; 27
        break;
 654:	08 95       	ret
        case 'B':
        case 'b':
            PORTB &= 0x0f;
 656:	88 b3       	in	r24, 0x18	; 24
 658:	8f 70       	andi	r24, 0x0F	; 15
 65a:	88 bb       	out	0x18, r24	; 24
            PORTB |= high_nibble;
 65c:	88 b3       	in	r24, 0x18	; 24
 65e:	68 2b       	or	r22, r24
 660:	68 bb       	out	0x18, r22	; 24
        break;
 662:	08 95       	ret
        case 'C':
        case 'c':
            PORTC &= 0x0f;
 664:	85 b3       	in	r24, 0x15	; 21
 666:	8f 70       	andi	r24, 0x0F	; 15
 668:	85 bb       	out	0x15, r24	; 21
            PORTC |= high_nibble;
 66a:	85 b3       	in	r24, 0x15	; 21
 66c:	68 2b       	or	r22, r24
 66e:	65 bb       	out	0x15, r22	; 21
        break;
 670:	08 95       	ret
        case 'D':
        case 'd':
            PORTD &= 0x0f;
 672:	82 b3       	in	r24, 0x12	; 18
 674:	8f 70       	andi	r24, 0x0F	; 15
 676:	82 bb       	out	0x12, r24	; 18
            PORTD |= high_nibble;
 678:	82 b3       	in	r24, 0x12	; 18
 67a:	68 2b       	or	r22, r24
 67c:	62 bb       	out	0x12, r22	; 18
 67e:	08 95       	ret

00000680 <GPIO_port_write_low_nibble>:
    } // end of switch(port_name);
}

void GPIO_port_write_low_nibble(char port_name, uint8 low_nibble)
{
    low_nibble &= 0x0f; //clear high_nibble bits in number
 680:	6f 70       	andi	r22, 0x0F	; 15
    switch(port_name)
 682:	84 34       	cpi	r24, 0x44	; 68
 684:	51 f1       	breq	.+84     	; 0x6da <GPIO_port_write_low_nibble+0x5a>
 686:	85 34       	cpi	r24, 0x45	; 69
 688:	38 f4       	brcc	.+14     	; 0x698 <GPIO_port_write_low_nibble+0x18>
 68a:	82 34       	cpi	r24, 0x42	; 66
 68c:	c1 f0       	breq	.+48     	; 0x6be <GPIO_port_write_low_nibble+0x3e>
 68e:	83 34       	cpi	r24, 0x43	; 67
 690:	e8 f4       	brcc	.+58     	; 0x6cc <GPIO_port_write_low_nibble+0x4c>
 692:	81 34       	cpi	r24, 0x41	; 65
 694:	41 f5       	brne	.+80     	; 0x6e6 <GPIO_port_write_low_nibble+0x66>
 696:	0c c0       	rjmp	.+24     	; 0x6b0 <GPIO_port_write_low_nibble+0x30>
 698:	82 36       	cpi	r24, 0x62	; 98
 69a:	89 f0       	breq	.+34     	; 0x6be <GPIO_port_write_low_nibble+0x3e>
 69c:	83 36       	cpi	r24, 0x63	; 99
 69e:	18 f4       	brcc	.+6      	; 0x6a6 <GPIO_port_write_low_nibble+0x26>
 6a0:	81 36       	cpi	r24, 0x61	; 97
 6a2:	09 f5       	brne	.+66     	; 0x6e6 <GPIO_port_write_low_nibble+0x66>
 6a4:	05 c0       	rjmp	.+10     	; 0x6b0 <GPIO_port_write_low_nibble+0x30>
 6a6:	83 36       	cpi	r24, 0x63	; 99
 6a8:	89 f0       	breq	.+34     	; 0x6cc <GPIO_port_write_low_nibble+0x4c>
 6aa:	84 36       	cpi	r24, 0x64	; 100
 6ac:	e1 f4       	brne	.+56     	; 0x6e6 <GPIO_port_write_low_nibble+0x66>
 6ae:	15 c0       	rjmp	.+42     	; 0x6da <GPIO_port_write_low_nibble+0x5a>
    {
        case 'A':
        case 'a':
            PORTA &= 0xf0;
 6b0:	8b b3       	in	r24, 0x1b	; 27
 6b2:	80 7f       	andi	r24, 0xF0	; 240
 6b4:	8b bb       	out	0x1b, r24	; 27
            PORTA |= low_nibble;
 6b6:	8b b3       	in	r24, 0x1b	; 27
 6b8:	68 2b       	or	r22, r24
 6ba:	6b bb       	out	0x1b, r22	; 27
        break;
 6bc:	08 95       	ret
        case 'B':
        case 'b':
            PORTB &= 0xf0;
 6be:	88 b3       	in	r24, 0x18	; 24
 6c0:	80 7f       	andi	r24, 0xF0	; 240
 6c2:	88 bb       	out	0x18, r24	; 24
            PORTB |= low_nibble;
 6c4:	88 b3       	in	r24, 0x18	; 24
 6c6:	68 2b       	or	r22, r24
 6c8:	68 bb       	out	0x18, r22	; 24
        break;
 6ca:	08 95       	ret
        case 'C':
        case 'c':
            PORTC &= 0xf0;
 6cc:	85 b3       	in	r24, 0x15	; 21
 6ce:	80 7f       	andi	r24, 0xF0	; 240
 6d0:	85 bb       	out	0x15, r24	; 21
            PORTC |= low_nibble;
 6d2:	85 b3       	in	r24, 0x15	; 21
 6d4:	68 2b       	or	r22, r24
 6d6:	65 bb       	out	0x15, r22	; 21
        break;
 6d8:	08 95       	ret
        case 'D':
        case 'd':
            PORTD &= 0xf0;
 6da:	82 b3       	in	r24, 0x12	; 18
 6dc:	80 7f       	andi	r24, 0xF0	; 240
 6de:	82 bb       	out	0x12, r24	; 18
            PORTD |= low_nibble;
 6e0:	82 b3       	in	r24, 0x12	; 18
 6e2:	68 2b       	or	r22, r24
 6e4:	62 bb       	out	0x12, r22	; 18
 6e6:	08 95       	ret

000006e8 <EEPROM_write>:
#include "internalEEPROM.h"

void EEPROM_write(uint16 address, uint8 data)
{
	/*wait until (EEWE) bit in (EECR), becomes ZERO, to start new write operation*/
	while (READ_BIT(EECR,EEWE))
 6e8:	2c b3       	in	r18, 0x1c	; 28
 6ea:	21 fd       	sbrc	r18, 1
 6ec:	fd cf       	rjmp	.-6      	; 0x6e8 <EEPROM_write>
	{
		//do nothing
	}
	/*wait until (SPMEN) bit in (SPMCR) becomes zero*/
	while (READ_BIT(SPMCR,SPMEN))
 6ee:	07 b6       	in	r0, 0x37	; 55
 6f0:	00 fc       	sbrc	r0, 0
 6f2:	fd cf       	rjmp	.-6      	; 0x6ee <EEPROM_write+0x6>
	{
		//do nothing
	}
	/*load address in (EEARL, EEARH)*/
	EEARL = (uint8) address;
 6f4:	8e bb       	out	0x1e, r24	; 30
	EEARH = (uint8) (address>>8);
 6f6:	9f bb       	out	0x1f, r25	; 31
	/*load data to (EEDR)*/
	EEDR = data;
 6f8:	6d bb       	out	0x1d, r22	; 29
	/*write logic '1' to (EEMWE) bit in (EECR)*/
	SET_BIT(EECR,EEMWE);
 6fa:	e2 9a       	sbi	0x1c, 2	; 28
	/*start EEPROM write operation, by setting the (EEWE) bit in (EECR)*/
	SET_BIT(EECR,EEWE);
 6fc:	e1 9a       	sbi	0x1c, 1	; 28
	/*wait for 4 clock cycles, until write operation is done*/
	while (READ_BIT(EECR,EEWE))
 6fe:	8c b3       	in	r24, 0x1c	; 28
 700:	81 fd       	sbrc	r24, 1
 702:	fd cf       	rjmp	.-6      	; 0x6fe <EEPROM_write+0x16>
	{
		//wait for 4 clock cycles.
	}
}
 704:	08 95       	ret

00000706 <EEPROM_read>:

uint8 EEPROM_read(uint16 address)
{
	uint8 data = 0;
	/*first make sure that any write operation is finished first*/
	while (READ_BIT(EECR,EEWE))
 706:	2c b3       	in	r18, 0x1c	; 28
 708:	21 fd       	sbrc	r18, 1
 70a:	fd cf       	rjmp	.-6      	; 0x706 <EEPROM_read>
	{
		//do nothing
	}
	/*load address in (EEARL, EEARH)*/
	EEARL = (uint8) address;
 70c:	8e bb       	out	0x1e, r24	; 30
	EEARH = (uint8) (address>>8);
 70e:	9f bb       	out	0x1f, r25	; 31
	/*start EEPROM read operation by setting (EERE) bit in (EECR)*/
	SET_BIT(EECR,EERE);
 710:	e0 9a       	sbi	0x1c, 0	; 28
	/*read data from (EEDR) and return it*/
	data = EEDR;
 712:	8d b3       	in	r24, 0x1d	; 29
	/*return data*/
	return data;
 714:	08 95       	ret

00000716 <LED_init>:
#include "led.h"

void LED_init(char port_name, uint8 pin_number)
{
    GPIO_pin_direction(port_name, pin_number, 1);
 716:	41 e0       	ldi	r20, 0x01	; 1
 718:	0e 94 8d 00 	call	0x11a	; 0x11a <GPIO_pin_direction>
}
 71c:	08 95       	ret

0000071e <LED_turn_on>:


void LED_turn_on(char port_name, uint8 pin_number)
{
    GPIO_pin_write(port_name, pin_number, 1);
 71e:	41 e0       	ldi	r20, 0x01	; 1
 720:	0e 94 1e 01 	call	0x23c	; 0x23c <GPIO_pin_write>
}
 724:	08 95       	ret

00000726 <LED_turn_off>:


void LED_turn_off(char port_name, uint8 pin_number)
{
    GPIO_pin_write(port_name, pin_number, 0);
 726:	40 e0       	ldi	r20, 0x00	; 0
 728:	0e 94 1e 01 	call	0x23c	; 0x23c <GPIO_pin_write>
}
 72c:	08 95       	ret

0000072e <LED_toggle>:


void LED_toggle(char port_name, uint8 pin_number)
{
    GPIO_pin_toggle(port_name, pin_number);
 72e:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <GPIO_pin_toggle>
}
 732:	08 95       	ret

00000734 <LED_status>:


uint8 LED_status(char port_name, uint8 pin_number)
{
    return (GPIO_pin_read(port_name, pin_number));
 734:	0e 94 af 01 	call	0x35e	; 0x35e <GPIO_pin_read>
 738:	08 95       	ret

0000073a <_exit>:
 73a:	f8 94       	cli

0000073c <__stop_program>:
 73c:	ff cf       	rjmp	.-2      	; 0x73c <__stop_program>
