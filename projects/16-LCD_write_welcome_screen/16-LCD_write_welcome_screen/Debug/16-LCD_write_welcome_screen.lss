
16-LCD_write_welcome_screen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000007b6  0000082a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000083c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  00000f90  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000964  00000000  00000000  00001050  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002d5  00000000  00000000  000019b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000566  00000000  00000000  00001c89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  000021f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f0  00000000  00000000  00002370  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006c2  00000000  00000000  00002660  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 eb       	ldi	r30, 0xB6	; 182
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

#include "LCD.h"

int main(void)
{
	LCD_init();
  92:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_init>
	LCD_send_string("Mohamed Yasser");
  96:	80 e6       	ldi	r24, 0x60	; 96
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 a8 03 	call	0x750	; 0x750 <LCD_send_string>
  9e:	ff cf       	rjmp	.-2      	; 0x9e <main+0xc>

000000a0 <GPIO_pin_direction>:
#include "Atmega_GPIO.h"

void GPIO_pin_direction(char PORT, uint8 BIT, uint8 DIR)
{
    switch(PORT)
  a0:	84 34       	cpi	r24, 0x44	; 68
  a2:	09 f4       	brne	.+2      	; 0xa6 <GPIO_pin_direction+0x6>
  a4:	71 c0       	rjmp	.+226    	; 0x188 <GPIO_pin_direction+0xe8>
  a6:	85 34       	cpi	r24, 0x45	; 69
  a8:	48 f4       	brcc	.+18     	; 0xbc <GPIO_pin_direction+0x1c>
  aa:	82 34       	cpi	r24, 0x42	; 66
  ac:	99 f1       	breq	.+102    	; 0x114 <GPIO_pin_direction+0x74>
  ae:	83 34       	cpi	r24, 0x43	; 67
  b0:	08 f0       	brcs	.+2      	; 0xb4 <GPIO_pin_direction+0x14>
  b2:	4d c0       	rjmp	.+154    	; 0x14e <GPIO_pin_direction+0xae>
  b4:	81 34       	cpi	r24, 0x41	; 65
  b6:	09 f0       	breq	.+2      	; 0xba <GPIO_pin_direction+0x1a>
  b8:	83 c0       	rjmp	.+262    	; 0x1c0 <GPIO_pin_direction+0x120>
  ba:	0f c0       	rjmp	.+30     	; 0xda <GPIO_pin_direction+0x3a>
  bc:	82 36       	cpi	r24, 0x62	; 98
  be:	51 f1       	breq	.+84     	; 0x114 <GPIO_pin_direction+0x74>
  c0:	83 36       	cpi	r24, 0x63	; 99
  c2:	20 f4       	brcc	.+8      	; 0xcc <GPIO_pin_direction+0x2c>
  c4:	81 36       	cpi	r24, 0x61	; 97
  c6:	09 f0       	breq	.+2      	; 0xca <GPIO_pin_direction+0x2a>
  c8:	7b c0       	rjmp	.+246    	; 0x1c0 <GPIO_pin_direction+0x120>
  ca:	07 c0       	rjmp	.+14     	; 0xda <GPIO_pin_direction+0x3a>
  cc:	83 36       	cpi	r24, 0x63	; 99
  ce:	09 f4       	brne	.+2      	; 0xd2 <GPIO_pin_direction+0x32>
  d0:	3e c0       	rjmp	.+124    	; 0x14e <GPIO_pin_direction+0xae>
  d2:	84 36       	cpi	r24, 0x64	; 100
  d4:	09 f0       	breq	.+2      	; 0xd8 <GPIO_pin_direction+0x38>
  d6:	74 c0       	rjmp	.+232    	; 0x1c0 <GPIO_pin_direction+0x120>
  d8:	57 c0       	rjmp	.+174    	; 0x188 <GPIO_pin_direction+0xe8>
    {
        case 'A':
        case 'a':
            if(1 == DIR)
  da:	41 30       	cpi	r20, 0x01	; 1
  dc:	69 f4       	brne	.+26     	; 0xf8 <GPIO_pin_direction+0x58>
            {
                SET_BIT(DDRA, BIT); //set direction of this pin in port A as output
  de:	2a b3       	in	r18, 0x1a	; 26
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	ac 01       	movw	r20, r24
  e6:	02 c0       	rjmp	.+4      	; 0xec <GPIO_pin_direction+0x4c>
  e8:	44 0f       	add	r20, r20
  ea:	55 1f       	adc	r21, r21
  ec:	6a 95       	dec	r22
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <GPIO_pin_direction+0x48>
  f0:	ba 01       	movw	r22, r20
  f2:	62 2b       	or	r22, r18
  f4:	6a bb       	out	0x1a, r22	; 26
  f6:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRA, BIT); //set direction of this pin in port A as input
  f8:	2a b3       	in	r18, 0x1a	; 26
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	ac 01       	movw	r20, r24
 100:	02 c0       	rjmp	.+4      	; 0x106 <GPIO_pin_direction+0x66>
 102:	44 0f       	add	r20, r20
 104:	55 1f       	adc	r21, r21
 106:	6a 95       	dec	r22
 108:	e2 f7       	brpl	.-8      	; 0x102 <GPIO_pin_direction+0x62>
 10a:	ba 01       	movw	r22, r20
 10c:	60 95       	com	r22
 10e:	62 23       	and	r22, r18
 110:	6a bb       	out	0x1a, r22	; 26
 112:	08 95       	ret
            }
        break;
        case 'B':
        case 'b':
            if(1 == DIR)
 114:	41 30       	cpi	r20, 0x01	; 1
 116:	69 f4       	brne	.+26     	; 0x132 <GPIO_pin_direction+0x92>
            {
                SET_BIT(DDRB, BIT); //set direction of this pin in port B as output
 118:	27 b3       	in	r18, 0x17	; 23
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	ac 01       	movw	r20, r24
 120:	02 c0       	rjmp	.+4      	; 0x126 <GPIO_pin_direction+0x86>
 122:	44 0f       	add	r20, r20
 124:	55 1f       	adc	r21, r21
 126:	6a 95       	dec	r22
 128:	e2 f7       	brpl	.-8      	; 0x122 <GPIO_pin_direction+0x82>
 12a:	ba 01       	movw	r22, r20
 12c:	62 2b       	or	r22, r18
 12e:	67 bb       	out	0x17, r22	; 23
 130:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRB, BIT); //set direction of this pin in port B as input
 132:	27 b3       	in	r18, 0x17	; 23
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	ac 01       	movw	r20, r24
 13a:	02 c0       	rjmp	.+4      	; 0x140 <GPIO_pin_direction+0xa0>
 13c:	44 0f       	add	r20, r20
 13e:	55 1f       	adc	r21, r21
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <GPIO_pin_direction+0x9c>
 144:	ba 01       	movw	r22, r20
 146:	60 95       	com	r22
 148:	62 23       	and	r22, r18
 14a:	67 bb       	out	0x17, r22	; 23
 14c:	08 95       	ret
            }
        break;
        case 'C':
        case 'c':
            if(1 == DIR)
 14e:	41 30       	cpi	r20, 0x01	; 1
 150:	69 f4       	brne	.+26     	; 0x16c <GPIO_pin_direction+0xcc>
            {
                SET_BIT(DDRC, BIT); //set direction of this pin in port B as output
 152:	24 b3       	in	r18, 0x14	; 20
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	ac 01       	movw	r20, r24
 15a:	02 c0       	rjmp	.+4      	; 0x160 <GPIO_pin_direction+0xc0>
 15c:	44 0f       	add	r20, r20
 15e:	55 1f       	adc	r21, r21
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <GPIO_pin_direction+0xbc>
 164:	ba 01       	movw	r22, r20
 166:	62 2b       	or	r22, r18
 168:	64 bb       	out	0x14, r22	; 20
 16a:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRC, BIT); //set direction of this pin in port B as input
 16c:	24 b3       	in	r18, 0x14	; 20
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	ac 01       	movw	r20, r24
 174:	02 c0       	rjmp	.+4      	; 0x17a <GPIO_pin_direction+0xda>
 176:	44 0f       	add	r20, r20
 178:	55 1f       	adc	r21, r21
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <GPIO_pin_direction+0xd6>
 17e:	ba 01       	movw	r22, r20
 180:	60 95       	com	r22
 182:	62 23       	and	r22, r18
 184:	64 bb       	out	0x14, r22	; 20
 186:	08 95       	ret
            }
        break;
        case 'D':
        case 'd':
            if(1 == DIR)
 188:	41 30       	cpi	r20, 0x01	; 1
 18a:	69 f4       	brne	.+26     	; 0x1a6 <GPIO_pin_direction+0x106>
            {
                SET_BIT(DDRD, BIT); //set direction of this pin in port C as output
 18c:	21 b3       	in	r18, 0x11	; 17
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	ac 01       	movw	r20, r24
 194:	02 c0       	rjmp	.+4      	; 0x19a <GPIO_pin_direction+0xfa>
 196:	44 0f       	add	r20, r20
 198:	55 1f       	adc	r21, r21
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <GPIO_pin_direction+0xf6>
 19e:	ba 01       	movw	r22, r20
 1a0:	62 2b       	or	r22, r18
 1a2:	61 bb       	out	0x11, r22	; 17
 1a4:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRD, BIT); //set direction of this pin in port C as input
 1a6:	21 b3       	in	r18, 0x11	; 17
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	ac 01       	movw	r20, r24
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <GPIO_pin_direction+0x114>
 1b0:	44 0f       	add	r20, r20
 1b2:	55 1f       	adc	r21, r21
 1b4:	6a 95       	dec	r22
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <GPIO_pin_direction+0x110>
 1b8:	ba 01       	movw	r22, r20
 1ba:	60 95       	com	r22
 1bc:	62 23       	and	r22, r18
 1be:	61 bb       	out	0x11, r22	; 17
 1c0:	08 95       	ret

000001c2 <GPIO_pin_write>:
} //end of  GPIO_pin_direction();


void GPIO_pin_write(char PORT, uint8 BIT, uint8 DATA)
{
    switch(PORT)
 1c2:	84 34       	cpi	r24, 0x44	; 68
 1c4:	09 f4       	brne	.+2      	; 0x1c8 <GPIO_pin_write+0x6>
 1c6:	71 c0       	rjmp	.+226    	; 0x2aa <GPIO_pin_write+0xe8>
 1c8:	85 34       	cpi	r24, 0x45	; 69
 1ca:	48 f4       	brcc	.+18     	; 0x1de <GPIO_pin_write+0x1c>
 1cc:	82 34       	cpi	r24, 0x42	; 66
 1ce:	99 f1       	breq	.+102    	; 0x236 <GPIO_pin_write+0x74>
 1d0:	83 34       	cpi	r24, 0x43	; 67
 1d2:	08 f0       	brcs	.+2      	; 0x1d6 <GPIO_pin_write+0x14>
 1d4:	4d c0       	rjmp	.+154    	; 0x270 <GPIO_pin_write+0xae>
 1d6:	81 34       	cpi	r24, 0x41	; 65
 1d8:	09 f0       	breq	.+2      	; 0x1dc <GPIO_pin_write+0x1a>
 1da:	83 c0       	rjmp	.+262    	; 0x2e2 <GPIO_pin_write+0x120>
 1dc:	0f c0       	rjmp	.+30     	; 0x1fc <GPIO_pin_write+0x3a>
 1de:	82 36       	cpi	r24, 0x62	; 98
 1e0:	51 f1       	breq	.+84     	; 0x236 <GPIO_pin_write+0x74>
 1e2:	83 36       	cpi	r24, 0x63	; 99
 1e4:	20 f4       	brcc	.+8      	; 0x1ee <GPIO_pin_write+0x2c>
 1e6:	81 36       	cpi	r24, 0x61	; 97
 1e8:	09 f0       	breq	.+2      	; 0x1ec <GPIO_pin_write+0x2a>
 1ea:	7b c0       	rjmp	.+246    	; 0x2e2 <GPIO_pin_write+0x120>
 1ec:	07 c0       	rjmp	.+14     	; 0x1fc <GPIO_pin_write+0x3a>
 1ee:	83 36       	cpi	r24, 0x63	; 99
 1f0:	09 f4       	brne	.+2      	; 0x1f4 <GPIO_pin_write+0x32>
 1f2:	3e c0       	rjmp	.+124    	; 0x270 <GPIO_pin_write+0xae>
 1f4:	84 36       	cpi	r24, 0x64	; 100
 1f6:	09 f0       	breq	.+2      	; 0x1fa <GPIO_pin_write+0x38>
 1f8:	74 c0       	rjmp	.+232    	; 0x2e2 <GPIO_pin_write+0x120>
 1fa:	57 c0       	rjmp	.+174    	; 0x2aa <GPIO_pin_write+0xe8>
    {
        case 'A':
        case 'a':
            if(1 == DATA)
 1fc:	41 30       	cpi	r20, 0x01	; 1
 1fe:	69 f4       	brne	.+26     	; 0x21a <GPIO_pin_write+0x58>
            {
                SET_BIT(PORTA, BIT); //set output value of this pin in port A to 1
 200:	2b b3       	in	r18, 0x1b	; 27
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	ac 01       	movw	r20, r24
 208:	02 c0       	rjmp	.+4      	; 0x20e <GPIO_pin_write+0x4c>
 20a:	44 0f       	add	r20, r20
 20c:	55 1f       	adc	r21, r21
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <GPIO_pin_write+0x48>
 212:	ba 01       	movw	r22, r20
 214:	62 2b       	or	r22, r18
 216:	6b bb       	out	0x1b, r22	; 27
 218:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTA, BIT); //set output value of this pin in port A to 0
 21a:	2b b3       	in	r18, 0x1b	; 27
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	ac 01       	movw	r20, r24
 222:	02 c0       	rjmp	.+4      	; 0x228 <GPIO_pin_write+0x66>
 224:	44 0f       	add	r20, r20
 226:	55 1f       	adc	r21, r21
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <GPIO_pin_write+0x62>
 22c:	ba 01       	movw	r22, r20
 22e:	60 95       	com	r22
 230:	62 23       	and	r22, r18
 232:	6b bb       	out	0x1b, r22	; 27
 234:	08 95       	ret
            }
        break;
        case 'B':
        case 'b':
            if(1 == DATA)
 236:	41 30       	cpi	r20, 0x01	; 1
 238:	69 f4       	brne	.+26     	; 0x254 <GPIO_pin_write+0x92>
            {
                SET_BIT(PORTB, BIT); //set output value of this pin in port B to 1
 23a:	28 b3       	in	r18, 0x18	; 24
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	ac 01       	movw	r20, r24
 242:	02 c0       	rjmp	.+4      	; 0x248 <GPIO_pin_write+0x86>
 244:	44 0f       	add	r20, r20
 246:	55 1f       	adc	r21, r21
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <GPIO_pin_write+0x82>
 24c:	ba 01       	movw	r22, r20
 24e:	62 2b       	or	r22, r18
 250:	68 bb       	out	0x18, r22	; 24
 252:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTB, BIT); //set output value of this pin in port B to 0
 254:	28 b3       	in	r18, 0x18	; 24
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	ac 01       	movw	r20, r24
 25c:	02 c0       	rjmp	.+4      	; 0x262 <GPIO_pin_write+0xa0>
 25e:	44 0f       	add	r20, r20
 260:	55 1f       	adc	r21, r21
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <GPIO_pin_write+0x9c>
 266:	ba 01       	movw	r22, r20
 268:	60 95       	com	r22
 26a:	62 23       	and	r22, r18
 26c:	68 bb       	out	0x18, r22	; 24
 26e:	08 95       	ret
            }
        break;
        case 'C':
        case 'c':
            if(1 == DATA)
 270:	41 30       	cpi	r20, 0x01	; 1
 272:	69 f4       	brne	.+26     	; 0x28e <GPIO_pin_write+0xcc>
            {
                SET_BIT(PORTC, BIT); //set output value of this pin in port C to 1
 274:	25 b3       	in	r18, 0x15	; 21
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	ac 01       	movw	r20, r24
 27c:	02 c0       	rjmp	.+4      	; 0x282 <GPIO_pin_write+0xc0>
 27e:	44 0f       	add	r20, r20
 280:	55 1f       	adc	r21, r21
 282:	6a 95       	dec	r22
 284:	e2 f7       	brpl	.-8      	; 0x27e <GPIO_pin_write+0xbc>
 286:	ba 01       	movw	r22, r20
 288:	62 2b       	or	r22, r18
 28a:	65 bb       	out	0x15, r22	; 21
 28c:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTC, BIT); //set output value of this pin in port C to 0
 28e:	25 b3       	in	r18, 0x15	; 21
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	ac 01       	movw	r20, r24
 296:	02 c0       	rjmp	.+4      	; 0x29c <GPIO_pin_write+0xda>
 298:	44 0f       	add	r20, r20
 29a:	55 1f       	adc	r21, r21
 29c:	6a 95       	dec	r22
 29e:	e2 f7       	brpl	.-8      	; 0x298 <GPIO_pin_write+0xd6>
 2a0:	ba 01       	movw	r22, r20
 2a2:	60 95       	com	r22
 2a4:	62 23       	and	r22, r18
 2a6:	65 bb       	out	0x15, r22	; 21
 2a8:	08 95       	ret
            }
        break;
        case 'D':
        case 'd':
            if(1 == DATA)
 2aa:	41 30       	cpi	r20, 0x01	; 1
 2ac:	69 f4       	brne	.+26     	; 0x2c8 <GPIO_pin_write+0x106>
            {
                SET_BIT(PORTD, BIT); //set output value of this pin in port C to 1
 2ae:	22 b3       	in	r18, 0x12	; 18
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	ac 01       	movw	r20, r24
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <GPIO_pin_write+0xfa>
 2b8:	44 0f       	add	r20, r20
 2ba:	55 1f       	adc	r21, r21
 2bc:	6a 95       	dec	r22
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <GPIO_pin_write+0xf6>
 2c0:	ba 01       	movw	r22, r20
 2c2:	62 2b       	or	r22, r18
 2c4:	62 bb       	out	0x12, r22	; 18
 2c6:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTD, BIT); //set output value of this pin in port C to 0
 2c8:	22 b3       	in	r18, 0x12	; 18
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	ac 01       	movw	r20, r24
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <GPIO_pin_write+0x114>
 2d2:	44 0f       	add	r20, r20
 2d4:	55 1f       	adc	r21, r21
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <GPIO_pin_write+0x110>
 2da:	ba 01       	movw	r22, r20
 2dc:	60 95       	com	r22
 2de:	62 23       	and	r22, r18
 2e0:	62 bb       	out	0x12, r22	; 18
 2e2:	08 95       	ret

000002e4 <GPIO_pin_read>:


uint8 GPIO_pin_read(char PORT, uint8 BIT)
{
    uint8 read_value = 0;
    switch(PORT)
 2e4:	84 34       	cpi	r24, 0x44	; 68
 2e6:	99 f1       	breq	.+102    	; 0x34e <GPIO_pin_read+0x6a>
 2e8:	85 34       	cpi	r24, 0x45	; 69
 2ea:	38 f4       	brcc	.+14     	; 0x2fa <GPIO_pin_read+0x16>
 2ec:	82 34       	cpi	r24, 0x42	; 66
 2ee:	d9 f0       	breq	.+54     	; 0x326 <GPIO_pin_read+0x42>
 2f0:	83 34       	cpi	r24, 0x43	; 67
 2f2:	18 f5       	brcc	.+70     	; 0x33a <GPIO_pin_read+0x56>
 2f4:	81 34       	cpi	r24, 0x41	; 65
 2f6:	a9 f5       	brne	.+106    	; 0x362 <GPIO_pin_read+0x7e>
 2f8:	0c c0       	rjmp	.+24     	; 0x312 <GPIO_pin_read+0x2e>
 2fa:	82 36       	cpi	r24, 0x62	; 98
 2fc:	a1 f0       	breq	.+40     	; 0x326 <GPIO_pin_read+0x42>
 2fe:	83 36       	cpi	r24, 0x63	; 99
 300:	18 f4       	brcc	.+6      	; 0x308 <GPIO_pin_read+0x24>
 302:	81 36       	cpi	r24, 0x61	; 97
 304:	71 f5       	brne	.+92     	; 0x362 <GPIO_pin_read+0x7e>
 306:	05 c0       	rjmp	.+10     	; 0x312 <GPIO_pin_read+0x2e>
 308:	83 36       	cpi	r24, 0x63	; 99
 30a:	b9 f0       	breq	.+46     	; 0x33a <GPIO_pin_read+0x56>
 30c:	84 36       	cpi	r24, 0x64	; 100
 30e:	49 f5       	brne	.+82     	; 0x362 <GPIO_pin_read+0x7e>
 310:	1e c0       	rjmp	.+60     	; 0x34e <GPIO_pin_read+0x6a>
    {
        case 'A':
        case 'a':
            read_value = READ_BIT(PINA, BIT); //read value of given pin in port A
 312:	29 b3       	in	r18, 0x19	; 25
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	c9 01       	movw	r24, r18
 318:	02 c0       	rjmp	.+4      	; 0x31e <GPIO_pin_read+0x3a>
 31a:	95 95       	asr	r25
 31c:	87 95       	ror	r24
 31e:	6a 95       	dec	r22
 320:	e2 f7       	brpl	.-8      	; 0x31a <GPIO_pin_read+0x36>
 322:	81 70       	andi	r24, 0x01	; 1
        break;
 324:	08 95       	ret
        case 'B':
        case 'b':
            read_value = READ_BIT(PINB, BIT); //read value of given pin in port B
 326:	26 b3       	in	r18, 0x16	; 22
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	c9 01       	movw	r24, r18
 32c:	02 c0       	rjmp	.+4      	; 0x332 <GPIO_pin_read+0x4e>
 32e:	95 95       	asr	r25
 330:	87 95       	ror	r24
 332:	6a 95       	dec	r22
 334:	e2 f7       	brpl	.-8      	; 0x32e <GPIO_pin_read+0x4a>
 336:	81 70       	andi	r24, 0x01	; 1
        break;
 338:	08 95       	ret
        case 'C':
        case 'c':
            read_value = READ_BIT(PINC, BIT); //read value of given pin in port C
 33a:	23 b3       	in	r18, 0x13	; 19
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	c9 01       	movw	r24, r18
 340:	02 c0       	rjmp	.+4      	; 0x346 <GPIO_pin_read+0x62>
 342:	95 95       	asr	r25
 344:	87 95       	ror	r24
 346:	6a 95       	dec	r22
 348:	e2 f7       	brpl	.-8      	; 0x342 <GPIO_pin_read+0x5e>
 34a:	81 70       	andi	r24, 0x01	; 1
        break;
 34c:	08 95       	ret
        case 'D':
        case 'd':
            read_value = READ_BIT(PIND, BIT); //read value of given pin in port D
 34e:	20 b3       	in	r18, 0x10	; 16
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	c9 01       	movw	r24, r18
 354:	02 c0       	rjmp	.+4      	; 0x35a <GPIO_pin_read+0x76>
 356:	95 95       	asr	r25
 358:	87 95       	ror	r24
 35a:	6a 95       	dec	r22
 35c:	e2 f7       	brpl	.-8      	; 0x356 <GPIO_pin_read+0x72>
 35e:	81 70       	andi	r24, 0x01	; 1
        break;
 360:	08 95       	ret
} // end of GPIO_pin_write();


uint8 GPIO_pin_read(char PORT, uint8 BIT)
{
    uint8 read_value = 0;
 362:	80 e0       	ldi	r24, 0x00	; 0
        break;
        default:
        break;
    } //end of switch(PORT);
    return read_value;
} // end of GPIO_pin_read();
 364:	08 95       	ret

00000366 <GPIO_pin_toggle>:


void GPIO_pin_toggle(char PORT, uint8 BIT)
{
    switch(PORT)
 366:	84 34       	cpi	r24, 0x44	; 68
 368:	09 f4       	brne	.+2      	; 0x36c <GPIO_pin_toggle+0x6>
 36a:	3d c0       	rjmp	.+122    	; 0x3e6 <GPIO_pin_toggle+0x80>
 36c:	85 34       	cpi	r24, 0x45	; 69
 36e:	40 f4       	brcc	.+16     	; 0x380 <GPIO_pin_toggle+0x1a>
 370:	82 34       	cpi	r24, 0x42	; 66
 372:	f9 f0       	breq	.+62     	; 0x3b2 <GPIO_pin_toggle+0x4c>
 374:	83 34       	cpi	r24, 0x43	; 67
 376:	50 f5       	brcc	.+84     	; 0x3cc <GPIO_pin_toggle+0x66>
 378:	81 34       	cpi	r24, 0x41	; 65
 37a:	09 f0       	breq	.+2      	; 0x37e <GPIO_pin_toggle+0x18>
 37c:	40 c0       	rjmp	.+128    	; 0x3fe <GPIO_pin_toggle+0x98>
 37e:	0c c0       	rjmp	.+24     	; 0x398 <GPIO_pin_toggle+0x32>
 380:	82 36       	cpi	r24, 0x62	; 98
 382:	b9 f0       	breq	.+46     	; 0x3b2 <GPIO_pin_toggle+0x4c>
 384:	83 36       	cpi	r24, 0x63	; 99
 386:	18 f4       	brcc	.+6      	; 0x38e <GPIO_pin_toggle+0x28>
 388:	81 36       	cpi	r24, 0x61	; 97
 38a:	c9 f5       	brne	.+114    	; 0x3fe <GPIO_pin_toggle+0x98>
 38c:	05 c0       	rjmp	.+10     	; 0x398 <GPIO_pin_toggle+0x32>
 38e:	83 36       	cpi	r24, 0x63	; 99
 390:	e9 f0       	breq	.+58     	; 0x3cc <GPIO_pin_toggle+0x66>
 392:	84 36       	cpi	r24, 0x64	; 100
 394:	a1 f5       	brne	.+104    	; 0x3fe <GPIO_pin_toggle+0x98>
 396:	27 c0       	rjmp	.+78     	; 0x3e6 <GPIO_pin_toggle+0x80>
    {
        case 'A':
        case 'a':
            TOG_BIT(PORTA, BIT); //toggle value of given pin in port A
 398:	2b b3       	in	r18, 0x1b	; 27
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	ac 01       	movw	r20, r24
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <GPIO_pin_toggle+0x40>
 3a2:	44 0f       	add	r20, r20
 3a4:	55 1f       	adc	r21, r21
 3a6:	6a 95       	dec	r22
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <GPIO_pin_toggle+0x3c>
 3aa:	ba 01       	movw	r22, r20
 3ac:	62 27       	eor	r22, r18
 3ae:	6b bb       	out	0x1b, r22	; 27
        break;
 3b0:	08 95       	ret
        case 'B':
        case 'b':
            TOG_BIT(PORTB, BIT); //toggle value of given pin in port B
 3b2:	28 b3       	in	r18, 0x18	; 24
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	ac 01       	movw	r20, r24
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <GPIO_pin_toggle+0x5a>
 3bc:	44 0f       	add	r20, r20
 3be:	55 1f       	adc	r21, r21
 3c0:	6a 95       	dec	r22
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <GPIO_pin_toggle+0x56>
 3c4:	ba 01       	movw	r22, r20
 3c6:	62 27       	eor	r22, r18
 3c8:	68 bb       	out	0x18, r22	; 24
        break;
 3ca:	08 95       	ret
        case 'C':
        case 'c':
            TOG_BIT(PORTC, BIT); //toggle value of given pin in port C
 3cc:	25 b3       	in	r18, 0x15	; 21
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	ac 01       	movw	r20, r24
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <GPIO_pin_toggle+0x74>
 3d6:	44 0f       	add	r20, r20
 3d8:	55 1f       	adc	r21, r21
 3da:	6a 95       	dec	r22
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <GPIO_pin_toggle+0x70>
 3de:	ba 01       	movw	r22, r20
 3e0:	62 27       	eor	r22, r18
 3e2:	65 bb       	out	0x15, r22	; 21
        break;
 3e4:	08 95       	ret
        case 'D':
        case 'd':
            TOG_BIT(PORTD, BIT); //toggle value of given pin in port D
 3e6:	22 b3       	in	r18, 0x12	; 18
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	ac 01       	movw	r20, r24
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <GPIO_pin_toggle+0x8e>
 3f0:	44 0f       	add	r20, r20
 3f2:	55 1f       	adc	r21, r21
 3f4:	6a 95       	dec	r22
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <GPIO_pin_toggle+0x8a>
 3f8:	ba 01       	movw	r22, r20
 3fa:	62 27       	eor	r22, r18
 3fc:	62 bb       	out	0x12, r22	; 18
 3fe:	08 95       	ret

00000400 <GPIO_port_direction>:
} // end of GPIO_pin_toggle();


void GPIO_port_direction(char PORT, uint8 DIR)
{
    switch(PORT)
 400:	84 34       	cpi	r24, 0x44	; 68
 402:	d9 f0       	breq	.+54     	; 0x43a <GPIO_port_direction+0x3a>
 404:	85 34       	cpi	r24, 0x45	; 69
 406:	38 f4       	brcc	.+14     	; 0x416 <GPIO_port_direction+0x16>
 408:	82 34       	cpi	r24, 0x42	; 66
 40a:	99 f0       	breq	.+38     	; 0x432 <GPIO_port_direction+0x32>
 40c:	83 34       	cpi	r24, 0x43	; 67
 40e:	98 f4       	brcc	.+38     	; 0x436 <GPIO_port_direction+0x36>
 410:	81 34       	cpi	r24, 0x41	; 65
 412:	a1 f4       	brne	.+40     	; 0x43c <GPIO_port_direction+0x3c>
 414:	0c c0       	rjmp	.+24     	; 0x42e <GPIO_port_direction+0x2e>
 416:	82 36       	cpi	r24, 0x62	; 98
 418:	61 f0       	breq	.+24     	; 0x432 <GPIO_port_direction+0x32>
 41a:	83 36       	cpi	r24, 0x63	; 99
 41c:	18 f4       	brcc	.+6      	; 0x424 <GPIO_port_direction+0x24>
 41e:	81 36       	cpi	r24, 0x61	; 97
 420:	69 f4       	brne	.+26     	; 0x43c <GPIO_port_direction+0x3c>
 422:	05 c0       	rjmp	.+10     	; 0x42e <GPIO_port_direction+0x2e>
 424:	83 36       	cpi	r24, 0x63	; 99
 426:	39 f0       	breq	.+14     	; 0x436 <GPIO_port_direction+0x36>
 428:	84 36       	cpi	r24, 0x64	; 100
 42a:	41 f4       	brne	.+16     	; 0x43c <GPIO_port_direction+0x3c>
 42c:	06 c0       	rjmp	.+12     	; 0x43a <GPIO_port_direction+0x3a>
    {
        case 'A':
        case 'a':
            DDRA = DIR; // set direction of port A to the given DIR
 42e:	6a bb       	out	0x1a, r22	; 26
        break;
 430:	08 95       	ret
        case 'B':
        case 'b':
            DDRB = DIR; // set direction of port B to the given DIR
 432:	67 bb       	out	0x17, r22	; 23
        break;
 434:	08 95       	ret
        case 'C':
        case 'c':
            DDRC = DIR; // set direction of port C to the given DIR
 436:	64 bb       	out	0x14, r22	; 20
        break;
 438:	08 95       	ret
        case 'D':
        case 'd':
            DDRD = DIR; // set direction of port D to the given DIR
 43a:	61 bb       	out	0x11, r22	; 17
 43c:	08 95       	ret

0000043e <GPIO_port_write>:
} // end of GPIO_port_direction();


void GPIO_port_write(char PORT, uint8 DATA)
{
    switch(PORT)
 43e:	84 34       	cpi	r24, 0x44	; 68
 440:	d9 f0       	breq	.+54     	; 0x478 <GPIO_port_write+0x3a>
 442:	85 34       	cpi	r24, 0x45	; 69
 444:	38 f4       	brcc	.+14     	; 0x454 <GPIO_port_write+0x16>
 446:	82 34       	cpi	r24, 0x42	; 66
 448:	99 f0       	breq	.+38     	; 0x470 <GPIO_port_write+0x32>
 44a:	83 34       	cpi	r24, 0x43	; 67
 44c:	98 f4       	brcc	.+38     	; 0x474 <GPIO_port_write+0x36>
 44e:	81 34       	cpi	r24, 0x41	; 65
 450:	a1 f4       	brne	.+40     	; 0x47a <GPIO_port_write+0x3c>
 452:	0c c0       	rjmp	.+24     	; 0x46c <GPIO_port_write+0x2e>
 454:	82 36       	cpi	r24, 0x62	; 98
 456:	61 f0       	breq	.+24     	; 0x470 <GPIO_port_write+0x32>
 458:	83 36       	cpi	r24, 0x63	; 99
 45a:	18 f4       	brcc	.+6      	; 0x462 <GPIO_port_write+0x24>
 45c:	81 36       	cpi	r24, 0x61	; 97
 45e:	69 f4       	brne	.+26     	; 0x47a <GPIO_port_write+0x3c>
 460:	05 c0       	rjmp	.+10     	; 0x46c <GPIO_port_write+0x2e>
 462:	83 36       	cpi	r24, 0x63	; 99
 464:	39 f0       	breq	.+14     	; 0x474 <GPIO_port_write+0x36>
 466:	84 36       	cpi	r24, 0x64	; 100
 468:	41 f4       	brne	.+16     	; 0x47a <GPIO_port_write+0x3c>
 46a:	06 c0       	rjmp	.+12     	; 0x478 <GPIO_port_write+0x3a>
    {
        case 'A':
        case 'a':
            PORTA = DATA; // write these data on port A
 46c:	6b bb       	out	0x1b, r22	; 27
        break;
 46e:	08 95       	ret
        case 'B':
        case 'b':
            PORTB = DATA; // write these data on port B
 470:	68 bb       	out	0x18, r22	; 24
        break;
 472:	08 95       	ret
        case 'C':
        case 'c':
            PORTC = DATA; // write these data on port C
 474:	65 bb       	out	0x15, r22	; 21
        break;
 476:	08 95       	ret
        case 'D':
        case 'd':
            PORTD = DATA; // write these data on port D
 478:	62 bb       	out	0x12, r22	; 18
 47a:	08 95       	ret

0000047c <GPIO_port_read>:


uint8 GPIO_port_read(char PORT)
{
    uint8 read_port = 0;
    switch(PORT)
 47c:	84 34       	cpi	r24, 0x44	; 68
 47e:	d9 f0       	breq	.+54     	; 0x4b6 <GPIO_port_read+0x3a>
 480:	85 34       	cpi	r24, 0x45	; 69
 482:	38 f4       	brcc	.+14     	; 0x492 <GPIO_port_read+0x16>
 484:	82 34       	cpi	r24, 0x42	; 66
 486:	99 f0       	breq	.+38     	; 0x4ae <GPIO_port_read+0x32>
 488:	83 34       	cpi	r24, 0x43	; 67
 48a:	98 f4       	brcc	.+38     	; 0x4b2 <GPIO_port_read+0x36>
 48c:	81 34       	cpi	r24, 0x41	; 65
 48e:	a9 f4       	brne	.+42     	; 0x4ba <GPIO_port_read+0x3e>
 490:	0c c0       	rjmp	.+24     	; 0x4aa <GPIO_port_read+0x2e>
 492:	82 36       	cpi	r24, 0x62	; 98
 494:	61 f0       	breq	.+24     	; 0x4ae <GPIO_port_read+0x32>
 496:	83 36       	cpi	r24, 0x63	; 99
 498:	18 f4       	brcc	.+6      	; 0x4a0 <GPIO_port_read+0x24>
 49a:	81 36       	cpi	r24, 0x61	; 97
 49c:	71 f4       	brne	.+28     	; 0x4ba <GPIO_port_read+0x3e>
 49e:	05 c0       	rjmp	.+10     	; 0x4aa <GPIO_port_read+0x2e>
 4a0:	83 36       	cpi	r24, 0x63	; 99
 4a2:	39 f0       	breq	.+14     	; 0x4b2 <GPIO_port_read+0x36>
 4a4:	84 36       	cpi	r24, 0x64	; 100
 4a6:	49 f4       	brne	.+18     	; 0x4ba <GPIO_port_read+0x3e>
 4a8:	06 c0       	rjmp	.+12     	; 0x4b6 <GPIO_port_read+0x3a>
    {
        case 'A':
        case 'a':
            read_port = PINA; // read data from port A
 4aa:	89 b3       	in	r24, 0x19	; 25
        break;
 4ac:	08 95       	ret
        case 'B':
        case 'b':
            read_port = PINB; // read data from port B
 4ae:	86 b3       	in	r24, 0x16	; 22
        break;
 4b0:	08 95       	ret
        case 'C':
        case 'c':
            read_port = PINC; // read data from port C
 4b2:	83 b3       	in	r24, 0x13	; 19
        break;
 4b4:	08 95       	ret
        case 'D':
        case 'd':
            read_port = PIND; // read data from port D
 4b6:	80 b3       	in	r24, 0x10	; 16
        break;
 4b8:	08 95       	ret
} // end of GPIO_port_write();


uint8 GPIO_port_read(char PORT)
{
    uint8 read_port = 0;
 4ba:	80 e0       	ldi	r24, 0x00	; 0
        break;
        default:
        break;
    } // end of switch(PORT);
    return read_port;
} // end of GPIO_port_read();
 4bc:	08 95       	ret

000004be <GPIO_pin_pull_up>:


void GPIO_pin_pull_up(char port_name, uint8 pin_number)
{
    switch(port_name)
 4be:	84 34       	cpi	r24, 0x44	; 68
 4c0:	09 f4       	brne	.+2      	; 0x4c4 <GPIO_pin_pull_up+0x6>
 4c2:	57 c0       	rjmp	.+174    	; 0x572 <GPIO_pin_pull_up+0xb4>
 4c4:	85 34       	cpi	r24, 0x45	; 69
 4c6:	40 f4       	brcc	.+16     	; 0x4d8 <GPIO_pin_pull_up+0x1a>
 4c8:	82 34       	cpi	r24, 0x42	; 66
 4ca:	49 f1       	breq	.+82     	; 0x51e <GPIO_pin_pull_up+0x60>
 4cc:	83 34       	cpi	r24, 0x43	; 67
 4ce:	e0 f5       	brcc	.+120    	; 0x548 <GPIO_pin_pull_up+0x8a>
 4d0:	81 34       	cpi	r24, 0x41	; 65
 4d2:	09 f0       	breq	.+2      	; 0x4d6 <GPIO_pin_pull_up+0x18>
 4d4:	62 c0       	rjmp	.+196    	; 0x59a <GPIO_pin_pull_up+0xdc>
 4d6:	0e c0       	rjmp	.+28     	; 0x4f4 <GPIO_pin_pull_up+0x36>
 4d8:	82 36       	cpi	r24, 0x62	; 98
 4da:	09 f1       	breq	.+66     	; 0x51e <GPIO_pin_pull_up+0x60>
 4dc:	83 36       	cpi	r24, 0x63	; 99
 4de:	20 f4       	brcc	.+8      	; 0x4e8 <GPIO_pin_pull_up+0x2a>
 4e0:	81 36       	cpi	r24, 0x61	; 97
 4e2:	09 f0       	breq	.+2      	; 0x4e6 <GPIO_pin_pull_up+0x28>
 4e4:	5a c0       	rjmp	.+180    	; 0x59a <GPIO_pin_pull_up+0xdc>
 4e6:	06 c0       	rjmp	.+12     	; 0x4f4 <GPIO_pin_pull_up+0x36>
 4e8:	83 36       	cpi	r24, 0x63	; 99
 4ea:	71 f1       	breq	.+92     	; 0x548 <GPIO_pin_pull_up+0x8a>
 4ec:	84 36       	cpi	r24, 0x64	; 100
 4ee:	09 f0       	breq	.+2      	; 0x4f2 <GPIO_pin_pull_up+0x34>
 4f0:	54 c0       	rjmp	.+168    	; 0x59a <GPIO_pin_pull_up+0xdc>
 4f2:	3f c0       	rjmp	.+126    	; 0x572 <GPIO_pin_pull_up+0xb4>
    {
        case 'A':
        case 'a':
            CLR_BIT(DDRA,pin_number); //set pin_number of port_name as input
 4f4:	2a b3       	in	r18, 0x1a	; 26
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	ac 01       	movw	r20, r24
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <GPIO_pin_pull_up+0x44>
 4fe:	44 0f       	add	r20, r20
 500:	55 1f       	adc	r21, r21
 502:	6a 95       	dec	r22
 504:	e2 f7       	brpl	.-8      	; 0x4fe <GPIO_pin_pull_up+0x40>
 506:	ba 01       	movw	r22, r20
 508:	84 2f       	mov	r24, r20
 50a:	80 95       	com	r24
 50c:	82 23       	and	r24, r18
 50e:	8a bb       	out	0x1a, r24	; 26
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 510:	80 b7       	in	r24, 0x30	; 48
 512:	8b 7f       	andi	r24, 0xFB	; 251
 514:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTA,pin_number); //set pin_number of port_name as high value
 516:	8b b3       	in	r24, 0x1b	; 27
 518:	68 2b       	or	r22, r24
 51a:	6b bb       	out	0x1b, r22	; 27
        break;
 51c:	08 95       	ret
        case 'B':
        case 'b':
            CLR_BIT(DDRB,pin_number); //set pin_number of port_name as input
 51e:	27 b3       	in	r18, 0x17	; 23
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	ac 01       	movw	r20, r24
 526:	02 c0       	rjmp	.+4      	; 0x52c <GPIO_pin_pull_up+0x6e>
 528:	44 0f       	add	r20, r20
 52a:	55 1f       	adc	r21, r21
 52c:	6a 95       	dec	r22
 52e:	e2 f7       	brpl	.-8      	; 0x528 <GPIO_pin_pull_up+0x6a>
 530:	ba 01       	movw	r22, r20
 532:	84 2f       	mov	r24, r20
 534:	80 95       	com	r24
 536:	82 23       	and	r24, r18
 538:	87 bb       	out	0x17, r24	; 23
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 53a:	80 b7       	in	r24, 0x30	; 48
 53c:	8b 7f       	andi	r24, 0xFB	; 251
 53e:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTB,pin_number); //set pin_number of port_name as high value
 540:	88 b3       	in	r24, 0x18	; 24
 542:	68 2b       	or	r22, r24
 544:	68 bb       	out	0x18, r22	; 24
        break;
 546:	08 95       	ret
        case 'C':
        case 'c':
            CLR_BIT(DDRC,pin_number); //set pin_number of port_name as input
 548:	24 b3       	in	r18, 0x14	; 20
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	ac 01       	movw	r20, r24
 550:	02 c0       	rjmp	.+4      	; 0x556 <GPIO_pin_pull_up+0x98>
 552:	44 0f       	add	r20, r20
 554:	55 1f       	adc	r21, r21
 556:	6a 95       	dec	r22
 558:	e2 f7       	brpl	.-8      	; 0x552 <GPIO_pin_pull_up+0x94>
 55a:	ba 01       	movw	r22, r20
 55c:	84 2f       	mov	r24, r20
 55e:	80 95       	com	r24
 560:	82 23       	and	r24, r18
 562:	84 bb       	out	0x14, r24	; 20
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 564:	80 b7       	in	r24, 0x30	; 48
 566:	8b 7f       	andi	r24, 0xFB	; 251
 568:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTC,pin_number); //set pin_number of port_name as high value
 56a:	85 b3       	in	r24, 0x15	; 21
 56c:	68 2b       	or	r22, r24
 56e:	65 bb       	out	0x15, r22	; 21
        break;
 570:	08 95       	ret
        case 'D':
        case 'd':
            CLR_BIT(DDRD,pin_number); //set pin_number of port_name as input
 572:	21 b3       	in	r18, 0x11	; 17
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	ac 01       	movw	r20, r24
 57a:	02 c0       	rjmp	.+4      	; 0x580 <GPIO_pin_pull_up+0xc2>
 57c:	44 0f       	add	r20, r20
 57e:	55 1f       	adc	r21, r21
 580:	6a 95       	dec	r22
 582:	e2 f7       	brpl	.-8      	; 0x57c <GPIO_pin_pull_up+0xbe>
 584:	ba 01       	movw	r22, r20
 586:	84 2f       	mov	r24, r20
 588:	80 95       	com	r24
 58a:	82 23       	and	r24, r18
 58c:	81 bb       	out	0x11, r24	; 17
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 58e:	80 b7       	in	r24, 0x30	; 48
 590:	8b 7f       	andi	r24, 0xFB	; 251
 592:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTD,pin_number); //set pin_number of port_name as high value
 594:	82 b3       	in	r24, 0x12	; 18
 596:	68 2b       	or	r22, r24
 598:	62 bb       	out	0x12, r22	; 18
 59a:	08 95       	ret

0000059c <GPIO_port_write_high_nibble>:



void GPIO_port_write_high_nibble(char port_name, uint8 high_nibble)
{
    high_nibble <<= 4; //clear low_nibble bits in number
 59c:	62 95       	swap	r22
 59e:	60 7f       	andi	r22, 0xF0	; 240
    switch(port_name)
 5a0:	84 34       	cpi	r24, 0x44	; 68
 5a2:	51 f1       	breq	.+84     	; 0x5f8 <GPIO_port_write_high_nibble+0x5c>
 5a4:	85 34       	cpi	r24, 0x45	; 69
 5a6:	38 f4       	brcc	.+14     	; 0x5b6 <GPIO_port_write_high_nibble+0x1a>
 5a8:	82 34       	cpi	r24, 0x42	; 66
 5aa:	c1 f0       	breq	.+48     	; 0x5dc <GPIO_port_write_high_nibble+0x40>
 5ac:	83 34       	cpi	r24, 0x43	; 67
 5ae:	e8 f4       	brcc	.+58     	; 0x5ea <GPIO_port_write_high_nibble+0x4e>
 5b0:	81 34       	cpi	r24, 0x41	; 65
 5b2:	41 f5       	brne	.+80     	; 0x604 <GPIO_port_write_high_nibble+0x68>
 5b4:	0c c0       	rjmp	.+24     	; 0x5ce <GPIO_port_write_high_nibble+0x32>
 5b6:	82 36       	cpi	r24, 0x62	; 98
 5b8:	89 f0       	breq	.+34     	; 0x5dc <GPIO_port_write_high_nibble+0x40>
 5ba:	83 36       	cpi	r24, 0x63	; 99
 5bc:	18 f4       	brcc	.+6      	; 0x5c4 <GPIO_port_write_high_nibble+0x28>
 5be:	81 36       	cpi	r24, 0x61	; 97
 5c0:	09 f5       	brne	.+66     	; 0x604 <GPIO_port_write_high_nibble+0x68>
 5c2:	05 c0       	rjmp	.+10     	; 0x5ce <GPIO_port_write_high_nibble+0x32>
 5c4:	83 36       	cpi	r24, 0x63	; 99
 5c6:	89 f0       	breq	.+34     	; 0x5ea <GPIO_port_write_high_nibble+0x4e>
 5c8:	84 36       	cpi	r24, 0x64	; 100
 5ca:	e1 f4       	brne	.+56     	; 0x604 <GPIO_port_write_high_nibble+0x68>
 5cc:	15 c0       	rjmp	.+42     	; 0x5f8 <GPIO_port_write_high_nibble+0x5c>
    {
        case 'A':
        case 'a':
            PORTA &= 0x0f;
 5ce:	8b b3       	in	r24, 0x1b	; 27
 5d0:	8f 70       	andi	r24, 0x0F	; 15
 5d2:	8b bb       	out	0x1b, r24	; 27
            PORTA |= high_nibble;
 5d4:	8b b3       	in	r24, 0x1b	; 27
 5d6:	68 2b       	or	r22, r24
 5d8:	6b bb       	out	0x1b, r22	; 27
        break;
 5da:	08 95       	ret
        case 'B':
        case 'b':
            PORTB &= 0x0f;
 5dc:	88 b3       	in	r24, 0x18	; 24
 5de:	8f 70       	andi	r24, 0x0F	; 15
 5e0:	88 bb       	out	0x18, r24	; 24
            PORTB |= high_nibble;
 5e2:	88 b3       	in	r24, 0x18	; 24
 5e4:	68 2b       	or	r22, r24
 5e6:	68 bb       	out	0x18, r22	; 24
        break;
 5e8:	08 95       	ret
        case 'C':
        case 'c':
            PORTC &= 0x0f;
 5ea:	85 b3       	in	r24, 0x15	; 21
 5ec:	8f 70       	andi	r24, 0x0F	; 15
 5ee:	85 bb       	out	0x15, r24	; 21
            PORTC |= high_nibble;
 5f0:	85 b3       	in	r24, 0x15	; 21
 5f2:	68 2b       	or	r22, r24
 5f4:	65 bb       	out	0x15, r22	; 21
        break;
 5f6:	08 95       	ret
        case 'D':
        case 'd':
            PORTD &= 0x0f;
 5f8:	82 b3       	in	r24, 0x12	; 18
 5fa:	8f 70       	andi	r24, 0x0F	; 15
 5fc:	82 bb       	out	0x12, r24	; 18
            PORTD |= high_nibble;
 5fe:	82 b3       	in	r24, 0x12	; 18
 600:	68 2b       	or	r22, r24
 602:	62 bb       	out	0x12, r22	; 18
 604:	08 95       	ret

00000606 <GPIO_port_write_low_nibble>:
    } // end of switch(port_name);
}

void GPIO_port_write_low_nibble(char port_name, uint8 low_nibble)
{
    low_nibble &= 0x0f; //clear high_nibble bits in number
 606:	6f 70       	andi	r22, 0x0F	; 15
    switch(port_name)
 608:	84 34       	cpi	r24, 0x44	; 68
 60a:	51 f1       	breq	.+84     	; 0x660 <GPIO_port_write_low_nibble+0x5a>
 60c:	85 34       	cpi	r24, 0x45	; 69
 60e:	38 f4       	brcc	.+14     	; 0x61e <GPIO_port_write_low_nibble+0x18>
 610:	82 34       	cpi	r24, 0x42	; 66
 612:	c1 f0       	breq	.+48     	; 0x644 <GPIO_port_write_low_nibble+0x3e>
 614:	83 34       	cpi	r24, 0x43	; 67
 616:	e8 f4       	brcc	.+58     	; 0x652 <GPIO_port_write_low_nibble+0x4c>
 618:	81 34       	cpi	r24, 0x41	; 65
 61a:	41 f5       	brne	.+80     	; 0x66c <GPIO_port_write_low_nibble+0x66>
 61c:	0c c0       	rjmp	.+24     	; 0x636 <GPIO_port_write_low_nibble+0x30>
 61e:	82 36       	cpi	r24, 0x62	; 98
 620:	89 f0       	breq	.+34     	; 0x644 <GPIO_port_write_low_nibble+0x3e>
 622:	83 36       	cpi	r24, 0x63	; 99
 624:	18 f4       	brcc	.+6      	; 0x62c <GPIO_port_write_low_nibble+0x26>
 626:	81 36       	cpi	r24, 0x61	; 97
 628:	09 f5       	brne	.+66     	; 0x66c <GPIO_port_write_low_nibble+0x66>
 62a:	05 c0       	rjmp	.+10     	; 0x636 <GPIO_port_write_low_nibble+0x30>
 62c:	83 36       	cpi	r24, 0x63	; 99
 62e:	89 f0       	breq	.+34     	; 0x652 <GPIO_port_write_low_nibble+0x4c>
 630:	84 36       	cpi	r24, 0x64	; 100
 632:	e1 f4       	brne	.+56     	; 0x66c <GPIO_port_write_low_nibble+0x66>
 634:	15 c0       	rjmp	.+42     	; 0x660 <GPIO_port_write_low_nibble+0x5a>
    {
        case 'A':
        case 'a':
            PORTA &= 0xf0;
 636:	8b b3       	in	r24, 0x1b	; 27
 638:	80 7f       	andi	r24, 0xF0	; 240
 63a:	8b bb       	out	0x1b, r24	; 27
            PORTA |= low_nibble;
 63c:	8b b3       	in	r24, 0x1b	; 27
 63e:	68 2b       	or	r22, r24
 640:	6b bb       	out	0x1b, r22	; 27
        break;
 642:	08 95       	ret
        case 'B':
        case 'b':
            PORTB &= 0xf0;
 644:	88 b3       	in	r24, 0x18	; 24
 646:	80 7f       	andi	r24, 0xF0	; 240
 648:	88 bb       	out	0x18, r24	; 24
            PORTB |= low_nibble;
 64a:	88 b3       	in	r24, 0x18	; 24
 64c:	68 2b       	or	r22, r24
 64e:	68 bb       	out	0x18, r22	; 24
        break;
 650:	08 95       	ret
        case 'C':
        case 'c':
            PORTC &= 0xf0;
 652:	85 b3       	in	r24, 0x15	; 21
 654:	80 7f       	andi	r24, 0xF0	; 240
 656:	85 bb       	out	0x15, r24	; 21
            PORTC |= low_nibble;
 658:	85 b3       	in	r24, 0x15	; 21
 65a:	68 2b       	or	r22, r24
 65c:	65 bb       	out	0x15, r22	; 21
        break;
 65e:	08 95       	ret
        case 'D':
        case 'd':
            PORTD &= 0xf0;
 660:	82 b3       	in	r24, 0x12	; 18
 662:	80 7f       	andi	r24, 0xF0	; 240
 664:	82 bb       	out	0x12, r24	; 18
            PORTD |= low_nibble;
 666:	82 b3       	in	r24, 0x12	; 18
 668:	68 2b       	or	r22, r24
 66a:	62 bb       	out	0x12, r22	; 18
 66c:	08 95       	ret

0000066e <LCD_send_pulse>:

#include "LCD.h"

static void LCD_send_pulse(void)
{
	GPIO_pin_write(EN_PORT,EN,1);
 66e:	82 e4       	ldi	r24, 0x42	; 66
 670:	60 e0       	ldi	r22, 0x00	; 0
 672:	41 e0       	ldi	r20, 0x01	; 1
 674:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <GPIO_pin_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 678:	8f e9       	ldi	r24, 0x9F	; 159
 67a:	9f e0       	ldi	r25, 0x0F	; 15
 67c:	01 97       	sbiw	r24, 0x01	; 1
 67e:	f1 f7       	brne	.-4      	; 0x67c <LCD_send_pulse+0xe>
 680:	00 c0       	rjmp	.+0      	; 0x682 <LCD_send_pulse+0x14>
 682:	00 00       	nop
	_delay_ms(2);
	GPIO_pin_write(EN_PORT,EN,0);
 684:	82 e4       	ldi	r24, 0x42	; 66
 686:	60 e0       	ldi	r22, 0x00	; 0
 688:	40 e0       	ldi	r20, 0x00	; 0
 68a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <GPIO_pin_write>
 68e:	8f ec       	ldi	r24, 0xCF	; 207
 690:	97 e0       	ldi	r25, 0x07	; 7
 692:	01 97       	sbiw	r24, 0x01	; 1
 694:	f1 f7       	brne	.-4      	; 0x692 <LCD_send_pulse+0x24>
 696:	00 c0       	rjmp	.+0      	; 0x698 <LCD_send_pulse+0x2a>
 698:	00 00       	nop
	_delay_ms(1);	
}
 69a:	08 95       	ret

0000069c <LCD_send_command>:


static void LCD_send_command(uint8 command)
{
 69c:	68 2f       	mov	r22, r24
	GPIO_pin_write(RS_PORT,RS,0); //select command register
	LCD_send_pulse();
	
	#elif defined eight_bits_mode
	
	GPIO_port_write(LCD_PORT,command);
 69e:	81 e4       	ldi	r24, 0x41	; 65
 6a0:	0e 94 1f 02 	call	0x43e	; 0x43e <GPIO_port_write>
	GPIO_pin_write(RS_PORT,RS,0);
 6a4:	82 e4       	ldi	r24, 0x42	; 66
 6a6:	61 e0       	ldi	r22, 0x01	; 1
 6a8:	40 e0       	ldi	r20, 0x00	; 0
 6aa:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <GPIO_pin_write>
	LCD_send_pulse();
 6ae:	0e 94 37 03 	call	0x66e	; 0x66e <LCD_send_pulse>
	
	#endif
}
 6b2:	08 95       	ret

000006b4 <LCD_clear_screen>:



void LCD_clear_screen(void)
{
	GPIO_pin_write(RS_PORT,RS,0);
 6b4:	82 e4       	ldi	r24, 0x42	; 66
 6b6:	61 e0       	ldi	r22, 0x01	; 1
 6b8:	40 e0       	ldi	r20, 0x00	; 0
 6ba:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <GPIO_pin_write>
	GPIO_port_write(LCD_PORT,CLEAR_SCREEN);
 6be:	81 e4       	ldi	r24, 0x41	; 65
 6c0:	61 e0       	ldi	r22, 0x01	; 1
 6c2:	0e 94 1f 02 	call	0x43e	; 0x43e <GPIO_port_write>
 6c6:	8f e9       	ldi	r24, 0x9F	; 159
 6c8:	9f e0       	ldi	r25, 0x0F	; 15
 6ca:	01 97       	sbiw	r24, 0x01	; 1
 6cc:	f1 f7       	brne	.-4      	; 0x6ca <LCD_clear_screen+0x16>
 6ce:	00 c0       	rjmp	.+0      	; 0x6d0 <LCD_clear_screen+0x1c>
 6d0:	00 00       	nop
	_delay_ms(2);
}
 6d2:	08 95       	ret

000006d4 <LCD_return_home>:

void LCD_return_home(void)
{
	LCD_send_command(RETURN_HOME);
 6d4:	82 e0       	ldi	r24, 0x02	; 2
 6d6:	0e 94 4e 03 	call	0x69c	; 0x69c <LCD_send_command>
 6da:	8f e9       	ldi	r24, 0x9F	; 159
 6dc:	9f e0       	ldi	r25, 0x0F	; 15
 6de:	01 97       	sbiw	r24, 0x01	; 1
 6e0:	f1 f7       	brne	.-4      	; 0x6de <LCD_return_home+0xa>
 6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <LCD_return_home+0x10>
 6e4:	00 00       	nop
	_delay_ms(2);
}
 6e6:	08 95       	ret

000006e8 <LCD_init>:
 6e8:	8f ef       	ldi	r24, 0xFF	; 255
 6ea:	99 ef       	ldi	r25, 0xF9	; 249
 6ec:	a0 e0       	ldi	r26, 0x00	; 0
 6ee:	81 50       	subi	r24, 0x01	; 1
 6f0:	90 40       	sbci	r25, 0x00	; 0
 6f2:	a0 40       	sbci	r26, 0x00	; 0
 6f4:	e1 f7       	brne	.-8      	; 0x6ee <LCD_init+0x6>
 6f6:	00 c0       	rjmp	.+0      	; 0x6f8 <LCD_init+0x10>
 6f8:	00 00       	nop
	GPIO_pin_direction(RS_PORT,RS,1);//set RS pin to output pin
	//send command to inti LCD:
	LCD_send_command(FOUR_BITS);
	#elif defined eight_bits_mode
	//set connection pins:
	GPIO_port_direction(LCD_PORT,1);
 6fa:	81 e4       	ldi	r24, 0x41	; 65
 6fc:	61 e0       	ldi	r22, 0x01	; 1
 6fe:	0e 94 00 02 	call	0x400	; 0x400 <GPIO_port_direction>
	GPIO_pin_direction(EN_PORT,EN,1);//set EN pin to output pin
 702:	82 e4       	ldi	r24, 0x42	; 66
 704:	60 e0       	ldi	r22, 0x00	; 0
 706:	41 e0       	ldi	r20, 0x01	; 1
 708:	0e 94 50 00 	call	0xa0	; 0xa0 <GPIO_pin_direction>
	GPIO_pin_direction(RS_PORT,RS,1);//set RS pin to output pin
 70c:	82 e4       	ldi	r24, 0x42	; 66
 70e:	61 e0       	ldi	r22, 0x01	; 1
 710:	41 e0       	ldi	r20, 0x01	; 1
 712:	0e 94 50 00 	call	0xa0	; 0xa0 <GPIO_pin_direction>
	//send command to init LCD:
	LCD_send_command(EIGHT_BITS);
 716:	88 e3       	ldi	r24, 0x38	; 56
 718:	0e 94 4e 03 	call	0x69c	; 0x69c <LCD_send_command>
	#endif
	LCD_return_home();
 71c:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <LCD_return_home>
	LCD_send_command(DISPLAY_ON_CURSOR_OFF);
 720:	8c e0       	ldi	r24, 0x0C	; 12
 722:	0e 94 4e 03 	call	0x69c	; 0x69c <LCD_send_command>
	LCD_clear_screen();
 726:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <LCD_clear_screen>
	LCD_send_command(ENGLISH_ENTRY);
 72a:	86 e0       	ldi	r24, 0x06	; 6
 72c:	0e 94 4e 03 	call	0x69c	; 0x69c <LCD_send_command>
}
 730:	08 95       	ret

00000732 <LCD_send_character>:
	LCD_send_command(RETURN_HOME);
	_delay_ms(2);
}

void LCD_send_character(char character)
{
 732:	cf 93       	push	r28
 734:	c8 2f       	mov	r28, r24
	GPIO_port_write_low_nibble(LCD_PORT,character);
	LCD_send_pulse();
	
	#elif defined eight_bits_mode
	
	GPIO_pin_write(RS_PORT,RS,1);
 736:	82 e4       	ldi	r24, 0x42	; 66
 738:	61 e0       	ldi	r22, 0x01	; 1
 73a:	41 e0       	ldi	r20, 0x01	; 1
 73c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <GPIO_pin_write>
	GPIO_port_write(LCD_PORT,character);
 740:	81 e4       	ldi	r24, 0x41	; 65
 742:	6c 2f       	mov	r22, r28
 744:	0e 94 1f 02 	call	0x43e	; 0x43e <GPIO_port_write>
	LCD_send_pulse();
 748:	0e 94 37 03 	call	0x66e	; 0x66e <LCD_send_pulse>
	
	#endif
	
}
 74c:	cf 91       	pop	r28
 74e:	08 95       	ret

00000750 <LCD_send_string>:

void LCD_send_string(char* character)
{
 750:	cf 93       	push	r28
 752:	df 93       	push	r29
 754:	ec 01       	movw	r28, r24
	while ('\0' != *character)
 756:	88 81       	ld	r24, Y
 758:	88 23       	and	r24, r24
 75a:	31 f0       	breq	.+12     	; 0x768 <LCD_send_string+0x18>
	
	#endif
	
}

void LCD_send_string(char* character)
 75c:	21 96       	adiw	r28, 0x01	; 1
{
	while ('\0' != *character)
	{
		LCD_send_character(*character);
 75e:	0e 94 99 03 	call	0x732	; 0x732 <LCD_send_character>
	
}

void LCD_send_string(char* character)
{
	while ('\0' != *character)
 762:	89 91       	ld	r24, Y+
 764:	88 23       	and	r24, r24
 766:	d9 f7       	brne	.-10     	; 0x75e <LCD_send_string+0xe>
	{
		LCD_send_character(*character);
		character += 1;
	}
}
 768:	df 91       	pop	r29
 76a:	cf 91       	pop	r28
 76c:	08 95       	ret

0000076e <LCD_move_cursor>:
void LCD_move_cursor(uint8 row, uint8 column)
{
	uint8 r = 0;
	uint8 c = 0;
	
	if( (row>0) && (row<5) && (column>0) && (column<21) )
 76e:	98 2f       	mov	r25, r24
 770:	91 50       	subi	r25, 0x01	; 1
 772:	94 30       	cpi	r25, 0x04	; 4
 774:	b0 f4       	brcc	.+44     	; 0x7a2 <LCD_move_cursor+0x34>
 776:	66 23       	and	r22, r22
 778:	b1 f0       	breq	.+44     	; 0x7a6 <LCD_move_cursor+0x38>
 77a:	65 31       	cpi	r22, 0x15	; 21
 77c:	b0 f4       	brcc	.+44     	; 0x7aa <LCD_move_cursor+0x3c>
	{
		if (1 == row)
 77e:	81 30       	cpi	r24, 0x01	; 1
 780:	19 f4       	brne	.+6      	; 0x788 <LCD_move_cursor+0x1a>
		{
			c = (0x80 + column - 1);
 782:	86 2f       	mov	r24, r22
 784:	81 58       	subi	r24, 0x81	; 129
 786:	12 c0       	rjmp	.+36     	; 0x7ac <LCD_move_cursor+0x3e>
		}
		else if (2 == row)
 788:	82 30       	cpi	r24, 0x02	; 2
 78a:	19 f4       	brne	.+6      	; 0x792 <LCD_move_cursor+0x24>
		{
			c = (0xC0 + column - 1);
 78c:	86 2f       	mov	r24, r22
 78e:	81 54       	subi	r24, 0x41	; 65
 790:	0d c0       	rjmp	.+26     	; 0x7ac <LCD_move_cursor+0x3e>
		}
		else if (3 == row)
 792:	83 30       	cpi	r24, 0x03	; 3
 794:	19 f4       	brne	.+6      	; 0x79c <LCD_move_cursor+0x2e>
		{
			c = (0x90 + column - 1);
 796:	86 2f       	mov	r24, r22
 798:	81 57       	subi	r24, 0x71	; 113
 79a:	08 c0       	rjmp	.+16     	; 0x7ac <LCD_move_cursor+0x3e>
		}
		else
		{
			c = (0xD0 + column - 1);
 79c:	86 2f       	mov	r24, r22
 79e:	81 53       	subi	r24, 0x31	; 49
 7a0:	05 c0       	rjmp	.+10     	; 0x7ac <LCD_move_cursor+0x3e>
		}
	}
	else
	{
		c = 0x80;
 7a2:	80 e8       	ldi	r24, 0x80	; 128
 7a4:	03 c0       	rjmp	.+6      	; 0x7ac <LCD_move_cursor+0x3e>
 7a6:	80 e8       	ldi	r24, 0x80	; 128
 7a8:	01 c0       	rjmp	.+2      	; 0x7ac <LCD_move_cursor+0x3e>
 7aa:	80 e8       	ldi	r24, 0x80	; 128
	}
	LCD_send_command(c);
 7ac:	0e 94 4e 03 	call	0x69c	; 0x69c <LCD_send_command>
 7b0:	08 95       	ret

000007b2 <_exit>:
 7b2:	f8 94       	cli

000007b4 <__stop_program>:
 7b4:	ff cf       	rjmp	.-2      	; 0x7b4 <__stop_program>
