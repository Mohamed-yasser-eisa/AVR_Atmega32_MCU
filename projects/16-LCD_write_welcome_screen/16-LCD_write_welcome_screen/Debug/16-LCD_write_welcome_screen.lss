
16-LCD_write_welcome_screen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000878  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  00000878  000008ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000938  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00001004  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  00001090  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000aa3  00000000  00000000  00001150  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000391  00000000  00000000  00001bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006ef  00000000  00000000  00001f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  00002674  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f0  00000000  00000000  000027f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007f2  00000000  00000000  00002ae4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e7       	ldi	r30, 0x78	; 120
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3a       	cpi	r26, 0xAA	; 170
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa ea       	ldi	r26, 0xAA	; 170
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3a       	cpi	r26, 0xAA	; 170
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 3a 04 	jmp	0x874	; 0x874 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

int main(void)
{
	uint8 i = 0; //outer loop counter
	uint8 j = 0; //inner loop counter
	LCD_init();
  92:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_init>
	
    while(1)
    {
		LCD_send_string("Welcome");
  96:	0f 2e       	mov	r0, r31
  98:	f0 e6       	ldi	r31, 0x60	; 96
  9a:	ef 2e       	mov	r14, r31
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	ff 2e       	mov	r15, r31
  a0:	f0 2d       	mov	r31, r0
  a2:	03 e0       	ldi	r16, 0x03	; 3


#include "LCD.h"

int main(void)
{
  a4:	19 e0       	ldi	r17, 0x09	; 9
				LCD_send_command(ENTIRE_DISPLAY_LEFT);
			}
		}
		
		LCD_clear_screen();
		LCD_send_string("*Mohamed Yasser*");
  a6:	0f 2e       	mov	r0, r31
  a8:	f8 e6       	ldi	r31, 0x68	; 104
  aa:	cf 2e       	mov	r12, r31
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	df 2e       	mov	r13, r31
  b0:	f0 2d       	mov	r31, r0
		LCD_move_cursor(2,1);
		LCD_send_string("  23 years old ");
  b2:	0f 2e       	mov	r0, r31
  b4:	f9 e7       	ldi	r31, 0x79	; 121
  b6:	af 2e       	mov	r10, r31
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	bf 2e       	mov	r11, r31
  bc:	f0 2d       	mov	r31, r0
		LCD_move_cursor(3,1);
		LCD_send_string(" Biomedical eng.");
  be:	0f 2e       	mov	r0, r31
  c0:	f9 e8       	ldi	r31, 0x89	; 137
  c2:	8f 2e       	mov	r8, r31
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	9f 2e       	mov	r9, r31
  c8:	f0 2d       	mov	r31, r0
		LCD_move_cursor(4,1);
		LCD_send_string("  Embedded eng.");
  ca:	0f 2e       	mov	r0, r31
  cc:	fa e9       	ldi	r31, 0x9A	; 154
  ce:	6f 2e       	mov	r6, r31
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	7f 2e       	mov	r7, r31
  d4:	f0 2d       	mov	r31, r0
	uint8 j = 0; //inner loop counter
	LCD_init();
	
    while(1)
    {
		LCD_send_string("Welcome");
  d6:	c7 01       	movw	r24, r14
  d8:	0e 94 09 04 	call	0x812	; 0x812 <LCD_send_string>
  dc:	d0 2f       	mov	r29, r16
  de:	1f c0       	rjmp	.+62     	; 0x11e <main+0x8c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	90 e7       	ldi	r25, 0x70	; 112
  e4:	a2 e0       	ldi	r26, 0x02	; 2
  e6:	81 50       	subi	r24, 0x01	; 1
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	a0 40       	sbci	r26, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x54>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x5e>
  f0:	00 00       	nop
		for (i=0; i<3; ++i)
		{
			for(j=0; j<9; ++j)
			{
				_delay_ms(100);
				LCD_send_command(ENTIRE_DISPLAY_RIGHT);
  f2:	8c e1       	ldi	r24, 0x1C	; 28
  f4:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_send_command>
  f8:	c1 50       	subi	r28, 0x01	; 1
    while(1)
    {
		LCD_send_string("Welcome");
		for (i=0; i<3; ++i)
		{
			for(j=0; j<9; ++j)
  fa:	91 f7       	brne	.-28     	; 0xe0 <main+0x4e>
  fc:	c1 2f       	mov	r28, r17
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	90 e7       	ldi	r25, 0x70	; 112
 102:	a2 e0       	ldi	r26, 0x02	; 2
 104:	81 50       	subi	r24, 0x01	; 1
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	a0 40       	sbci	r26, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x72>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x7c>
 10e:	00 00       	nop
				LCD_send_command(ENTIRE_DISPLAY_RIGHT);
			}
			for(j=0; j<9; ++j)
			{
				_delay_ms(100);
				LCD_send_command(ENTIRE_DISPLAY_LEFT);
 110:	88 e1       	ldi	r24, 0x18	; 24
 112:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_send_command>
 116:	c1 50       	subi	r28, 0x01	; 1
			for(j=0; j<9; ++j)
			{
				_delay_ms(100);
				LCD_send_command(ENTIRE_DISPLAY_RIGHT);
			}
			for(j=0; j<9; ++j)
 118:	91 f7       	brne	.-28     	; 0xfe <main+0x6c>
 11a:	d1 50       	subi	r29, 0x01	; 1
	LCD_init();
	
    while(1)
    {
		LCD_send_string("Welcome");
		for (i=0; i<3; ++i)
 11c:	11 f0       	breq	.+4      	; 0x122 <main+0x90>


#include "LCD.h"

int main(void)
{
 11e:	c1 2f       	mov	r28, r17
 120:	df cf       	rjmp	.-66     	; 0xe0 <main+0x4e>
				_delay_ms(100);
				LCD_send_command(ENTIRE_DISPLAY_LEFT);
			}
		}
		
		LCD_clear_screen();
 122:	0e 94 c1 03 	call	0x782	; 0x782 <LCD_clear_screen>
		LCD_send_string("*Mohamed Yasser*");
 126:	c6 01       	movw	r24, r12
 128:	0e 94 09 04 	call	0x812	; 0x812 <LCD_send_string>
		LCD_move_cursor(2,1);
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	61 e0       	ldi	r22, 0x01	; 1
 130:	0e 94 18 04 	call	0x830	; 0x830 <LCD_move_cursor>
		LCD_send_string("  23 years old ");
 134:	c5 01       	movw	r24, r10
 136:	0e 94 09 04 	call	0x812	; 0x812 <LCD_send_string>
		LCD_move_cursor(3,1);
 13a:	80 2f       	mov	r24, r16
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	0e 94 18 04 	call	0x830	; 0x830 <LCD_move_cursor>
		LCD_send_string(" Biomedical eng.");
 142:	c4 01       	movw	r24, r8
 144:	0e 94 09 04 	call	0x812	; 0x812 <LCD_send_string>
		LCD_move_cursor(4,1);
 148:	84 e0       	ldi	r24, 0x04	; 4
 14a:	61 e0       	ldi	r22, 0x01	; 1
 14c:	0e 94 18 04 	call	0x830	; 0x830 <LCD_move_cursor>
		LCD_send_string("  Embedded eng.");
 150:	c3 01       	movw	r24, r6
 152:	0e 94 09 04 	call	0x812	; 0x812 <LCD_send_string>
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	95 ee       	ldi	r25, 0xE5	; 229
 15a:	aa ea       	ldi	r26, 0xAA	; 170
 15c:	81 50       	subi	r24, 0x01	; 1
 15e:	90 40       	sbci	r25, 0x00	; 0
 160:	a0 40       	sbci	r26, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <main+0xca>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0xd4>
 166:	00 00       	nop
		_delay_ms(7000);
		LCD_clear_screen();
 168:	0e 94 c1 03 	call	0x782	; 0x782 <LCD_clear_screen>
    }
 16c:	b4 cf       	rjmp	.-152    	; 0xd6 <main+0x44>

0000016e <GPIO_pin_direction>:
#include "Atmega_GPIO.h"

void GPIO_pin_direction(char PORT, uint8 BIT, uint8 DIR)
{
    switch(PORT)
 16e:	84 34       	cpi	r24, 0x44	; 68
 170:	09 f4       	brne	.+2      	; 0x174 <GPIO_pin_direction+0x6>
 172:	71 c0       	rjmp	.+226    	; 0x256 <GPIO_pin_direction+0xe8>
 174:	85 34       	cpi	r24, 0x45	; 69
 176:	48 f4       	brcc	.+18     	; 0x18a <GPIO_pin_direction+0x1c>
 178:	82 34       	cpi	r24, 0x42	; 66
 17a:	99 f1       	breq	.+102    	; 0x1e2 <GPIO_pin_direction+0x74>
 17c:	83 34       	cpi	r24, 0x43	; 67
 17e:	08 f0       	brcs	.+2      	; 0x182 <GPIO_pin_direction+0x14>
 180:	4d c0       	rjmp	.+154    	; 0x21c <GPIO_pin_direction+0xae>
 182:	81 34       	cpi	r24, 0x41	; 65
 184:	09 f0       	breq	.+2      	; 0x188 <GPIO_pin_direction+0x1a>
 186:	83 c0       	rjmp	.+262    	; 0x28e <GPIO_pin_direction+0x120>
 188:	0f c0       	rjmp	.+30     	; 0x1a8 <GPIO_pin_direction+0x3a>
 18a:	82 36       	cpi	r24, 0x62	; 98
 18c:	51 f1       	breq	.+84     	; 0x1e2 <GPIO_pin_direction+0x74>
 18e:	83 36       	cpi	r24, 0x63	; 99
 190:	20 f4       	brcc	.+8      	; 0x19a <GPIO_pin_direction+0x2c>
 192:	81 36       	cpi	r24, 0x61	; 97
 194:	09 f0       	breq	.+2      	; 0x198 <GPIO_pin_direction+0x2a>
 196:	7b c0       	rjmp	.+246    	; 0x28e <GPIO_pin_direction+0x120>
 198:	07 c0       	rjmp	.+14     	; 0x1a8 <GPIO_pin_direction+0x3a>
 19a:	83 36       	cpi	r24, 0x63	; 99
 19c:	09 f4       	brne	.+2      	; 0x1a0 <GPIO_pin_direction+0x32>
 19e:	3e c0       	rjmp	.+124    	; 0x21c <GPIO_pin_direction+0xae>
 1a0:	84 36       	cpi	r24, 0x64	; 100
 1a2:	09 f0       	breq	.+2      	; 0x1a6 <GPIO_pin_direction+0x38>
 1a4:	74 c0       	rjmp	.+232    	; 0x28e <GPIO_pin_direction+0x120>
 1a6:	57 c0       	rjmp	.+174    	; 0x256 <GPIO_pin_direction+0xe8>
    {
        case 'A':
        case 'a':
            if(1 == DIR)
 1a8:	41 30       	cpi	r20, 0x01	; 1
 1aa:	69 f4       	brne	.+26     	; 0x1c6 <GPIO_pin_direction+0x58>
            {
                SET_BIT(DDRA, BIT); //set direction of this pin in port A as output
 1ac:	2a b3       	in	r18, 0x1a	; 26
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	ac 01       	movw	r20, r24
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <GPIO_pin_direction+0x4c>
 1b6:	44 0f       	add	r20, r20
 1b8:	55 1f       	adc	r21, r21
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <GPIO_pin_direction+0x48>
 1be:	ba 01       	movw	r22, r20
 1c0:	62 2b       	or	r22, r18
 1c2:	6a bb       	out	0x1a, r22	; 26
 1c4:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRA, BIT); //set direction of this pin in port A as input
 1c6:	2a b3       	in	r18, 0x1a	; 26
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	ac 01       	movw	r20, r24
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <GPIO_pin_direction+0x66>
 1d0:	44 0f       	add	r20, r20
 1d2:	55 1f       	adc	r21, r21
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <GPIO_pin_direction+0x62>
 1d8:	ba 01       	movw	r22, r20
 1da:	60 95       	com	r22
 1dc:	62 23       	and	r22, r18
 1de:	6a bb       	out	0x1a, r22	; 26
 1e0:	08 95       	ret
            }
        break;
        case 'B':
        case 'b':
            if(1 == DIR)
 1e2:	41 30       	cpi	r20, 0x01	; 1
 1e4:	69 f4       	brne	.+26     	; 0x200 <GPIO_pin_direction+0x92>
            {
                SET_BIT(DDRB, BIT); //set direction of this pin in port B as output
 1e6:	27 b3       	in	r18, 0x17	; 23
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	ac 01       	movw	r20, r24
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <GPIO_pin_direction+0x86>
 1f0:	44 0f       	add	r20, r20
 1f2:	55 1f       	adc	r21, r21
 1f4:	6a 95       	dec	r22
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <GPIO_pin_direction+0x82>
 1f8:	ba 01       	movw	r22, r20
 1fa:	62 2b       	or	r22, r18
 1fc:	67 bb       	out	0x17, r22	; 23
 1fe:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRB, BIT); //set direction of this pin in port B as input
 200:	27 b3       	in	r18, 0x17	; 23
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	ac 01       	movw	r20, r24
 208:	02 c0       	rjmp	.+4      	; 0x20e <GPIO_pin_direction+0xa0>
 20a:	44 0f       	add	r20, r20
 20c:	55 1f       	adc	r21, r21
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <GPIO_pin_direction+0x9c>
 212:	ba 01       	movw	r22, r20
 214:	60 95       	com	r22
 216:	62 23       	and	r22, r18
 218:	67 bb       	out	0x17, r22	; 23
 21a:	08 95       	ret
            }
        break;
        case 'C':
        case 'c':
            if(1 == DIR)
 21c:	41 30       	cpi	r20, 0x01	; 1
 21e:	69 f4       	brne	.+26     	; 0x23a <GPIO_pin_direction+0xcc>
            {
                SET_BIT(DDRC, BIT); //set direction of this pin in port B as output
 220:	24 b3       	in	r18, 0x14	; 20
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	ac 01       	movw	r20, r24
 228:	02 c0       	rjmp	.+4      	; 0x22e <GPIO_pin_direction+0xc0>
 22a:	44 0f       	add	r20, r20
 22c:	55 1f       	adc	r21, r21
 22e:	6a 95       	dec	r22
 230:	e2 f7       	brpl	.-8      	; 0x22a <GPIO_pin_direction+0xbc>
 232:	ba 01       	movw	r22, r20
 234:	62 2b       	or	r22, r18
 236:	64 bb       	out	0x14, r22	; 20
 238:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRC, BIT); //set direction of this pin in port B as input
 23a:	24 b3       	in	r18, 0x14	; 20
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	ac 01       	movw	r20, r24
 242:	02 c0       	rjmp	.+4      	; 0x248 <GPIO_pin_direction+0xda>
 244:	44 0f       	add	r20, r20
 246:	55 1f       	adc	r21, r21
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <GPIO_pin_direction+0xd6>
 24c:	ba 01       	movw	r22, r20
 24e:	60 95       	com	r22
 250:	62 23       	and	r22, r18
 252:	64 bb       	out	0x14, r22	; 20
 254:	08 95       	ret
            }
        break;
        case 'D':
        case 'd':
            if(1 == DIR)
 256:	41 30       	cpi	r20, 0x01	; 1
 258:	69 f4       	brne	.+26     	; 0x274 <GPIO_pin_direction+0x106>
            {
                SET_BIT(DDRD, BIT); //set direction of this pin in port C as output
 25a:	21 b3       	in	r18, 0x11	; 17
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	ac 01       	movw	r20, r24
 262:	02 c0       	rjmp	.+4      	; 0x268 <GPIO_pin_direction+0xfa>
 264:	44 0f       	add	r20, r20
 266:	55 1f       	adc	r21, r21
 268:	6a 95       	dec	r22
 26a:	e2 f7       	brpl	.-8      	; 0x264 <GPIO_pin_direction+0xf6>
 26c:	ba 01       	movw	r22, r20
 26e:	62 2b       	or	r22, r18
 270:	61 bb       	out	0x11, r22	; 17
 272:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRD, BIT); //set direction of this pin in port C as input
 274:	21 b3       	in	r18, 0x11	; 17
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	ac 01       	movw	r20, r24
 27c:	02 c0       	rjmp	.+4      	; 0x282 <GPIO_pin_direction+0x114>
 27e:	44 0f       	add	r20, r20
 280:	55 1f       	adc	r21, r21
 282:	6a 95       	dec	r22
 284:	e2 f7       	brpl	.-8      	; 0x27e <GPIO_pin_direction+0x110>
 286:	ba 01       	movw	r22, r20
 288:	60 95       	com	r22
 28a:	62 23       	and	r22, r18
 28c:	61 bb       	out	0x11, r22	; 17
 28e:	08 95       	ret

00000290 <GPIO_pin_write>:
} //end of  GPIO_pin_direction();


void GPIO_pin_write(char PORT, uint8 BIT, uint8 DATA)
{
    switch(PORT)
 290:	84 34       	cpi	r24, 0x44	; 68
 292:	09 f4       	brne	.+2      	; 0x296 <GPIO_pin_write+0x6>
 294:	71 c0       	rjmp	.+226    	; 0x378 <GPIO_pin_write+0xe8>
 296:	85 34       	cpi	r24, 0x45	; 69
 298:	48 f4       	brcc	.+18     	; 0x2ac <GPIO_pin_write+0x1c>
 29a:	82 34       	cpi	r24, 0x42	; 66
 29c:	99 f1       	breq	.+102    	; 0x304 <GPIO_pin_write+0x74>
 29e:	83 34       	cpi	r24, 0x43	; 67
 2a0:	08 f0       	brcs	.+2      	; 0x2a4 <GPIO_pin_write+0x14>
 2a2:	4d c0       	rjmp	.+154    	; 0x33e <GPIO_pin_write+0xae>
 2a4:	81 34       	cpi	r24, 0x41	; 65
 2a6:	09 f0       	breq	.+2      	; 0x2aa <GPIO_pin_write+0x1a>
 2a8:	83 c0       	rjmp	.+262    	; 0x3b0 <GPIO_pin_write+0x120>
 2aa:	0f c0       	rjmp	.+30     	; 0x2ca <GPIO_pin_write+0x3a>
 2ac:	82 36       	cpi	r24, 0x62	; 98
 2ae:	51 f1       	breq	.+84     	; 0x304 <GPIO_pin_write+0x74>
 2b0:	83 36       	cpi	r24, 0x63	; 99
 2b2:	20 f4       	brcc	.+8      	; 0x2bc <GPIO_pin_write+0x2c>
 2b4:	81 36       	cpi	r24, 0x61	; 97
 2b6:	09 f0       	breq	.+2      	; 0x2ba <GPIO_pin_write+0x2a>
 2b8:	7b c0       	rjmp	.+246    	; 0x3b0 <GPIO_pin_write+0x120>
 2ba:	07 c0       	rjmp	.+14     	; 0x2ca <GPIO_pin_write+0x3a>
 2bc:	83 36       	cpi	r24, 0x63	; 99
 2be:	09 f4       	brne	.+2      	; 0x2c2 <GPIO_pin_write+0x32>
 2c0:	3e c0       	rjmp	.+124    	; 0x33e <GPIO_pin_write+0xae>
 2c2:	84 36       	cpi	r24, 0x64	; 100
 2c4:	09 f0       	breq	.+2      	; 0x2c8 <GPIO_pin_write+0x38>
 2c6:	74 c0       	rjmp	.+232    	; 0x3b0 <GPIO_pin_write+0x120>
 2c8:	57 c0       	rjmp	.+174    	; 0x378 <GPIO_pin_write+0xe8>
    {
        case 'A':
        case 'a':
            if(1 == DATA)
 2ca:	41 30       	cpi	r20, 0x01	; 1
 2cc:	69 f4       	brne	.+26     	; 0x2e8 <GPIO_pin_write+0x58>
            {
                SET_BIT(PORTA, BIT); //set output value of this pin in port A to 1
 2ce:	2b b3       	in	r18, 0x1b	; 27
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	ac 01       	movw	r20, r24
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <GPIO_pin_write+0x4c>
 2d8:	44 0f       	add	r20, r20
 2da:	55 1f       	adc	r21, r21
 2dc:	6a 95       	dec	r22
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <GPIO_pin_write+0x48>
 2e0:	ba 01       	movw	r22, r20
 2e2:	62 2b       	or	r22, r18
 2e4:	6b bb       	out	0x1b, r22	; 27
 2e6:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTA, BIT); //set output value of this pin in port A to 0
 2e8:	2b b3       	in	r18, 0x1b	; 27
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	ac 01       	movw	r20, r24
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <GPIO_pin_write+0x66>
 2f2:	44 0f       	add	r20, r20
 2f4:	55 1f       	adc	r21, r21
 2f6:	6a 95       	dec	r22
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <GPIO_pin_write+0x62>
 2fa:	ba 01       	movw	r22, r20
 2fc:	60 95       	com	r22
 2fe:	62 23       	and	r22, r18
 300:	6b bb       	out	0x1b, r22	; 27
 302:	08 95       	ret
            }
        break;
        case 'B':
        case 'b':
            if(1 == DATA)
 304:	41 30       	cpi	r20, 0x01	; 1
 306:	69 f4       	brne	.+26     	; 0x322 <GPIO_pin_write+0x92>
            {
                SET_BIT(PORTB, BIT); //set output value of this pin in port B to 1
 308:	28 b3       	in	r18, 0x18	; 24
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	ac 01       	movw	r20, r24
 310:	02 c0       	rjmp	.+4      	; 0x316 <GPIO_pin_write+0x86>
 312:	44 0f       	add	r20, r20
 314:	55 1f       	adc	r21, r21
 316:	6a 95       	dec	r22
 318:	e2 f7       	brpl	.-8      	; 0x312 <GPIO_pin_write+0x82>
 31a:	ba 01       	movw	r22, r20
 31c:	62 2b       	or	r22, r18
 31e:	68 bb       	out	0x18, r22	; 24
 320:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTB, BIT); //set output value of this pin in port B to 0
 322:	28 b3       	in	r18, 0x18	; 24
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	ac 01       	movw	r20, r24
 32a:	02 c0       	rjmp	.+4      	; 0x330 <GPIO_pin_write+0xa0>
 32c:	44 0f       	add	r20, r20
 32e:	55 1f       	adc	r21, r21
 330:	6a 95       	dec	r22
 332:	e2 f7       	brpl	.-8      	; 0x32c <GPIO_pin_write+0x9c>
 334:	ba 01       	movw	r22, r20
 336:	60 95       	com	r22
 338:	62 23       	and	r22, r18
 33a:	68 bb       	out	0x18, r22	; 24
 33c:	08 95       	ret
            }
        break;
        case 'C':
        case 'c':
            if(1 == DATA)
 33e:	41 30       	cpi	r20, 0x01	; 1
 340:	69 f4       	brne	.+26     	; 0x35c <GPIO_pin_write+0xcc>
            {
                SET_BIT(PORTC, BIT); //set output value of this pin in port C to 1
 342:	25 b3       	in	r18, 0x15	; 21
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	ac 01       	movw	r20, r24
 34a:	02 c0       	rjmp	.+4      	; 0x350 <GPIO_pin_write+0xc0>
 34c:	44 0f       	add	r20, r20
 34e:	55 1f       	adc	r21, r21
 350:	6a 95       	dec	r22
 352:	e2 f7       	brpl	.-8      	; 0x34c <GPIO_pin_write+0xbc>
 354:	ba 01       	movw	r22, r20
 356:	62 2b       	or	r22, r18
 358:	65 bb       	out	0x15, r22	; 21
 35a:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTC, BIT); //set output value of this pin in port C to 0
 35c:	25 b3       	in	r18, 0x15	; 21
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	ac 01       	movw	r20, r24
 364:	02 c0       	rjmp	.+4      	; 0x36a <GPIO_pin_write+0xda>
 366:	44 0f       	add	r20, r20
 368:	55 1f       	adc	r21, r21
 36a:	6a 95       	dec	r22
 36c:	e2 f7       	brpl	.-8      	; 0x366 <GPIO_pin_write+0xd6>
 36e:	ba 01       	movw	r22, r20
 370:	60 95       	com	r22
 372:	62 23       	and	r22, r18
 374:	65 bb       	out	0x15, r22	; 21
 376:	08 95       	ret
            }
        break;
        case 'D':
        case 'd':
            if(1 == DATA)
 378:	41 30       	cpi	r20, 0x01	; 1
 37a:	69 f4       	brne	.+26     	; 0x396 <GPIO_pin_write+0x106>
            {
                SET_BIT(PORTD, BIT); //set output value of this pin in port C to 1
 37c:	22 b3       	in	r18, 0x12	; 18
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	ac 01       	movw	r20, r24
 384:	02 c0       	rjmp	.+4      	; 0x38a <GPIO_pin_write+0xfa>
 386:	44 0f       	add	r20, r20
 388:	55 1f       	adc	r21, r21
 38a:	6a 95       	dec	r22
 38c:	e2 f7       	brpl	.-8      	; 0x386 <GPIO_pin_write+0xf6>
 38e:	ba 01       	movw	r22, r20
 390:	62 2b       	or	r22, r18
 392:	62 bb       	out	0x12, r22	; 18
 394:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTD, BIT); //set output value of this pin in port C to 0
 396:	22 b3       	in	r18, 0x12	; 18
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	ac 01       	movw	r20, r24
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <GPIO_pin_write+0x114>
 3a0:	44 0f       	add	r20, r20
 3a2:	55 1f       	adc	r21, r21
 3a4:	6a 95       	dec	r22
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <GPIO_pin_write+0x110>
 3a8:	ba 01       	movw	r22, r20
 3aa:	60 95       	com	r22
 3ac:	62 23       	and	r22, r18
 3ae:	62 bb       	out	0x12, r22	; 18
 3b0:	08 95       	ret

000003b2 <GPIO_pin_read>:


uint8 GPIO_pin_read(char PORT, uint8 BIT)
{
    uint8 read_value = 0;
    switch(PORT)
 3b2:	84 34       	cpi	r24, 0x44	; 68
 3b4:	99 f1       	breq	.+102    	; 0x41c <GPIO_pin_read+0x6a>
 3b6:	85 34       	cpi	r24, 0x45	; 69
 3b8:	38 f4       	brcc	.+14     	; 0x3c8 <GPIO_pin_read+0x16>
 3ba:	82 34       	cpi	r24, 0x42	; 66
 3bc:	d9 f0       	breq	.+54     	; 0x3f4 <GPIO_pin_read+0x42>
 3be:	83 34       	cpi	r24, 0x43	; 67
 3c0:	18 f5       	brcc	.+70     	; 0x408 <GPIO_pin_read+0x56>
 3c2:	81 34       	cpi	r24, 0x41	; 65
 3c4:	a9 f5       	brne	.+106    	; 0x430 <GPIO_pin_read+0x7e>
 3c6:	0c c0       	rjmp	.+24     	; 0x3e0 <GPIO_pin_read+0x2e>
 3c8:	82 36       	cpi	r24, 0x62	; 98
 3ca:	a1 f0       	breq	.+40     	; 0x3f4 <GPIO_pin_read+0x42>
 3cc:	83 36       	cpi	r24, 0x63	; 99
 3ce:	18 f4       	brcc	.+6      	; 0x3d6 <GPIO_pin_read+0x24>
 3d0:	81 36       	cpi	r24, 0x61	; 97
 3d2:	71 f5       	brne	.+92     	; 0x430 <GPIO_pin_read+0x7e>
 3d4:	05 c0       	rjmp	.+10     	; 0x3e0 <GPIO_pin_read+0x2e>
 3d6:	83 36       	cpi	r24, 0x63	; 99
 3d8:	b9 f0       	breq	.+46     	; 0x408 <GPIO_pin_read+0x56>
 3da:	84 36       	cpi	r24, 0x64	; 100
 3dc:	49 f5       	brne	.+82     	; 0x430 <GPIO_pin_read+0x7e>
 3de:	1e c0       	rjmp	.+60     	; 0x41c <GPIO_pin_read+0x6a>
    {
        case 'A':
        case 'a':
            read_value = READ_BIT(PINA, BIT); //read value of given pin in port A
 3e0:	29 b3       	in	r18, 0x19	; 25
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	c9 01       	movw	r24, r18
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <GPIO_pin_read+0x3a>
 3e8:	95 95       	asr	r25
 3ea:	87 95       	ror	r24
 3ec:	6a 95       	dec	r22
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <GPIO_pin_read+0x36>
 3f0:	81 70       	andi	r24, 0x01	; 1
        break;
 3f2:	08 95       	ret
        case 'B':
        case 'b':
            read_value = READ_BIT(PINB, BIT); //read value of given pin in port B
 3f4:	26 b3       	in	r18, 0x16	; 22
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	c9 01       	movw	r24, r18
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <GPIO_pin_read+0x4e>
 3fc:	95 95       	asr	r25
 3fe:	87 95       	ror	r24
 400:	6a 95       	dec	r22
 402:	e2 f7       	brpl	.-8      	; 0x3fc <GPIO_pin_read+0x4a>
 404:	81 70       	andi	r24, 0x01	; 1
        break;
 406:	08 95       	ret
        case 'C':
        case 'c':
            read_value = READ_BIT(PINC, BIT); //read value of given pin in port C
 408:	23 b3       	in	r18, 0x13	; 19
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	c9 01       	movw	r24, r18
 40e:	02 c0       	rjmp	.+4      	; 0x414 <GPIO_pin_read+0x62>
 410:	95 95       	asr	r25
 412:	87 95       	ror	r24
 414:	6a 95       	dec	r22
 416:	e2 f7       	brpl	.-8      	; 0x410 <GPIO_pin_read+0x5e>
 418:	81 70       	andi	r24, 0x01	; 1
        break;
 41a:	08 95       	ret
        case 'D':
        case 'd':
            read_value = READ_BIT(PIND, BIT); //read value of given pin in port D
 41c:	20 b3       	in	r18, 0x10	; 16
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	c9 01       	movw	r24, r18
 422:	02 c0       	rjmp	.+4      	; 0x428 <GPIO_pin_read+0x76>
 424:	95 95       	asr	r25
 426:	87 95       	ror	r24
 428:	6a 95       	dec	r22
 42a:	e2 f7       	brpl	.-8      	; 0x424 <GPIO_pin_read+0x72>
 42c:	81 70       	andi	r24, 0x01	; 1
        break;
 42e:	08 95       	ret
} // end of GPIO_pin_write();


uint8 GPIO_pin_read(char PORT, uint8 BIT)
{
    uint8 read_value = 0;
 430:	80 e0       	ldi	r24, 0x00	; 0
        break;
        default:
        break;
    } //end of switch(PORT);
    return read_value;
} // end of GPIO_pin_read();
 432:	08 95       	ret

00000434 <GPIO_pin_toggle>:


void GPIO_pin_toggle(char PORT, uint8 BIT)
{
    switch(PORT)
 434:	84 34       	cpi	r24, 0x44	; 68
 436:	09 f4       	brne	.+2      	; 0x43a <GPIO_pin_toggle+0x6>
 438:	3d c0       	rjmp	.+122    	; 0x4b4 <GPIO_pin_toggle+0x80>
 43a:	85 34       	cpi	r24, 0x45	; 69
 43c:	40 f4       	brcc	.+16     	; 0x44e <GPIO_pin_toggle+0x1a>
 43e:	82 34       	cpi	r24, 0x42	; 66
 440:	f9 f0       	breq	.+62     	; 0x480 <GPIO_pin_toggle+0x4c>
 442:	83 34       	cpi	r24, 0x43	; 67
 444:	50 f5       	brcc	.+84     	; 0x49a <GPIO_pin_toggle+0x66>
 446:	81 34       	cpi	r24, 0x41	; 65
 448:	09 f0       	breq	.+2      	; 0x44c <GPIO_pin_toggle+0x18>
 44a:	40 c0       	rjmp	.+128    	; 0x4cc <GPIO_pin_toggle+0x98>
 44c:	0c c0       	rjmp	.+24     	; 0x466 <GPIO_pin_toggle+0x32>
 44e:	82 36       	cpi	r24, 0x62	; 98
 450:	b9 f0       	breq	.+46     	; 0x480 <GPIO_pin_toggle+0x4c>
 452:	83 36       	cpi	r24, 0x63	; 99
 454:	18 f4       	brcc	.+6      	; 0x45c <GPIO_pin_toggle+0x28>
 456:	81 36       	cpi	r24, 0x61	; 97
 458:	c9 f5       	brne	.+114    	; 0x4cc <GPIO_pin_toggle+0x98>
 45a:	05 c0       	rjmp	.+10     	; 0x466 <GPIO_pin_toggle+0x32>
 45c:	83 36       	cpi	r24, 0x63	; 99
 45e:	e9 f0       	breq	.+58     	; 0x49a <GPIO_pin_toggle+0x66>
 460:	84 36       	cpi	r24, 0x64	; 100
 462:	a1 f5       	brne	.+104    	; 0x4cc <GPIO_pin_toggle+0x98>
 464:	27 c0       	rjmp	.+78     	; 0x4b4 <GPIO_pin_toggle+0x80>
    {
        case 'A':
        case 'a':
            TOG_BIT(PORTA, BIT); //toggle value of given pin in port A
 466:	2b b3       	in	r18, 0x1b	; 27
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	ac 01       	movw	r20, r24
 46e:	02 c0       	rjmp	.+4      	; 0x474 <GPIO_pin_toggle+0x40>
 470:	44 0f       	add	r20, r20
 472:	55 1f       	adc	r21, r21
 474:	6a 95       	dec	r22
 476:	e2 f7       	brpl	.-8      	; 0x470 <GPIO_pin_toggle+0x3c>
 478:	ba 01       	movw	r22, r20
 47a:	62 27       	eor	r22, r18
 47c:	6b bb       	out	0x1b, r22	; 27
        break;
 47e:	08 95       	ret
        case 'B':
        case 'b':
            TOG_BIT(PORTB, BIT); //toggle value of given pin in port B
 480:	28 b3       	in	r18, 0x18	; 24
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	ac 01       	movw	r20, r24
 488:	02 c0       	rjmp	.+4      	; 0x48e <GPIO_pin_toggle+0x5a>
 48a:	44 0f       	add	r20, r20
 48c:	55 1f       	adc	r21, r21
 48e:	6a 95       	dec	r22
 490:	e2 f7       	brpl	.-8      	; 0x48a <GPIO_pin_toggle+0x56>
 492:	ba 01       	movw	r22, r20
 494:	62 27       	eor	r22, r18
 496:	68 bb       	out	0x18, r22	; 24
        break;
 498:	08 95       	ret
        case 'C':
        case 'c':
            TOG_BIT(PORTC, BIT); //toggle value of given pin in port C
 49a:	25 b3       	in	r18, 0x15	; 21
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	ac 01       	movw	r20, r24
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <GPIO_pin_toggle+0x74>
 4a4:	44 0f       	add	r20, r20
 4a6:	55 1f       	adc	r21, r21
 4a8:	6a 95       	dec	r22
 4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <GPIO_pin_toggle+0x70>
 4ac:	ba 01       	movw	r22, r20
 4ae:	62 27       	eor	r22, r18
 4b0:	65 bb       	out	0x15, r22	; 21
        break;
 4b2:	08 95       	ret
        case 'D':
        case 'd':
            TOG_BIT(PORTD, BIT); //toggle value of given pin in port D
 4b4:	22 b3       	in	r18, 0x12	; 18
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	ac 01       	movw	r20, r24
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <GPIO_pin_toggle+0x8e>
 4be:	44 0f       	add	r20, r20
 4c0:	55 1f       	adc	r21, r21
 4c2:	6a 95       	dec	r22
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <GPIO_pin_toggle+0x8a>
 4c6:	ba 01       	movw	r22, r20
 4c8:	62 27       	eor	r22, r18
 4ca:	62 bb       	out	0x12, r22	; 18
 4cc:	08 95       	ret

000004ce <GPIO_port_direction>:
} // end of GPIO_pin_toggle();


void GPIO_port_direction(char PORT, uint8 DIR)
{
    switch(PORT)
 4ce:	84 34       	cpi	r24, 0x44	; 68
 4d0:	d9 f0       	breq	.+54     	; 0x508 <GPIO_port_direction+0x3a>
 4d2:	85 34       	cpi	r24, 0x45	; 69
 4d4:	38 f4       	brcc	.+14     	; 0x4e4 <GPIO_port_direction+0x16>
 4d6:	82 34       	cpi	r24, 0x42	; 66
 4d8:	99 f0       	breq	.+38     	; 0x500 <GPIO_port_direction+0x32>
 4da:	83 34       	cpi	r24, 0x43	; 67
 4dc:	98 f4       	brcc	.+38     	; 0x504 <GPIO_port_direction+0x36>
 4de:	81 34       	cpi	r24, 0x41	; 65
 4e0:	a1 f4       	brne	.+40     	; 0x50a <GPIO_port_direction+0x3c>
 4e2:	0c c0       	rjmp	.+24     	; 0x4fc <GPIO_port_direction+0x2e>
 4e4:	82 36       	cpi	r24, 0x62	; 98
 4e6:	61 f0       	breq	.+24     	; 0x500 <GPIO_port_direction+0x32>
 4e8:	83 36       	cpi	r24, 0x63	; 99
 4ea:	18 f4       	brcc	.+6      	; 0x4f2 <GPIO_port_direction+0x24>
 4ec:	81 36       	cpi	r24, 0x61	; 97
 4ee:	69 f4       	brne	.+26     	; 0x50a <GPIO_port_direction+0x3c>
 4f0:	05 c0       	rjmp	.+10     	; 0x4fc <GPIO_port_direction+0x2e>
 4f2:	83 36       	cpi	r24, 0x63	; 99
 4f4:	39 f0       	breq	.+14     	; 0x504 <GPIO_port_direction+0x36>
 4f6:	84 36       	cpi	r24, 0x64	; 100
 4f8:	41 f4       	brne	.+16     	; 0x50a <GPIO_port_direction+0x3c>
 4fa:	06 c0       	rjmp	.+12     	; 0x508 <GPIO_port_direction+0x3a>
    {
        case 'A':
        case 'a':
            DDRA = DIR; // set direction of port A to the given DIR
 4fc:	6a bb       	out	0x1a, r22	; 26
        break;
 4fe:	08 95       	ret
        case 'B':
        case 'b':
            DDRB = DIR; // set direction of port B to the given DIR
 500:	67 bb       	out	0x17, r22	; 23
        break;
 502:	08 95       	ret
        case 'C':
        case 'c':
            DDRC = DIR; // set direction of port C to the given DIR
 504:	64 bb       	out	0x14, r22	; 20
        break;
 506:	08 95       	ret
        case 'D':
        case 'd':
            DDRD = DIR; // set direction of port D to the given DIR
 508:	61 bb       	out	0x11, r22	; 17
 50a:	08 95       	ret

0000050c <GPIO_port_write>:
} // end of GPIO_port_direction();


void GPIO_port_write(char PORT, uint8 DATA)
{
    switch(PORT)
 50c:	84 34       	cpi	r24, 0x44	; 68
 50e:	d9 f0       	breq	.+54     	; 0x546 <GPIO_port_write+0x3a>
 510:	85 34       	cpi	r24, 0x45	; 69
 512:	38 f4       	brcc	.+14     	; 0x522 <GPIO_port_write+0x16>
 514:	82 34       	cpi	r24, 0x42	; 66
 516:	99 f0       	breq	.+38     	; 0x53e <GPIO_port_write+0x32>
 518:	83 34       	cpi	r24, 0x43	; 67
 51a:	98 f4       	brcc	.+38     	; 0x542 <GPIO_port_write+0x36>
 51c:	81 34       	cpi	r24, 0x41	; 65
 51e:	a1 f4       	brne	.+40     	; 0x548 <GPIO_port_write+0x3c>
 520:	0c c0       	rjmp	.+24     	; 0x53a <GPIO_port_write+0x2e>
 522:	82 36       	cpi	r24, 0x62	; 98
 524:	61 f0       	breq	.+24     	; 0x53e <GPIO_port_write+0x32>
 526:	83 36       	cpi	r24, 0x63	; 99
 528:	18 f4       	brcc	.+6      	; 0x530 <GPIO_port_write+0x24>
 52a:	81 36       	cpi	r24, 0x61	; 97
 52c:	69 f4       	brne	.+26     	; 0x548 <GPIO_port_write+0x3c>
 52e:	05 c0       	rjmp	.+10     	; 0x53a <GPIO_port_write+0x2e>
 530:	83 36       	cpi	r24, 0x63	; 99
 532:	39 f0       	breq	.+14     	; 0x542 <GPIO_port_write+0x36>
 534:	84 36       	cpi	r24, 0x64	; 100
 536:	41 f4       	brne	.+16     	; 0x548 <GPIO_port_write+0x3c>
 538:	06 c0       	rjmp	.+12     	; 0x546 <GPIO_port_write+0x3a>
    {
        case 'A':
        case 'a':
            PORTA = DATA; // write these data on port A
 53a:	6b bb       	out	0x1b, r22	; 27
        break;
 53c:	08 95       	ret
        case 'B':
        case 'b':
            PORTB = DATA; // write these data on port B
 53e:	68 bb       	out	0x18, r22	; 24
        break;
 540:	08 95       	ret
        case 'C':
        case 'c':
            PORTC = DATA; // write these data on port C
 542:	65 bb       	out	0x15, r22	; 21
        break;
 544:	08 95       	ret
        case 'D':
        case 'd':
            PORTD = DATA; // write these data on port D
 546:	62 bb       	out	0x12, r22	; 18
 548:	08 95       	ret

0000054a <GPIO_port_read>:


uint8 GPIO_port_read(char PORT)
{
    uint8 read_port = 0;
    switch(PORT)
 54a:	84 34       	cpi	r24, 0x44	; 68
 54c:	d9 f0       	breq	.+54     	; 0x584 <GPIO_port_read+0x3a>
 54e:	85 34       	cpi	r24, 0x45	; 69
 550:	38 f4       	brcc	.+14     	; 0x560 <GPIO_port_read+0x16>
 552:	82 34       	cpi	r24, 0x42	; 66
 554:	99 f0       	breq	.+38     	; 0x57c <GPIO_port_read+0x32>
 556:	83 34       	cpi	r24, 0x43	; 67
 558:	98 f4       	brcc	.+38     	; 0x580 <GPIO_port_read+0x36>
 55a:	81 34       	cpi	r24, 0x41	; 65
 55c:	a9 f4       	brne	.+42     	; 0x588 <GPIO_port_read+0x3e>
 55e:	0c c0       	rjmp	.+24     	; 0x578 <GPIO_port_read+0x2e>
 560:	82 36       	cpi	r24, 0x62	; 98
 562:	61 f0       	breq	.+24     	; 0x57c <GPIO_port_read+0x32>
 564:	83 36       	cpi	r24, 0x63	; 99
 566:	18 f4       	brcc	.+6      	; 0x56e <GPIO_port_read+0x24>
 568:	81 36       	cpi	r24, 0x61	; 97
 56a:	71 f4       	brne	.+28     	; 0x588 <GPIO_port_read+0x3e>
 56c:	05 c0       	rjmp	.+10     	; 0x578 <GPIO_port_read+0x2e>
 56e:	83 36       	cpi	r24, 0x63	; 99
 570:	39 f0       	breq	.+14     	; 0x580 <GPIO_port_read+0x36>
 572:	84 36       	cpi	r24, 0x64	; 100
 574:	49 f4       	brne	.+18     	; 0x588 <GPIO_port_read+0x3e>
 576:	06 c0       	rjmp	.+12     	; 0x584 <GPIO_port_read+0x3a>
    {
        case 'A':
        case 'a':
            read_port = PINA; // read data from port A
 578:	89 b3       	in	r24, 0x19	; 25
        break;
 57a:	08 95       	ret
        case 'B':
        case 'b':
            read_port = PINB; // read data from port B
 57c:	86 b3       	in	r24, 0x16	; 22
        break;
 57e:	08 95       	ret
        case 'C':
        case 'c':
            read_port = PINC; // read data from port C
 580:	83 b3       	in	r24, 0x13	; 19
        break;
 582:	08 95       	ret
        case 'D':
        case 'd':
            read_port = PIND; // read data from port D
 584:	80 b3       	in	r24, 0x10	; 16
        break;
 586:	08 95       	ret
} // end of GPIO_port_write();


uint8 GPIO_port_read(char PORT)
{
    uint8 read_port = 0;
 588:	80 e0       	ldi	r24, 0x00	; 0
        break;
        default:
        break;
    } // end of switch(PORT);
    return read_port;
} // end of GPIO_port_read();
 58a:	08 95       	ret

0000058c <GPIO_pin_pull_up>:


void GPIO_pin_pull_up(char port_name, uint8 pin_number)
{
    switch(port_name)
 58c:	84 34       	cpi	r24, 0x44	; 68
 58e:	09 f4       	brne	.+2      	; 0x592 <GPIO_pin_pull_up+0x6>
 590:	57 c0       	rjmp	.+174    	; 0x640 <GPIO_pin_pull_up+0xb4>
 592:	85 34       	cpi	r24, 0x45	; 69
 594:	40 f4       	brcc	.+16     	; 0x5a6 <GPIO_pin_pull_up+0x1a>
 596:	82 34       	cpi	r24, 0x42	; 66
 598:	49 f1       	breq	.+82     	; 0x5ec <GPIO_pin_pull_up+0x60>
 59a:	83 34       	cpi	r24, 0x43	; 67
 59c:	e0 f5       	brcc	.+120    	; 0x616 <GPIO_pin_pull_up+0x8a>
 59e:	81 34       	cpi	r24, 0x41	; 65
 5a0:	09 f0       	breq	.+2      	; 0x5a4 <GPIO_pin_pull_up+0x18>
 5a2:	62 c0       	rjmp	.+196    	; 0x668 <GPIO_pin_pull_up+0xdc>
 5a4:	0e c0       	rjmp	.+28     	; 0x5c2 <GPIO_pin_pull_up+0x36>
 5a6:	82 36       	cpi	r24, 0x62	; 98
 5a8:	09 f1       	breq	.+66     	; 0x5ec <GPIO_pin_pull_up+0x60>
 5aa:	83 36       	cpi	r24, 0x63	; 99
 5ac:	20 f4       	brcc	.+8      	; 0x5b6 <GPIO_pin_pull_up+0x2a>
 5ae:	81 36       	cpi	r24, 0x61	; 97
 5b0:	09 f0       	breq	.+2      	; 0x5b4 <GPIO_pin_pull_up+0x28>
 5b2:	5a c0       	rjmp	.+180    	; 0x668 <GPIO_pin_pull_up+0xdc>
 5b4:	06 c0       	rjmp	.+12     	; 0x5c2 <GPIO_pin_pull_up+0x36>
 5b6:	83 36       	cpi	r24, 0x63	; 99
 5b8:	71 f1       	breq	.+92     	; 0x616 <GPIO_pin_pull_up+0x8a>
 5ba:	84 36       	cpi	r24, 0x64	; 100
 5bc:	09 f0       	breq	.+2      	; 0x5c0 <GPIO_pin_pull_up+0x34>
 5be:	54 c0       	rjmp	.+168    	; 0x668 <GPIO_pin_pull_up+0xdc>
 5c0:	3f c0       	rjmp	.+126    	; 0x640 <GPIO_pin_pull_up+0xb4>
    {
        case 'A':
        case 'a':
            CLR_BIT(DDRA,pin_number); //set pin_number of port_name as input
 5c2:	2a b3       	in	r18, 0x1a	; 26
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	ac 01       	movw	r20, r24
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <GPIO_pin_pull_up+0x44>
 5cc:	44 0f       	add	r20, r20
 5ce:	55 1f       	adc	r21, r21
 5d0:	6a 95       	dec	r22
 5d2:	e2 f7       	brpl	.-8      	; 0x5cc <GPIO_pin_pull_up+0x40>
 5d4:	ba 01       	movw	r22, r20
 5d6:	84 2f       	mov	r24, r20
 5d8:	80 95       	com	r24
 5da:	82 23       	and	r24, r18
 5dc:	8a bb       	out	0x1a, r24	; 26
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 5de:	80 b7       	in	r24, 0x30	; 48
 5e0:	8b 7f       	andi	r24, 0xFB	; 251
 5e2:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTA,pin_number); //set pin_number of port_name as high value
 5e4:	8b b3       	in	r24, 0x1b	; 27
 5e6:	68 2b       	or	r22, r24
 5e8:	6b bb       	out	0x1b, r22	; 27
        break;
 5ea:	08 95       	ret
        case 'B':
        case 'b':
            CLR_BIT(DDRB,pin_number); //set pin_number of port_name as input
 5ec:	27 b3       	in	r18, 0x17	; 23
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	ac 01       	movw	r20, r24
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <GPIO_pin_pull_up+0x6e>
 5f6:	44 0f       	add	r20, r20
 5f8:	55 1f       	adc	r21, r21
 5fa:	6a 95       	dec	r22
 5fc:	e2 f7       	brpl	.-8      	; 0x5f6 <GPIO_pin_pull_up+0x6a>
 5fe:	ba 01       	movw	r22, r20
 600:	84 2f       	mov	r24, r20
 602:	80 95       	com	r24
 604:	82 23       	and	r24, r18
 606:	87 bb       	out	0x17, r24	; 23
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 608:	80 b7       	in	r24, 0x30	; 48
 60a:	8b 7f       	andi	r24, 0xFB	; 251
 60c:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTB,pin_number); //set pin_number of port_name as high value
 60e:	88 b3       	in	r24, 0x18	; 24
 610:	68 2b       	or	r22, r24
 612:	68 bb       	out	0x18, r22	; 24
        break;
 614:	08 95       	ret
        case 'C':
        case 'c':
            CLR_BIT(DDRC,pin_number); //set pin_number of port_name as input
 616:	24 b3       	in	r18, 0x14	; 20
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	ac 01       	movw	r20, r24
 61e:	02 c0       	rjmp	.+4      	; 0x624 <GPIO_pin_pull_up+0x98>
 620:	44 0f       	add	r20, r20
 622:	55 1f       	adc	r21, r21
 624:	6a 95       	dec	r22
 626:	e2 f7       	brpl	.-8      	; 0x620 <GPIO_pin_pull_up+0x94>
 628:	ba 01       	movw	r22, r20
 62a:	84 2f       	mov	r24, r20
 62c:	80 95       	com	r24
 62e:	82 23       	and	r24, r18
 630:	84 bb       	out	0x14, r24	; 20
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 632:	80 b7       	in	r24, 0x30	; 48
 634:	8b 7f       	andi	r24, 0xFB	; 251
 636:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTC,pin_number); //set pin_number of port_name as high value
 638:	85 b3       	in	r24, 0x15	; 21
 63a:	68 2b       	or	r22, r24
 63c:	65 bb       	out	0x15, r22	; 21
        break;
 63e:	08 95       	ret
        case 'D':
        case 'd':
            CLR_BIT(DDRD,pin_number); //set pin_number of port_name as input
 640:	21 b3       	in	r18, 0x11	; 17
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	ac 01       	movw	r20, r24
 648:	02 c0       	rjmp	.+4      	; 0x64e <GPIO_pin_pull_up+0xc2>
 64a:	44 0f       	add	r20, r20
 64c:	55 1f       	adc	r21, r21
 64e:	6a 95       	dec	r22
 650:	e2 f7       	brpl	.-8      	; 0x64a <GPIO_pin_pull_up+0xbe>
 652:	ba 01       	movw	r22, r20
 654:	84 2f       	mov	r24, r20
 656:	80 95       	com	r24
 658:	82 23       	and	r24, r18
 65a:	81 bb       	out	0x11, r24	; 17
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 65c:	80 b7       	in	r24, 0x30	; 48
 65e:	8b 7f       	andi	r24, 0xFB	; 251
 660:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTD,pin_number); //set pin_number of port_name as high value
 662:	82 b3       	in	r24, 0x12	; 18
 664:	68 2b       	or	r22, r24
 666:	62 bb       	out	0x12, r22	; 18
 668:	08 95       	ret

0000066a <GPIO_port_write_high_nibble>:



void GPIO_port_write_high_nibble(char port_name, uint8 high_nibble)
{
    high_nibble <<= 4; //clear low_nibble bits in number
 66a:	62 95       	swap	r22
 66c:	60 7f       	andi	r22, 0xF0	; 240
    switch(port_name)
 66e:	84 34       	cpi	r24, 0x44	; 68
 670:	51 f1       	breq	.+84     	; 0x6c6 <GPIO_port_write_high_nibble+0x5c>
 672:	85 34       	cpi	r24, 0x45	; 69
 674:	38 f4       	brcc	.+14     	; 0x684 <GPIO_port_write_high_nibble+0x1a>
 676:	82 34       	cpi	r24, 0x42	; 66
 678:	c1 f0       	breq	.+48     	; 0x6aa <GPIO_port_write_high_nibble+0x40>
 67a:	83 34       	cpi	r24, 0x43	; 67
 67c:	e8 f4       	brcc	.+58     	; 0x6b8 <GPIO_port_write_high_nibble+0x4e>
 67e:	81 34       	cpi	r24, 0x41	; 65
 680:	41 f5       	brne	.+80     	; 0x6d2 <GPIO_port_write_high_nibble+0x68>
 682:	0c c0       	rjmp	.+24     	; 0x69c <GPIO_port_write_high_nibble+0x32>
 684:	82 36       	cpi	r24, 0x62	; 98
 686:	89 f0       	breq	.+34     	; 0x6aa <GPIO_port_write_high_nibble+0x40>
 688:	83 36       	cpi	r24, 0x63	; 99
 68a:	18 f4       	brcc	.+6      	; 0x692 <GPIO_port_write_high_nibble+0x28>
 68c:	81 36       	cpi	r24, 0x61	; 97
 68e:	09 f5       	brne	.+66     	; 0x6d2 <GPIO_port_write_high_nibble+0x68>
 690:	05 c0       	rjmp	.+10     	; 0x69c <GPIO_port_write_high_nibble+0x32>
 692:	83 36       	cpi	r24, 0x63	; 99
 694:	89 f0       	breq	.+34     	; 0x6b8 <GPIO_port_write_high_nibble+0x4e>
 696:	84 36       	cpi	r24, 0x64	; 100
 698:	e1 f4       	brne	.+56     	; 0x6d2 <GPIO_port_write_high_nibble+0x68>
 69a:	15 c0       	rjmp	.+42     	; 0x6c6 <GPIO_port_write_high_nibble+0x5c>
    {
        case 'A':
        case 'a':
            PORTA &= 0x0f;
 69c:	8b b3       	in	r24, 0x1b	; 27
 69e:	8f 70       	andi	r24, 0x0F	; 15
 6a0:	8b bb       	out	0x1b, r24	; 27
            PORTA |= high_nibble;
 6a2:	8b b3       	in	r24, 0x1b	; 27
 6a4:	68 2b       	or	r22, r24
 6a6:	6b bb       	out	0x1b, r22	; 27
        break;
 6a8:	08 95       	ret
        case 'B':
        case 'b':
            PORTB &= 0x0f;
 6aa:	88 b3       	in	r24, 0x18	; 24
 6ac:	8f 70       	andi	r24, 0x0F	; 15
 6ae:	88 bb       	out	0x18, r24	; 24
            PORTB |= high_nibble;
 6b0:	88 b3       	in	r24, 0x18	; 24
 6b2:	68 2b       	or	r22, r24
 6b4:	68 bb       	out	0x18, r22	; 24
        break;
 6b6:	08 95       	ret
        case 'C':
        case 'c':
            PORTC &= 0x0f;
 6b8:	85 b3       	in	r24, 0x15	; 21
 6ba:	8f 70       	andi	r24, 0x0F	; 15
 6bc:	85 bb       	out	0x15, r24	; 21
            PORTC |= high_nibble;
 6be:	85 b3       	in	r24, 0x15	; 21
 6c0:	68 2b       	or	r22, r24
 6c2:	65 bb       	out	0x15, r22	; 21
        break;
 6c4:	08 95       	ret
        case 'D':
        case 'd':
            PORTD &= 0x0f;
 6c6:	82 b3       	in	r24, 0x12	; 18
 6c8:	8f 70       	andi	r24, 0x0F	; 15
 6ca:	82 bb       	out	0x12, r24	; 18
            PORTD |= high_nibble;
 6cc:	82 b3       	in	r24, 0x12	; 18
 6ce:	68 2b       	or	r22, r24
 6d0:	62 bb       	out	0x12, r22	; 18
 6d2:	08 95       	ret

000006d4 <GPIO_port_write_low_nibble>:
    } // end of switch(port_name);
}

void GPIO_port_write_low_nibble(char port_name, uint8 low_nibble)
{
    low_nibble &= 0x0f; //clear high_nibble bits in number
 6d4:	6f 70       	andi	r22, 0x0F	; 15
    switch(port_name)
 6d6:	84 34       	cpi	r24, 0x44	; 68
 6d8:	51 f1       	breq	.+84     	; 0x72e <GPIO_port_write_low_nibble+0x5a>
 6da:	85 34       	cpi	r24, 0x45	; 69
 6dc:	38 f4       	brcc	.+14     	; 0x6ec <GPIO_port_write_low_nibble+0x18>
 6de:	82 34       	cpi	r24, 0x42	; 66
 6e0:	c1 f0       	breq	.+48     	; 0x712 <GPIO_port_write_low_nibble+0x3e>
 6e2:	83 34       	cpi	r24, 0x43	; 67
 6e4:	e8 f4       	brcc	.+58     	; 0x720 <GPIO_port_write_low_nibble+0x4c>
 6e6:	81 34       	cpi	r24, 0x41	; 65
 6e8:	41 f5       	brne	.+80     	; 0x73a <GPIO_port_write_low_nibble+0x66>
 6ea:	0c c0       	rjmp	.+24     	; 0x704 <GPIO_port_write_low_nibble+0x30>
 6ec:	82 36       	cpi	r24, 0x62	; 98
 6ee:	89 f0       	breq	.+34     	; 0x712 <GPIO_port_write_low_nibble+0x3e>
 6f0:	83 36       	cpi	r24, 0x63	; 99
 6f2:	18 f4       	brcc	.+6      	; 0x6fa <GPIO_port_write_low_nibble+0x26>
 6f4:	81 36       	cpi	r24, 0x61	; 97
 6f6:	09 f5       	brne	.+66     	; 0x73a <GPIO_port_write_low_nibble+0x66>
 6f8:	05 c0       	rjmp	.+10     	; 0x704 <GPIO_port_write_low_nibble+0x30>
 6fa:	83 36       	cpi	r24, 0x63	; 99
 6fc:	89 f0       	breq	.+34     	; 0x720 <GPIO_port_write_low_nibble+0x4c>
 6fe:	84 36       	cpi	r24, 0x64	; 100
 700:	e1 f4       	brne	.+56     	; 0x73a <GPIO_port_write_low_nibble+0x66>
 702:	15 c0       	rjmp	.+42     	; 0x72e <GPIO_port_write_low_nibble+0x5a>
    {
        case 'A':
        case 'a':
            PORTA &= 0xf0;
 704:	8b b3       	in	r24, 0x1b	; 27
 706:	80 7f       	andi	r24, 0xF0	; 240
 708:	8b bb       	out	0x1b, r24	; 27
            PORTA |= low_nibble;
 70a:	8b b3       	in	r24, 0x1b	; 27
 70c:	68 2b       	or	r22, r24
 70e:	6b bb       	out	0x1b, r22	; 27
        break;
 710:	08 95       	ret
        case 'B':
        case 'b':
            PORTB &= 0xf0;
 712:	88 b3       	in	r24, 0x18	; 24
 714:	80 7f       	andi	r24, 0xF0	; 240
 716:	88 bb       	out	0x18, r24	; 24
            PORTB |= low_nibble;
 718:	88 b3       	in	r24, 0x18	; 24
 71a:	68 2b       	or	r22, r24
 71c:	68 bb       	out	0x18, r22	; 24
        break;
 71e:	08 95       	ret
        case 'C':
        case 'c':
            PORTC &= 0xf0;
 720:	85 b3       	in	r24, 0x15	; 21
 722:	80 7f       	andi	r24, 0xF0	; 240
 724:	85 bb       	out	0x15, r24	; 21
            PORTC |= low_nibble;
 726:	85 b3       	in	r24, 0x15	; 21
 728:	68 2b       	or	r22, r24
 72a:	65 bb       	out	0x15, r22	; 21
        break;
 72c:	08 95       	ret
        case 'D':
        case 'd':
            PORTD &= 0xf0;
 72e:	82 b3       	in	r24, 0x12	; 18
 730:	80 7f       	andi	r24, 0xF0	; 240
 732:	82 bb       	out	0x12, r24	; 18
            PORTD |= low_nibble;
 734:	82 b3       	in	r24, 0x12	; 18
 736:	68 2b       	or	r22, r24
 738:	62 bb       	out	0x12, r22	; 18
 73a:	08 95       	ret

0000073c <LCD_send_pulse>:

#include "LCD.h"

static void LCD_send_pulse(void)
{
	GPIO_pin_write(EN_PORT,EN,1);
 73c:	82 e4       	ldi	r24, 0x42	; 66
 73e:	60 e0       	ldi	r22, 0x00	; 0
 740:	41 e0       	ldi	r20, 0x01	; 1
 742:	0e 94 48 01 	call	0x290	; 0x290 <GPIO_pin_write>
 746:	8f e9       	ldi	r24, 0x9F	; 159
 748:	9f e0       	ldi	r25, 0x0F	; 15
 74a:	01 97       	sbiw	r24, 0x01	; 1
 74c:	f1 f7       	brne	.-4      	; 0x74a <LCD_send_pulse+0xe>
 74e:	00 c0       	rjmp	.+0      	; 0x750 <LCD_send_pulse+0x14>
 750:	00 00       	nop
	_delay_ms(2);
	GPIO_pin_write(EN_PORT,EN,0);
 752:	82 e4       	ldi	r24, 0x42	; 66
 754:	60 e0       	ldi	r22, 0x00	; 0
 756:	40 e0       	ldi	r20, 0x00	; 0
 758:	0e 94 48 01 	call	0x290	; 0x290 <GPIO_pin_write>
 75c:	8f ec       	ldi	r24, 0xCF	; 207
 75e:	97 e0       	ldi	r25, 0x07	; 7
 760:	01 97       	sbiw	r24, 0x01	; 1
 762:	f1 f7       	brne	.-4      	; 0x760 <LCD_send_pulse+0x24>
 764:	00 c0       	rjmp	.+0      	; 0x766 <LCD_send_pulse+0x2a>
 766:	00 00       	nop
	_delay_ms(1);	
}
 768:	08 95       	ret

0000076a <LCD_send_command>:


void LCD_send_command(uint8 command)
{
 76a:	68 2f       	mov	r22, r24
	GPIO_pin_write(RS_PORT,RS,0); //select command register
	LCD_send_pulse();
	
	#elif defined eight_bits_mode
	
	GPIO_port_write(LCD_PORT,command);
 76c:	81 e4       	ldi	r24, 0x41	; 65
 76e:	0e 94 86 02 	call	0x50c	; 0x50c <GPIO_port_write>
	GPIO_pin_write(RS_PORT,RS,0);
 772:	82 e4       	ldi	r24, 0x42	; 66
 774:	61 e0       	ldi	r22, 0x01	; 1
 776:	40 e0       	ldi	r20, 0x00	; 0
 778:	0e 94 48 01 	call	0x290	; 0x290 <GPIO_pin_write>
	LCD_send_pulse();
 77c:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_send_pulse>
	
	#endif
}
 780:	08 95       	ret

00000782 <LCD_clear_screen>:



void LCD_clear_screen(void)
{
	LCD_send_command(CLEAR_SCREEN);
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_send_command>
 788:	8f e9       	ldi	r24, 0x9F	; 159
 78a:	9f e0       	ldi	r25, 0x0F	; 15
 78c:	01 97       	sbiw	r24, 0x01	; 1
 78e:	f1 f7       	brne	.-4      	; 0x78c <LCD_clear_screen+0xa>
 790:	00 c0       	rjmp	.+0      	; 0x792 <LCD_clear_screen+0x10>
 792:	00 00       	nop
	_delay_ms(2);
}
 794:	08 95       	ret

00000796 <LCD_return_home>:

void LCD_return_home(void)
{
	LCD_send_command(RETURN_HOME);
 796:	82 e0       	ldi	r24, 0x02	; 2
 798:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_send_command>
 79c:	8f e9       	ldi	r24, 0x9F	; 159
 79e:	9f e0       	ldi	r25, 0x0F	; 15
 7a0:	01 97       	sbiw	r24, 0x01	; 1
 7a2:	f1 f7       	brne	.-4      	; 0x7a0 <LCD_return_home+0xa>
 7a4:	00 c0       	rjmp	.+0      	; 0x7a6 <LCD_return_home+0x10>
 7a6:	00 00       	nop
	_delay_ms(2);
}
 7a8:	08 95       	ret

000007aa <LCD_init>:
 7aa:	8f ef       	ldi	r24, 0xFF	; 255
 7ac:	99 ef       	ldi	r25, 0xF9	; 249
 7ae:	a0 e0       	ldi	r26, 0x00	; 0
 7b0:	81 50       	subi	r24, 0x01	; 1
 7b2:	90 40       	sbci	r25, 0x00	; 0
 7b4:	a0 40       	sbci	r26, 0x00	; 0
 7b6:	e1 f7       	brne	.-8      	; 0x7b0 <LCD_init+0x6>
 7b8:	00 c0       	rjmp	.+0      	; 0x7ba <LCD_init+0x10>
 7ba:	00 00       	nop
	GPIO_pin_direction(RS_PORT,RS,1);//set RS pin to output pin
	//send command to inti LCD:
	LCD_send_command(FOUR_BITS);
	#elif defined eight_bits_mode
	//set connection pins:
	GPIO_port_direction(LCD_PORT,1);
 7bc:	81 e4       	ldi	r24, 0x41	; 65
 7be:	61 e0       	ldi	r22, 0x01	; 1
 7c0:	0e 94 67 02 	call	0x4ce	; 0x4ce <GPIO_port_direction>
	GPIO_pin_direction(EN_PORT,EN,1);//set EN pin to output pin
 7c4:	82 e4       	ldi	r24, 0x42	; 66
 7c6:	60 e0       	ldi	r22, 0x00	; 0
 7c8:	41 e0       	ldi	r20, 0x01	; 1
 7ca:	0e 94 b7 00 	call	0x16e	; 0x16e <GPIO_pin_direction>
	GPIO_pin_direction(RS_PORT,RS,1);//set RS pin to output pin
 7ce:	82 e4       	ldi	r24, 0x42	; 66
 7d0:	61 e0       	ldi	r22, 0x01	; 1
 7d2:	41 e0       	ldi	r20, 0x01	; 1
 7d4:	0e 94 b7 00 	call	0x16e	; 0x16e <GPIO_pin_direction>
	//send command to init LCD:
	LCD_send_command(EIGHT_BITS);
 7d8:	88 e3       	ldi	r24, 0x38	; 56
 7da:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_send_command>
	#endif
	LCD_return_home();
 7de:	0e 94 cb 03 	call	0x796	; 0x796 <LCD_return_home>
	LCD_send_command(DISPLAY_ON_CURSOR_OFF);
 7e2:	8c e0       	ldi	r24, 0x0C	; 12
 7e4:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_send_command>
	LCD_clear_screen();
 7e8:	0e 94 c1 03 	call	0x782	; 0x782 <LCD_clear_screen>
	LCD_send_command(ENGLISH_ENTRY);
 7ec:	86 e0       	ldi	r24, 0x06	; 6
 7ee:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_send_command>
}
 7f2:	08 95       	ret

000007f4 <LCD_send_character>:
	LCD_send_command(RETURN_HOME);
	_delay_ms(2);
}

void LCD_send_character(char character)
{
 7f4:	cf 93       	push	r28
 7f6:	c8 2f       	mov	r28, r24
	GPIO_port_write_low_nibble(LCD_PORT,character);
	LCD_send_pulse();
	
	#elif defined eight_bits_mode
	
	GPIO_pin_write(RS_PORT,RS,1);
 7f8:	82 e4       	ldi	r24, 0x42	; 66
 7fa:	61 e0       	ldi	r22, 0x01	; 1
 7fc:	41 e0       	ldi	r20, 0x01	; 1
 7fe:	0e 94 48 01 	call	0x290	; 0x290 <GPIO_pin_write>
	GPIO_port_write(LCD_PORT,character);
 802:	81 e4       	ldi	r24, 0x41	; 65
 804:	6c 2f       	mov	r22, r28
 806:	0e 94 86 02 	call	0x50c	; 0x50c <GPIO_port_write>
	LCD_send_pulse();
 80a:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_send_pulse>
	
	#endif
	
}
 80e:	cf 91       	pop	r28
 810:	08 95       	ret

00000812 <LCD_send_string>:

void LCD_send_string(char* character)
{
 812:	cf 93       	push	r28
 814:	df 93       	push	r29
 816:	ec 01       	movw	r28, r24
	while ('\0' != *character)
 818:	88 81       	ld	r24, Y
 81a:	88 23       	and	r24, r24
 81c:	31 f0       	breq	.+12     	; 0x82a <LCD_send_string+0x18>
	
	#endif
	
}

void LCD_send_string(char* character)
 81e:	21 96       	adiw	r28, 0x01	; 1
{
	while ('\0' != *character)
	{
		LCD_send_character(*character);
 820:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_send_character>
	
}

void LCD_send_string(char* character)
{
	while ('\0' != *character)
 824:	89 91       	ld	r24, Y+
 826:	88 23       	and	r24, r24
 828:	d9 f7       	brne	.-10     	; 0x820 <LCD_send_string+0xe>
	{
		LCD_send_character(*character);
		character += 1;
	}
}
 82a:	df 91       	pop	r29
 82c:	cf 91       	pop	r28
 82e:	08 95       	ret

00000830 <LCD_move_cursor>:
void LCD_move_cursor(uint8 row, uint8 column)
{
	uint8 r = 0;
	uint8 c = 0;
	
	if( (row>0) && (row<5) && (column>0) && (column<21) )
 830:	98 2f       	mov	r25, r24
 832:	91 50       	subi	r25, 0x01	; 1
 834:	94 30       	cpi	r25, 0x04	; 4
 836:	b0 f4       	brcc	.+44     	; 0x864 <__stack+0x5>
 838:	66 23       	and	r22, r22
 83a:	b1 f0       	breq	.+44     	; 0x868 <__stack+0x9>
 83c:	65 31       	cpi	r22, 0x15	; 21
 83e:	b0 f4       	brcc	.+44     	; 0x86c <__stack+0xd>
	{
		if (1 == row)
 840:	81 30       	cpi	r24, 0x01	; 1
 842:	19 f4       	brne	.+6      	; 0x84a <LCD_move_cursor+0x1a>
		{
			c = (0x80 + column - 1);
 844:	86 2f       	mov	r24, r22
 846:	81 58       	subi	r24, 0x81	; 129
 848:	12 c0       	rjmp	.+36     	; 0x86e <__stack+0xf>
		}
		else if (2 == row)
 84a:	82 30       	cpi	r24, 0x02	; 2
 84c:	19 f4       	brne	.+6      	; 0x854 <LCD_move_cursor+0x24>
		{
			c = (0xC0 + column - 1);
 84e:	86 2f       	mov	r24, r22
 850:	81 54       	subi	r24, 0x41	; 65
 852:	0d c0       	rjmp	.+26     	; 0x86e <__stack+0xf>
		}
		else if (3 == row)
 854:	83 30       	cpi	r24, 0x03	; 3
 856:	19 f4       	brne	.+6      	; 0x85e <LCD_move_cursor+0x2e>
		{
			c = (0x90 + column - 1);
 858:	86 2f       	mov	r24, r22
 85a:	81 57       	subi	r24, 0x71	; 113
 85c:	08 c0       	rjmp	.+16     	; 0x86e <__stack+0xf>
		}
		else
		{
			c = (0xD0 + column - 1);
 85e:	86 2f       	mov	r24, r22
 860:	81 53       	subi	r24, 0x31	; 49
 862:	05 c0       	rjmp	.+10     	; 0x86e <__stack+0xf>
		}
	}
	else
	{
		c = 0x80;
 864:	80 e8       	ldi	r24, 0x80	; 128
 866:	03 c0       	rjmp	.+6      	; 0x86e <__stack+0xf>
 868:	80 e8       	ldi	r24, 0x80	; 128
 86a:	01 c0       	rjmp	.+2      	; 0x86e <__stack+0xf>
 86c:	80 e8       	ldi	r24, 0x80	; 128
	}
	LCD_send_command(c);
 86e:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_send_command>
 872:	08 95       	ret

00000874 <_exit>:
 874:	f8 94       	cli

00000876 <__stop_program>:
 876:	ff cf       	rjmp	.-2      	; 0x876 <__stop_program>
