
18-Print_keypad_press_on_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000008c6  0000093a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000094c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00001018  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  000010a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b37  00000000  00000000  00001180  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000412  00000000  00000000  00001cb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000070a  00000000  00000000  000020c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001cc  00000000  00000000  000027d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000339  00000000  00000000  000029a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000812  00000000  00000000  00002cd9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ec       	ldi	r30, 0xC6	; 198
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
/*============================================================*/

int main(void)
{
	char key_value = '\0';
	keypad_init();
  92:	0e 94 49 03 	call	0x692	; 0x692 <keypad_init>
	LCD_init();
  96:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <LCD_init>
	
    while(1)
    {
        key_value = keypad_check_press();
  9a:	0e 94 6e 03 	call	0x6dc	; 0x6dc <keypad_check_press>
		if (0xff != key_value)
  9e:	8f 3f       	cpi	r24, 0xFF	; 255
  a0:	e1 f3       	breq	.-8      	; 0x9a <main+0x8>
		{
			if ((char)'c' == (char) key_value)
  a2:	83 36       	cpi	r24, 0x63	; 99
  a4:	19 f4       	brne	.+6      	; 0xac <main+0x1a>
			{
				LCD_clear_screen();
  a6:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <LCD_clear_screen>
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <main+0x1e>
			}
			else
			{
				LCD_send_character(key_value);
  ac:	0e 94 21 04 	call	0x842	; 0x842 <LCD_send_character>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	91 ee       	ldi	r25, 0xE1	; 225
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	81 50       	subi	r24, 0x01	; 1
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	a0 40       	sbci	r26, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x24>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x2e>
  c0:	00 00       	nop
  c2:	eb cf       	rjmp	.-42     	; 0x9a <main+0x8>

000000c4 <GPIO_pin_direction>:
#include "Atmega_GPIO.h"

void GPIO_pin_direction(char PORT, uint8 BIT, uint8 DIR)
{
    switch(PORT)
  c4:	84 34       	cpi	r24, 0x44	; 68
  c6:	09 f4       	brne	.+2      	; 0xca <GPIO_pin_direction+0x6>
  c8:	71 c0       	rjmp	.+226    	; 0x1ac <GPIO_pin_direction+0xe8>
  ca:	85 34       	cpi	r24, 0x45	; 69
  cc:	48 f4       	brcc	.+18     	; 0xe0 <GPIO_pin_direction+0x1c>
  ce:	82 34       	cpi	r24, 0x42	; 66
  d0:	99 f1       	breq	.+102    	; 0x138 <GPIO_pin_direction+0x74>
  d2:	83 34       	cpi	r24, 0x43	; 67
  d4:	08 f0       	brcs	.+2      	; 0xd8 <GPIO_pin_direction+0x14>
  d6:	4d c0       	rjmp	.+154    	; 0x172 <GPIO_pin_direction+0xae>
  d8:	81 34       	cpi	r24, 0x41	; 65
  da:	09 f0       	breq	.+2      	; 0xde <GPIO_pin_direction+0x1a>
  dc:	83 c0       	rjmp	.+262    	; 0x1e4 <GPIO_pin_direction+0x120>
  de:	0f c0       	rjmp	.+30     	; 0xfe <GPIO_pin_direction+0x3a>
  e0:	82 36       	cpi	r24, 0x62	; 98
  e2:	51 f1       	breq	.+84     	; 0x138 <GPIO_pin_direction+0x74>
  e4:	83 36       	cpi	r24, 0x63	; 99
  e6:	20 f4       	brcc	.+8      	; 0xf0 <GPIO_pin_direction+0x2c>
  e8:	81 36       	cpi	r24, 0x61	; 97
  ea:	09 f0       	breq	.+2      	; 0xee <GPIO_pin_direction+0x2a>
  ec:	7b c0       	rjmp	.+246    	; 0x1e4 <GPIO_pin_direction+0x120>
  ee:	07 c0       	rjmp	.+14     	; 0xfe <GPIO_pin_direction+0x3a>
  f0:	83 36       	cpi	r24, 0x63	; 99
  f2:	09 f4       	brne	.+2      	; 0xf6 <GPIO_pin_direction+0x32>
  f4:	3e c0       	rjmp	.+124    	; 0x172 <GPIO_pin_direction+0xae>
  f6:	84 36       	cpi	r24, 0x64	; 100
  f8:	09 f0       	breq	.+2      	; 0xfc <GPIO_pin_direction+0x38>
  fa:	74 c0       	rjmp	.+232    	; 0x1e4 <GPIO_pin_direction+0x120>
  fc:	57 c0       	rjmp	.+174    	; 0x1ac <GPIO_pin_direction+0xe8>
    {
        case 'A':
        case 'a':
            if(1 == DIR)
  fe:	41 30       	cpi	r20, 0x01	; 1
 100:	69 f4       	brne	.+26     	; 0x11c <GPIO_pin_direction+0x58>
            {
                SET_BIT(DDRA, BIT); //set direction of this pin in port A as output
 102:	2a b3       	in	r18, 0x1a	; 26
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	ac 01       	movw	r20, r24
 10a:	02 c0       	rjmp	.+4      	; 0x110 <GPIO_pin_direction+0x4c>
 10c:	44 0f       	add	r20, r20
 10e:	55 1f       	adc	r21, r21
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <GPIO_pin_direction+0x48>
 114:	ba 01       	movw	r22, r20
 116:	62 2b       	or	r22, r18
 118:	6a bb       	out	0x1a, r22	; 26
 11a:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRA, BIT); //set direction of this pin in port A as input
 11c:	2a b3       	in	r18, 0x1a	; 26
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	ac 01       	movw	r20, r24
 124:	02 c0       	rjmp	.+4      	; 0x12a <GPIO_pin_direction+0x66>
 126:	44 0f       	add	r20, r20
 128:	55 1f       	adc	r21, r21
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <GPIO_pin_direction+0x62>
 12e:	ba 01       	movw	r22, r20
 130:	60 95       	com	r22
 132:	62 23       	and	r22, r18
 134:	6a bb       	out	0x1a, r22	; 26
 136:	08 95       	ret
            }
        break;
        case 'B':
        case 'b':
            if(1 == DIR)
 138:	41 30       	cpi	r20, 0x01	; 1
 13a:	69 f4       	brne	.+26     	; 0x156 <GPIO_pin_direction+0x92>
            {
                SET_BIT(DDRB, BIT); //set direction of this pin in port B as output
 13c:	27 b3       	in	r18, 0x17	; 23
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	ac 01       	movw	r20, r24
 144:	02 c0       	rjmp	.+4      	; 0x14a <GPIO_pin_direction+0x86>
 146:	44 0f       	add	r20, r20
 148:	55 1f       	adc	r21, r21
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <GPIO_pin_direction+0x82>
 14e:	ba 01       	movw	r22, r20
 150:	62 2b       	or	r22, r18
 152:	67 bb       	out	0x17, r22	; 23
 154:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRB, BIT); //set direction of this pin in port B as input
 156:	27 b3       	in	r18, 0x17	; 23
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	ac 01       	movw	r20, r24
 15e:	02 c0       	rjmp	.+4      	; 0x164 <GPIO_pin_direction+0xa0>
 160:	44 0f       	add	r20, r20
 162:	55 1f       	adc	r21, r21
 164:	6a 95       	dec	r22
 166:	e2 f7       	brpl	.-8      	; 0x160 <GPIO_pin_direction+0x9c>
 168:	ba 01       	movw	r22, r20
 16a:	60 95       	com	r22
 16c:	62 23       	and	r22, r18
 16e:	67 bb       	out	0x17, r22	; 23
 170:	08 95       	ret
            }
        break;
        case 'C':
        case 'c':
            if(1 == DIR)
 172:	41 30       	cpi	r20, 0x01	; 1
 174:	69 f4       	brne	.+26     	; 0x190 <GPIO_pin_direction+0xcc>
            {
                SET_BIT(DDRC, BIT); //set direction of this pin in port B as output
 176:	24 b3       	in	r18, 0x14	; 20
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	ac 01       	movw	r20, r24
 17e:	02 c0       	rjmp	.+4      	; 0x184 <GPIO_pin_direction+0xc0>
 180:	44 0f       	add	r20, r20
 182:	55 1f       	adc	r21, r21
 184:	6a 95       	dec	r22
 186:	e2 f7       	brpl	.-8      	; 0x180 <GPIO_pin_direction+0xbc>
 188:	ba 01       	movw	r22, r20
 18a:	62 2b       	or	r22, r18
 18c:	64 bb       	out	0x14, r22	; 20
 18e:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRC, BIT); //set direction of this pin in port B as input
 190:	24 b3       	in	r18, 0x14	; 20
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	ac 01       	movw	r20, r24
 198:	02 c0       	rjmp	.+4      	; 0x19e <GPIO_pin_direction+0xda>
 19a:	44 0f       	add	r20, r20
 19c:	55 1f       	adc	r21, r21
 19e:	6a 95       	dec	r22
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <GPIO_pin_direction+0xd6>
 1a2:	ba 01       	movw	r22, r20
 1a4:	60 95       	com	r22
 1a6:	62 23       	and	r22, r18
 1a8:	64 bb       	out	0x14, r22	; 20
 1aa:	08 95       	ret
            }
        break;
        case 'D':
        case 'd':
            if(1 == DIR)
 1ac:	41 30       	cpi	r20, 0x01	; 1
 1ae:	69 f4       	brne	.+26     	; 0x1ca <GPIO_pin_direction+0x106>
            {
                SET_BIT(DDRD, BIT); //set direction of this pin in port C as output
 1b0:	21 b3       	in	r18, 0x11	; 17
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	ac 01       	movw	r20, r24
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <GPIO_pin_direction+0xfa>
 1ba:	44 0f       	add	r20, r20
 1bc:	55 1f       	adc	r21, r21
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <GPIO_pin_direction+0xf6>
 1c2:	ba 01       	movw	r22, r20
 1c4:	62 2b       	or	r22, r18
 1c6:	61 bb       	out	0x11, r22	; 17
 1c8:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRD, BIT); //set direction of this pin in port C as input
 1ca:	21 b3       	in	r18, 0x11	; 17
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	ac 01       	movw	r20, r24
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <GPIO_pin_direction+0x114>
 1d4:	44 0f       	add	r20, r20
 1d6:	55 1f       	adc	r21, r21
 1d8:	6a 95       	dec	r22
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <GPIO_pin_direction+0x110>
 1dc:	ba 01       	movw	r22, r20
 1de:	60 95       	com	r22
 1e0:	62 23       	and	r22, r18
 1e2:	61 bb       	out	0x11, r22	; 17
 1e4:	08 95       	ret

000001e6 <GPIO_pin_write>:
} //end of  GPIO_pin_direction();


void GPIO_pin_write(char PORT, uint8 BIT, uint8 DATA)
{
    switch(PORT)
 1e6:	84 34       	cpi	r24, 0x44	; 68
 1e8:	09 f4       	brne	.+2      	; 0x1ec <GPIO_pin_write+0x6>
 1ea:	71 c0       	rjmp	.+226    	; 0x2ce <GPIO_pin_write+0xe8>
 1ec:	85 34       	cpi	r24, 0x45	; 69
 1ee:	48 f4       	brcc	.+18     	; 0x202 <GPIO_pin_write+0x1c>
 1f0:	82 34       	cpi	r24, 0x42	; 66
 1f2:	99 f1       	breq	.+102    	; 0x25a <GPIO_pin_write+0x74>
 1f4:	83 34       	cpi	r24, 0x43	; 67
 1f6:	08 f0       	brcs	.+2      	; 0x1fa <GPIO_pin_write+0x14>
 1f8:	4d c0       	rjmp	.+154    	; 0x294 <GPIO_pin_write+0xae>
 1fa:	81 34       	cpi	r24, 0x41	; 65
 1fc:	09 f0       	breq	.+2      	; 0x200 <GPIO_pin_write+0x1a>
 1fe:	83 c0       	rjmp	.+262    	; 0x306 <GPIO_pin_write+0x120>
 200:	0f c0       	rjmp	.+30     	; 0x220 <GPIO_pin_write+0x3a>
 202:	82 36       	cpi	r24, 0x62	; 98
 204:	51 f1       	breq	.+84     	; 0x25a <GPIO_pin_write+0x74>
 206:	83 36       	cpi	r24, 0x63	; 99
 208:	20 f4       	brcc	.+8      	; 0x212 <GPIO_pin_write+0x2c>
 20a:	81 36       	cpi	r24, 0x61	; 97
 20c:	09 f0       	breq	.+2      	; 0x210 <GPIO_pin_write+0x2a>
 20e:	7b c0       	rjmp	.+246    	; 0x306 <GPIO_pin_write+0x120>
 210:	07 c0       	rjmp	.+14     	; 0x220 <GPIO_pin_write+0x3a>
 212:	83 36       	cpi	r24, 0x63	; 99
 214:	09 f4       	brne	.+2      	; 0x218 <GPIO_pin_write+0x32>
 216:	3e c0       	rjmp	.+124    	; 0x294 <GPIO_pin_write+0xae>
 218:	84 36       	cpi	r24, 0x64	; 100
 21a:	09 f0       	breq	.+2      	; 0x21e <GPIO_pin_write+0x38>
 21c:	74 c0       	rjmp	.+232    	; 0x306 <GPIO_pin_write+0x120>
 21e:	57 c0       	rjmp	.+174    	; 0x2ce <GPIO_pin_write+0xe8>
    {
        case 'A':
        case 'a':
            if(1 == DATA)
 220:	41 30       	cpi	r20, 0x01	; 1
 222:	69 f4       	brne	.+26     	; 0x23e <GPIO_pin_write+0x58>
            {
                SET_BIT(PORTA, BIT); //set output value of this pin in port A to 1
 224:	2b b3       	in	r18, 0x1b	; 27
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	ac 01       	movw	r20, r24
 22c:	02 c0       	rjmp	.+4      	; 0x232 <GPIO_pin_write+0x4c>
 22e:	44 0f       	add	r20, r20
 230:	55 1f       	adc	r21, r21
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <GPIO_pin_write+0x48>
 236:	ba 01       	movw	r22, r20
 238:	62 2b       	or	r22, r18
 23a:	6b bb       	out	0x1b, r22	; 27
 23c:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTA, BIT); //set output value of this pin in port A to 0
 23e:	2b b3       	in	r18, 0x1b	; 27
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	ac 01       	movw	r20, r24
 246:	02 c0       	rjmp	.+4      	; 0x24c <GPIO_pin_write+0x66>
 248:	44 0f       	add	r20, r20
 24a:	55 1f       	adc	r21, r21
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <GPIO_pin_write+0x62>
 250:	ba 01       	movw	r22, r20
 252:	60 95       	com	r22
 254:	62 23       	and	r22, r18
 256:	6b bb       	out	0x1b, r22	; 27
 258:	08 95       	ret
            }
        break;
        case 'B':
        case 'b':
            if(1 == DATA)
 25a:	41 30       	cpi	r20, 0x01	; 1
 25c:	69 f4       	brne	.+26     	; 0x278 <GPIO_pin_write+0x92>
            {
                SET_BIT(PORTB, BIT); //set output value of this pin in port B to 1
 25e:	28 b3       	in	r18, 0x18	; 24
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	ac 01       	movw	r20, r24
 266:	02 c0       	rjmp	.+4      	; 0x26c <GPIO_pin_write+0x86>
 268:	44 0f       	add	r20, r20
 26a:	55 1f       	adc	r21, r21
 26c:	6a 95       	dec	r22
 26e:	e2 f7       	brpl	.-8      	; 0x268 <GPIO_pin_write+0x82>
 270:	ba 01       	movw	r22, r20
 272:	62 2b       	or	r22, r18
 274:	68 bb       	out	0x18, r22	; 24
 276:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTB, BIT); //set output value of this pin in port B to 0
 278:	28 b3       	in	r18, 0x18	; 24
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	ac 01       	movw	r20, r24
 280:	02 c0       	rjmp	.+4      	; 0x286 <GPIO_pin_write+0xa0>
 282:	44 0f       	add	r20, r20
 284:	55 1f       	adc	r21, r21
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <GPIO_pin_write+0x9c>
 28a:	ba 01       	movw	r22, r20
 28c:	60 95       	com	r22
 28e:	62 23       	and	r22, r18
 290:	68 bb       	out	0x18, r22	; 24
 292:	08 95       	ret
            }
        break;
        case 'C':
        case 'c':
            if(1 == DATA)
 294:	41 30       	cpi	r20, 0x01	; 1
 296:	69 f4       	brne	.+26     	; 0x2b2 <GPIO_pin_write+0xcc>
            {
                SET_BIT(PORTC, BIT); //set output value of this pin in port C to 1
 298:	25 b3       	in	r18, 0x15	; 21
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	ac 01       	movw	r20, r24
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <GPIO_pin_write+0xc0>
 2a2:	44 0f       	add	r20, r20
 2a4:	55 1f       	adc	r21, r21
 2a6:	6a 95       	dec	r22
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <GPIO_pin_write+0xbc>
 2aa:	ba 01       	movw	r22, r20
 2ac:	62 2b       	or	r22, r18
 2ae:	65 bb       	out	0x15, r22	; 21
 2b0:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTC, BIT); //set output value of this pin in port C to 0
 2b2:	25 b3       	in	r18, 0x15	; 21
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	ac 01       	movw	r20, r24
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <GPIO_pin_write+0xda>
 2bc:	44 0f       	add	r20, r20
 2be:	55 1f       	adc	r21, r21
 2c0:	6a 95       	dec	r22
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <GPIO_pin_write+0xd6>
 2c4:	ba 01       	movw	r22, r20
 2c6:	60 95       	com	r22
 2c8:	62 23       	and	r22, r18
 2ca:	65 bb       	out	0x15, r22	; 21
 2cc:	08 95       	ret
            }
        break;
        case 'D':
        case 'd':
            if(1 == DATA)
 2ce:	41 30       	cpi	r20, 0x01	; 1
 2d0:	69 f4       	brne	.+26     	; 0x2ec <GPIO_pin_write+0x106>
            {
                SET_BIT(PORTD, BIT); //set output value of this pin in port C to 1
 2d2:	22 b3       	in	r18, 0x12	; 18
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	ac 01       	movw	r20, r24
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <GPIO_pin_write+0xfa>
 2dc:	44 0f       	add	r20, r20
 2de:	55 1f       	adc	r21, r21
 2e0:	6a 95       	dec	r22
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <GPIO_pin_write+0xf6>
 2e4:	ba 01       	movw	r22, r20
 2e6:	62 2b       	or	r22, r18
 2e8:	62 bb       	out	0x12, r22	; 18
 2ea:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTD, BIT); //set output value of this pin in port C to 0
 2ec:	22 b3       	in	r18, 0x12	; 18
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	ac 01       	movw	r20, r24
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <GPIO_pin_write+0x114>
 2f6:	44 0f       	add	r20, r20
 2f8:	55 1f       	adc	r21, r21
 2fa:	6a 95       	dec	r22
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <GPIO_pin_write+0x110>
 2fe:	ba 01       	movw	r22, r20
 300:	60 95       	com	r22
 302:	62 23       	and	r22, r18
 304:	62 bb       	out	0x12, r22	; 18
 306:	08 95       	ret

00000308 <GPIO_pin_read>:


uint8 GPIO_pin_read(char PORT, uint8 BIT)
{
    uint8 read_value = 0;
    switch(PORT)
 308:	84 34       	cpi	r24, 0x44	; 68
 30a:	99 f1       	breq	.+102    	; 0x372 <GPIO_pin_read+0x6a>
 30c:	85 34       	cpi	r24, 0x45	; 69
 30e:	38 f4       	brcc	.+14     	; 0x31e <GPIO_pin_read+0x16>
 310:	82 34       	cpi	r24, 0x42	; 66
 312:	d9 f0       	breq	.+54     	; 0x34a <GPIO_pin_read+0x42>
 314:	83 34       	cpi	r24, 0x43	; 67
 316:	18 f5       	brcc	.+70     	; 0x35e <GPIO_pin_read+0x56>
 318:	81 34       	cpi	r24, 0x41	; 65
 31a:	a9 f5       	brne	.+106    	; 0x386 <GPIO_pin_read+0x7e>
 31c:	0c c0       	rjmp	.+24     	; 0x336 <GPIO_pin_read+0x2e>
 31e:	82 36       	cpi	r24, 0x62	; 98
 320:	a1 f0       	breq	.+40     	; 0x34a <GPIO_pin_read+0x42>
 322:	83 36       	cpi	r24, 0x63	; 99
 324:	18 f4       	brcc	.+6      	; 0x32c <GPIO_pin_read+0x24>
 326:	81 36       	cpi	r24, 0x61	; 97
 328:	71 f5       	brne	.+92     	; 0x386 <GPIO_pin_read+0x7e>
 32a:	05 c0       	rjmp	.+10     	; 0x336 <GPIO_pin_read+0x2e>
 32c:	83 36       	cpi	r24, 0x63	; 99
 32e:	b9 f0       	breq	.+46     	; 0x35e <GPIO_pin_read+0x56>
 330:	84 36       	cpi	r24, 0x64	; 100
 332:	49 f5       	brne	.+82     	; 0x386 <GPIO_pin_read+0x7e>
 334:	1e c0       	rjmp	.+60     	; 0x372 <GPIO_pin_read+0x6a>
    {
        case 'A':
        case 'a':
            read_value = READ_BIT(PINA, BIT); //read value of given pin in port A
 336:	29 b3       	in	r18, 0x19	; 25
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	c9 01       	movw	r24, r18
 33c:	02 c0       	rjmp	.+4      	; 0x342 <GPIO_pin_read+0x3a>
 33e:	95 95       	asr	r25
 340:	87 95       	ror	r24
 342:	6a 95       	dec	r22
 344:	e2 f7       	brpl	.-8      	; 0x33e <GPIO_pin_read+0x36>
 346:	81 70       	andi	r24, 0x01	; 1
        break;
 348:	08 95       	ret
        case 'B':
        case 'b':
            read_value = READ_BIT(PINB, BIT); //read value of given pin in port B
 34a:	26 b3       	in	r18, 0x16	; 22
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	c9 01       	movw	r24, r18
 350:	02 c0       	rjmp	.+4      	; 0x356 <GPIO_pin_read+0x4e>
 352:	95 95       	asr	r25
 354:	87 95       	ror	r24
 356:	6a 95       	dec	r22
 358:	e2 f7       	brpl	.-8      	; 0x352 <GPIO_pin_read+0x4a>
 35a:	81 70       	andi	r24, 0x01	; 1
        break;
 35c:	08 95       	ret
        case 'C':
        case 'c':
            read_value = READ_BIT(PINC, BIT); //read value of given pin in port C
 35e:	23 b3       	in	r18, 0x13	; 19
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	c9 01       	movw	r24, r18
 364:	02 c0       	rjmp	.+4      	; 0x36a <GPIO_pin_read+0x62>
 366:	95 95       	asr	r25
 368:	87 95       	ror	r24
 36a:	6a 95       	dec	r22
 36c:	e2 f7       	brpl	.-8      	; 0x366 <GPIO_pin_read+0x5e>
 36e:	81 70       	andi	r24, 0x01	; 1
        break;
 370:	08 95       	ret
        case 'D':
        case 'd':
            read_value = READ_BIT(PIND, BIT); //read value of given pin in port D
 372:	20 b3       	in	r18, 0x10	; 16
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	c9 01       	movw	r24, r18
 378:	02 c0       	rjmp	.+4      	; 0x37e <GPIO_pin_read+0x76>
 37a:	95 95       	asr	r25
 37c:	87 95       	ror	r24
 37e:	6a 95       	dec	r22
 380:	e2 f7       	brpl	.-8      	; 0x37a <GPIO_pin_read+0x72>
 382:	81 70       	andi	r24, 0x01	; 1
        break;
 384:	08 95       	ret
} // end of GPIO_pin_write();


uint8 GPIO_pin_read(char PORT, uint8 BIT)
{
    uint8 read_value = 0;
 386:	80 e0       	ldi	r24, 0x00	; 0
        break;
        default:
        break;
    } //end of switch(PORT);
    return read_value;
} // end of GPIO_pin_read();
 388:	08 95       	ret

0000038a <GPIO_pin_toggle>:


void GPIO_pin_toggle(char PORT, uint8 BIT)
{
    switch(PORT)
 38a:	84 34       	cpi	r24, 0x44	; 68
 38c:	09 f4       	brne	.+2      	; 0x390 <GPIO_pin_toggle+0x6>
 38e:	3d c0       	rjmp	.+122    	; 0x40a <GPIO_pin_toggle+0x80>
 390:	85 34       	cpi	r24, 0x45	; 69
 392:	40 f4       	brcc	.+16     	; 0x3a4 <GPIO_pin_toggle+0x1a>
 394:	82 34       	cpi	r24, 0x42	; 66
 396:	f9 f0       	breq	.+62     	; 0x3d6 <GPIO_pin_toggle+0x4c>
 398:	83 34       	cpi	r24, 0x43	; 67
 39a:	50 f5       	brcc	.+84     	; 0x3f0 <GPIO_pin_toggle+0x66>
 39c:	81 34       	cpi	r24, 0x41	; 65
 39e:	09 f0       	breq	.+2      	; 0x3a2 <GPIO_pin_toggle+0x18>
 3a0:	40 c0       	rjmp	.+128    	; 0x422 <GPIO_pin_toggle+0x98>
 3a2:	0c c0       	rjmp	.+24     	; 0x3bc <GPIO_pin_toggle+0x32>
 3a4:	82 36       	cpi	r24, 0x62	; 98
 3a6:	b9 f0       	breq	.+46     	; 0x3d6 <GPIO_pin_toggle+0x4c>
 3a8:	83 36       	cpi	r24, 0x63	; 99
 3aa:	18 f4       	brcc	.+6      	; 0x3b2 <GPIO_pin_toggle+0x28>
 3ac:	81 36       	cpi	r24, 0x61	; 97
 3ae:	c9 f5       	brne	.+114    	; 0x422 <GPIO_pin_toggle+0x98>
 3b0:	05 c0       	rjmp	.+10     	; 0x3bc <GPIO_pin_toggle+0x32>
 3b2:	83 36       	cpi	r24, 0x63	; 99
 3b4:	e9 f0       	breq	.+58     	; 0x3f0 <GPIO_pin_toggle+0x66>
 3b6:	84 36       	cpi	r24, 0x64	; 100
 3b8:	a1 f5       	brne	.+104    	; 0x422 <GPIO_pin_toggle+0x98>
 3ba:	27 c0       	rjmp	.+78     	; 0x40a <GPIO_pin_toggle+0x80>
    {
        case 'A':
        case 'a':
            TOG_BIT(PORTA, BIT); //toggle value of given pin in port A
 3bc:	2b b3       	in	r18, 0x1b	; 27
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	ac 01       	movw	r20, r24
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <GPIO_pin_toggle+0x40>
 3c6:	44 0f       	add	r20, r20
 3c8:	55 1f       	adc	r21, r21
 3ca:	6a 95       	dec	r22
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <GPIO_pin_toggle+0x3c>
 3ce:	ba 01       	movw	r22, r20
 3d0:	62 27       	eor	r22, r18
 3d2:	6b bb       	out	0x1b, r22	; 27
        break;
 3d4:	08 95       	ret
        case 'B':
        case 'b':
            TOG_BIT(PORTB, BIT); //toggle value of given pin in port B
 3d6:	28 b3       	in	r18, 0x18	; 24
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	ac 01       	movw	r20, r24
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <GPIO_pin_toggle+0x5a>
 3e0:	44 0f       	add	r20, r20
 3e2:	55 1f       	adc	r21, r21
 3e4:	6a 95       	dec	r22
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <GPIO_pin_toggle+0x56>
 3e8:	ba 01       	movw	r22, r20
 3ea:	62 27       	eor	r22, r18
 3ec:	68 bb       	out	0x18, r22	; 24
        break;
 3ee:	08 95       	ret
        case 'C':
        case 'c':
            TOG_BIT(PORTC, BIT); //toggle value of given pin in port C
 3f0:	25 b3       	in	r18, 0x15	; 21
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	ac 01       	movw	r20, r24
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <GPIO_pin_toggle+0x74>
 3fa:	44 0f       	add	r20, r20
 3fc:	55 1f       	adc	r21, r21
 3fe:	6a 95       	dec	r22
 400:	e2 f7       	brpl	.-8      	; 0x3fa <GPIO_pin_toggle+0x70>
 402:	ba 01       	movw	r22, r20
 404:	62 27       	eor	r22, r18
 406:	65 bb       	out	0x15, r22	; 21
        break;
 408:	08 95       	ret
        case 'D':
        case 'd':
            TOG_BIT(PORTD, BIT); //toggle value of given pin in port D
 40a:	22 b3       	in	r18, 0x12	; 18
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	ac 01       	movw	r20, r24
 412:	02 c0       	rjmp	.+4      	; 0x418 <GPIO_pin_toggle+0x8e>
 414:	44 0f       	add	r20, r20
 416:	55 1f       	adc	r21, r21
 418:	6a 95       	dec	r22
 41a:	e2 f7       	brpl	.-8      	; 0x414 <GPIO_pin_toggle+0x8a>
 41c:	ba 01       	movw	r22, r20
 41e:	62 27       	eor	r22, r18
 420:	62 bb       	out	0x12, r22	; 18
 422:	08 95       	ret

00000424 <GPIO_port_direction>:
} // end of GPIO_pin_toggle();


void GPIO_port_direction(char PORT, uint8 DIR)
{
    switch(PORT)
 424:	84 34       	cpi	r24, 0x44	; 68
 426:	d9 f0       	breq	.+54     	; 0x45e <GPIO_port_direction+0x3a>
 428:	85 34       	cpi	r24, 0x45	; 69
 42a:	38 f4       	brcc	.+14     	; 0x43a <GPIO_port_direction+0x16>
 42c:	82 34       	cpi	r24, 0x42	; 66
 42e:	99 f0       	breq	.+38     	; 0x456 <GPIO_port_direction+0x32>
 430:	83 34       	cpi	r24, 0x43	; 67
 432:	98 f4       	brcc	.+38     	; 0x45a <GPIO_port_direction+0x36>
 434:	81 34       	cpi	r24, 0x41	; 65
 436:	a1 f4       	brne	.+40     	; 0x460 <GPIO_port_direction+0x3c>
 438:	0c c0       	rjmp	.+24     	; 0x452 <GPIO_port_direction+0x2e>
 43a:	82 36       	cpi	r24, 0x62	; 98
 43c:	61 f0       	breq	.+24     	; 0x456 <GPIO_port_direction+0x32>
 43e:	83 36       	cpi	r24, 0x63	; 99
 440:	18 f4       	brcc	.+6      	; 0x448 <GPIO_port_direction+0x24>
 442:	81 36       	cpi	r24, 0x61	; 97
 444:	69 f4       	brne	.+26     	; 0x460 <GPIO_port_direction+0x3c>
 446:	05 c0       	rjmp	.+10     	; 0x452 <GPIO_port_direction+0x2e>
 448:	83 36       	cpi	r24, 0x63	; 99
 44a:	39 f0       	breq	.+14     	; 0x45a <GPIO_port_direction+0x36>
 44c:	84 36       	cpi	r24, 0x64	; 100
 44e:	41 f4       	brne	.+16     	; 0x460 <GPIO_port_direction+0x3c>
 450:	06 c0       	rjmp	.+12     	; 0x45e <GPIO_port_direction+0x3a>
    {
        case 'A':
        case 'a':
            DDRA = DIR; // set direction of port A to the given DIR
 452:	6a bb       	out	0x1a, r22	; 26
        break;
 454:	08 95       	ret
        case 'B':
        case 'b':
            DDRB = DIR; // set direction of port B to the given DIR
 456:	67 bb       	out	0x17, r22	; 23
        break;
 458:	08 95       	ret
        case 'C':
        case 'c':
            DDRC = DIR; // set direction of port C to the given DIR
 45a:	64 bb       	out	0x14, r22	; 20
        break;
 45c:	08 95       	ret
        case 'D':
        case 'd':
            DDRD = DIR; // set direction of port D to the given DIR
 45e:	61 bb       	out	0x11, r22	; 17
 460:	08 95       	ret

00000462 <GPIO_port_write>:
} // end of GPIO_port_direction();


void GPIO_port_write(char PORT, uint8 DATA)
{
    switch(PORT)
 462:	84 34       	cpi	r24, 0x44	; 68
 464:	d9 f0       	breq	.+54     	; 0x49c <GPIO_port_write+0x3a>
 466:	85 34       	cpi	r24, 0x45	; 69
 468:	38 f4       	brcc	.+14     	; 0x478 <GPIO_port_write+0x16>
 46a:	82 34       	cpi	r24, 0x42	; 66
 46c:	99 f0       	breq	.+38     	; 0x494 <GPIO_port_write+0x32>
 46e:	83 34       	cpi	r24, 0x43	; 67
 470:	98 f4       	brcc	.+38     	; 0x498 <GPIO_port_write+0x36>
 472:	81 34       	cpi	r24, 0x41	; 65
 474:	a1 f4       	brne	.+40     	; 0x49e <GPIO_port_write+0x3c>
 476:	0c c0       	rjmp	.+24     	; 0x490 <GPIO_port_write+0x2e>
 478:	82 36       	cpi	r24, 0x62	; 98
 47a:	61 f0       	breq	.+24     	; 0x494 <GPIO_port_write+0x32>
 47c:	83 36       	cpi	r24, 0x63	; 99
 47e:	18 f4       	brcc	.+6      	; 0x486 <GPIO_port_write+0x24>
 480:	81 36       	cpi	r24, 0x61	; 97
 482:	69 f4       	brne	.+26     	; 0x49e <GPIO_port_write+0x3c>
 484:	05 c0       	rjmp	.+10     	; 0x490 <GPIO_port_write+0x2e>
 486:	83 36       	cpi	r24, 0x63	; 99
 488:	39 f0       	breq	.+14     	; 0x498 <GPIO_port_write+0x36>
 48a:	84 36       	cpi	r24, 0x64	; 100
 48c:	41 f4       	brne	.+16     	; 0x49e <GPIO_port_write+0x3c>
 48e:	06 c0       	rjmp	.+12     	; 0x49c <GPIO_port_write+0x3a>
    {
        case 'A':
        case 'a':
            PORTA = DATA; // write these data on port A
 490:	6b bb       	out	0x1b, r22	; 27
        break;
 492:	08 95       	ret
        case 'B':
        case 'b':
            PORTB = DATA; // write these data on port B
 494:	68 bb       	out	0x18, r22	; 24
        break;
 496:	08 95       	ret
        case 'C':
        case 'c':
            PORTC = DATA; // write these data on port C
 498:	65 bb       	out	0x15, r22	; 21
        break;
 49a:	08 95       	ret
        case 'D':
        case 'd':
            PORTD = DATA; // write these data on port D
 49c:	62 bb       	out	0x12, r22	; 18
 49e:	08 95       	ret

000004a0 <GPIO_port_read>:


uint8 GPIO_port_read(char PORT)
{
    uint8 read_port = 0;
    switch(PORT)
 4a0:	84 34       	cpi	r24, 0x44	; 68
 4a2:	d9 f0       	breq	.+54     	; 0x4da <GPIO_port_read+0x3a>
 4a4:	85 34       	cpi	r24, 0x45	; 69
 4a6:	38 f4       	brcc	.+14     	; 0x4b6 <GPIO_port_read+0x16>
 4a8:	82 34       	cpi	r24, 0x42	; 66
 4aa:	99 f0       	breq	.+38     	; 0x4d2 <GPIO_port_read+0x32>
 4ac:	83 34       	cpi	r24, 0x43	; 67
 4ae:	98 f4       	brcc	.+38     	; 0x4d6 <GPIO_port_read+0x36>
 4b0:	81 34       	cpi	r24, 0x41	; 65
 4b2:	a9 f4       	brne	.+42     	; 0x4de <GPIO_port_read+0x3e>
 4b4:	0c c0       	rjmp	.+24     	; 0x4ce <GPIO_port_read+0x2e>
 4b6:	82 36       	cpi	r24, 0x62	; 98
 4b8:	61 f0       	breq	.+24     	; 0x4d2 <GPIO_port_read+0x32>
 4ba:	83 36       	cpi	r24, 0x63	; 99
 4bc:	18 f4       	brcc	.+6      	; 0x4c4 <GPIO_port_read+0x24>
 4be:	81 36       	cpi	r24, 0x61	; 97
 4c0:	71 f4       	brne	.+28     	; 0x4de <GPIO_port_read+0x3e>
 4c2:	05 c0       	rjmp	.+10     	; 0x4ce <GPIO_port_read+0x2e>
 4c4:	83 36       	cpi	r24, 0x63	; 99
 4c6:	39 f0       	breq	.+14     	; 0x4d6 <GPIO_port_read+0x36>
 4c8:	84 36       	cpi	r24, 0x64	; 100
 4ca:	49 f4       	brne	.+18     	; 0x4de <GPIO_port_read+0x3e>
 4cc:	06 c0       	rjmp	.+12     	; 0x4da <GPIO_port_read+0x3a>
    {
        case 'A':
        case 'a':
            read_port = PINA; // read data from port A
 4ce:	89 b3       	in	r24, 0x19	; 25
        break;
 4d0:	08 95       	ret
        case 'B':
        case 'b':
            read_port = PINB; // read data from port B
 4d2:	86 b3       	in	r24, 0x16	; 22
        break;
 4d4:	08 95       	ret
        case 'C':
        case 'c':
            read_port = PINC; // read data from port C
 4d6:	83 b3       	in	r24, 0x13	; 19
        break;
 4d8:	08 95       	ret
        case 'D':
        case 'd':
            read_port = PIND; // read data from port D
 4da:	80 b3       	in	r24, 0x10	; 16
        break;
 4dc:	08 95       	ret
} // end of GPIO_port_write();


uint8 GPIO_port_read(char PORT)
{
    uint8 read_port = 0;
 4de:	80 e0       	ldi	r24, 0x00	; 0
        break;
        default:
        break;
    } // end of switch(PORT);
    return read_port;
} // end of GPIO_port_read();
 4e0:	08 95       	ret

000004e2 <GPIO_pin_pull_up>:


void GPIO_pin_pull_up(char port_name, uint8 pin_number)
{
    switch(port_name)
 4e2:	84 34       	cpi	r24, 0x44	; 68
 4e4:	09 f4       	brne	.+2      	; 0x4e8 <GPIO_pin_pull_up+0x6>
 4e6:	57 c0       	rjmp	.+174    	; 0x596 <GPIO_pin_pull_up+0xb4>
 4e8:	85 34       	cpi	r24, 0x45	; 69
 4ea:	40 f4       	brcc	.+16     	; 0x4fc <GPIO_pin_pull_up+0x1a>
 4ec:	82 34       	cpi	r24, 0x42	; 66
 4ee:	49 f1       	breq	.+82     	; 0x542 <GPIO_pin_pull_up+0x60>
 4f0:	83 34       	cpi	r24, 0x43	; 67
 4f2:	e0 f5       	brcc	.+120    	; 0x56c <GPIO_pin_pull_up+0x8a>
 4f4:	81 34       	cpi	r24, 0x41	; 65
 4f6:	09 f0       	breq	.+2      	; 0x4fa <GPIO_pin_pull_up+0x18>
 4f8:	62 c0       	rjmp	.+196    	; 0x5be <GPIO_pin_pull_up+0xdc>
 4fa:	0e c0       	rjmp	.+28     	; 0x518 <GPIO_pin_pull_up+0x36>
 4fc:	82 36       	cpi	r24, 0x62	; 98
 4fe:	09 f1       	breq	.+66     	; 0x542 <GPIO_pin_pull_up+0x60>
 500:	83 36       	cpi	r24, 0x63	; 99
 502:	20 f4       	brcc	.+8      	; 0x50c <GPIO_pin_pull_up+0x2a>
 504:	81 36       	cpi	r24, 0x61	; 97
 506:	09 f0       	breq	.+2      	; 0x50a <GPIO_pin_pull_up+0x28>
 508:	5a c0       	rjmp	.+180    	; 0x5be <GPIO_pin_pull_up+0xdc>
 50a:	06 c0       	rjmp	.+12     	; 0x518 <GPIO_pin_pull_up+0x36>
 50c:	83 36       	cpi	r24, 0x63	; 99
 50e:	71 f1       	breq	.+92     	; 0x56c <GPIO_pin_pull_up+0x8a>
 510:	84 36       	cpi	r24, 0x64	; 100
 512:	09 f0       	breq	.+2      	; 0x516 <GPIO_pin_pull_up+0x34>
 514:	54 c0       	rjmp	.+168    	; 0x5be <GPIO_pin_pull_up+0xdc>
 516:	3f c0       	rjmp	.+126    	; 0x596 <GPIO_pin_pull_up+0xb4>
    {
        case 'A':
        case 'a':
            CLR_BIT(DDRA,pin_number); //set pin_number of port_name as input
 518:	2a b3       	in	r18, 0x1a	; 26
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	ac 01       	movw	r20, r24
 520:	02 c0       	rjmp	.+4      	; 0x526 <GPIO_pin_pull_up+0x44>
 522:	44 0f       	add	r20, r20
 524:	55 1f       	adc	r21, r21
 526:	6a 95       	dec	r22
 528:	e2 f7       	brpl	.-8      	; 0x522 <GPIO_pin_pull_up+0x40>
 52a:	ba 01       	movw	r22, r20
 52c:	84 2f       	mov	r24, r20
 52e:	80 95       	com	r24
 530:	82 23       	and	r24, r18
 532:	8a bb       	out	0x1a, r24	; 26
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 534:	80 b7       	in	r24, 0x30	; 48
 536:	8b 7f       	andi	r24, 0xFB	; 251
 538:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTA,pin_number); //set pin_number of port_name as high value
 53a:	8b b3       	in	r24, 0x1b	; 27
 53c:	68 2b       	or	r22, r24
 53e:	6b bb       	out	0x1b, r22	; 27
        break;
 540:	08 95       	ret
        case 'B':
        case 'b':
            CLR_BIT(DDRB,pin_number); //set pin_number of port_name as input
 542:	27 b3       	in	r18, 0x17	; 23
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	ac 01       	movw	r20, r24
 54a:	02 c0       	rjmp	.+4      	; 0x550 <GPIO_pin_pull_up+0x6e>
 54c:	44 0f       	add	r20, r20
 54e:	55 1f       	adc	r21, r21
 550:	6a 95       	dec	r22
 552:	e2 f7       	brpl	.-8      	; 0x54c <GPIO_pin_pull_up+0x6a>
 554:	ba 01       	movw	r22, r20
 556:	84 2f       	mov	r24, r20
 558:	80 95       	com	r24
 55a:	82 23       	and	r24, r18
 55c:	87 bb       	out	0x17, r24	; 23
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 55e:	80 b7       	in	r24, 0x30	; 48
 560:	8b 7f       	andi	r24, 0xFB	; 251
 562:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTB,pin_number); //set pin_number of port_name as high value
 564:	88 b3       	in	r24, 0x18	; 24
 566:	68 2b       	or	r22, r24
 568:	68 bb       	out	0x18, r22	; 24
        break;
 56a:	08 95       	ret
        case 'C':
        case 'c':
            CLR_BIT(DDRC,pin_number); //set pin_number of port_name as input
 56c:	24 b3       	in	r18, 0x14	; 20
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	ac 01       	movw	r20, r24
 574:	02 c0       	rjmp	.+4      	; 0x57a <GPIO_pin_pull_up+0x98>
 576:	44 0f       	add	r20, r20
 578:	55 1f       	adc	r21, r21
 57a:	6a 95       	dec	r22
 57c:	e2 f7       	brpl	.-8      	; 0x576 <GPIO_pin_pull_up+0x94>
 57e:	ba 01       	movw	r22, r20
 580:	84 2f       	mov	r24, r20
 582:	80 95       	com	r24
 584:	82 23       	and	r24, r18
 586:	84 bb       	out	0x14, r24	; 20
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 588:	80 b7       	in	r24, 0x30	; 48
 58a:	8b 7f       	andi	r24, 0xFB	; 251
 58c:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTC,pin_number); //set pin_number of port_name as high value
 58e:	85 b3       	in	r24, 0x15	; 21
 590:	68 2b       	or	r22, r24
 592:	65 bb       	out	0x15, r22	; 21
        break;
 594:	08 95       	ret
        case 'D':
        case 'd':
            CLR_BIT(DDRD,pin_number); //set pin_number of port_name as input
 596:	21 b3       	in	r18, 0x11	; 17
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	ac 01       	movw	r20, r24
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <GPIO_pin_pull_up+0xc2>
 5a0:	44 0f       	add	r20, r20
 5a2:	55 1f       	adc	r21, r21
 5a4:	6a 95       	dec	r22
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <GPIO_pin_pull_up+0xbe>
 5a8:	ba 01       	movw	r22, r20
 5aa:	84 2f       	mov	r24, r20
 5ac:	80 95       	com	r24
 5ae:	82 23       	and	r24, r18
 5b0:	81 bb       	out	0x11, r24	; 17
            CLR_BIT(SFIOR,PUD); //clear PUD bit in SFIOR register
 5b2:	80 b7       	in	r24, 0x30	; 48
 5b4:	8b 7f       	andi	r24, 0xFB	; 251
 5b6:	80 bf       	out	0x30, r24	; 48
            SET_BIT(PORTD,pin_number); //set pin_number of port_name as high value
 5b8:	82 b3       	in	r24, 0x12	; 18
 5ba:	68 2b       	or	r22, r24
 5bc:	62 bb       	out	0x12, r22	; 18
 5be:	08 95       	ret

000005c0 <GPIO_port_write_high_nibble>:



void GPIO_port_write_high_nibble(char port_name, uint8 high_nibble)
{
    high_nibble <<= 4; //clear low_nibble bits in number
 5c0:	62 95       	swap	r22
 5c2:	60 7f       	andi	r22, 0xF0	; 240
    switch(port_name)
 5c4:	84 34       	cpi	r24, 0x44	; 68
 5c6:	51 f1       	breq	.+84     	; 0x61c <GPIO_port_write_high_nibble+0x5c>
 5c8:	85 34       	cpi	r24, 0x45	; 69
 5ca:	38 f4       	brcc	.+14     	; 0x5da <GPIO_port_write_high_nibble+0x1a>
 5cc:	82 34       	cpi	r24, 0x42	; 66
 5ce:	c1 f0       	breq	.+48     	; 0x600 <GPIO_port_write_high_nibble+0x40>
 5d0:	83 34       	cpi	r24, 0x43	; 67
 5d2:	e8 f4       	brcc	.+58     	; 0x60e <GPIO_port_write_high_nibble+0x4e>
 5d4:	81 34       	cpi	r24, 0x41	; 65
 5d6:	41 f5       	brne	.+80     	; 0x628 <GPIO_port_write_high_nibble+0x68>
 5d8:	0c c0       	rjmp	.+24     	; 0x5f2 <GPIO_port_write_high_nibble+0x32>
 5da:	82 36       	cpi	r24, 0x62	; 98
 5dc:	89 f0       	breq	.+34     	; 0x600 <GPIO_port_write_high_nibble+0x40>
 5de:	83 36       	cpi	r24, 0x63	; 99
 5e0:	18 f4       	brcc	.+6      	; 0x5e8 <GPIO_port_write_high_nibble+0x28>
 5e2:	81 36       	cpi	r24, 0x61	; 97
 5e4:	09 f5       	brne	.+66     	; 0x628 <GPIO_port_write_high_nibble+0x68>
 5e6:	05 c0       	rjmp	.+10     	; 0x5f2 <GPIO_port_write_high_nibble+0x32>
 5e8:	83 36       	cpi	r24, 0x63	; 99
 5ea:	89 f0       	breq	.+34     	; 0x60e <GPIO_port_write_high_nibble+0x4e>
 5ec:	84 36       	cpi	r24, 0x64	; 100
 5ee:	e1 f4       	brne	.+56     	; 0x628 <GPIO_port_write_high_nibble+0x68>
 5f0:	15 c0       	rjmp	.+42     	; 0x61c <GPIO_port_write_high_nibble+0x5c>
    {
        case 'A':
        case 'a':
            PORTA &= 0x0f;
 5f2:	8b b3       	in	r24, 0x1b	; 27
 5f4:	8f 70       	andi	r24, 0x0F	; 15
 5f6:	8b bb       	out	0x1b, r24	; 27
            PORTA |= high_nibble;
 5f8:	8b b3       	in	r24, 0x1b	; 27
 5fa:	68 2b       	or	r22, r24
 5fc:	6b bb       	out	0x1b, r22	; 27
        break;
 5fe:	08 95       	ret
        case 'B':
        case 'b':
            PORTB &= 0x0f;
 600:	88 b3       	in	r24, 0x18	; 24
 602:	8f 70       	andi	r24, 0x0F	; 15
 604:	88 bb       	out	0x18, r24	; 24
            PORTB |= high_nibble;
 606:	88 b3       	in	r24, 0x18	; 24
 608:	68 2b       	or	r22, r24
 60a:	68 bb       	out	0x18, r22	; 24
        break;
 60c:	08 95       	ret
        case 'C':
        case 'c':
            PORTC &= 0x0f;
 60e:	85 b3       	in	r24, 0x15	; 21
 610:	8f 70       	andi	r24, 0x0F	; 15
 612:	85 bb       	out	0x15, r24	; 21
            PORTC |= high_nibble;
 614:	85 b3       	in	r24, 0x15	; 21
 616:	68 2b       	or	r22, r24
 618:	65 bb       	out	0x15, r22	; 21
        break;
 61a:	08 95       	ret
        case 'D':
        case 'd':
            PORTD &= 0x0f;
 61c:	82 b3       	in	r24, 0x12	; 18
 61e:	8f 70       	andi	r24, 0x0F	; 15
 620:	82 bb       	out	0x12, r24	; 18
            PORTD |= high_nibble;
 622:	82 b3       	in	r24, 0x12	; 18
 624:	68 2b       	or	r22, r24
 626:	62 bb       	out	0x12, r22	; 18
 628:	08 95       	ret

0000062a <GPIO_port_write_low_nibble>:
    } // end of switch(port_name);
}

void GPIO_port_write_low_nibble(char port_name, uint8 low_nibble)
{
    low_nibble &= 0x0f; //clear high_nibble bits in number
 62a:	6f 70       	andi	r22, 0x0F	; 15
    switch(port_name)
 62c:	84 34       	cpi	r24, 0x44	; 68
 62e:	51 f1       	breq	.+84     	; 0x684 <GPIO_port_write_low_nibble+0x5a>
 630:	85 34       	cpi	r24, 0x45	; 69
 632:	38 f4       	brcc	.+14     	; 0x642 <GPIO_port_write_low_nibble+0x18>
 634:	82 34       	cpi	r24, 0x42	; 66
 636:	c1 f0       	breq	.+48     	; 0x668 <GPIO_port_write_low_nibble+0x3e>
 638:	83 34       	cpi	r24, 0x43	; 67
 63a:	e8 f4       	brcc	.+58     	; 0x676 <GPIO_port_write_low_nibble+0x4c>
 63c:	81 34       	cpi	r24, 0x41	; 65
 63e:	41 f5       	brne	.+80     	; 0x690 <GPIO_port_write_low_nibble+0x66>
 640:	0c c0       	rjmp	.+24     	; 0x65a <GPIO_port_write_low_nibble+0x30>
 642:	82 36       	cpi	r24, 0x62	; 98
 644:	89 f0       	breq	.+34     	; 0x668 <GPIO_port_write_low_nibble+0x3e>
 646:	83 36       	cpi	r24, 0x63	; 99
 648:	18 f4       	brcc	.+6      	; 0x650 <GPIO_port_write_low_nibble+0x26>
 64a:	81 36       	cpi	r24, 0x61	; 97
 64c:	09 f5       	brne	.+66     	; 0x690 <GPIO_port_write_low_nibble+0x66>
 64e:	05 c0       	rjmp	.+10     	; 0x65a <GPIO_port_write_low_nibble+0x30>
 650:	83 36       	cpi	r24, 0x63	; 99
 652:	89 f0       	breq	.+34     	; 0x676 <GPIO_port_write_low_nibble+0x4c>
 654:	84 36       	cpi	r24, 0x64	; 100
 656:	e1 f4       	brne	.+56     	; 0x690 <GPIO_port_write_low_nibble+0x66>
 658:	15 c0       	rjmp	.+42     	; 0x684 <GPIO_port_write_low_nibble+0x5a>
    {
        case 'A':
        case 'a':
            PORTA &= 0xf0;
 65a:	8b b3       	in	r24, 0x1b	; 27
 65c:	80 7f       	andi	r24, 0xF0	; 240
 65e:	8b bb       	out	0x1b, r24	; 27
            PORTA |= low_nibble;
 660:	8b b3       	in	r24, 0x1b	; 27
 662:	68 2b       	or	r22, r24
 664:	6b bb       	out	0x1b, r22	; 27
        break;
 666:	08 95       	ret
        case 'B':
        case 'b':
            PORTB &= 0xf0;
 668:	88 b3       	in	r24, 0x18	; 24
 66a:	80 7f       	andi	r24, 0xF0	; 240
 66c:	88 bb       	out	0x18, r24	; 24
            PORTB |= low_nibble;
 66e:	88 b3       	in	r24, 0x18	; 24
 670:	68 2b       	or	r22, r24
 672:	68 bb       	out	0x18, r22	; 24
        break;
 674:	08 95       	ret
        case 'C':
        case 'c':
            PORTC &= 0xf0;
 676:	85 b3       	in	r24, 0x15	; 21
 678:	80 7f       	andi	r24, 0xF0	; 240
 67a:	85 bb       	out	0x15, r24	; 21
            PORTC |= low_nibble;
 67c:	85 b3       	in	r24, 0x15	; 21
 67e:	68 2b       	or	r22, r24
 680:	65 bb       	out	0x15, r22	; 21
        break;
 682:	08 95       	ret
        case 'D':
        case 'd':
            PORTD &= 0xf0;
 684:	82 b3       	in	r24, 0x12	; 18
 686:	80 7f       	andi	r24, 0xF0	; 240
 688:	82 bb       	out	0x12, r24	; 18
            PORTD |= low_nibble;
 68a:	82 b3       	in	r24, 0x12	; 18
 68c:	68 2b       	or	r22, r24
 68e:	62 bb       	out	0x12, r22	; 18
 690:	08 95       	ret

00000692 <keypad_init>:
#include "keypad.h"


void keypad_init(void)
{
	GPIO_pin_direction(KEYPAD_PORT,0,1);
 692:	83 e4       	ldi	r24, 0x43	; 67
 694:	60 e0       	ldi	r22, 0x00	; 0
 696:	41 e0       	ldi	r20, 0x01	; 1
 698:	0e 94 62 00 	call	0xc4	; 0xc4 <GPIO_pin_direction>
	GPIO_pin_direction(KEYPAD_PORT,1,1);
 69c:	83 e4       	ldi	r24, 0x43	; 67
 69e:	61 e0       	ldi	r22, 0x01	; 1
 6a0:	41 e0       	ldi	r20, 0x01	; 1
 6a2:	0e 94 62 00 	call	0xc4	; 0xc4 <GPIO_pin_direction>
	GPIO_pin_direction(KEYPAD_PORT,2,1);
 6a6:	83 e4       	ldi	r24, 0x43	; 67
 6a8:	62 e0       	ldi	r22, 0x02	; 2
 6aa:	41 e0       	ldi	r20, 0x01	; 1
 6ac:	0e 94 62 00 	call	0xc4	; 0xc4 <GPIO_pin_direction>
	GPIO_pin_direction(KEYPAD_PORT,3,1);
 6b0:	83 e4       	ldi	r24, 0x43	; 67
 6b2:	63 e0       	ldi	r22, 0x03	; 3
 6b4:	41 e0       	ldi	r20, 0x01	; 1
 6b6:	0e 94 62 00 	call	0xc4	; 0xc4 <GPIO_pin_direction>
	
	GPIO_pin_pull_up(KEYPAD_PORT,4);
 6ba:	83 e4       	ldi	r24, 0x43	; 67
 6bc:	64 e0       	ldi	r22, 0x04	; 4
 6be:	0e 94 71 02 	call	0x4e2	; 0x4e2 <GPIO_pin_pull_up>
	GPIO_pin_pull_up(KEYPAD_PORT,5);
 6c2:	83 e4       	ldi	r24, 0x43	; 67
 6c4:	65 e0       	ldi	r22, 0x05	; 5
 6c6:	0e 94 71 02 	call	0x4e2	; 0x4e2 <GPIO_pin_pull_up>
	GPIO_pin_pull_up(KEYPAD_PORT,6);
 6ca:	83 e4       	ldi	r24, 0x43	; 67
 6cc:	66 e0       	ldi	r22, 0x06	; 6
 6ce:	0e 94 71 02 	call	0x4e2	; 0x4e2 <GPIO_pin_pull_up>
	GPIO_pin_pull_up(KEYPAD_PORT,7);
 6d2:	83 e4       	ldi	r24, 0x43	; 67
 6d4:	67 e0       	ldi	r22, 0x07	; 7
 6d6:	0e 94 71 02 	call	0x4e2	; 0x4e2 <GPIO_pin_pull_up>
}
 6da:	08 95       	ret

000006dc <keypad_check_press>:

char keypad_check_press(void)
{
 6dc:	0f 93       	push	r16
 6de:	1f 93       	push	r17
 6e0:	cf 93       	push	r28
 6e2:	df 93       	push	r29
 6e4:	cd b7       	in	r28, 0x3d	; 61
 6e6:	de b7       	in	r29, 0x3e	; 62
 6e8:	60 97       	sbiw	r28, 0x10	; 16
 6ea:	0f b6       	in	r0, 0x3f	; 63
 6ec:	f8 94       	cli
 6ee:	de bf       	out	0x3e, r29	; 62
 6f0:	0f be       	out	0x3f, r0	; 63
 6f2:	cd bf       	out	0x3d, r28	; 61
	char button[4][4] = {{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'c','0','=','+'}};
 6f4:	de 01       	movw	r26, r28
 6f6:	11 96       	adiw	r26, 0x01	; 1
 6f8:	e0 e6       	ldi	r30, 0x60	; 96
 6fa:	f0 e0       	ldi	r31, 0x00	; 0
 6fc:	80 e1       	ldi	r24, 0x10	; 16
 6fe:	01 90       	ld	r0, Z+
 700:	0d 92       	st	X+, r0
 702:	81 50       	subi	r24, 0x01	; 1
 704:	e1 f7       	brne	.-8      	; 0x6fe <keypad_check_press+0x22>
	uint8 row = 0, column = 0, pressed = 1;
	char val = NOTPRESSED;
	
	for (row=0; row<4; ++row)
 706:	00 e0       	ldi	r16, 0x00	; 0
	{
		GPIO_pin_write(KEYPAD_PORT,0,1);
 708:	83 e4       	ldi	r24, 0x43	; 67
 70a:	60 e0       	ldi	r22, 0x00	; 0
 70c:	41 e0       	ldi	r20, 0x01	; 1
 70e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <GPIO_pin_write>
		GPIO_pin_write(KEYPAD_PORT,1,1);
 712:	83 e4       	ldi	r24, 0x43	; 67
 714:	61 e0       	ldi	r22, 0x01	; 1
 716:	41 e0       	ldi	r20, 0x01	; 1
 718:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <GPIO_pin_write>
		GPIO_pin_write(KEYPAD_PORT,2,1);
 71c:	83 e4       	ldi	r24, 0x43	; 67
 71e:	62 e0       	ldi	r22, 0x02	; 2
 720:	41 e0       	ldi	r20, 0x01	; 1
 722:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <GPIO_pin_write>
		GPIO_pin_write(KEYPAD_PORT,3,1);
 726:	83 e4       	ldi	r24, 0x43	; 67
 728:	63 e0       	ldi	r22, 0x03	; 3
 72a:	41 e0       	ldi	r20, 0x01	; 1
 72c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <GPIO_pin_write>
		GPIO_pin_write(KEYPAD_PORT,row,0);
 730:	83 e4       	ldi	r24, 0x43	; 67
 732:	60 2f       	mov	r22, r16
 734:	40 e0       	ldi	r20, 0x00	; 0
 736:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <GPIO_pin_write>
		for (column=0; column<4; ++column)
 73a:	10 e0       	ldi	r17, 0x00	; 0
		{
			pressed = GPIO_pin_read(KEYPAD_PORT,(column+4));
 73c:	61 2f       	mov	r22, r17
 73e:	6c 5f       	subi	r22, 0xFC	; 252
 740:	83 e4       	ldi	r24, 0x43	; 67
 742:	0e 94 84 01 	call	0x308	; 0x308 <GPIO_pin_read>
			if (0 == pressed)
 746:	88 23       	and	r24, r24
 748:	61 f4       	brne	.+24     	; 0x762 <keypad_check_press+0x86>
			{
				val = button[row][column];
 74a:	e0 2f       	mov	r30, r16
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	ee 0f       	add	r30, r30
 750:	ff 1f       	adc	r31, r31
 752:	ee 0f       	add	r30, r30
 754:	ff 1f       	adc	r31, r31
 756:	e1 0f       	add	r30, r17
 758:	f1 1d       	adc	r31, r1
 75a:	ec 0f       	add	r30, r28
 75c:	fd 1f       	adc	r31, r29
 75e:	81 81       	ldd	r24, Z+1	; 0x01
 760:	04 c0       	rjmp	.+8      	; 0x76a <keypad_check_press+0x8e>
		GPIO_pin_write(KEYPAD_PORT,0,1);
		GPIO_pin_write(KEYPAD_PORT,1,1);
		GPIO_pin_write(KEYPAD_PORT,2,1);
		GPIO_pin_write(KEYPAD_PORT,3,1);
		GPIO_pin_write(KEYPAD_PORT,row,0);
		for (column=0; column<4; ++column)
 762:	1f 5f       	subi	r17, 0xFF	; 255
 764:	14 30       	cpi	r17, 0x04	; 4
 766:	51 f7       	brne	.-44     	; 0x73c <keypad_check_press+0x60>
 768:	0b c0       	rjmp	.+22     	; 0x780 <keypad_check_press+0xa4>
		{
			break;
		}
	}
	return val;
 76a:	60 96       	adiw	r28, 0x10	; 16
 76c:	0f b6       	in	r0, 0x3f	; 63
 76e:	f8 94       	cli
 770:	de bf       	out	0x3e, r29	; 62
 772:	0f be       	out	0x3f, r0	; 63
 774:	cd bf       	out	0x3d, r28	; 61
 776:	df 91       	pop	r29
 778:	cf 91       	pop	r28
 77a:	1f 91       	pop	r17
 77c:	0f 91       	pop	r16
 77e:	08 95       	ret
{
	char button[4][4] = {{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'c','0','=','+'}};
	uint8 row = 0, column = 0, pressed = 1;
	char val = NOTPRESSED;
	
	for (row=0; row<4; ++row)
 780:	0f 5f       	subi	r16, 0xFF	; 255
 782:	04 30       	cpi	r16, 0x04	; 4
 784:	09 f6       	brne	.-126    	; 0x708 <keypad_check_press+0x2c>
 786:	8f ef       	ldi	r24, 0xFF	; 255
 788:	f0 cf       	rjmp	.-32     	; 0x76a <keypad_check_press+0x8e>

0000078a <LCD_send_pulse>:

#include "LCD.h"

static void LCD_send_pulse(void)
{
	GPIO_pin_write(EN_PORT,EN,1);
 78a:	82 e4       	ldi	r24, 0x42	; 66
 78c:	60 e0       	ldi	r22, 0x00	; 0
 78e:	41 e0       	ldi	r20, 0x01	; 1
 790:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <GPIO_pin_write>
 794:	8f e9       	ldi	r24, 0x9F	; 159
 796:	9f e0       	ldi	r25, 0x0F	; 15
 798:	01 97       	sbiw	r24, 0x01	; 1
 79a:	f1 f7       	brne	.-4      	; 0x798 <LCD_send_pulse+0xe>
 79c:	00 c0       	rjmp	.+0      	; 0x79e <LCD_send_pulse+0x14>
 79e:	00 00       	nop
	_delay_ms(2);
	GPIO_pin_write(EN_PORT,EN,0);
 7a0:	82 e4       	ldi	r24, 0x42	; 66
 7a2:	60 e0       	ldi	r22, 0x00	; 0
 7a4:	40 e0       	ldi	r20, 0x00	; 0
 7a6:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <GPIO_pin_write>
 7aa:	8f ec       	ldi	r24, 0xCF	; 207
 7ac:	97 e0       	ldi	r25, 0x07	; 7
 7ae:	01 97       	sbiw	r24, 0x01	; 1
 7b0:	f1 f7       	brne	.-4      	; 0x7ae <LCD_send_pulse+0x24>
 7b2:	00 c0       	rjmp	.+0      	; 0x7b4 <LCD_send_pulse+0x2a>
 7b4:	00 00       	nop
	_delay_ms(1);	
}
 7b6:	08 95       	ret

000007b8 <LCD_send_command>:


void LCD_send_command(uint8 command)
{
 7b8:	68 2f       	mov	r22, r24
	GPIO_pin_write(RS_PORT,RS,0); //select command register
	LCD_send_pulse();
	
	#elif defined eight_bits_mode
	
	GPIO_port_write(LCD_PORT,command);
 7ba:	81 e4       	ldi	r24, 0x41	; 65
 7bc:	0e 94 31 02 	call	0x462	; 0x462 <GPIO_port_write>
	GPIO_pin_write(RS_PORT,RS,0);
 7c0:	82 e4       	ldi	r24, 0x42	; 66
 7c2:	61 e0       	ldi	r22, 0x01	; 1
 7c4:	40 e0       	ldi	r20, 0x00	; 0
 7c6:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <GPIO_pin_write>
	LCD_send_pulse();
 7ca:	0e 94 c5 03 	call	0x78a	; 0x78a <LCD_send_pulse>
	
	#endif
}
 7ce:	08 95       	ret

000007d0 <LCD_clear_screen>:



void LCD_clear_screen(void)
{
	LCD_send_command(CLEAR_SCREEN);
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <LCD_send_command>
 7d6:	8f e9       	ldi	r24, 0x9F	; 159
 7d8:	9f e0       	ldi	r25, 0x0F	; 15
 7da:	01 97       	sbiw	r24, 0x01	; 1
 7dc:	f1 f7       	brne	.-4      	; 0x7da <LCD_clear_screen+0xa>
 7de:	00 c0       	rjmp	.+0      	; 0x7e0 <LCD_clear_screen+0x10>
 7e0:	00 00       	nop
	_delay_ms(2);
}
 7e2:	08 95       	ret

000007e4 <LCD_return_home>:

void LCD_return_home(void)
{
	LCD_send_command(RETURN_HOME);
 7e4:	82 e0       	ldi	r24, 0x02	; 2
 7e6:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <LCD_send_command>
 7ea:	8f e9       	ldi	r24, 0x9F	; 159
 7ec:	9f e0       	ldi	r25, 0x0F	; 15
 7ee:	01 97       	sbiw	r24, 0x01	; 1
 7f0:	f1 f7       	brne	.-4      	; 0x7ee <LCD_return_home+0xa>
 7f2:	00 c0       	rjmp	.+0      	; 0x7f4 <LCD_return_home+0x10>
 7f4:	00 00       	nop
	_delay_ms(2);
}
 7f6:	08 95       	ret

000007f8 <LCD_init>:
 7f8:	8f ef       	ldi	r24, 0xFF	; 255
 7fa:	99 ef       	ldi	r25, 0xF9	; 249
 7fc:	a0 e0       	ldi	r26, 0x00	; 0
 7fe:	81 50       	subi	r24, 0x01	; 1
 800:	90 40       	sbci	r25, 0x00	; 0
 802:	a0 40       	sbci	r26, 0x00	; 0
 804:	e1 f7       	brne	.-8      	; 0x7fe <LCD_init+0x6>
 806:	00 c0       	rjmp	.+0      	; 0x808 <LCD_init+0x10>
 808:	00 00       	nop
	GPIO_pin_direction(RS_PORT,RS,1);//set RS pin to output pin
	//send command to inti LCD:
	LCD_send_command(FOUR_BITS);
	#elif defined eight_bits_mode
	//set connection pins:
	GPIO_port_direction(LCD_PORT,1);
 80a:	81 e4       	ldi	r24, 0x41	; 65
 80c:	61 e0       	ldi	r22, 0x01	; 1
 80e:	0e 94 12 02 	call	0x424	; 0x424 <GPIO_port_direction>
	GPIO_pin_direction(EN_PORT,EN,1);//set EN pin to output pin
 812:	82 e4       	ldi	r24, 0x42	; 66
 814:	60 e0       	ldi	r22, 0x00	; 0
 816:	41 e0       	ldi	r20, 0x01	; 1
 818:	0e 94 62 00 	call	0xc4	; 0xc4 <GPIO_pin_direction>
	GPIO_pin_direction(RS_PORT,RS,1);//set RS pin to output pin
 81c:	82 e4       	ldi	r24, 0x42	; 66
 81e:	61 e0       	ldi	r22, 0x01	; 1
 820:	41 e0       	ldi	r20, 0x01	; 1
 822:	0e 94 62 00 	call	0xc4	; 0xc4 <GPIO_pin_direction>
	//send command to init LCD:
	LCD_send_command(EIGHT_BITS);
 826:	88 e3       	ldi	r24, 0x38	; 56
 828:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <LCD_send_command>
	#endif
	LCD_return_home();
 82c:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LCD_return_home>
	LCD_send_command(DISPLAY_ON_CURSOR_OFF);
 830:	8c e0       	ldi	r24, 0x0C	; 12
 832:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <LCD_send_command>
	LCD_clear_screen();
 836:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <LCD_clear_screen>
	LCD_send_command(ENGLISH_ENTRY);
 83a:	86 e0       	ldi	r24, 0x06	; 6
 83c:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <LCD_send_command>
}
 840:	08 95       	ret

00000842 <LCD_send_character>:
	LCD_send_command(RETURN_HOME);
	_delay_ms(2);
}

void LCD_send_character(char character)
{
 842:	cf 93       	push	r28
 844:	c8 2f       	mov	r28, r24
	GPIO_port_write_low_nibble(LCD_PORT,character);
	LCD_send_pulse();
	
	#elif defined eight_bits_mode
	
	GPIO_pin_write(RS_PORT,RS,1);
 846:	82 e4       	ldi	r24, 0x42	; 66
 848:	61 e0       	ldi	r22, 0x01	; 1
 84a:	41 e0       	ldi	r20, 0x01	; 1
 84c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <GPIO_pin_write>
	GPIO_port_write(LCD_PORT,character);
 850:	81 e4       	ldi	r24, 0x41	; 65
 852:	6c 2f       	mov	r22, r28
 854:	0e 94 31 02 	call	0x462	; 0x462 <GPIO_port_write>
	LCD_send_pulse();
 858:	0e 94 c5 03 	call	0x78a	; 0x78a <LCD_send_pulse>
	
	#endif
	
}
 85c:	cf 91       	pop	r28
 85e:	08 95       	ret

00000860 <LCD_send_string>:

void LCD_send_string(char* character)
{
 860:	cf 93       	push	r28
 862:	df 93       	push	r29
 864:	ec 01       	movw	r28, r24
	while ('\0' != *character)
 866:	88 81       	ld	r24, Y
 868:	88 23       	and	r24, r24
 86a:	31 f0       	breq	.+12     	; 0x878 <LCD_send_string+0x18>
	
	#endif
	
}

void LCD_send_string(char* character)
 86c:	21 96       	adiw	r28, 0x01	; 1
{
	while ('\0' != *character)
	{
		LCD_send_character(*character);
 86e:	0e 94 21 04 	call	0x842	; 0x842 <LCD_send_character>
	
}

void LCD_send_string(char* character)
{
	while ('\0' != *character)
 872:	89 91       	ld	r24, Y+
 874:	88 23       	and	r24, r24
 876:	d9 f7       	brne	.-10     	; 0x86e <LCD_send_string+0xe>
	{
		LCD_send_character(*character);
		character += 1;
	}
}
 878:	df 91       	pop	r29
 87a:	cf 91       	pop	r28
 87c:	08 95       	ret

0000087e <LCD_move_cursor>:
void LCD_move_cursor(uint8 row, uint8 column)
{
	uint8 r = 0;
	uint8 c = 0;
	
	if( (row>0) && (row<5) && (column>0) && (column<21) )
 87e:	98 2f       	mov	r25, r24
 880:	91 50       	subi	r25, 0x01	; 1
 882:	94 30       	cpi	r25, 0x04	; 4
 884:	b0 f4       	brcc	.+44     	; 0x8b2 <LCD_move_cursor+0x34>
 886:	66 23       	and	r22, r22
 888:	b1 f0       	breq	.+44     	; 0x8b6 <LCD_move_cursor+0x38>
 88a:	65 31       	cpi	r22, 0x15	; 21
 88c:	b0 f4       	brcc	.+44     	; 0x8ba <LCD_move_cursor+0x3c>
	{
		if (1 == row)
 88e:	81 30       	cpi	r24, 0x01	; 1
 890:	19 f4       	brne	.+6      	; 0x898 <LCD_move_cursor+0x1a>
		{
			c = (0x80 + column - 1);
 892:	86 2f       	mov	r24, r22
 894:	81 58       	subi	r24, 0x81	; 129
 896:	12 c0       	rjmp	.+36     	; 0x8bc <LCD_move_cursor+0x3e>
		}
		else if (2 == row)
 898:	82 30       	cpi	r24, 0x02	; 2
 89a:	19 f4       	brne	.+6      	; 0x8a2 <LCD_move_cursor+0x24>
		{
			c = (0xC0 + column - 1);
 89c:	86 2f       	mov	r24, r22
 89e:	81 54       	subi	r24, 0x41	; 65
 8a0:	0d c0       	rjmp	.+26     	; 0x8bc <LCD_move_cursor+0x3e>
		}
		else if (3 == row)
 8a2:	83 30       	cpi	r24, 0x03	; 3
 8a4:	19 f4       	brne	.+6      	; 0x8ac <LCD_move_cursor+0x2e>
		{
			c = (0x90 + column - 1);
 8a6:	86 2f       	mov	r24, r22
 8a8:	81 57       	subi	r24, 0x71	; 113
 8aa:	08 c0       	rjmp	.+16     	; 0x8bc <LCD_move_cursor+0x3e>
		}
		else
		{
			c = (0xD0 + column - 1);
 8ac:	86 2f       	mov	r24, r22
 8ae:	81 53       	subi	r24, 0x31	; 49
 8b0:	05 c0       	rjmp	.+10     	; 0x8bc <LCD_move_cursor+0x3e>
		}
	}
	else
	{
		c = 0x80;
 8b2:	80 e8       	ldi	r24, 0x80	; 128
 8b4:	03 c0       	rjmp	.+6      	; 0x8bc <LCD_move_cursor+0x3e>
 8b6:	80 e8       	ldi	r24, 0x80	; 128
 8b8:	01 c0       	rjmp	.+2      	; 0x8bc <LCD_move_cursor+0x3e>
 8ba:	80 e8       	ldi	r24, 0x80	; 128
	}
	LCD_send_command(c);
 8bc:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <LCD_send_command>
 8c0:	08 95       	ret

000008c2 <_exit>:
 8c2:	f8 94       	cli

000008c4 <__stop_program>:
 8c4:	ff cf       	rjmp	.-2      	; 0x8c4 <__stop_program>
